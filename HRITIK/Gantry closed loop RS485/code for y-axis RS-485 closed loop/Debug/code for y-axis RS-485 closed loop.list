
code for y-axis RS-485 closed loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008534  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080086c4  080086c4  000096c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800879c  0800879c  0000a158  2**0
                  CONTENTS
  4 .ARM          00000008  0800879c  0800879c  0000979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a4  080087a4  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a4  080087a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087a8  080087a8  000097a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080087ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  20000158  08008904  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015a8  08008904  0000a5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d9a  00000000  00000000  0000a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae5  00000000  00000000  00022f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00026a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  00028020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d8d  00000000  00000000  00029139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a221  00000000  00000000  00052ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4de  00000000  00000000  0006d0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a5c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  0016a608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001708c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086ac 	.word	0x080086ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080086ac 	.word	0x080086ac

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <vApplicationGetIdleTaskMemory+0x30>)
 8000cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000174 	.word	0x20000174
 8000cdc:	200001c8 	.word	0x200001c8

08000ce0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d013      	beq.n	8000d20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cf8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cfc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d08:	e000      	b.n	8000d0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f9      	beq.n	8000d0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d16:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <updateEncoder>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateEncoder(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8000d36:	2101      	movs	r1, #1
 8000d38:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <updateEncoder+0x9c>)
 8000d3a:	f001 f9ad 	bl	8002098 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 8000d42:	2102      	movs	r1, #2
 8000d44:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <updateEncoder+0x9c>)
 8000d46:	f001 f9a7 	bl	8002098 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <updateEncoder+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b0d      	cmp	r3, #13
 8000d68:	d008      	beq.n	8000d7c <updateEncoder+0x4c>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d005      	beq.n	8000d7c <updateEncoder+0x4c>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d002      	beq.n	8000d7c <updateEncoder+0x4c>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b0b      	cmp	r3, #11
 8000d7a:	d109      	bne.n	8000d90 <updateEncoder+0x60>
  {
    encoderValue++;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <updateEncoder+0xa4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <updateEncoder+0xa4>)
 8000d84:	6013      	str	r3, [r2, #0]
    encoderPulses++;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <updateEncoder+0xa8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <updateEncoder+0xa8>)
 8000d8e:	6013      	str	r3, [r2, #0]
  }

  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2b0e      	cmp	r3, #14
 8000d94:	d008      	beq.n	8000da8 <updateEncoder+0x78>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d005      	beq.n	8000da8 <updateEncoder+0x78>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d002      	beq.n	8000da8 <updateEncoder+0x78>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d109      	bne.n	8000dbc <updateEncoder+0x8c>
  {
    encoderValue--;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <updateEncoder+0xa4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <updateEncoder+0xa4>)
 8000db0:	6013      	str	r3, [r2, #0]
    encoderPulses++;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <updateEncoder+0xa8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <updateEncoder+0xa8>)
 8000dba:	6013      	str	r3, [r2, #0]
  }

  lastEncoded = encoded;
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <updateEncoder+0xa0>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	200003c8 	.word	0x200003c8
 8000dd4:	200003cc 	.word	0x200003cc
 8000dd8:	20000408 	.word	0x20000408

08000ddc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d002      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0x16>
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8000df2:	f7ff ff9d 	bl	8000d30 <updateEncoder>

  }
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <UART_StartReceive>:

// Function to start UART reception
void UART_StartReceive(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f001 f95b 	bl	80020c8 <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 8000e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e16:	4903      	ldr	r1, [pc, #12]	@ (8000e24 <UART_StartReceive+0x24>)
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <UART_StartReceive+0x28>)
 8000e1a:	f004 fd81 	bl	8005920 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000053c 	.word	0x2000053c
 8000e28:	20000458 	.word	0x20000458

08000e2c <_write>:

int _write(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e009      	b.n	8000e56 <_write+0x2a>

		ITM_SendChar((*ptr++));
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	60ba      	str	r2, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff48 	bl	8000ce0 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbf1      	blt.n	8000e42 <_write+0x16>

	return len;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	velocity 		= Holding_Registers_Database[0];
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <main+0xb4>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <main+0xb8>)
 8000e7c:	edc3 7a00 	vstr	s15, [r3]
	acceleration 	= Holding_Registers_Database[1];
 8000e80:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <main+0xb4>)
 8000e82:	885b      	ldrh	r3, [r3, #2]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8c:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <main+0xbc>)
 8000e8e:	edc3 7a00 	vstr	s15, [r3]
	pully_dia 		= Holding_Registers_Database[2];
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <main+0xb4>)
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <main+0xc0>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
	motorSetSteps 	= Holding_Registers_Database[3];
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <main+0xb4>)
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <main+0xc4>)
 8000eac:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fd83 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f847 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f91b 	bl	80010f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eba:	f000 f895 	bl	8000fe8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ebe:	f000 f8e7 	bl	8001090 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim1);
 8000ec2:	481b      	ldr	r0, [pc, #108]	@ (8000f30 <main+0xc8>)
 8000ec4:	f002 fcda 	bl	800387c <HAL_TIM_Base_Start>
    UART_StartReceive();
 8000ec8:	f7ff ff9a 	bl	8000e00 <UART_StartReceive>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <main+0xcc>)
 8000ece:	f107 041c 	add.w	r4, r7, #28
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fa3d 	bl	8006366 <osThreadCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <main+0xd0>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <main+0xd4>)
 8000ef4:	463c      	mov	r4, r7
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 8000f04:	463b      	mov	r3, r7
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 fa2c 	bl	8006366 <osThreadCreate>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <main+0xd8>)
 8000f12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f14:	f005 fa20 	bl	8006358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <main+0xb0>
 8000f1c:	20000014 	.word	0x20000014
 8000f20:	200003d8 	.word	0x200003d8
 8000f24:	200003e8 	.word	0x200003e8
 8000f28:	200003e4 	.word	0x200003e4
 8000f2c:	200003f0 	.word	0x200003f0
 8000f30:	2000040c 	.word	0x2000040c
 8000f34:	080086d0 	.word	0x080086d0
 8000f38:	200004e0 	.word	0x200004e0
 8000f3c:	080086f8 	.word	0x080086f8
 8000f40:	200004e4 	.word	0x200004e4

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	@ 0x58
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2244      	movs	r2, #68	@ 0x44
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 f8f6 	bl	8008144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6a:	f001 f8eb 	bl	8002144 <HAL_PWREx_ControlVoltageScaling>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f74:	f000 faf1 	bl	800155a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f82:	2310      	movs	r3, #16
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f92:	230a      	movs	r3, #10
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f96:	2307      	movs	r3, #7
 8000f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f922 	bl	80021f0 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb2:	f000 fad2 	bl	800155a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fcea 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fda:	f000 fabe 	bl	800155a <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3758      	adds	r7, #88	@ 0x58
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001008:	4a20      	ldr	r2, [pc, #128]	@ (800108c <MX_TIM1_Init+0xa4>)
 800100a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_TIM1_Init+0xa0>)
 800100e:	224f      	movs	r2, #79	@ 0x4f
 8001010:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_TIM1_Init+0xa0>)
 800101a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_TIM1_Init+0xa0>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001034:	f002 fbca 	bl	80037cc <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800103e:	f000 fa8c 	bl	800155a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001050:	f002 fdf3 	bl	8003c3a <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800105a:	f000 fa7e 	bl	800155a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_TIM1_Init+0xa0>)
 8001070:	f003 f814 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800107a:	f000 fa6e 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000040c 	.word	0x2000040c
 800108c:	40012c00 	.word	0x40012c00

08001090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 8001096:	4a15      	ldr	r2, [pc, #84]	@ (80010ec <MX_USART1_UART_Init+0x5c>)
 8001098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_USART1_UART_Init+0x58>)
 80010d4:	f003 f888 	bl	80041e8 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 fa3c 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000458 	.word	0x20000458
 80010ec:	40013800 	.word	0x40013800

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a39      	ldr	r2, [pc, #228]	@ (80011f0 <MX_GPIO_Init+0x100>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a33      	ldr	r2, [pc, #204]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <MX_GPIO_Init+0x100>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a2d      	ldr	r2, [pc, #180]	@ (80011f0 <MX_GPIO_Init+0x100>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <MX_GPIO_Init+0x100>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_GPIO_Init+0x100>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f240 1113 	movw	r1, #275	@ 0x113
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f000 ffaa 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	481b      	ldr	r0, [pc, #108]	@ (80011f4 <MX_GPIO_Init+0x104>)
 8001188:	f000 fddc 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 800118c:	f240 1313 	movw	r3, #275	@ 0x113
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a8:	f000 fdcc 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80011ac:	2303      	movs	r3, #3
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011b0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_GPIO_Init+0x108>)
 80011c2:	f000 fdbf 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	2006      	movs	r0, #6
 80011cc:	f000 fd10 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d0:	2006      	movs	r0, #6
 80011d2:	f000 fd29 	bl	8001c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	2007      	movs	r0, #7
 80011dc:	f000 fd08 	bl	8001bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011e0:	2007      	movs	r0, #7
 80011e2:	f000 fd21 	bl	8001c28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000400 	.word	0x48000400

080011fc <homePosition>:

/* USER CODE BEGIN 4 */
// Function to initialize motor position
void homePosition(MotorConfig* motor)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	setRPM(15, motorSetSteps); // (RPM, Driver Steps)
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <homePosition+0xb4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800120e:	f006 fb13 	bl	8007838 <setRPM>
	setAcceleration(5.0f); // Set acceleration in steps per second^2
 8001212:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001216:	f006 faff 	bl	8007818 <setAcceleration>

    // Move motor backward until limit switch is triggered
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET)
 800121a:	e01e      	b.n	800125a <homePosition+0x5e>
    {
    	// Calculate the new speed and step interval
		unsigned long stepInterval = computeNewSpeed();
 800121c:	f006 fb30 	bl	8007880 <computeNewSpeed>
 8001220:	60f8      	str	r0, [r7, #12]

		// Generate a step pulse with the calculated interval
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6898      	ldr	r0, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f000 ff4b 	bl	80020c8 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fad3 	bl	80077e4 <microDelay>
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6898      	ldr	r0, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	899b      	ldrh	r3, [r3, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	f000 ff3d 	bl	80020c8 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fac5 	bl	80077e4 <microDelay>
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET)
 800125a:	2102      	movs	r1, #2
 800125c:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <homePosition+0xb8>)
 800125e:	f000 ff1b 	bl	8002098 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d0d9      	beq.n	800121c <homePosition+0x20>
    }
    HAL_Delay(300);
 8001268:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800126c:	f000 fbe4 	bl	8001a38 <HAL_Delay>
    // move motor forward 3mm or 480 steps

    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001278:	f000 ff26 	bl	80020c8 <HAL_GPIO_WritePin>
    HomeMotorMove(motor, 160*3); // motor will move 3mm or 480 steps after hitting the limit switch, 1mm = 160 steps
 800127c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f006 fb71 	bl	8007968 <HomeMotorMove>
//    HomeMotorMove(motor, 160*10);
    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f000 ff1b 	bl	80020c8 <HAL_GPIO_WritePin>

    // Set encoder value to zero
    HAL_Delay(10);
 8001292:	200a      	movs	r0, #10
 8001294:	f000 fbd0 	bl	8001a38 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
    __disable_irq();

    encoderValue = 0;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <homePosition+0xbc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012a2:	b662      	cpsie	i
}
 80012a4:	bf00      	nop
    __enable_irq();
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200003f0 	.word	0x200003f0
 80012b4:	48000800 	.word	0x48000800
 80012b8:	200003cc 	.word	0x200003cc

080012bc <StartMotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Define motor configurations
	   MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 80012c4:	4b70      	ldr	r3, [pc, #448]	@ (8001488 <StartMotorTask+0x1cc>)
 80012c6:	f107 0408 	add.w	r4, r7, #8
 80012ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Initialize motor position
	   homePosition(&motor1);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff91 	bl	80011fc <homePosition>
  /* Infinite loop */
  for(;;)
  {
		//Reading RMP value  from RPM holding register
		velocity = Holding_Registers_Database[0];
 80012da:	4b6c      	ldr	r3, [pc, #432]	@ (800148c <StartMotorTask+0x1d0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001490 <StartMotorTask+0x1d4>)
 80012e8:	edc3 7a00 	vstr	s15, [r3]
		pully_dia = Holding_Registers_Database[2];
 80012ec:	4b67      	ldr	r3, [pc, #412]	@ (800148c <StartMotorTask+0x1d0>)
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f8:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <StartMotorTask+0x1d8>)
 80012fa:	edc3 7a00 	vstr	s15, [r3]
		rpm = (840*velocity)/(44*pully_dia);
 80012fe:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <StartMotorTask+0x1d4>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001498 <StartMotorTask+0x1dc>
 8001308:	ee67 6a87 	vmul.f32	s13, s15, s14
 800130c:	4b61      	ldr	r3, [pc, #388]	@ (8001494 <StartMotorTask+0x1d8>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800149c <StartMotorTask+0x1e0>
 8001316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <StartMotorTask+0x1e4>)
 8001320:	edc3 7a00 	vstr	s15, [r3]

		if(rpm != prev_rpm)
 8001324:	4b5e      	ldr	r3, [pc, #376]	@ (80014a0 <StartMotorTask+0x1e4>)
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	4b5e      	ldr	r3, [pc, #376]	@ (80014a4 <StartMotorTask+0x1e8>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb4 7a67 	vcmp.f32	s14, s15
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d00d      	beq.n	8001356 <StartMotorTask+0x9a>
		{
		setRPM(rpm, motorSetSteps); // (RPM, Steps)
 800133a:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <StartMotorTask+0x1e4>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <StartMotorTask+0x1ec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	f006 fa75 	bl	8007838 <setRPM>
		prev_rpm = rpm;
 800134e:	4b54      	ldr	r3, [pc, #336]	@ (80014a0 <StartMotorTask+0x1e4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a54      	ldr	r2, [pc, #336]	@ (80014a4 <StartMotorTask+0x1e8>)
 8001354:	6013      	str	r3, [r2, #0]
		}

		//Reading acceleration value from acceleration holding register
		acceleration = Holding_Registers_Database[1];
 8001356:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <StartMotorTask+0x1d0>)
 8001358:	885b      	ldrh	r3, [r3, #2]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001362:	4b52      	ldr	r3, [pc, #328]	@ (80014ac <StartMotorTask+0x1f0>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
		if(acceleration != prev_acceleration)
 8001368:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <StartMotorTask+0x1f0>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <StartMotorTask+0x1f4>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eeb4 7a67 	vcmp.f32	s14, s15
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	d00a      	beq.n	8001394 <StartMotorTask+0xd8>
		{
		setAcceleration(acceleration);
 800137e:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <StartMotorTask+0x1f0>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	f006 fa46 	bl	8007818 <setAcceleration>
		prev_acceleration = acceleration;
 800138c:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <StartMotorTask+0x1f0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <StartMotorTask+0x1f4>)
 8001392:	6013      	str	r3, [r2, #0]
		}

		// Disable interrupts and read the encoder value
		//__disable_irq();
		currentPosition = encoderValue; // Read the latest encoder value
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <StartMotorTask+0x1f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a47      	ldr	r2, [pc, #284]	@ (80014b8 <StartMotorTask+0x1fc>)
 800139a:	6013      	str	r3, [r2, #0]
		//__enable_irq();

		input_distance = Holding_Registers_Database[4];
 800139c:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <StartMotorTask+0x1d0>)
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <StartMotorTask+0x200>)
 80013a4:	601a      	str	r2, [r3, #0]


		// Calculate target position with floating-point division
		targetPosition = input_distance * (enc_val_in_1rev/mm_in_1rev); // in encoder value
 80013a6:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <StartMotorTask+0x200>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <StartMotorTask+0x204>)
 80013b4:	ed93 6a00 	vldr	s12, [r3]
 80013b8:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <StartMotorTask+0x208>)
 80013ba:	edd3 6a00 	vldr	s13, [r3]
 80013be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <StartMotorTask+0x20c>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]

		// Calculate position to move
		positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 80013cc:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <StartMotorTask+0x20c>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <StartMotorTask+0x1fc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a3a      	ldr	r2, [pc, #232]	@ (80014cc <StartMotorTask+0x210>)
 80013e2:	6013      	str	r3, [r2, #0]

		// Calculate steps to move
		stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <StartMotorTask+0x210>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <StartMotorTask+0x1ec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80013fc:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <StartMotorTask+0x204>)
 80013fe:	edd3 6a00 	vldr	s13, [r3]
 8001402:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 2a90 	vmov	r2, s15
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <StartMotorTask+0x214>)
 8001414:	601a      	str	r2, [r3, #0]

		if ((prev_input_distance != input_distance) || (prevstepsToMove != stepsToMove))
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <StartMotorTask+0x218>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <StartMotorTask+0x200>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d105      	bne.n	800142e <StartMotorTask+0x172>
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <StartMotorTask+0x21c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <StartMotorTask+0x214>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d00d      	beq.n	800144a <StartMotorTask+0x18e>
		{
			//Enable Drive
			HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2110      	movs	r1, #16
 8001432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001436:	f000 fe47 	bl	80020c8 <HAL_GPIO_WritePin>
			// Move motor
			motorMove(&motor1, stepsToMove);
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <StartMotorTask+0x214>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f006 fb07 	bl	8007a58 <motorMove>
	    }

		if ((prev_input_distance == input_distance) || (prevstepsToMove == stepsToMove))
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <StartMotorTask+0x218>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <StartMotorTask+0x200>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d005      	beq.n	8001462 <StartMotorTask+0x1a6>
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <StartMotorTask+0x21c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <StartMotorTask+0x214>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d105      	bne.n	800146e <StartMotorTask+0x1b2>
		{
			//Disable Drive
			HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2110      	movs	r1, #16
 8001466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146a:	f000 fe2d 	bl	80020c8 <HAL_GPIO_WritePin>
		}

		prev_input_distance = input_distance;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <StartMotorTask+0x200>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <StartMotorTask+0x218>)
 8001474:	6013      	str	r3, [r2, #0]
		prevstepsToMove = stepsToMove;
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <StartMotorTask+0x214>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <StartMotorTask+0x21c>)
 800147c:	6013      	str	r3, [r2, #0]

		osDelay(5);
 800147e:	2005      	movs	r0, #5
 8001480:	f004 ffbd 	bl	80063fe <osDelay>
		velocity = Holding_Registers_Database[0];
 8001484:	e729      	b.n	80012da <StartMotorTask+0x1e>
 8001486:	bf00      	nop
 8001488:	08008714 	.word	0x08008714
 800148c:	20000014 	.word	0x20000014
 8001490:	200003d8 	.word	0x200003d8
 8001494:	200003e4 	.word	0x200003e4
 8001498:	44520000 	.word	0x44520000
 800149c:	42300000 	.word	0x42300000
 80014a0:	200003dc 	.word	0x200003dc
 80014a4:	200003e0 	.word	0x200003e0
 80014a8:	200003f0 	.word	0x200003f0
 80014ac:	200003e8 	.word	0x200003e8
 80014b0:	200003ec 	.word	0x200003ec
 80014b4:	200003cc 	.word	0x200003cc
 80014b8:	200003f8 	.word	0x200003f8
 80014bc:	200003f4 	.word	0x200003f4
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
 80014c8:	200003fc 	.word	0x200003fc
 80014cc:	20000400 	.word	0x20000400
 80014d0:	20000404 	.word	0x20000404
 80014d4:	200003d0 	.word	0x200003d0
 80014d8:	200003d4 	.word	0x200003d4

080014dc <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
	  Input_Registers_Database[0] = encoderValue; // Store the encoder value in the first input register
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <StartEncoderTask+0x50>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <StartEncoderTask+0x54>)
 80014ec:	801a      	strh	r2, [r3, #0]
	  int distance_covered = encoderValue * (mm_in_1rev/enc_val_in_1rev);
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <StartEncoderTask+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <StartEncoderTask+0x58>)
 80014fc:	ed93 6a00 	vldr	s12, [r3]
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <StartEncoderTask+0x5c>)
 8001502:	edd3 6a00 	vldr	s13, [r3]
 8001506:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001512:	ee17 3a90 	vmov	r3, s15
 8001516:	60fb      	str	r3, [r7, #12]
	  Input_Registers_Database[1] = distance_covered; // Store the encoder value in the first input register
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <StartEncoderTask+0x54>)
 800151e:	805a      	strh	r2, [r3, #2]

	  osDelay(5);
 8001520:	2005      	movs	r0, #5
 8001522:	f004 ff6c 	bl	80063fe <osDelay>
  {
 8001526:	bf00      	nop
 8001528:	e7dc      	b.n	80014e4 <StartEncoderTask+0x8>
 800152a:	bf00      	nop
 800152c:	200003cc 	.word	0x200003cc
 8001530:	20000078 	.word	0x20000078
 8001534:	20000004 	.word	0x20000004
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800154c:	d101      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154e:	f000 fa53 	bl	80019f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
}
 8001560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001562:	bf00      	nop
 8001564:	e7fd      	b.n	8001562 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6613      	str	r3, [r2, #96]	@ 0x60
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_MspInit+0x4c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	210f      	movs	r1, #15
 80015a2:	f06f 0001 	mvn.w	r0, #1
 80015a6:	f000 fb23 	bl	8001bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_TIM_Base_MspInit+0x38>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10b      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_TIM_Base_MspInit+0x3c>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_TIM_Base_MspInit+0x3c>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <HAL_TIM_Base_MspInit+0x3c>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ac      	sub	sp, #176	@ 0xb0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2288      	movs	r2, #136	@ 0x88
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fd93 	bl	8008144 <memset>
  if(huart->Instance==USART1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <HAL_UART_MspInit+0xc4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d144      	bne.n	80016b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fc0d 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001640:	f7ff ff8b 	bl	800155a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001648:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 800164a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_UART_MspInit+0xc8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001674:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800168e:	2307      	movs	r3, #7
 8001690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f000 fb51 	bl	8001d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2025      	movs	r0, #37	@ 0x25
 80016a8:	f000 faa2 	bl	8001bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ac:	2025      	movs	r0, #37	@ 0x25
 80016ae:	f000 fabb 	bl	8001c28 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016b2:	bf00      	nop
 80016b4:	37b0      	adds	r7, #176	@ 0xb0
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	@ 0x38
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016d2:	4b34      	ldr	r3, [pc, #208]	@ (80017a4 <HAL_InitTick+0xe0>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	4a33      	ldr	r2, [pc, #204]	@ (80017a4 <HAL_InitTick+0xe0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016de:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <HAL_InitTick+0xe0>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ea:	f107 0210 	add.w	r2, r7, #16
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fb1b 	bl	8002d30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001704:	f001 fae8 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8001708:	6378      	str	r0, [r7, #52]	@ 0x34
 800170a:	e004      	b.n	8001716 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170c:	f001 fae4 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001718:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <HAL_InitTick+0xe4>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3b01      	subs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_InitTick+0xe8>)
 8001726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800172a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_InitTick+0xe8>)
 800172e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001732:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001734:	4a1d      	ldr	r2, [pc, #116]	@ (80017ac <HAL_InitTick+0xe8>)
 8001736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001738:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <HAL_InitTick+0xe8>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_InitTick+0xe8>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_InitTick+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800174c:	4817      	ldr	r0, [pc, #92]	@ (80017ac <HAL_InitTick+0xe8>)
 800174e:	f002 f83d 	bl	80037cc <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11b      	bne.n	8001798 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001760:	4812      	ldr	r0, [pc, #72]	@ (80017ac <HAL_InitTick+0xe8>)
 8001762:	f002 f8f3 	bl	800394c <HAL_TIM_Base_Start_IT>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800176c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001770:	2b00      	cmp	r3, #0
 8001772:	d111      	bne.n	8001798 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f000 fa57 	bl	8001c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d808      	bhi.n	8001792 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	201c      	movs	r0, #28
 8001786:	f000 fa33 	bl	8001bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178a:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_InitTick+0xec>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e002      	b.n	8001798 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001798:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800179c:	4618      	mov	r0, r3
 800179e:	3738      	adds	r7, #56	@ 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	200004e8 	.word	0x200004e8
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 fc82 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f000 fc7b 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM2_IRQHandler+0x10>)
 800180e:	f002 f90d 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200004e8 	.word	0x200004e8

0800181c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <USART1_IRQHandler+0x10>)
 8001822:	f002 fdb9 	bl	8004398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000458 	.word	0x20000458

08001830 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e00a      	b.n	8001858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001842:	f3af 8000 	nop.w
 8001846:	4601      	mov	r1, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf0      	blt.n	8001842 <_read+0x12>
  }

  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:
  }
  return len;
}

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f006 fc6c 	bl	80081e0 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20018000 	.word	0x20018000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000534 	.word	0x20000534
 800193c:	200015a8 	.word	0x200015a8

08001940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff ffea 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f006 fc2b 	bl	80081ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7ff fa67 	bl	8000e68 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800199c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80019a8:	080087ac 	.word	0x080087ac
  ldr r2, =_sbss
 80019ac:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80019b0:	200015a8 	.word	0x200015a8

080019b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_Init+0x3c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <HAL_Init+0x3c>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ce:	2003      	movs	r0, #3
 80019d0:	f000 f903 	bl	8001bda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d4:	200f      	movs	r0, #15
 80019d6:	f7ff fe75 	bl	80016c4 <HAL_InitTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	e001      	b.n	80019ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e6:	f7ff fdbf 	bl	8001568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000010 	.word	0x20000010
 8001a1c:	20000538 	.word	0x20000538

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000538 	.word	0x20000538

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000010 	.word	0x20000010

08001a80 <__NVIC_SetPriorityGrouping>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	@ (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	@ 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff4c 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c02:	f7ff ff61 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	6978      	ldr	r0, [r7, #20]
 8001c0e:	f7ff ffb1 	bl	8001b74 <NVIC_EncodePriority>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff80 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff54 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e022      	b.n	8001cb4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 020e 	bic.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f003 021c 	and.w	r2, r3, #28
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e029      	b.n	8001d38 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f003 021c 	and.w	r2, r3, #28
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
    }
  }
  return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e17f      	b.n	8002054 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8171 	beq.w	800204e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d005      	beq.n	8001d84 <HAL_GPIO_Init+0x40>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d130      	bne.n	8001de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 0201 	and.w	r2, r3, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d118      	bne.n	8001e24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d017      	beq.n	8001e60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d123      	bne.n	8001eb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	6939      	ldr	r1, [r7, #16]
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80ac 	beq.w	800204e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <HAL_GPIO_Init+0x330>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	4a5e      	ldr	r2, [pc, #376]	@ (8002074 <HAL_GPIO_Init+0x330>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f02:	4b5c      	ldr	r3, [pc, #368]	@ (8002074 <HAL_GPIO_Init+0x330>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_GPIO_Init+0x334>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x242>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800207c <HAL_GPIO_Init+0x338>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x23e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4e      	ldr	r2, [pc, #312]	@ (8002080 <HAL_GPIO_Init+0x33c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x23a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002084 <HAL_GPIO_Init+0x340>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x236>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_GPIO_Init+0x344>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x232>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800208c <HAL_GPIO_Init+0x348>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x22e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4a      	ldr	r2, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x34c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x22a>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x244>
 8001f86:	2300      	movs	r3, #0
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f98:	4937      	ldr	r1, [pc, #220]	@ (8002078 <HAL_GPIO_Init+0x334>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fca:	4a32      	ldr	r2, [pc, #200]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800201e:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <HAL_GPIO_Init+0x350>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002048:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <HAL_GPIO_Init+0x350>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f47f ae78 	bne.w	8001d54 <HAL_GPIO_Init+0x10>
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	48000400 	.word	0x48000400
 8002080:	48000800 	.word	0x48000800
 8002084:	48000c00 	.word	0x48000c00
 8002088:	48001000 	.word	0x48001000
 800208c:	48001400 	.word	0x48001400
 8002090:	48001800 	.word	0x48001800
 8002094:	40010400 	.word	0x40010400

08002098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe60 	bl	8000ddc <HAL_GPIO_EXTI_Callback>
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <HAL_PWREx_GetVoltageRange+0x18>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40007000 	.word	0x40007000

08002144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002152:	d130      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800215c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002160:	d038      	beq.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800216a:	4a1e      	ldr	r2, [pc, #120]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2232      	movs	r2, #50	@ 0x32
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002188:	e002      	b.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219c:	d102      	bne.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f2      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b0:	d110      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00f      	b.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c2:	d007      	beq.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021cc:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000
 80021e8:	20000008 	.word	0x20000008
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e3ca      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002202:	4b97      	ldr	r3, [pc, #604]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800220c:	4b94      	ldr	r3, [pc, #592]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80e4 	beq.w	80023ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_RCC_OscConfig+0x4a>
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b0c      	cmp	r3, #12
 800222e:	f040 808b 	bne.w	8002348 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 8087 	bne.w	8002348 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x62>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e3a2      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	4b82      	ldr	r3, [pc, #520]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_RCC_OscConfig+0x7c>
 8002262:	4b7f      	ldr	r3, [pc, #508]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800226a:	e005      	b.n	8002278 <HAL_RCC_OscConfig+0x88>
 800226c:	4b7c      	ldr	r3, [pc, #496]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002278:	4293      	cmp	r3, r2
 800227a:	d223      	bcs.n	80022c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fd87 	bl	8002d94 <RCC_SetFlashLatencyFromMSIRange>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e383      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002290:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a72      	ldr	r2, [pc, #456]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002296:	f043 0308 	orr.w	r3, r3, #8
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b70      	ldr	r3, [pc, #448]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	496d      	ldr	r1, [pc, #436]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	4968      	ldr	r1, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
 80022c2:	e025      	b.n	8002310 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c4:	4b66      	ldr	r3, [pc, #408]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b63      	ldr	r3, [pc, #396]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4960      	ldr	r1, [pc, #384]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	495b      	ldr	r1, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fd47 	bl	8002d94 <RCC_SetFlashLatencyFromMSIRange>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e343      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002310:	f000 fc4a 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b52      	ldr	r3, [pc, #328]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	4950      	ldr	r1, [pc, #320]	@ (8002464 <HAL_RCC_OscConfig+0x274>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	4a4e      	ldr	r2, [pc, #312]	@ (8002468 <HAL_RCC_OscConfig+0x278>)
 800232e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <HAL_RCC_OscConfig+0x27c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f9c5 	bl	80016c4 <HAL_InitTick>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d052      	beq.n	80023ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	e327      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d032      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002350:	4b43      	ldr	r3, [pc, #268]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a42      	ldr	r2, [pc, #264]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235c:	f7ff fb60 	bl	8001a20 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002364:	f7ff fb5c 	bl	8001a20 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e310      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002376:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002382:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a36      	ldr	r2, [pc, #216]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4931      	ldr	r1, [pc, #196]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	492c      	ldr	r1, [pc, #176]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e01a      	b.n	80023ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a29      	ldr	r2, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fb2d 	bl	8001a20 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ca:	f7ff fb29 	bl	8001a20 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e2dd      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023dc:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x1da>
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d074      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x21a>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d10e      	bne.n	8002422 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d064      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d160      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e2ba      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x24a>
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e026      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002442:	d115      	bne.n	8002470 <HAL_RCC_OscConfig+0x280>
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 800244a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a02      	ldr	r2, [pc, #8]	@ (8002460 <HAL_RCC_OscConfig+0x270>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	08008754 	.word	0x08008754
 8002468:	20000008 	.word	0x20000008
 800246c:	2000000c 	.word	0x2000000c
 8002470:	4ba0      	ldr	r3, [pc, #640]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a9f      	ldr	r2, [pc, #636]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b9d      	ldr	r3, [pc, #628]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a9c      	ldr	r2, [pc, #624]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fac6 	bl	8001a20 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fac2 	bl	8001a20 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e276      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024aa:	4b92      	ldr	r3, [pc, #584]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x2a8>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff fab2 	bl	8001a20 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff faae 	bl	8001a20 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e262      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d2:	4b88      	ldr	r3, [pc, #544]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2d0>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d060      	beq.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_OscConfig+0x310>
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b0c      	cmp	r3, #12
 80024f8:	d119      	bne.n	800252e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d116      	bne.n	800252e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002500:	4b7c      	ldr	r3, [pc, #496]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x328>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e23f      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4973      	ldr	r1, [pc, #460]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252c:	e040      	b.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d023      	beq.n	800257e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002536:	4b6f      	ldr	r3, [pc, #444]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6e      	ldr	r2, [pc, #440]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7ff fa6d 	bl	8001a20 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff fa69 	bl	8001a20 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e21d      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b62      	ldr	r3, [pc, #392]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	495f      	ldr	r1, [pc, #380]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	e018      	b.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b5d      	ldr	r3, [pc, #372]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5c      	ldr	r2, [pc, #368]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff fa49 	bl	8001a20 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff fa45 	bl	8001a20 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1f9      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a4:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d03c      	beq.n	8002636 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01c      	beq.n	80025fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ca:	4a4a      	ldr	r2, [pc, #296]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff fa24 	bl	8001a20 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff fa20 	bl	8001a20 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1d4      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ee:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ef      	beq.n	80025dc <HAL_RCC_OscConfig+0x3ec>
 80025fc:	e01b      	b.n	8002636 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	4b3d      	ldr	r3, [pc, #244]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002604:	4a3b      	ldr	r2, [pc, #236]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7ff fa07 	bl	8001a20 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002616:	f7ff fa03 	bl	8001a20 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1b7      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002628:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ef      	bne.n	8002616 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80a6 	beq.w	8002790 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10d      	bne.n	8002670 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	4a26      	ldr	r2, [pc, #152]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266c:	2301      	movs	r3, #1
 800266e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <HAL_RCC_OscConfig+0x508>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d118      	bne.n	80026ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267c:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_RCC_OscConfig+0x508>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_RCC_OscConfig+0x508>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002688:	f7ff f9ca 	bl	8001a20 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7ff f9c6 	bl	8001a20 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e17a      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_RCC_OscConfig+0x508>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d8>
 80026b6:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c6:	e029      	b.n	800271c <HAL_RCC_OscConfig+0x52c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d115      	bne.n	80026fc <HAL_RCC_OscConfig+0x50c>
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_RCC_OscConfig+0x504>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x52c>
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a9b      	ldr	r2, [pc, #620]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270c:	4b98      	ldr	r3, [pc, #608]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	4a97      	ldr	r2, [pc, #604]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff f97c 	bl	8001a20 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff f978 	bl	8001a20 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e12a      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002742:	4b8b      	ldr	r3, [pc, #556]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ed      	beq.n	800272c <HAL_RCC_OscConfig+0x53c>
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7ff f965 	bl	8001a20 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff f961 	bl	8001a20 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e113      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002770:	4b7f      	ldr	r3, [pc, #508]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ed      	bne.n	800275a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b7a      	ldr	r3, [pc, #488]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4a79      	ldr	r2, [pc, #484]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80fe 	beq.w	8002996 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f040 80d0 	bne.w	8002944 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027a4:	4b72      	ldr	r3, [pc, #456]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d130      	bne.n	800281a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	3b01      	subs	r3, #1
 80027c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d127      	bne.n	800281a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11f      	bne.n	800281a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027e4:	2a07      	cmp	r2, #7
 80027e6:	bf14      	ite	ne
 80027e8:	2201      	movne	r2, #1
 80027ea:	2200      	moveq	r2, #0
 80027ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d109      	bne.n	800281a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d06e      	beq.n	80028f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d069      	beq.n	80028f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002820:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800282c:	4b50      	ldr	r3, [pc, #320]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0ad      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800283c:	4b4c      	ldr	r3, [pc, #304]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4b      	ldr	r2, [pc, #300]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002846:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002848:	f7ff f8ea 	bl	8001a20 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff f8e6 	bl	8001a20 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e09a      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	4b40      	ldr	r3, [pc, #256]	@ (8002974 <HAL_RCC_OscConfig+0x784>)
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800287e:	3a01      	subs	r2, #1
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002888:	0212      	lsls	r2, r2, #8
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0552      	lsls	r2, r2, #21
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800289c:	0852      	lsrs	r2, r2, #1
 800289e:	3a01      	subs	r2, #1
 80028a0:	0652      	lsls	r2, r2, #25
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028a8:	0912      	lsrs	r2, r2, #4
 80028aa:	0452      	lsls	r2, r2, #17
 80028ac:	430a      	orrs	r2, r1
 80028ae:	4930      	ldr	r1, [pc, #192]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028cc:	f7ff f8a8 	bl	8001a20 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff f8a4 	bl	8001a20 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e058      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f2:	e050      	b.n	8002996 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04f      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d148      	bne.n	8002996 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002904:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002910:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a16      	ldr	r2, [pc, #88]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800291c:	f7ff f880 	bl	8001a20 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f87c 	bl	8001a20 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e030      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x734>
 8002942:	e028      	b.n	8002996 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d023      	beq.n	8002992 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a08      	ldr	r2, [pc, #32]	@ (8002970 <HAL_RCC_OscConfig+0x780>)
 8002950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7ff f863 	bl	8001a20 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	e00c      	b.n	8002978 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7ff f85f 	bl	8001a20 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d905      	bls.n	8002978 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e013      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
 8002970:	40021000 	.word	0x40021000
 8002974:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_OscConfig+0x7b0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ec      	bne.n	800295e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_OscConfig+0x7b0>)
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4905      	ldr	r1, [pc, #20]	@ (80029a0 <HAL_RCC_OscConfig+0x7b0>)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x7b4>)
 800298c:	4013      	ands	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
 8002990:	e001      	b.n	8002996 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	feeefffc 	.word	0xfeeefffc

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0e7      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b75      	ldr	r3, [pc, #468]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b72      	ldr	r3, [pc, #456]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4970      	ldr	r1, [pc, #448]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b6e      	ldr	r3, [pc, #440]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0cf      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d908      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4960      	ldr	r1, [pc, #384]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04c      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d121      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0a6      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a46:	4b54      	ldr	r3, [pc, #336]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e09a      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e08e      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e086      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4943      	ldr	r1, [pc, #268]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a90:	f7fe ffc6 	bl	8001a20 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe ffc2 	bl	8001a20 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e06e      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b3a      	ldr	r3, [pc, #232]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d208      	bcs.n	8002aee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	492b      	ldr	r1, [pc, #172]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d210      	bcs.n	8002b1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afc:	4b25      	ldr	r3, [pc, #148]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 0207 	bic.w	r2, r3, #7
 8002b04:	4923      	ldr	r1, [pc, #140]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0c:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e036      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4918      	ldr	r1, [pc, #96]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4910      	ldr	r1, [pc, #64]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5c:	f000 f824 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	490b      	ldr	r1, [pc, #44]	@ (8002b9c <HAL_RCC_ClockConfig+0x1f4>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	4a09      	ldr	r2, [pc, #36]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1fc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fd9f 	bl	80016c4 <HAL_InitTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08008754 	.word	0x08008754
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d121      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d11e      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002be8:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e005      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c04:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e004      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d134      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xac>
 8002c4c:	e005      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	e005      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c56:	617b      	str	r3, [r7, #20]
      break;
 8002c58:	e002      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	617b      	str	r3, [r7, #20]
      break;
 8002c5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	0e5b      	lsrs	r3, r3, #25
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	3301      	adds	r3, #1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	0800876c 	.word	0x0800876c
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cdc:	f7ff fff0 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4904      	ldr	r1, [pc, #16]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08008764 	.word	0x08008764

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d08:	f7ff ffda 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4904      	ldr	r1, [pc, #16]	@ (8002d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08008764 	.word	0x08008764

08002d30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_RCC_GetClockConfig+0x5c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_RCC_GetClockConfig+0x5c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_RCC_GetClockConfig+0x60>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0207 	and.w	r2, r3, #7
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40022000 	.word	0x40022000

08002d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002da0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dac:	f7ff f9bc 	bl	8002128 <HAL_PWREx_GetVoltageRange>
 8002db0:	6178      	str	r0, [r7, #20]
 8002db2:	e014      	b.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dcc:	f7ff f9ac 	bl	8002128 <HAL_PWREx_GetVoltageRange>
 8002dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002de4:	d10b      	bne.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b80      	cmp	r3, #128	@ 0x80
 8002dea:	d919      	bls.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2ba0      	cmp	r3, #160	@ 0xa0
 8002df0:	d902      	bls.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002df2:	2302      	movs	r3, #2
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	e013      	b.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002df8:	2301      	movs	r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e010      	b.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	@ 0x80
 8002e02:	d902      	bls.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e04:	2303      	movs	r3, #3
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e00a      	b.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	@ 0x80
 8002e0e:	d102      	bne.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e10:	2302      	movs	r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e004      	b.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b70      	cmp	r3, #112	@ 0x70
 8002e1a:	d101      	bne.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 0207 	bic.w	r2, r3, #7
 8002e28:	4909      	ldr	r1, [pc, #36]	@ (8002e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e60:	2300      	movs	r3, #0
 8002e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d041      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e78:	d02a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e7e:	d824      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e8a:	d81e      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e96:	e018      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e98:	4b86      	ldr	r3, [pc, #536]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a85      	ldr	r2, [pc, #532]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fabb 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb6:	e00c      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3320      	adds	r3, #32
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fba6 	bl	8003610 <RCCEx_PLLSAI2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec8:	e003      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed8:	4b76      	ldr	r3, [pc, #472]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee6:	4973      	ldr	r1, [pc, #460]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002eee:	e001      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d041      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f08:	d02a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f0e:	d824      	bhi.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f1a:	d81e      	bhi.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f24:	d010      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f26:	e018      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f28:	4b62      	ldr	r3, [pc, #392]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a61      	ldr	r2, [pc, #388]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f34:	e015      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa73 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f46:	e00c      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3320      	adds	r3, #32
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fb5e 	bl	8003610 <RCCEx_PLLSAI2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f68:	4b52      	ldr	r3, [pc, #328]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f76:	494f      	ldr	r1, [pc, #316]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f7e:	e001      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a0 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f96:	4b47      	ldr	r3, [pc, #284]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fac:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb0:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fd24 	bl	8001a20 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fda:	e009      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fe fd20 	bl	8001a20 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d902      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	74fb      	strb	r3, [r7, #19]
        break;
 8002fee:	e005      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff0:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d15c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003002:	4b2c      	ldr	r3, [pc, #176]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	d019      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003020:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302c:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	4a20      	ldr	r2, [pc, #128]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800304c:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fcdf 	bl	8001a20 <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003064:	e00b      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe fcdb 	bl	8001a20 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d902      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	74fb      	strb	r3, [r7, #19]
            break;
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ec      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a2:	4904      	ldr	r1, [pc, #16]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030aa:	e009      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	74bb      	strb	r3, [r7, #18]
 80030b0:	e006      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c0:	7c7b      	ldrb	r3, [r7, #17]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b9e      	ldr	r3, [pc, #632]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4a9d      	ldr	r2, [pc, #628]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030de:	4b98      	ldr	r3, [pc, #608]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	f023 0203 	bic.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	4994      	ldr	r1, [pc, #592]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003100:	4b8f      	ldr	r3, [pc, #572]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f023 020c 	bic.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310e:	498c      	ldr	r1, [pc, #560]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003122:	4b87      	ldr	r3, [pc, #540]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4983      	ldr	r1, [pc, #524]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003144:	4b7e      	ldr	r3, [pc, #504]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	497b      	ldr	r1, [pc, #492]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003166:	4b76      	ldr	r3, [pc, #472]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003174:	4972      	ldr	r1, [pc, #456]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003188:	4b6d      	ldr	r3, [pc, #436]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	496a      	ldr	r1, [pc, #424]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031aa:	4b65      	ldr	r3, [pc, #404]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	4961      	ldr	r1, [pc, #388]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	4959      	ldr	r1, [pc, #356]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ee:	4b54      	ldr	r3, [pc, #336]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fc:	4950      	ldr	r1, [pc, #320]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003210:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	4948      	ldr	r1, [pc, #288]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003232:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	493f      	ldr	r1, [pc, #252]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d028      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003254:	4b3a      	ldr	r3, [pc, #232]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003262:	4937      	ldr	r1, [pc, #220]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003272:	d106      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b32      	ldr	r3, [pc, #200]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a31      	ldr	r2, [pc, #196]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
 8003280:	e011      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800328a:	d10c      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f8c8 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032b2:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	491f      	ldr	r1, [pc, #124]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d0:	d106      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	e011      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f899 	bl	8003428 <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	4908      	ldr	r1, [pc, #32]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800332e:	d109      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a02      	ldr	r2, [pc, #8]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800333a:	60d3      	str	r3, [r2, #12]
 800333c:	e014      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800334c:	d10c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	2101      	movs	r1, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f867 	bl	8003428 <RCCEx_PLLSAI1_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02f      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003382:	4928      	ldr	r1, [pc, #160]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800338e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003392:	d10d      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	2102      	movs	r1, #2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f844 	bl	8003428 <RCCEx_PLLSAI1_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d014      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	74bb      	strb	r3, [r7, #18]
 80033ae:	e011      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3320      	adds	r3, #32
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f925 	bl	8003610 <RCCEx_PLLSAI2_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033e0:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ee:	490d      	ldr	r1, [pc, #52]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003408:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003412:	4904      	ldr	r1, [pc, #16]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800341a:	7cbb      	ldrb	r3, [r7, #18]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000

08003428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003436:	4b75      	ldr	r3, [pc, #468]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003442:	4b72      	ldr	r3, [pc, #456]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d10d      	bne.n	800346e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
       ||
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800345a:	4b6c      	ldr	r3, [pc, #432]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
       ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d047      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e044      	b.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d018      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x86>
 800347c:	2b03      	cmp	r3, #3
 800347e:	d825      	bhi.n	80034cc <RCCEx_PLLSAI1_Config+0xa4>
 8003480:	2b01      	cmp	r3, #1
 8003482:	d002      	beq.n	800348a <RCCEx_PLLSAI1_Config+0x62>
 8003484:	2b02      	cmp	r3, #2
 8003486:	d009      	beq.n	800349c <RCCEx_PLLSAI1_Config+0x74>
 8003488:	e020      	b.n	80034cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800348a:	4b60      	ldr	r3, [pc, #384]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11d      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800349a:	e01a      	b.n	80034d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800349c:	4b5b      	ldr	r3, [pc, #364]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d116      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ac:	e013      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ae:	4b57      	ldr	r3, [pc, #348]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ba:	4b54      	ldr	r3, [pc, #336]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ca:	e006      	b.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      break;
 80034d0:	e004      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034da:	bf00      	nop
    }

    if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034e2:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	430b      	orrs	r3, r1
 80034f8:	4944      	ldr	r1, [pc, #272]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d17d      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003504:	4b41      	ldr	r3, [pc, #260]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a40      	ldr	r2, [pc, #256]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800350e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fe fa86 	bl	8001a20 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fe fa82 	bl	8001a20 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
        break;
 800352a:	e005      	b.n	8003538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800352c:	4b37      	ldr	r3, [pc, #220]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ef      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d160      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d111      	bne.n	8003568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003544:	4b31      	ldr	r3, [pc, #196]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800354c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	0211      	lsls	r1, r2, #8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68d2      	ldr	r2, [r2, #12]
 800355a:	0912      	lsrs	r2, r2, #4
 800355c:	0452      	lsls	r2, r2, #17
 800355e:	430a      	orrs	r2, r1
 8003560:	492a      	ldr	r1, [pc, #168]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	610b      	str	r3, [r1, #16]
 8003566:	e027      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d112      	bne.n	8003594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356e:	4b27      	ldr	r3, [pc, #156]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6892      	ldr	r2, [r2, #8]
 800357e:	0211      	lsls	r1, r2, #8
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6912      	ldr	r2, [r2, #16]
 8003584:	0852      	lsrs	r2, r2, #1
 8003586:	3a01      	subs	r2, #1
 8003588:	0552      	lsls	r2, r2, #21
 800358a:	430a      	orrs	r2, r1
 800358c:	491f      	ldr	r1, [pc, #124]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	610b      	str	r3, [r1, #16]
 8003592:	e011      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003594:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800359c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6892      	ldr	r2, [r2, #8]
 80035a4:	0211      	lsls	r1, r2, #8
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6952      	ldr	r2, [r2, #20]
 80035aa:	0852      	lsrs	r2, r2, #1
 80035ac:	3a01      	subs	r2, #1
 80035ae:	0652      	lsls	r2, r2, #25
 80035b0:	430a      	orrs	r2, r1
 80035b2:	4916      	ldr	r1, [pc, #88]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035b8:	4b14      	ldr	r3, [pc, #80]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a13      	ldr	r2, [pc, #76]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fa2c 	bl	8001a20 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ca:	e009      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035cc:	f7fe fa28 	bl	8001a20 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	73fb      	strb	r3, [r7, #15]
          break;
 80035de:	e005      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ef      	beq.n	80035cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	4904      	ldr	r1, [pc, #16]	@ (800360c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000

08003610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800361e:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d018      	beq.n	800365c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800362a:	4b67      	ldr	r3, [pc, #412]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0203 	and.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d10d      	bne.n	8003656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
       ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003642:	4b61      	ldr	r3, [pc, #388]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
       ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d047      	beq.n	80036e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e044      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d018      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0x86>
 8003664:	2b03      	cmp	r3, #3
 8003666:	d825      	bhi.n	80036b4 <RCCEx_PLLSAI2_Config+0xa4>
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <RCCEx_PLLSAI2_Config+0x62>
 800366c:	2b02      	cmp	r3, #2
 800366e:	d009      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x74>
 8003670:	e020      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003672:	4b55      	ldr	r3, [pc, #340]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11d      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e01a      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003684:	4b50      	ldr	r3, [pc, #320]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e013      	b.n	80036be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003696:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036a2:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036b2:	e006      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e004      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	430b      	orrs	r3, r1
 80036e0:	4939      	ldr	r1, [pc, #228]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d167      	bne.n	80037bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a35      	ldr	r2, [pc, #212]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fe f992 	bl	8001a20 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003700:	f7fe f98e 	bl	8001a20 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
        break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003714:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ef      	bne.n	8003700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d14a      	bne.n	80037bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800372c:	4b26      	ldr	r3, [pc, #152]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6892      	ldr	r2, [r2, #8]
 800373c:	0211      	lsls	r1, r2, #8
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68d2      	ldr	r2, [r2, #12]
 8003742:	0912      	lsrs	r2, r2, #4
 8003744:	0452      	lsls	r2, r2, #17
 8003746:	430a      	orrs	r2, r1
 8003748:	491f      	ldr	r1, [pc, #124]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	614b      	str	r3, [r1, #20]
 800374e:	e011      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6912      	ldr	r2, [r2, #16]
 8003766:	0852      	lsrs	r2, r2, #1
 8003768:	3a01      	subs	r2, #1
 800376a:	0652      	lsls	r2, r2, #25
 800376c:	430a      	orrs	r2, r1
 800376e:	4916      	ldr	r1, [pc, #88]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a13      	ldr	r2, [pc, #76]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe f94e 	bl	8001a20 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003786:	e009      	b.n	800379c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003788:	f7fe f94a 	bl	8001a20 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	73fb      	strb	r3, [r7, #15]
          break;
 800379a:	e005      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4904      	ldr	r1, [pc, #16]	@ (80037c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e049      	b.n	8003872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fee0 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 fb06 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e047      	b.n	8003924 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_TIM_Base_Start+0xb4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d018      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_TIM_Base_Start+0xb8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_TIM_Base_Start+0xbc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_TIM_Base_Start+0xc0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_TIM_Base_Start+0xc4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIM_Base_Start+0x66>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_TIM_Base_Start+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d115      	bne.n	800390e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <HAL_TIM_Base_Start+0xcc>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d015      	beq.n	8003920 <HAL_TIM_Base_Start+0xa4>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fa:	d011      	beq.n	8003920 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	e008      	b.n	8003920 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e000      	b.n	8003922 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40013400 	.word	0x40013400
 8003944:	40014000 	.word	0x40014000
 8003948:	00010007 	.word	0x00010007

0800394c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d001      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a23      	ldr	r2, [pc, #140]	@ (8003a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d018      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	@ (8003a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d115      	bne.n	80039ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d015      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039da:	d011      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	e008      	b.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40000c00 	.word	0x40000c00
 8003a20:	40013400 	.word	0x40013400
 8003a24:	40014000 	.word	0x40014000
 8003a28:	00010007 	.word	0x00010007

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d020      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0202 	mvn.w	r2, #2
 8003a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9b2 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9a4 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9b5 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d020      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f98c 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f97e 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f98f 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d020      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0208 	mvn.w	r2, #8
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2204      	movs	r2, #4
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f966 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f958 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f969 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f940 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f932 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f943 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0201 	mvn.w	r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fcd2 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fafd 	bl	80041c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 faf5 	bl	80041d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00c      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8fd 	bl	8003e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0220 	mvn.w	r2, #32
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fabd 	bl	80041ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_ConfigClockSource+0x1c>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0b6      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x18a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c74:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c92:	d03e      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xd8>
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c98:	f200 8087 	bhi.w	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca0:	f000 8086 	beq.w	8003db0 <HAL_TIM_ConfigClockSource+0x176>
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca8:	d87f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003caa:	2b70      	cmp	r3, #112	@ 0x70
 8003cac:	d01a      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xaa>
 8003cae:	2b70      	cmp	r3, #112	@ 0x70
 8003cb0:	d87b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cb2:	2b60      	cmp	r3, #96	@ 0x60
 8003cb4:	d050      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x11e>
 8003cb6:	2b60      	cmp	r3, #96	@ 0x60
 8003cb8:	d877      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cba:	2b50      	cmp	r3, #80	@ 0x50
 8003cbc:	d03c      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xfe>
 8003cbe:	2b50      	cmp	r3, #80	@ 0x50
 8003cc0:	d873      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	d058      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x13e>
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d86f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cca:	2b30      	cmp	r3, #48	@ 0x30
 8003ccc:	d064      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cce:	2b30      	cmp	r3, #48	@ 0x30
 8003cd0:	d86b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d060      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d867      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d05c      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d05a      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ce2:	e062      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	f000 f9b2 	bl	800405c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      break;
 8003d10:	e04f      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	f000 f99b 	bl	800405c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e03c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 f90f 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2150      	movs	r1, #80	@ 0x50
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f968 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e02c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d64:	461a      	mov	r2, r3
 8003d66:	f000 f92e 	bl	8003fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2160      	movs	r1, #96	@ 0x60
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f958 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003d76:	e01c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 f8ef 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2140      	movs	r1, #64	@ 0x40
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f948 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 f93f 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003db0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a43      	ldr	r2, [pc, #268]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a42      	ldr	r2, [pc, #264]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d01b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d017      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a31      	ldr	r2, [pc, #196]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f5c <TIM_Base_SetConfig+0x140>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <TIM_Base_SetConfig+0x144>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f64 <TIM_Base_SetConfig+0x148>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a16      	ldr	r2, [pc, #88]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a17      	ldr	r2, [pc, #92]	@ (8003f5c <TIM_Base_SetConfig+0x140>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <TIM_Base_SetConfig+0x144>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	@ (8003f64 <TIM_Base_SetConfig+0x148>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40013400 	.word	0x40013400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 0210 	bic.w	r2, r3, #16
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0307 	orr.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e068      	b.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d018      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40014000 	.word	0x40014000

080041ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e040      	b.n	800427c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f9f4 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	@ 0x24
 8004214:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fe8e 	bl	8004f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fbd3 	bl	80049e0 <UART_SetConfig>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e01b      	b.n	800427c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 ff0d 	bl	8005094 <UART_CheckIdleState>
 800427a:	4603      	mov	r3, r0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004298:	2b20      	cmp	r3, #32
 800429a:	d177      	bne.n	800438c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_UART_Transmit+0x24>
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e070      	b.n	800438e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2221      	movs	r2, #33	@ 0x21
 80042b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ba:	f7fd fbb1 	bl	8001a20 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x68>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f4:	e02f      	b.n	8004356 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	@ 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 ff6f 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e03b      	b.n	800438e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004328:	b292      	uxth	r2, r2
 800432a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3302      	adds	r3, #2
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e007      	b.n	8004344 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1c9      	bne.n	80042f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	@ 0x40
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 ff39 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e005      	b.n	800438e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b0ba      	sub	sp, #232	@ 0xe8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80043c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80043c6:	4013      	ands	r3, r2
 80043c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80043cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d115      	bne.n	8004400 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00f      	beq.n	8004400 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 82ca 	beq.w	800498a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      }
      return;
 80043fe:	e2c4      	b.n	800498a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8117 	beq.w	8004638 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800440a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800441a:	4b85      	ldr	r3, [pc, #532]	@ (8004630 <HAL_UART_IRQHandler+0x298>)
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 810a 	beq.w	8004638 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <HAL_UART_IRQHandler+0xbc>
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <HAL_UART_IRQHandler+0xec>
 8004460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2202      	movs	r2, #2
 8004472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0x11c>
 8004490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d017      	beq.n	80044f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e6:	f043 0208 	orr.w	r2, r3, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_UART_IRQHandler+0x18a>
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004500:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8230 	beq.w	800498e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800456e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004572:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04f      	beq.n	800461a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 ff66 	bl	800544c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458a:	2b40      	cmp	r3, #64	@ 0x40
 800458c:	d141      	bne.n	8004612 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3308      	adds	r3, #8
 8004594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1d9      	bne.n	800458e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d013      	beq.n	800460a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <HAL_UART_IRQHandler+0x29c>)
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd fb66 	bl	8001cc0 <HAL_DMA_Abort_IT>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d017      	beq.n	800462a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004604:	4610      	mov	r0, r2
 8004606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	e00f      	b.n	800462a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9de 	bl	80049cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	e00b      	b.n	800462a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9da 	bl	80049cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	e007      	b.n	800462a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9d6 	bl	80049cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004628:	e1b1      	b.n	800498e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462a:	bf00      	nop
    return;
 800462c:	e1af      	b.n	800498e <HAL_UART_IRQHandler+0x5f6>
 800462e:	bf00      	nop
 8004630:	04000120 	.word	0x04000120
 8004634:	08005515 	.word	0x08005515

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 816a 	bne.w	8004916 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8163 	beq.w	8004916 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 815c 	beq.w	8004916 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2210      	movs	r2, #16
 8004664:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	f040 80d4 	bne.w	800481e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004682:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80ad 	beq.w	80047e6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004696:	429a      	cmp	r2, r3
 8004698:	f080 80a5 	bcs.w	80047e6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8086 	bne.w	80047c4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1da      	bne.n	80046b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3308      	adds	r3, #8
 8004722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004726:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800472a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800472e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e1      	bne.n	8004702 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800474e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004762:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004764:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004768:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e3      	bne.n	800473e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e4      	bne.n	8004784 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fa40 	bl	8001c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fcc2 	bl	8006168 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80047e4:	e0d5      	b.n	8004992 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047f0:	429a      	cmp	r2, r3
 80047f2:	f040 80ce 	bne.w	8004992 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b20      	cmp	r3, #32
 8004804:	f040 80c5 	bne.w	8004992 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 fca6 	bl	8006168 <HAL_UARTEx_RxEventCallback>
      return;
 800481c:	e0b9      	b.n	8004992 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80ab 	beq.w	8004996 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80a6 	beq.w	8004996 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800485e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800487a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e4      	bne.n	800484a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	623b      	str	r3, [r7, #32]
   return(result);
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e3      	bne.n	8004880 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 0310 	bic.w	r3, r3, #16
 80048e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	617b      	str	r3, [r7, #20]
   return(result);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e4      	bne.n	80048cc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 fc2a 	bl	8006168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004914:	e03f      	b.n	8004996 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <HAL_UART_IRQHandler+0x5a8>
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 ffe7 	bl	800590c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800493e:	e02d      	b.n	800499c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01c      	beq.n	800499a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
    }
    return;
 8004968:	e017      	b.n	800499a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_UART_IRQHandler+0x604>
 8004976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fddc 	bl	8005540 <UART_EndTransmit_IT>
    return;
 8004988:	e008      	b.n	800499c <HAL_UART_IRQHandler+0x604>
      return;
 800498a:	bf00      	nop
 800498c:	e006      	b.n	800499c <HAL_UART_IRQHandler+0x604>
    return;
 800498e:	bf00      	nop
 8004990:	e004      	b.n	800499c <HAL_UART_IRQHandler+0x604>
      return;
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <HAL_UART_IRQHandler+0x604>
      return;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_UART_IRQHandler+0x604>
    return;
 800499a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800499c:	37e8      	adds	r7, #232	@ 0xe8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b08a      	sub	sp, #40	@ 0x28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4ba4      	ldr	r3, [pc, #656]	@ (8004ca0 <UART_SetConfig+0x2c0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a99      	ldr	r2, [pc, #612]	@ (8004ca4 <UART_SetConfig+0x2c4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a90      	ldr	r2, [pc, #576]	@ (8004ca8 <UART_SetConfig+0x2c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d126      	bne.n	8004ab8 <UART_SetConfig+0xd8>
 8004a6a:	4b90      	ldr	r3, [pc, #576]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d81b      	bhi.n	8004ab0 <UART_SetConfig+0xd0>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0xa0>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a96:	e116      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9e:	e112      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e10e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e10a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e106      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb0 <UART_SetConfig+0x2d0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d138      	bne.n	8004b34 <UART_SetConfig+0x154>
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d82d      	bhi.n	8004b2c <UART_SetConfig+0x14c>
 8004ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0xf8>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b12:	e0d8      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	e0d4      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e0d0      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e0cc      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e0c8      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d125      	bne.n	8004b8a <UART_SetConfig+0x1aa>
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b48:	2b30      	cmp	r3, #48	@ 0x30
 8004b4a:	d016      	beq.n	8004b7a <UART_SetConfig+0x19a>
 8004b4c:	2b30      	cmp	r3, #48	@ 0x30
 8004b4e:	d818      	bhi.n	8004b82 <UART_SetConfig+0x1a2>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d00a      	beq.n	8004b6a <UART_SetConfig+0x18a>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d814      	bhi.n	8004b82 <UART_SetConfig+0x1a2>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <UART_SetConfig+0x182>
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d008      	beq.n	8004b72 <UART_SetConfig+0x192>
 8004b60:	e00f      	b.n	8004b82 <UART_SetConfig+0x1a2>
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b68:	e0ad      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b70:	e0a9      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b72:	2304      	movs	r3, #4
 8004b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b78:	e0a5      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b80:	e0a1      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b82:	2310      	movs	r3, #16
 8004b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b88:	e09d      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb8 <UART_SetConfig+0x2d8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x200>
 8004b94:	4b45      	ldr	r3, [pc, #276]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba0:	d016      	beq.n	8004bd0 <UART_SetConfig+0x1f0>
 8004ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba4:	d818      	bhi.n	8004bd8 <UART_SetConfig+0x1f8>
 8004ba6:	2b80      	cmp	r3, #128	@ 0x80
 8004ba8:	d00a      	beq.n	8004bc0 <UART_SetConfig+0x1e0>
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d814      	bhi.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <UART_SetConfig+0x1d8>
 8004bb2:	2b40      	cmp	r3, #64	@ 0x40
 8004bb4:	d008      	beq.n	8004bc8 <UART_SetConfig+0x1e8>
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	e082      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e07e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e07a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e076      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e072      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a35      	ldr	r2, [pc, #212]	@ (8004cbc <UART_SetConfig+0x2dc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12a      	bne.n	8004c40 <UART_SetConfig+0x260>
 8004bea:	4b30      	ldr	r3, [pc, #192]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf8:	d01a      	beq.n	8004c30 <UART_SetConfig+0x250>
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0x258>
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c04:	d00c      	beq.n	8004c20 <UART_SetConfig+0x240>
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c0a:	d815      	bhi.n	8004c38 <UART_SetConfig+0x258>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <UART_SetConfig+0x238>
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c14:	d008      	beq.n	8004c28 <UART_SetConfig+0x248>
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x258>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1e:	e052      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e04e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e04a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e046      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3e:	e042      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <UART_SetConfig+0x2c4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d13a      	bne.n	8004cc0 <UART_SetConfig+0x2e0>
 8004c4a:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c58:	d01a      	beq.n	8004c90 <UART_SetConfig+0x2b0>
 8004c5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c5e:	d81b      	bhi.n	8004c98 <UART_SetConfig+0x2b8>
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c64:	d00c      	beq.n	8004c80 <UART_SetConfig+0x2a0>
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6a:	d815      	bhi.n	8004c98 <UART_SetConfig+0x2b8>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <UART_SetConfig+0x298>
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d008      	beq.n	8004c88 <UART_SetConfig+0x2a8>
 8004c76:	e00f      	b.n	8004c98 <UART_SetConfig+0x2b8>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7e:	e022      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c80:	2302      	movs	r3, #2
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c86:	e01e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8e:	e01a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ca0:	efff69f3 	.word	0xefff69f3
 8004ca4:	40008000 	.word	0x40008000
 8004ca8:	40013800 	.word	0x40013800
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40004400 	.word	0x40004400
 8004cb4:	40004800 	.word	0x40004800
 8004cb8:	40004c00 	.word	0x40004c00
 8004cbc:	40005000 	.word	0x40005000
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a9f      	ldr	r2, [pc, #636]	@ (8004f48 <UART_SetConfig+0x568>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d17a      	bne.n	8004dc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d824      	bhi.n	8004d22 <UART_SetConfig+0x342>
 8004cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x300>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d13 	.word	0x08004d13
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d23 	.word	0x08004d23
 8004d00:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fd ffe8 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e010      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f4c <UART_SetConfig+0x56c>)
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fd ff49 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8004d16:	61f8      	str	r0, [r7, #28]
        break;
 8004d18:	e009      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80fb 	beq.w	8004f2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d305      	bcc.n	8004d52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d903      	bls.n	8004d5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d58:	e0e8      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	461c      	mov	r4, r3
 8004d60:	4615      	mov	r5, r2
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	022b      	lsls	r3, r5, #8
 8004d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d70:	0222      	lsls	r2, r4, #8
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6849      	ldr	r1, [r1, #4]
 8004d76:	0849      	lsrs	r1, r1, #1
 8004d78:	2000      	movs	r0, #0
 8004d7a:	4688      	mov	r8, r1
 8004d7c:	4681      	mov	r9, r0
 8004d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8004d82:	eb43 0b09 	adc.w	fp, r3, r9
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d94:	4650      	mov	r0, sl
 8004d96:	4659      	mov	r1, fp
 8004d98:	f7fb fe10 	bl	80009bc <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004daa:	d308      	bcc.n	8004dbe <UART_SetConfig+0x3de>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004db2:	d204      	bcs.n	8004dbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e0b6      	b.n	8004f2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dc4:	e0b2      	b.n	8004f2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dce:	d15e      	bne.n	8004e8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d828      	bhi.n	8004e2a <UART_SetConfig+0x44a>
 8004dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004de0 <UART_SetConfig+0x400>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fd ff68 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004e08:	61f8      	str	r0, [r7, #28]
        break;
 8004e0a:	e014      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fd ff7a 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8004e10:	61f8      	str	r0, [r7, #28]
        break;
 8004e12:	e010      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b4d      	ldr	r3, [pc, #308]	@ (8004f4c <UART_SetConfig+0x56c>)
 8004e16:	61fb      	str	r3, [r7, #28]
        break;
 8004e18:	e00d      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fd fec5 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8004e1e:	61f8      	str	r0, [r7, #28]
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	61fb      	str	r3, [r7, #28]
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d077      	beq.n	8004f2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005a      	lsls	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d916      	bls.n	8004e86 <UART_SetConfig+0x4a6>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5e:	d212      	bcs.n	8004e86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f023 030f 	bic.w	r3, r3, #15
 8004e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8afb      	ldrh	r3, [r7, #22]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	8afa      	ldrh	r2, [r7, #22]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e052      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e8c:	e04e      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d827      	bhi.n	8004ee6 <UART_SetConfig+0x506>
 8004e96:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <UART_SetConfig+0x4bc>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004ed1 	.word	0x08004ed1
 8004ea8:	08004ee7 	.word	0x08004ee7
 8004eac:	08004ed7 	.word	0x08004ed7
 8004eb0:	08004ee7 	.word	0x08004ee7
 8004eb4:	08004ee7 	.word	0x08004ee7
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004edf 	.word	0x08004edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec0:	f7fd ff0a 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004ec4:	61f8      	str	r0, [r7, #28]
        break;
 8004ec6:	e014      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7fd ff1c 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	61f8      	str	r0, [r7, #28]
        break;
 8004ece:	e010      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <UART_SetConfig+0x56c>)
 8004ed2:	61fb      	str	r3, [r7, #28]
        break;
 8004ed4:	e00d      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed6:	f7fd fe67 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8004eda:	61f8      	str	r0, [r7, #28]
        break;
 8004edc:	e009      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ee2:	61fb      	str	r3, [r7, #28]
        break;
 8004ee4:	e005      	b.n	8004ef2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	085a      	lsrs	r2, r3, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d909      	bls.n	8004f26 <UART_SetConfig+0x546>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f18:	d205      	bcs.n	8004f26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e002      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	@ 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f46:	bf00      	nop
 8004f48:	40008000 	.word	0x40008000
 8004f4c:	00f42400 	.word	0x00f42400

08004f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01a      	beq.n	8005066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800504e:	d10a      	bne.n	8005066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b098      	sub	sp, #96	@ 0x60
 8005098:	af02      	add	r7, sp, #8
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a4:	f7fc fcbc 	bl	8001a20 <HAL_GetTick>
 80050a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d12e      	bne.n	8005116 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f88c 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e062      	b.n	80051dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d149      	bne.n	80051b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f856 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d03c      	beq.n	80051b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	623b      	str	r3, [r7, #32]
   return(result);
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
 800515e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e6      	bne.n	800513e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005190:	61fa      	str	r2, [r7, #28]
 8005192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	69b9      	ldr	r1, [r7, #24]
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	617b      	str	r3, [r7, #20]
   return(result);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e011      	b.n	80051dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3758      	adds	r7, #88	@ 0x58
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e04f      	b.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d04b      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fc fc0f 	bl	8001a20 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e04e      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d037      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b80      	cmp	r3, #128	@ 0x80
 800522a:	d034      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	d031      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d110      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f8ff 	bl	800544c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2208      	movs	r2, #8
 8005252:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e029      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005270:	d111      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800527a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f8e5 	bl	800544c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00f      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d0a0      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b097      	sub	sp, #92	@ 0x5c
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f2:	d10e      	bne.n	8005312 <UART_Start_Receive_IT+0x52>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <UART_Start_Receive_IT+0x48>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005302:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005306:	e02d      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	22ff      	movs	r2, #255	@ 0xff
 800530c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005310:	e028      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <UART_Start_Receive_IT+0x76>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <UART_Start_Receive_IT+0x6c>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	22ff      	movs	r2, #255	@ 0xff
 8005326:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800532a:	e01b      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	227f      	movs	r2, #127	@ 0x7f
 8005330:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005334:	e016      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800533e:	d10d      	bne.n	800535c <UART_Start_Receive_IT+0x9c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <UART_Start_Receive_IT+0x92>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	227f      	movs	r2, #127	@ 0x7f
 800534c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005350:	e008      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	223f      	movs	r2, #63	@ 0x3f
 8005356:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800535a:	e003      	b.n	8005364 <UART_Start_Receive_IT+0xa4>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2222      	movs	r2, #34	@ 0x22
 8005370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	657b      	str	r3, [r7, #84]	@ 0x54
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005394:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005396:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800539a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b0:	d107      	bne.n	80053c2 <UART_Start_Receive_IT+0x102>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4a21      	ldr	r2, [pc, #132]	@ (8005444 <UART_Start_Receive_IT+0x184>)
 80053be:	669a      	str	r2, [r3, #104]	@ 0x68
 80053c0:	e002      	b.n	80053c8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a20      	ldr	r2, [pc, #128]	@ (8005448 <UART_Start_Receive_IT+0x188>)
 80053c6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d019      	beq.n	8005404 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80053e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <UART_Start_Receive_IT+0x110>
 8005402:	e018      	b.n	8005436 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	613b      	str	r3, [r7, #16]
   return(result);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f043 0320 	orr.w	r3, r3, #32
 8005418:	653b      	str	r3, [r7, #80]	@ 0x50
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e6      	bne.n	8005404 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	375c      	adds	r7, #92	@ 0x5c
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	08005751 	.word	0x08005751
 8005448:	08005595 	.word	0x08005595

0800544c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b095      	sub	sp, #84	@ 0x54
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005472:	643b      	str	r3, [r7, #64]	@ 0x40
 8005474:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	61fb      	str	r3, [r7, #28]
   return(result);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e5      	bne.n	8005486 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d118      	bne.n	80054f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f023 0310 	bic.w	r3, r3, #16
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	613b      	str	r3, [r7, #16]
   return(result);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005508:	bf00      	nop
 800550a:	3754      	adds	r7, #84	@ 0x54
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff fa4a 	bl	80049cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	60bb      	str	r3, [r7, #8]
   return(result);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6979      	ldr	r1, [r7, #20]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	613b      	str	r3, [r7, #16]
   return(result);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fa0c 	bl	80049a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558c:	bf00      	nop
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b09c      	sub	sp, #112	@ 0x70
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ac:	2b22      	cmp	r3, #34	@ 0x22
 80055ae:	f040 80be 	bne.w	800572e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	400a      	ands	r2, r1
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 80a3 	bne.w	8005742 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800560a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800560c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800561a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800561c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	667b      	str	r3, [r7, #100]	@ 0x64
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800564e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a34      	ldr	r2, [pc, #208]	@ (800574c <UART_RxISR_8BIT+0x1b8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01f      	beq.n	80056c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	623b      	str	r3, [r7, #32]
   return(result);
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d12e      	bne.n	8005726 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60fb      	str	r3, [r7, #12]
   return(result);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e6      	bne.n	80056ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b10      	cmp	r3, #16
 800570c:	d103      	bne.n	8005716 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2210      	movs	r2, #16
 8005714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fd22 	bl	8006168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005724:	e00d      	b.n	8005742 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff f946 	bl	80049b8 <HAL_UART_RxCpltCallback>
}
 800572c:	e009      	b.n	8005742 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	8b1b      	ldrh	r3, [r3, #24]
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0208 	orr.w	r2, r2, #8
 800573e:	b292      	uxth	r2, r2
 8005740:	831a      	strh	r2, [r3, #24]
}
 8005742:	bf00      	nop
 8005744:	3770      	adds	r7, #112	@ 0x70
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40008000 	.word	0x40008000

08005750 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09c      	sub	sp, #112	@ 0x70
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800575e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005768:	2b22      	cmp	r3, #34	@ 0x22
 800576a:	f040 80be 	bne.w	80058ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005774:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800577e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005782:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005786:	4013      	ands	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800578c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 80a3 	bne.w	80058fe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e6      	bne.n	80057b8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	663b      	str	r3, [r7, #96]	@ 0x60
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800580a:	643a      	str	r2, [r7, #64]	@ 0x40
 800580c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a34      	ldr	r2, [pc, #208]	@ (8005908 <UART_RxISR_16BIT+0x1b8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01f      	beq.n	800587c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d018      	beq.n	800587c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	61fb      	str	r3, [r7, #28]
   return(result);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800585e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005880:	2b01      	cmp	r3, #1
 8005882:	d12e      	bne.n	80058e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	60bb      	str	r3, [r7, #8]
   return(result);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d103      	bne.n	80058d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2210      	movs	r2, #16
 80058d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fc44 	bl	8006168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058e0:	e00d      	b.n	80058fe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff f868 	bl	80049b8 <HAL_UART_RxCpltCallback>
}
 80058e8:	e009      	b.n	80058fe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	8b1b      	ldrh	r3, [r3, #24]
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	b292      	uxth	r2, r2
 80058fc:	831a      	strh	r2, [r3, #24]
}
 80058fe:	bf00      	nop
 8005900:	3770      	adds	r7, #112	@ 0x70
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40008000 	.word	0x40008000

0800590c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	@ 0x30
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593a:	2b20      	cmp	r3, #32
 800593c:	d13b      	bne.n	80059b6 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e034      	b.n	80059b8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	461a      	mov	r2, r3
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fcad 	bl	80052c0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596a:	2b01      	cmp	r3, #1
 800596c:	d11d      	bne.n	80059aa <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	617b      	str	r3, [r7, #20]
   return(result);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f043 0310 	orr.w	r3, r3, #16
 800598a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
 8005996:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6a39      	ldr	r1, [r7, #32]
 800599a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80059a8:	e002      	b.n	80059b0 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80059b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059b4:	e000      	b.n	80059b8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
  }
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3730      	adds	r7, #48	@ 0x30
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 80059ca:	2201      	movs	r2, #1
 80059cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059d4:	f7fc fb78 	bl	80020c8 <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f828 	bl	8005a34 <crc16>
 80059e4:	4603      	mov	r3, r0
 80059e6:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	89fa      	ldrh	r2, [r7, #14]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b299      	uxth	r1, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	b2ca      	uxtb	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4806      	ldr	r0, [pc, #24]	@ (8005a30 <sendData+0x70>)
 8005a16:	f7fe fc35 	bl	8004284 <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a24:	f7fc fb50 	bl	80020c8 <HAL_GPIO_WritePin>

}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000458 	.word	0x20000458

08005a34 <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8005a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a44:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8005a46:	2300      	movs	r3, #0
 8005a48:	81bb      	strh	r3, [r7, #12]
 8005a4a:	e022      	b.n	8005a92 <crc16+0x5e>
        crc ^= data[i];
 8005a4c:	89bb      	ldrh	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	4053      	eors	r3, r2
 8005a5a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	72fb      	strb	r3, [r7, #11]
 8005a60:	e011      	b.n	8005a86 <crc16+0x52>
            if (crc & 0x0001) {
 8005a62:	89fb      	ldrh	r3, [r7, #14]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <crc16+0x74>)
 8005a74:	4053      	eors	r3, r2
 8005a76:	81fb      	strh	r3, [r7, #14]
 8005a78:	e002      	b.n	8005a80 <crc16+0x4c>
            } else {
                crc >>= 1;
 8005a7a:	89fb      	ldrh	r3, [r7, #14]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	3301      	adds	r3, #1
 8005a84:	72fb      	strb	r3, [r7, #11]
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	2b07      	cmp	r3, #7
 8005a8a:	d9ea      	bls.n	8005a62 <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8005a8c:	89bb      	ldrh	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	81bb      	strh	r3, [r7, #12]
 8005a92:	89ba      	ldrh	r2, [r7, #12]
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3d8      	bcc.n	8005a4c <crc16+0x18>
            }
        }
    }
    return crc;
 8005a9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	ffffa001 	.word	0xffffa001

08005aac <modbusException>:

void modbusException(uint8_t exceptionCode) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <modbusException+0x38>)
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <modbusException+0x3c>)
 8005abc:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 8005abe:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <modbusException+0x38>)
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <modbusException+0x3c>)
 8005aca:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 8005acc:	4a06      	ldr	r2, [pc, #24]	@ (8005ae8 <modbusException+0x3c>)
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 8005ad2:	2103      	movs	r1, #3
 8005ad4:	4804      	ldr	r0, [pc, #16]	@ (8005ae8 <modbusException+0x3c>)
 8005ad6:	f7ff ff73 	bl	80059c0 <sendData>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000053c 	.word	0x2000053c
 8005ae8:	2000063c 	.word	0x2000063c

08005aec <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	460a      	mov	r2, r1
 8005af6:	80fb      	strh	r3, [r7, #6]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 8005afc:	88bb      	ldrh	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <readHoldingRegs+0x1c>
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	2b32      	cmp	r3, #50	@ 0x32
 8005b06:	d904      	bls.n	8005b12 <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005b08:	2003      	movs	r0, #3
 8005b0a:	f7ff ffcf 	bl	8005aac <modbusException>
        return 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e04a      	b.n	8005ba8 <readHoldingRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	88bb      	ldrh	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8005b1e:	89fb      	ldrh	r3, [r7, #14]
 8005b20:	2b32      	cmp	r3, #50	@ 0x32
 8005b22:	d904      	bls.n	8005b2e <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005b24:	2002      	movs	r0, #2
 8005b26:	f7ff ffc1 	bl	8005aac <modbusException>
        return 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e03c      	b.n	8005ba8 <readHoldingRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8005b2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b32:	2100      	movs	r1, #0
 8005b34:	481e      	ldr	r0, [pc, #120]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b36:	f002 fb05 	bl	8008144 <memset>
    TxData[0] = SLAVE_ID;
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005b40:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb4 <readHoldingRegs+0xc8>)
 8005b42:	785a      	ldrb	r2, [r3, #1]
 8005b44:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b46:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8005b48:	88bb      	ldrh	r3, [r7, #4]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b17      	ldr	r3, [pc, #92]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b52:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005b54:	2303      	movs	r3, #3
 8005b56:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e01b      	b.n	8005b96 <readHoldingRegs+0xaa>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <readHoldingRegs+0xcc>)
 8005b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b299      	uxth	r1, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	617a      	str	r2, [r7, #20]
 8005b70:	b2c9      	uxtb	r1, r1
 8005b72:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b74:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb8 <readHoldingRegs+0xcc>)
 8005b7a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	617a      	str	r2, [r7, #20]
 8005b84:	b2c9      	uxtb	r1, r1
 8005b86:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005b88:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3301      	adds	r3, #1
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	88bb      	ldrh	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	dbdf      	blt.n	8005b5e <readHoldingRegs+0x72>
    }

    sendData(TxData, indx);
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	4803      	ldr	r0, [pc, #12]	@ (8005bb0 <readHoldingRegs+0xc4>)
 8005ba2:	f7ff ff0d 	bl	80059c0 <sendData>
    return 1;
 8005ba6:	2301      	movs	r3, #1
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2000063c 	.word	0x2000063c
 8005bb4:	2000053c 	.word	0x2000053c
 8005bb8:	20000014 	.word	0x20000014

08005bbc <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460a      	mov	r2, r1
 8005bc6:	80fb      	strh	r3, [r7, #6]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 8005bcc:	88bb      	ldrh	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <readInputRegs+0x1c>
 8005bd2:	88bb      	ldrh	r3, [r7, #4]
 8005bd4:	2b32      	cmp	r3, #50	@ 0x32
 8005bd6:	d904      	bls.n	8005be2 <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005bd8:	2003      	movs	r0, #3
 8005bda:	f7ff ff67 	bl	8005aac <modbusException>
        return 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e04a      	b.n	8005c78 <readInputRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	88bb      	ldrh	r3, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	2b32      	cmp	r3, #50	@ 0x32
 8005bf2:	d904      	bls.n	8005bfe <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f7ff ff59 	bl	8005aac <modbusException>
        return 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e03c      	b.n	8005c78 <readInputRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8005bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c02:	2100      	movs	r1, #0
 8005c04:	481e      	ldr	r0, [pc, #120]	@ (8005c80 <readInputRegs+0xc4>)
 8005c06:	f002 fa9d 	bl	8008144 <memset>
    TxData[0] = SLAVE_ID;
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c80 <readInputRegs+0xc4>)
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005c10:	4b1c      	ldr	r3, [pc, #112]	@ (8005c84 <readInputRegs+0xc8>)
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	4b1a      	ldr	r3, [pc, #104]	@ (8005c80 <readInputRegs+0xc4>)
 8005c16:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8005c18:	88bb      	ldrh	r3, [r7, #4]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <readInputRegs+0xc4>)
 8005c22:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005c24:	2303      	movs	r3, #3
 8005c26:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e01b      	b.n	8005c66 <readInputRegs+0xaa>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <readInputRegs+0xcc>)
 8005c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b299      	uxth	r1, r3
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	617a      	str	r2, [r7, #20]
 8005c40:	b2c9      	uxtb	r1, r1
 8005c42:	4a0f      	ldr	r2, [pc, #60]	@ (8005c80 <readInputRegs+0xc4>)
 8005c44:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	@ (8005c88 <readInputRegs+0xcc>)
 8005c4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	617a      	str	r2, [r7, #20]
 8005c54:	b2c9      	uxtb	r1, r1
 8005c56:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <readInputRegs+0xc4>)
 8005c58:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3301      	adds	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	88bb      	ldrh	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	dbdf      	blt.n	8005c2e <readInputRegs+0x72>
    }

    sendData(TxData, indx);
 8005c6e:	6979      	ldr	r1, [r7, #20]
 8005c70:	4803      	ldr	r0, [pc, #12]	@ (8005c80 <readInputRegs+0xc4>)
 8005c72:	f7ff fea5 	bl	80059c0 <sendData>
    return 1;
 8005c76:	2301      	movs	r3, #1
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	2000063c 	.word	0x2000063c
 8005c84:	2000053c 	.word	0x2000053c
 8005c88:	20000078 	.word	0x20000078

08005c8c <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	460a      	mov	r2, r1
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 8005c9c:	88bb      	ldrh	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <readCoils+0x1e>
 8005ca2:	88bb      	ldrh	r3, [r7, #4]
 8005ca4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005ca8:	d904      	bls.n	8005cb4 <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8005caa:	2003      	movs	r0, #3
 8005cac:	f7ff fefe 	bl	8005aac <modbusException>
        return 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e080      	b.n	8005db6 <readCoils+0x12a>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	88bb      	ldrh	r3, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 8005cc0:	897b      	ldrh	r3, [r7, #10]
 8005cc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cc4:	d904      	bls.n	8005cd0 <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005cc6:	2002      	movs	r0, #2
 8005cc8:	f7ff fef0 	bl	8005aac <modbusException>
        return 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e072      	b.n	8005db6 <readCoils+0x12a>
    }

    memset(TxData, '\0', 256);
 8005cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	483a      	ldr	r0, [pc, #232]	@ (8005dc0 <readCoils+0x134>)
 8005cd8:	f002 fa34 	bl	8008144 <memset>
    TxData[0] = SLAVE_ID;
 8005cdc:	4b38      	ldr	r3, [pc, #224]	@ (8005dc0 <readCoils+0x134>)
 8005cde:	2202      	movs	r2, #2
 8005ce0:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005ce2:	4b38      	ldr	r3, [pc, #224]	@ (8005dc4 <readCoils+0x138>)
 8005ce4:	785a      	ldrb	r2, [r3, #1]
 8005ce6:	4b36      	ldr	r3, [pc, #216]	@ (8005dc0 <readCoils+0x134>)
 8005ce8:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 8005cea:	88bb      	ldrh	r3, [r7, #4]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	88ba      	ldrh	r2, [r7, #4]
 8005cf4:	f002 0207 	and.w	r2, r2, #7
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	bf14      	ite	ne
 8005cfe:	2201      	movne	r2, #1
 8005d00:	2200      	moveq	r2, #0
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	4413      	add	r3, r2
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <readCoils+0x134>)
 8005d0a:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e033      	b.n	8005d92 <readCoils+0x106>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8005d2a:	4a25      	ldr	r2, [pc, #148]	@ (8005dc0 <readCoils+0x134>)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b25a      	sxtb	r2, r3
 8005d34:	4924      	ldr	r1, [pc, #144]	@ (8005dc8 <readCoils+0x13c>)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	440b      	add	r3, r1
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	8afb      	ldrh	r3, [r7, #22]
 8005d40:	fa41 f303 	asr.w	r3, r1, r3
 8005d44:	f003 0101 	and.w	r1, r3, #1
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b25b      	sxtb	r3, r3
 8005d54:	b2d9      	uxtb	r1, r3
 8005d56:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <readCoils+0x134>)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	3301      	adds	r3, #1
 8005d64:	613b      	str	r3, [r7, #16]
        bitPosition++;
 8005d66:	8afb      	ldrh	r3, [r7, #22]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	dd04      	ble.n	8005d7c <readCoils+0xf0>
            indxPosition = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
            indx++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8005d7c:	8afb      	ldrh	r3, [r7, #22]
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	d904      	bls.n	8005d8c <readCoils+0x100>
            bitPosition = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	82fb      	strh	r3, [r7, #22]
            startByte++;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	88bb      	ldrh	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	dbc7      	blt.n	8005d2a <readCoils+0x9e>
        }
    }

    if (numCoils % 8 != 0) indx++;
 8005d9a:	88bb      	ldrh	r3, [r7, #4]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <readCoils+0x120>
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3301      	adds	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	4804      	ldr	r0, [pc, #16]	@ (8005dc0 <readCoils+0x134>)
 8005db0:	f7ff fe06 	bl	80059c0 <sendData>
    return 1;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000063c 	.word	0x2000063c
 8005dc4:	2000053c 	.word	0x2000053c
 8005dc8:	200000dc 	.word	0x200000dc

08005dcc <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	80fb      	strh	r3, [r7, #6]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b31      	cmp	r3, #49	@ 0x31
 8005de0:	d904      	bls.n	8005dec <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005de2:	2002      	movs	r0, #2
 8005de4:	f7ff fe62 	bl	8005aac <modbusException>
        return 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e020      	b.n	8005e2e <writeSingleHoldingReg+0x62>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	4912      	ldr	r1, [pc, #72]	@ (8005e38 <writeSingleHoldingReg+0x6c>)
 8005df0:	88ba      	ldrh	r2, [r7, #4]
 8005df2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8005df6:	4b11      	ldr	r3, [pc, #68]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005df8:	2202      	movs	r2, #2
 8005dfa:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005dfc:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <writeSingleHoldingReg+0x74>)
 8005dfe:	785a      	ldrb	r2, [r3, #1]
 8005e00:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e02:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005e04:	4b0e      	ldr	r3, [pc, #56]	@ (8005e40 <writeSingleHoldingReg+0x74>)
 8005e06:	789a      	ldrb	r2, [r3, #2]
 8005e08:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e0a:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <writeSingleHoldingReg+0x74>)
 8005e0e:	78da      	ldrb	r2, [r3, #3]
 8005e10:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e12:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005e14:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <writeSingleHoldingReg+0x74>)
 8005e16:	791a      	ldrb	r2, [r3, #4]
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e1a:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005e1c:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <writeSingleHoldingReg+0x74>)
 8005e1e:	795a      	ldrb	r2, [r3, #5]
 8005e20:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e22:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005e24:	2106      	movs	r1, #6
 8005e26:	4805      	ldr	r0, [pc, #20]	@ (8005e3c <writeSingleHoldingReg+0x70>)
 8005e28:	f7ff fdca 	bl	80059c0 <sendData>
    return 1;
 8005e2c:	2301      	movs	r3, #1
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000014 	.word	0x20000014
 8005e3c:	2000063c 	.word	0x2000063c
 8005e40:	2000053c 	.word	0x2000053c

08005e44 <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	603a      	str	r2, [r7, #0]
 8005e4e:	80fb      	strh	r3, [r7, #6]
 8005e50:	460b      	mov	r3, r1
 8005e52:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 8005e54:	88bb      	ldrh	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <writeHoldingRegs+0x1c>
 8005e5a:	88bb      	ldrh	r3, [r7, #4]
 8005e5c:	2b7b      	cmp	r3, #123	@ 0x7b
 8005e5e:	d904      	bls.n	8005e6a <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005e60:	2003      	movs	r0, #3
 8005e62:	f7ff fe23 	bl	8005aac <modbusException>
        return 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e03f      	b.n	8005eea <writeHoldingRegs+0xa6>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8005e6a:	88fa      	ldrh	r2, [r7, #6]
 8005e6c:	88bb      	ldrh	r3, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 8005e76:	897b      	ldrh	r3, [r7, #10]
 8005e78:	2b31      	cmp	r3, #49	@ 0x31
 8005e7a:	d904      	bls.n	8005e86 <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005e7c:	2002      	movs	r0, #2
 8005e7e:	f7ff fe15 	bl	8005aac <modbusException>
        return 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e031      	b.n	8005eea <writeHoldingRegs+0xa6>
    }

    for (int i = 0; i < numRegs; i++) {
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e00e      	b.n	8005eaa <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	441a      	add	r2, r3
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	80f9      	strh	r1, [r7, #6]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	4b15      	ldr	r3, [pc, #84]	@ (8005ef4 <writeHoldingRegs+0xb0>)
 8005ea0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	88bb      	ldrh	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	dbec      	blt.n	8005e8c <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005eb8:	4b10      	ldr	r3, [pc, #64]	@ (8005efc <writeHoldingRegs+0xb8>)
 8005eba:	785a      	ldrb	r2, [r3, #1]
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ebe:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <writeHoldingRegs+0xb8>)
 8005ec2:	789a      	ldrb	r2, [r3, #2]
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ec6:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8005efc <writeHoldingRegs+0xb8>)
 8005eca:	78da      	ldrb	r2, [r3, #3]
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ece:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <writeHoldingRegs+0xb8>)
 8005ed2:	791a      	ldrb	r2, [r3, #4]
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ed6:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005ed8:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <writeHoldingRegs+0xb8>)
 8005eda:	795a      	ldrb	r2, [r3, #5]
 8005edc:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ede:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005ee0:	2106      	movs	r1, #6
 8005ee2:	4805      	ldr	r0, [pc, #20]	@ (8005ef8 <writeHoldingRegs+0xb4>)
 8005ee4:	f7ff fd6c 	bl	80059c0 <sendData>
    return 1;
 8005ee8:	2301      	movs	r3, #1
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000014 	.word	0x20000014
 8005ef8:	2000063c 	.word	0x2000063c
 8005efc:	2000053c 	.word	0x2000053c

08005f00 <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	460a      	mov	r2, r1
 8005f0a:	80fb      	strh	r3, [r7, #6]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f14:	d904      	bls.n	8005f20 <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005f16:	2002      	movs	r0, #2
 8005f18:	f7ff fdc8 	bl	8005aac <modbusException>
        return 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e05c      	b.n	8005fda <writeSingleCoil+0xda>
    }

    int bytePos = writeAddr / 8;
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	08db      	lsrs	r3, r3, #3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8005f30:	797b      	ldrb	r3, [r7, #5]
 8005f32:	2bff      	cmp	r3, #255	@ 0xff
 8005f34:	d116      	bne.n	8005f64 <writeSingleCoil+0x64>
 8005f36:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe4 <writeSingleCoil+0xe4>)
 8005f38:	795b      	ldrb	r3, [r3, #5]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d112      	bne.n	8005f64 <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <writeSingleCoil+0xe8>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b25a      	sxtb	r2, r3
 8005f48:	2101      	movs	r1, #1
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	b2d9      	uxtb	r1, r3
 8005f58:	4a23      	ldr	r2, [pc, #140]	@ (8005fe8 <writeSingleCoil+0xe8>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	460a      	mov	r2, r1
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e020      	b.n	8005fa6 <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 8005f64:	797b      	ldrb	r3, [r7, #5]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <writeSingleCoil+0x9c>
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe4 <writeSingleCoil+0xe4>)
 8005f6c:	795b      	ldrb	r3, [r3, #5]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d114      	bne.n	8005f9c <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 8005f72:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe8 <writeSingleCoil+0xe8>)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b25a      	sxtb	r2, r3
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	43db      	mvns	r3, r3
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b25b      	sxtb	r3, r3
 8005f8e:	b2d9      	uxtb	r1, r3
 8005f90:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <writeSingleCoil+0xe8>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	460a      	mov	r2, r1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e004      	b.n	8005fa6 <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8005f9c:	2003      	movs	r0, #3
 8005f9e:	f7ff fd85 	bl	8005aac <modbusException>
        return 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e019      	b.n	8005fda <writeSingleCoil+0xda>
    }

    TxData[0] = SLAVE_ID;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <writeSingleCoil+0xec>)
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005fac:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <writeSingleCoil+0xe4>)
 8005fae:	785a      	ldrb	r2, [r3, #1]
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005fec <writeSingleCoil+0xec>)
 8005fb2:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <writeSingleCoil+0xe4>)
 8005fb6:	789a      	ldrb	r2, [r3, #2]
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <writeSingleCoil+0xec>)
 8005fba:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005fbc:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <writeSingleCoil+0xe4>)
 8005fbe:	78da      	ldrb	r2, [r3, #3]
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <writeSingleCoil+0xec>)
 8005fc2:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8005fc4:	4a09      	ldr	r2, [pc, #36]	@ (8005fec <writeSingleCoil+0xec>)
 8005fc6:	797b      	ldrb	r3, [r7, #5]
 8005fc8:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <writeSingleCoil+0xec>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8005fd0:	2106      	movs	r1, #6
 8005fd2:	4806      	ldr	r0, [pc, #24]	@ (8005fec <writeSingleCoil+0xec>)
 8005fd4:	f7ff fcf4 	bl	80059c0 <sendData>
    return 1;
 8005fd8:	2301      	movs	r3, #1
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000053c 	.word	0x2000053c
 8005fe8:	200000dc 	.word	0x200000dc
 8005fec:	2000063c 	.word	0x2000063c

08005ff0 <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	603a      	str	r2, [r7, #0]
 8005ffa:	80fb      	strh	r3, [r7, #6]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 8006000:	88bb      	ldrh	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <writeMultiCoils+0x1e>
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 800600c:	d904      	bls.n	8006018 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 800600e:	2003      	movs	r0, #3
 8006010:	f7ff fd4c 	bl	8005aac <modbusException>
        return 0;
 8006014:	2300      	movs	r3, #0
 8006016:	e09c      	b.n	8006152 <writeMultiCoils+0x162>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 8006024:	8a7b      	ldrh	r3, [r7, #18]
 8006026:	2bc7      	cmp	r3, #199	@ 0xc7
 8006028:	d904      	bls.n	8006034 <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800602a:	2002      	movs	r0, #2
 800602c:	f7ff fd3e 	bl	8005aac <modbusException>
        return 0;
 8006030:	2300      	movs	r3, #0
 8006032:	e08e      	b.n	8006152 <writeMultiCoils+0x162>
    }

    int startByte = startAddr / 8;
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	b29b      	uxth	r3, r3
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t bitPosition = startAddr % 8;
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	847b      	strh	r3, [r7, #34]	@ 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 8006044:	88bb      	ldrh	r3, [r7, #4]
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	b29b      	uxth	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	88bb      	ldrh	r3, [r7, #4]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	4413      	add	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e052      	b.n	8006112 <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e047      	b.n	8006102 <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 8006072:	88bb      	ldrh	r3, [r7, #4]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	da47      	bge.n	800610a <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	4413      	add	r3, r2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	fa42 f303 	asr.w	r3, r2, r3
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 8006092:	4a32      	ldr	r2, [pc, #200]	@ (800615c <writeMultiCoils+0x16c>)
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	4413      	add	r3, r2
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b25a      	sxtb	r2, r3
 800609c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800609e:	2101      	movs	r1, #1
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	b2d9      	uxtb	r1, r3
 80060ac:	4a2b      	ldr	r2, [pc, #172]	@ (800615c <writeMultiCoils+0x16c>)
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	4413      	add	r3, r2
 80060b2:	460a      	mov	r2, r1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e013      	b.n	80060e0 <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 80060b8:	4a28      	ldr	r2, [pc, #160]	@ (800615c <writeMultiCoils+0x16c>)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	b25a      	sxtb	r2, r3
 80060c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	b25b      	sxtb	r3, r3
 80060cc:	43db      	mvns	r3, r3
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	4013      	ands	r3, r2
 80060d2:	b25b      	sxtb	r3, r3
 80060d4:	b2d9      	uxtb	r1, r3
 80060d6:	4a21      	ldr	r2, [pc, #132]	@ (800615c <writeMultiCoils+0x16c>)
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	4413      	add	r3, r2
 80060dc:	460a      	mov	r2, r1
 80060de:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 80060e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060e2:	3301      	adds	r3, #1
 80060e4:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (bitPosition > 7) {
 80060e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060e8:	2b07      	cmp	r3, #7
 80060ea:	d904      	bls.n	80060f6 <writeMultiCoils+0x106>
                bitPosition = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	847b      	strh	r3, [r7, #34]	@ 0x22
                startByte++;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	3301      	adds	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            indx++;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3301      	adds	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3301      	adds	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b07      	cmp	r3, #7
 8006106:	ddb4      	ble.n	8006072 <writeMultiCoils+0x82>
 8006108:	e000      	b.n	800610c <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 800610a:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3301      	adds	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	429a      	cmp	r2, r3
 8006118:	dba8      	blt.n	800606c <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 800611a:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <writeMultiCoils+0x170>)
 800611c:	2202      	movs	r2, #2
 800611e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8006120:	4b10      	ldr	r3, [pc, #64]	@ (8006164 <writeMultiCoils+0x174>)
 8006122:	785a      	ldrb	r2, [r3, #1]
 8006124:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <writeMultiCoils+0x170>)
 8006126:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <writeMultiCoils+0x174>)
 800612a:	789a      	ldrb	r2, [r3, #2]
 800612c:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <writeMultiCoils+0x170>)
 800612e:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <writeMultiCoils+0x174>)
 8006132:	78da      	ldrb	r2, [r3, #3]
 8006134:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <writeMultiCoils+0x170>)
 8006136:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8006138:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <writeMultiCoils+0x174>)
 800613a:	791a      	ldrb	r2, [r3, #4]
 800613c:	4b08      	ldr	r3, [pc, #32]	@ (8006160 <writeMultiCoils+0x170>)
 800613e:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8006140:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <writeMultiCoils+0x174>)
 8006142:	795a      	ldrb	r2, [r3, #5]
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <writeMultiCoils+0x170>)
 8006146:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8006148:	2106      	movs	r1, #6
 800614a:	4805      	ldr	r0, [pc, #20]	@ (8006160 <writeMultiCoils+0x170>)
 800614c:	f7ff fc38 	bl	80059c0 <sendData>
    return 1;
 8006150:	2301      	movs	r3, #1
}
 8006152:	4618      	mov	r0, r3
 8006154:	3728      	adds	r7, #40	@ 0x28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	200000dc 	.word	0x200000dc
 8006160:	2000063c 	.word	0x2000063c
 8006164:	2000053c 	.word	0x2000053c

08006168 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a67      	ldr	r2, [pc, #412]	@ (8006318 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f040 80c9 	bne.w	8006312 <HAL_UARTEx_RxEventCallback+0x1aa>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UARTEx_RxEventCallback+0x26>
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618c:	d906      	bls.n	800619c <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 800618e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006192:	4962      	ldr	r1, [pc, #392]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fbc3 	bl	8005920 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 800619a:	e0ba      	b.n	8006312 <HAL_UARTEx_RxEventCallback+0x1aa>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061a6:	f7fb ff8f 	bl	80020c8 <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != SLAVE_ID) {
 80061aa:	4b5c      	ldr	r3, [pc, #368]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d006      	beq.n	80061c0 <HAL_UARTEx_RxEventCallback+0x58>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 80061b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061b6:	4959      	ldr	r1, [pc, #356]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fbb1 	bl	8005920 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 80061be:	e0a8      	b.n	8006312 <HAL_UARTEx_RxEventCallback+0x1aa>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a55      	ldr	r2, [pc, #340]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061c6:	5cd3      	ldrb	r3, [r2, r3]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	b21a      	sxth	r2, r3
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	3b02      	subs	r3, #2
 80061d0:	4952      	ldr	r1, [pc, #328]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b21b      	sxth	r3, r3
 80061da:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	3b02      	subs	r3, #2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	484d      	ldr	r0, [pc, #308]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061e6:	f7ff fc25 	bl	8005a34 <crc16>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d006      	beq.n	8006202 <HAL_UARTEx_RxEventCallback+0x9a>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 80061f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061f8:	4948      	ldr	r1, [pc, #288]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fb90 	bl	8005920 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8006200:	e087      	b.n	8006312 <HAL_UARTEx_RxEventCallback+0x1aa>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8006202:	4b46      	ldr	r3, [pc, #280]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8006204:	789b      	ldrb	r3, [r3, #2]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	b21a      	sxth	r2, r3
 800620a:	4b44      	ldr	r3, [pc, #272]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 800620c:	78db      	ldrb	r3, [r3, #3]
 800620e:	b21b      	sxth	r3, r3
 8006210:	4313      	orrs	r3, r2
 8006212:	b21b      	sxth	r3, r3
 8006214:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 8006216:	4b41      	ldr	r3, [pc, #260]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	b21a      	sxth	r2, r3
 800621e:	4b3f      	ldr	r3, [pc, #252]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8006220:	795b      	ldrb	r3, [r3, #5]
 8006222:	b21b      	sxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b21b      	sxth	r3, r3
 8006228:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 800622a:	2201      	movs	r2, #1
 800622c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006234:	f7fb ff48 	bl	80020c8 <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 8006238:	4b38      	ldr	r3, [pc, #224]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	3b01      	subs	r3, #1
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d85d      	bhi.n	80062fe <HAL_UARTEx_RxEventCallback+0x196>
 8006242:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <HAL_UARTEx_RxEventCallback+0xe0>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006289 	.word	0x08006289
 800624c:	080062ff 	.word	0x080062ff
 8006250:	08006297 	.word	0x08006297
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080062b3 	.word	0x080062b3
 800625c:	080062c3 	.word	0x080062c3
 8006260:	080062ff 	.word	0x080062ff
 8006264:	080062ff 	.word	0x080062ff
 8006268:	080062ff 	.word	0x080062ff
 800626c:	080062ff 	.word	0x080062ff
 8006270:	080062ff 	.word	0x080062ff
 8006274:	080062ff 	.word	0x080062ff
 8006278:	080062ff 	.word	0x080062ff
 800627c:	080062ff 	.word	0x080062ff
 8006280:	080062e3 	.word	0x080062e3
 8006284:	080062f1 	.word	0x080062f1
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8006288:	897a      	ldrh	r2, [r7, #10]
 800628a:	89bb      	ldrh	r3, [r7, #12]
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fcfc 	bl	8005c8c <readCoils>
                break;
 8006294:	e037      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 8006296:	897a      	ldrh	r2, [r7, #10]
 8006298:	89bb      	ldrh	r3, [r7, #12]
 800629a:	4611      	mov	r1, r2
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fc25 	bl	8005aec <readHoldingRegs>
                break;
 80062a2:	e030      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 80062a4:	897a      	ldrh	r2, [r7, #10]
 80062a6:	89bb      	ldrh	r3, [r7, #12]
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fc86 	bl	8005bbc <readInputRegs>
                break;
 80062b0:	e029      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80062b4:	791a      	ldrb	r2, [r3, #4]
 80062b6:	89bb      	ldrh	r3, [r7, #12]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fe20 	bl	8005f00 <writeSingleCoil>
                break;
 80062c0:	e021      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 80062c2:	4b16      	ldr	r3, [pc, #88]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80062c4:	791b      	ldrb	r3, [r3, #4]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	b21a      	sxth	r2, r3
 80062ca:	4b14      	ldr	r3, [pc, #80]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80062cc:	795b      	ldrb	r3, [r3, #5]
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b21b      	sxth	r3, r3
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	89bb      	ldrh	r3, [r7, #12]
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fd76 	bl	8005dcc <writeSingleHoldingReg>
                break;
 80062e0:	e011      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 80062e2:	8979      	ldrh	r1, [r7, #10]
 80062e4:	89bb      	ldrh	r3, [r7, #12]
 80062e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006320 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fe81 	bl	8005ff0 <writeMultiCoils>
                break;
 80062ee:	e00a      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 80062f0:	8979      	ldrh	r1, [r7, #10]
 80062f2:	89bb      	ldrh	r3, [r7, #12]
 80062f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006324 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fda4 	bl	8005e44 <writeHoldingRegs>
                break;
 80062fc:	e003      	b.n	8006306 <HAL_UARTEx_RxEventCallback+0x19e>
            default:
                modbusException(ILLEGAL_FUNCTION);
 80062fe:	2001      	movs	r0, #1
 8006300:	f7ff fbd4 	bl	8005aac <modbusException>
                break;
 8006304:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8006306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800630a:	4904      	ldr	r1, [pc, #16]	@ (800631c <HAL_UARTEx_RxEventCallback+0x1b4>)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fb07 	bl	8005920 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40013800 	.word	0x40013800
 800631c:	2000053c 	.word	0x2000053c
 8006320:	20000543 	.word	0x20000543
 8006324:	20000542 	.word	0x20000542

08006328 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800633a:	2b84      	cmp	r3, #132	@ 0x84
 800633c:	d005      	beq.n	800634a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800633e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	3303      	adds	r3, #3
 8006348:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800635c:	f000 fae4 	bl	8006928 <vTaskStartScheduler>
  
  return osOK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	bd80      	pop	{r7, pc}

08006366 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006368:	b089      	sub	sp, #36	@ 0x24
 800636a:	af04      	add	r7, sp, #16
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <osThreadCreate+0x54>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01c      	beq.n	80063ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685c      	ldr	r4, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691e      	ldr	r6, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ffc8 	bl	8006328 <makeFreeRtosPriority>
 8006398:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063a2:	9202      	str	r2, [sp, #8]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	9100      	str	r1, [sp, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	4632      	mov	r2, r6
 80063ac:	4629      	mov	r1, r5
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 f8ed 	bl	800658e <xTaskCreateStatic>
 80063b4:	4603      	mov	r3, r0
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e01c      	b.n	80063f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685c      	ldr	r4, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ffaa 	bl	8006328 <makeFreeRtosPriority>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	9200      	str	r2, [sp, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	4632      	mov	r2, r6
 80063e2:	4629      	mov	r1, r5
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 f932 	bl	800664e <xTaskCreate>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <osDelay+0x16>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	e000      	b.n	8006416 <osDelay+0x18>
 8006414:	2301      	movs	r3, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fa50 	bl	80068bc <vTaskDelay>
  
  return osOK;
 800641c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f103 0208 	add.w	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295
 800643e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f103 0208 	add.w	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f103 0208 	add.w	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d103      	bne.n	80064e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e00c      	b.n	8006502 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3308      	adds	r3, #8
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e002      	b.n	80064f6 <vListInsert+0x2e>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d2f6      	bcs.n	80064f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6892      	ldr	r2, [r2, #8]
 8006550:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6852      	ldr	r2, [r2, #4]
 800655a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d103      	bne.n	800656e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800658e:	b580      	push	{r7, lr}
 8006590:	b08e      	sub	sp, #56	@ 0x38
 8006592:	af04      	add	r7, sp, #16
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065d8:	2354      	movs	r3, #84	@ 0x54
 80065da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b54      	cmp	r3, #84	@ 0x54
 80065e0:	d00b      	beq.n	80065fa <xTaskCreateStatic+0x6c>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61bb      	str	r3, [r7, #24]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01e      	beq.n	8006640 <xTaskCreateStatic+0xb2>
 8006602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800661a:	2300      	movs	r3, #0
 800661c:	9303      	str	r3, [sp, #12]
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	9302      	str	r3, [sp, #8]
 8006622:	f107 0314 	add.w	r3, r7, #20
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f850 	bl	80066d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800663a:	f000 f8d5 	bl	80067e8 <prvAddNewTaskToReadyList>
 800663e:	e001      	b.n	8006644 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006644:	697b      	ldr	r3, [r7, #20]
	}
 8006646:	4618      	mov	r0, r3
 8006648:	3728      	adds	r7, #40	@ 0x28
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800664e:	b580      	push	{r7, lr}
 8006650:	b08c      	sub	sp, #48	@ 0x30
 8006652:	af04      	add	r7, sp, #16
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fed0 	bl	8007408 <pvPortMalloc>
 8006668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006670:	2054      	movs	r0, #84	@ 0x54
 8006672:	f000 fec9 	bl	8007408 <pvPortMalloc>
 8006676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	631a      	str	r2, [r3, #48]	@ 0x30
 8006684:	e005      	b.n	8006692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f000 ff8c 	bl	80075a4 <vPortFree>
 800668c:	e001      	b.n	8006692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d017      	beq.n	80066c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	2300      	movs	r3, #0
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f80e 	bl	80066d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066bc:	69f8      	ldr	r0, [r7, #28]
 80066be:	f000 f893 	bl	80067e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066c2:	2301      	movs	r3, #1
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e002      	b.n	80066ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ce:	69bb      	ldr	r3, [r7, #24]
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066f0:	3b01      	subs	r3, #1
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	617b      	str	r3, [r7, #20]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01f      	beq.n	8006768 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e012      	b.n	8006754 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	7819      	ldrb	r1, [r3, #0]
 8006736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	3334      	adds	r3, #52	@ 0x34
 800673e:	460a      	mov	r2, r1
 8006740:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d006      	beq.n	800675c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3301      	adds	r3, #1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b0f      	cmp	r3, #15
 8006758:	d9e9      	bls.n	800672e <prvInitialiseNewTask+0x56>
 800675a:	e000      	b.n	800675e <prvInitialiseNewTask+0x86>
			{
				break;
 800675c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006766:	e003      	b.n	8006770 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b06      	cmp	r3, #6
 8006774:	d901      	bls.n	800677a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006776:	2306      	movs	r3, #6
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800677e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006784:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	2200      	movs	r2, #0
 800678a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	3304      	adds	r3, #4
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fe68 	bl	8006466 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	3318      	adds	r3, #24
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe63 	bl	8006466 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	f1c3 0207 	rsb	r2, r3, #7
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	2200      	movs	r2, #0
 80067ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	69b8      	ldr	r0, [r7, #24]
 80067ca:	f000 fc0d 	bl	8006fe8 <pxPortInitialiseStack>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e0:	bf00      	nop
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067f0:	f000 fd2a 	bl	8007248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067f4:	4b2a      	ldr	r3, [pc, #168]	@ (80068a0 <prvAddNewTaskToReadyList+0xb8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	4a29      	ldr	r2, [pc, #164]	@ (80068a0 <prvAddNewTaskToReadyList+0xb8>)
 80067fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067fe:	4b29      	ldr	r3, [pc, #164]	@ (80068a4 <prvAddNewTaskToReadyList+0xbc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006806:	4a27      	ldr	r2, [pc, #156]	@ (80068a4 <prvAddNewTaskToReadyList+0xbc>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800680c:	4b24      	ldr	r3, [pc, #144]	@ (80068a0 <prvAddNewTaskToReadyList+0xb8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d110      	bne.n	8006836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006814:	f000 fac4 	bl	8006da0 <prvInitialiseTaskLists>
 8006818:	e00d      	b.n	8006836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800681a:	4b23      	ldr	r3, [pc, #140]	@ (80068a8 <prvAddNewTaskToReadyList+0xc0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006822:	4b20      	ldr	r3, [pc, #128]	@ (80068a4 <prvAddNewTaskToReadyList+0xbc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d802      	bhi.n	8006836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006830:	4a1c      	ldr	r2, [pc, #112]	@ (80068a4 <prvAddNewTaskToReadyList+0xbc>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006836:	4b1d      	ldr	r3, [pc, #116]	@ (80068ac <prvAddNewTaskToReadyList+0xc4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	4a1b      	ldr	r2, [pc, #108]	@ (80068ac <prvAddNewTaskToReadyList+0xc4>)
 800683e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	2201      	movs	r2, #1
 8006846:	409a      	lsls	r2, r3
 8006848:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <prvAddNewTaskToReadyList+0xc8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4313      	orrs	r3, r2
 800684e:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <prvAddNewTaskToReadyList+0xc8>)
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <prvAddNewTaskToReadyList+0xcc>)
 8006860:	441a      	add	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7ff fe09 	bl	8006480 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800686e:	f000 fd1d 	bl	80072ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <prvAddNewTaskToReadyList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800687a:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <prvAddNewTaskToReadyList+0xbc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d207      	bcs.n	8006898 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <prvAddNewTaskToReadyList+0xd0>)
 800688a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	2000083c 	.word	0x2000083c
 80068a4:	2000073c 	.word	0x2000073c
 80068a8:	20000848 	.word	0x20000848
 80068ac:	20000858 	.word	0x20000858
 80068b0:	20000844 	.word	0x20000844
 80068b4:	20000740 	.word	0x20000740
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068ce:	4b14      	ldr	r3, [pc, #80]	@ (8006920 <vTaskDelay+0x64>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <vTaskDelay+0x32>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068ee:	f000 f87d 	bl	80069ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb11 	bl	8006f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068fa:	f000 f885 	bl	8006a08 <xTaskResumeAll>
 80068fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <vTaskDelay+0x68>)
 8006908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000864 	.word	0x20000864
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	@ 0x28
 800692c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006936:	463a      	mov	r2, r7
 8006938:	1d39      	adds	r1, r7, #4
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa f9b4 	bl	8000cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	9202      	str	r2, [sp, #8]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2300      	movs	r3, #0
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	460a      	mov	r2, r1
 8006956:	491f      	ldr	r1, [pc, #124]	@ (80069d4 <vTaskStartScheduler+0xac>)
 8006958:	481f      	ldr	r0, [pc, #124]	@ (80069d8 <vTaskStartScheduler+0xb0>)
 800695a:	f7ff fe18 	bl	800658e <xTaskCreateStatic>
 800695e:	4603      	mov	r3, r0
 8006960:	4a1e      	ldr	r2, [pc, #120]	@ (80069dc <vTaskStartScheduler+0xb4>)
 8006962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006964:	4b1d      	ldr	r3, [pc, #116]	@ (80069dc <vTaskStartScheduler+0xb4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e001      	b.n	8006976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d116      	bne.n	80069aa <vTaskStartScheduler+0x82>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006990:	4b13      	ldr	r3, [pc, #76]	@ (80069e0 <vTaskStartScheduler+0xb8>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006998:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <vTaskStartScheduler+0xbc>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800699e:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <vTaskStartScheduler+0xc0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069a4:	f000 fbac 	bl	8007100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069a8:	e00f      	b.n	80069ca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d10b      	bne.n	80069ca <vTaskStartScheduler+0xa2>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60fb      	str	r3, [r7, #12]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <vTaskStartScheduler+0x9e>
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08008724 	.word	0x08008724
 80069d8:	08006d71 	.word	0x08006d71
 80069dc:	20000860 	.word	0x20000860
 80069e0:	2000085c 	.word	0x2000085c
 80069e4:	20000848 	.word	0x20000848
 80069e8:	20000840 	.word	0x20000840

080069ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069f0:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <vTaskSuspendAll+0x18>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a03      	ldr	r2, [pc, #12]	@ (8006a04 <vTaskSuspendAll+0x18>)
 80069f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000864 	.word	0x20000864

08006a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a16:	4b42      	ldr	r3, [pc, #264]	@ (8006b20 <xTaskResumeAll+0x118>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	603b      	str	r3, [r7, #0]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a36:	f000 fc07 	bl	8007248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a3a:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <xTaskResumeAll+0x118>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4a37      	ldr	r2, [pc, #220]	@ (8006b20 <xTaskResumeAll+0x118>)
 8006a42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a44:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <xTaskResumeAll+0x118>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d161      	bne.n	8006b10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <xTaskResumeAll+0x11c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05d      	beq.n	8006b10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a54:	e02e      	b.n	8006ab4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a56:	4b34      	ldr	r3, [pc, #208]	@ (8006b28 <xTaskResumeAll+0x120>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3318      	adds	r3, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd69 	bl	800653a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fd64 	bl	800653a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	2201      	movs	r2, #1
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b2c <xTaskResumeAll+0x124>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	4a2a      	ldr	r2, [pc, #168]	@ (8006b2c <xTaskResumeAll+0x124>)
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4a27      	ldr	r2, [pc, #156]	@ (8006b30 <xTaskResumeAll+0x128>)
 8006a92:	441a      	add	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7ff fcf0 	bl	8006480 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa4:	4b23      	ldr	r3, [pc, #140]	@ (8006b34 <xTaskResumeAll+0x12c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006aae:	4b22      	ldr	r3, [pc, #136]	@ (8006b38 <xTaskResumeAll+0x130>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b28 <xTaskResumeAll+0x120>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1cc      	bne.n	8006a56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ac2:	f000 fa0b 	bl	8006edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b3c <xTaskResumeAll+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f000 f837 	bl	8006b44 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006adc:	4b16      	ldr	r3, [pc, #88]	@ (8006b38 <xTaskResumeAll+0x130>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f1      	bne.n	8006ad2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006aee:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <xTaskResumeAll+0x134>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006af4:	4b10      	ldr	r3, [pc, #64]	@ (8006b38 <xTaskResumeAll+0x130>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <xTaskResumeAll+0x138>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b10:	f000 fbcc 	bl	80072ac <vPortExitCritical>

	return xAlreadyYielded;
 8006b14:	68bb      	ldr	r3, [r7, #8]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000864 	.word	0x20000864
 8006b24:	2000083c 	.word	0x2000083c
 8006b28:	200007fc 	.word	0x200007fc
 8006b2c:	20000844 	.word	0x20000844
 8006b30:	20000740 	.word	0x20000740
 8006b34:	2000073c 	.word	0x2000073c
 8006b38:	20000850 	.word	0x20000850
 8006b3c:	2000084c 	.word	0x2000084c
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006c8c <xTaskIncrementTick+0x148>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 808f 	bne.w	8006c76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b58:	4b4d      	ldr	r3, [pc, #308]	@ (8006c90 <xTaskIncrementTick+0x14c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b60:	4a4b      	ldr	r2, [pc, #300]	@ (8006c90 <xTaskIncrementTick+0x14c>)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d121      	bne.n	8006bb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b6c:	4b49      	ldr	r3, [pc, #292]	@ (8006c94 <xTaskIncrementTick+0x150>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	603b      	str	r3, [r7, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xTaskIncrementTick+0x46>
 8006b8e:	4b41      	ldr	r3, [pc, #260]	@ (8006c94 <xTaskIncrementTick+0x150>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	4b40      	ldr	r3, [pc, #256]	@ (8006c98 <xTaskIncrementTick+0x154>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3e      	ldr	r2, [pc, #248]	@ (8006c94 <xTaskIncrementTick+0x150>)
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c98 <xTaskIncrementTick+0x154>)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8006c9c <xTaskIncrementTick+0x158>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8006c9c <xTaskIncrementTick+0x158>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	f000 f996 	bl	8006edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca0 <xTaskIncrementTick+0x15c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d348      	bcc.n	8006c4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b36      	ldr	r3, [pc, #216]	@ (8006c94 <xTaskIncrementTick+0x150>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	4b36      	ldr	r3, [pc, #216]	@ (8006ca0 <xTaskIncrementTick+0x15c>)
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	601a      	str	r2, [r3, #0]
					break;
 8006bcc:	e03e      	b.n	8006c4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bce:	4b31      	ldr	r3, [pc, #196]	@ (8006c94 <xTaskIncrementTick+0x150>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d203      	bcs.n	8006bee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006be6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca0 <xTaskIncrementTick+0x15c>)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bec:	e02e      	b.n	8006c4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fca1 	bl	800653a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3318      	adds	r3, #24
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fc98 	bl	800653a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0e:	2201      	movs	r2, #1
 8006c10:	409a      	lsls	r2, r3
 8006c12:	4b24      	ldr	r3, [pc, #144]	@ (8006ca4 <xTaskIncrementTick+0x160>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <xTaskIncrementTick+0x160>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4a1f      	ldr	r2, [pc, #124]	@ (8006ca8 <xTaskIncrementTick+0x164>)
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7ff fc24 	bl	8006480 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <xTaskIncrementTick+0x168>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d3b9      	bcc.n	8006bba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c4a:	e7b6      	b.n	8006bba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c4c:	4b17      	ldr	r3, [pc, #92]	@ (8006cac <xTaskIncrementTick+0x168>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c52:	4915      	ldr	r1, [pc, #84]	@ (8006ca8 <xTaskIncrementTick+0x164>)
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d901      	bls.n	8006c68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c68:	4b11      	ldr	r3, [pc, #68]	@ (8006cb0 <xTaskIncrementTick+0x16c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c70:	2301      	movs	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e004      	b.n	8006c80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <xTaskIncrementTick+0x170>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb4 <xTaskIncrementTick+0x170>)
 8006c7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c80:	697b      	ldr	r3, [r7, #20]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000864 	.word	0x20000864
 8006c90:	20000840 	.word	0x20000840
 8006c94:	200007f4 	.word	0x200007f4
 8006c98:	200007f8 	.word	0x200007f8
 8006c9c:	20000854 	.word	0x20000854
 8006ca0:	2000085c 	.word	0x2000085c
 8006ca4:	20000844 	.word	0x20000844
 8006ca8:	20000740 	.word	0x20000740
 8006cac:	2000073c 	.word	0x2000073c
 8006cb0:	20000850 	.word	0x20000850
 8006cb4:	2000084c 	.word	0x2000084c

08006cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cbe:	4b27      	ldr	r3, [pc, #156]	@ (8006d5c <vTaskSwitchContext+0xa4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <vTaskSwitchContext+0xa8>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ccc:	e040      	b.n	8006d50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <vTaskSwitchContext+0xa8>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd4:	4b23      	ldr	r3, [pc, #140]	@ (8006d64 <vTaskSwitchContext+0xac>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
 8006ce4:	f1c3 031f 	rsb	r3, r3, #31
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	491f      	ldr	r1, [pc, #124]	@ (8006d68 <vTaskSwitchContext+0xb0>)
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <vTaskSwitchContext+0x5a>
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a11      	ldr	r2, [pc, #68]	@ (8006d68 <vTaskSwitchContext+0xb0>)
 8006d22:	4413      	add	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3308      	adds	r3, #8
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d104      	bne.n	8006d46 <vTaskSwitchContext+0x8e>
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4a07      	ldr	r2, [pc, #28]	@ (8006d6c <vTaskSwitchContext+0xb4>)
 8006d4e:	6013      	str	r3, [r2, #0]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000864 	.word	0x20000864
 8006d60:	20000850 	.word	0x20000850
 8006d64:	20000844 	.word	0x20000844
 8006d68:	20000740 	.word	0x20000740
 8006d6c:	2000073c 	.word	0x2000073c

08006d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d78:	f000 f852 	bl	8006e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d7c:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <prvIdleTask+0x28>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d9f9      	bls.n	8006d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <prvIdleTask+0x2c>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d94:	e7f0      	b.n	8006d78 <prvIdleTask+0x8>
 8006d96:	bf00      	nop
 8006d98:	20000740 	.word	0x20000740
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	e00c      	b.n	8006dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4a12      	ldr	r2, [pc, #72]	@ (8006e00 <prvInitialiseTaskLists+0x60>)
 8006db8:	4413      	add	r3, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff fb33 	bl	8006426 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d9ef      	bls.n	8006dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dcc:	480d      	ldr	r0, [pc, #52]	@ (8006e04 <prvInitialiseTaskLists+0x64>)
 8006dce:	f7ff fb2a 	bl	8006426 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dd2:	480d      	ldr	r0, [pc, #52]	@ (8006e08 <prvInitialiseTaskLists+0x68>)
 8006dd4:	f7ff fb27 	bl	8006426 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd8:	480c      	ldr	r0, [pc, #48]	@ (8006e0c <prvInitialiseTaskLists+0x6c>)
 8006dda:	f7ff fb24 	bl	8006426 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dde:	480c      	ldr	r0, [pc, #48]	@ (8006e10 <prvInitialiseTaskLists+0x70>)
 8006de0:	f7ff fb21 	bl	8006426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006de4:	480b      	ldr	r0, [pc, #44]	@ (8006e14 <prvInitialiseTaskLists+0x74>)
 8006de6:	f7ff fb1e 	bl	8006426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <prvInitialiseTaskLists+0x78>)
 8006dec:	4a05      	ldr	r2, [pc, #20]	@ (8006e04 <prvInitialiseTaskLists+0x64>)
 8006dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006df0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <prvInitialiseTaskLists+0x7c>)
 8006df2:	4a05      	ldr	r2, [pc, #20]	@ (8006e08 <prvInitialiseTaskLists+0x68>)
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000740 	.word	0x20000740
 8006e04:	200007cc 	.word	0x200007cc
 8006e08:	200007e0 	.word	0x200007e0
 8006e0c:	200007fc 	.word	0x200007fc
 8006e10:	20000810 	.word	0x20000810
 8006e14:	20000828 	.word	0x20000828
 8006e18:	200007f4 	.word	0x200007f4
 8006e1c:	200007f8 	.word	0x200007f8

08006e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e26:	e019      	b.n	8006e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e28:	f000 fa0e 	bl	8007248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2c:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <prvCheckTasksWaitingTermination+0x50>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff fb7e 	bl	800653a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <prvCheckTasksWaitingTermination+0x54>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	4a0b      	ldr	r2, [pc, #44]	@ (8006e74 <prvCheckTasksWaitingTermination+0x54>)
 8006e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e48:	4b0b      	ldr	r3, [pc, #44]	@ (8006e78 <prvCheckTasksWaitingTermination+0x58>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e78 <prvCheckTasksWaitingTermination+0x58>)
 8006e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e52:	f000 fa2b 	bl	80072ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f810 	bl	8006e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <prvCheckTasksWaitingTermination+0x58>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e1      	bne.n	8006e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000810 	.word	0x20000810
 8006e74:	2000083c 	.word	0x2000083c
 8006e78:	20000824 	.word	0x20000824

08006e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fb86 	bl	80075a4 <vPortFree>
				vPortFree( pxTCB );
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fb83 	bl	80075a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e9e:	e019      	b.n	8006ed4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d103      	bne.n	8006eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb7a 	bl	80075a4 <vPortFree>
	}
 8006eb0:	e010      	b.n	8006ed4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d00b      	beq.n	8006ed4 <prvDeleteTCB+0x58>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <prvDeleteTCB+0x54>
	}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f14 <prvResetNextTaskUnblockTime+0x38>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <prvResetNextTaskUnblockTime+0x3c>)
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef4:	e008      	b.n	8006f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef6:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <prvResetNextTaskUnblockTime+0x38>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a04      	ldr	r2, [pc, #16]	@ (8006f18 <prvResetNextTaskUnblockTime+0x3c>)
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	200007f4 	.word	0x200007f4
 8006f18:	2000085c 	.word	0x2000085c

08006f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f26:	4b29      	ldr	r3, [pc, #164]	@ (8006fcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f2c:	4b28      	ldr	r3, [pc, #160]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fb01 	bl	800653a <uxListRemove>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f3e:	4b24      	ldr	r3, [pc, #144]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	2201      	movs	r2, #1
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	4b21      	ldr	r3, [pc, #132]	@ (8006fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4013      	ands	r3, r2
 8006f52:	4a20      	ldr	r2, [pc, #128]	@ (8006fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d10a      	bne.n	8006f74 <prvAddCurrentTaskToDelayedList+0x58>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f64:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	481a      	ldr	r0, [pc, #104]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f6e:	f7ff fa87 	bl	8006480 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f72:	e026      	b.n	8006fc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f7c:	4b14      	ldr	r3, [pc, #80]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d209      	bcs.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8c:	4b13      	ldr	r3, [pc, #76]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7ff fa95 	bl	80064c8 <vListInsert>
}
 8006f9e:	e010      	b.n	8006fc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7ff fa8b 	bl	80064c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d202      	bcs.n	8006fc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fbc:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6013      	str	r3, [r2, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000840 	.word	0x20000840
 8006fd0:	2000073c 	.word	0x2000073c
 8006fd4:	20000844 	.word	0x20000844
 8006fd8:	20000828 	.word	0x20000828
 8006fdc:	200007f8 	.word	0x200007f8
 8006fe0:	200007f4 	.word	0x200007f4
 8006fe4:	2000085c 	.word	0x2000085c

08006fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3b04      	subs	r3, #4
 8007006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 0201 	bic.w	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b04      	subs	r3, #4
 8007016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007018:	4a0c      	ldr	r2, [pc, #48]	@ (800704c <pxPortInitialiseStack+0x64>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b14      	subs	r3, #20
 8007022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3b04      	subs	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f06f 0202 	mvn.w	r2, #2
 8007036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3b20      	subs	r3, #32
 800703c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800703e:	68fb      	ldr	r3, [r7, #12]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	08007051 	.word	0x08007051

08007050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800705a:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <prvTaskExitError+0x58>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007062:	d00b      	beq.n	800707c <prvTaskExitError+0x2c>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	60fb      	str	r3, [r7, #12]
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <prvTaskExitError+0x28>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	60bb      	str	r3, [r7, #8]
}
 800708e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007090:	bf00      	nop
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0fc      	beq.n	8007092 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200000f8 	.word	0x200000f8
 80070ac:	00000000 	.word	0x00000000

080070b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	@ (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop

080070d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070d8:	4808      	ldr	r0, [pc, #32]	@ (80070fc <prvPortStartFirstTask+0x24>)
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f380 8808 	msr	MSP, r0
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8814 	msr	CONTROL, r0
 80070ea:	b662      	cpsie	i
 80070ec:	b661      	cpsie	f
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	df00      	svc	0
 80070f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070fa:	bf00      	nop
 80070fc:	e000ed08 	.word	0xe000ed08

08007100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007106:	4b47      	ldr	r3, [pc, #284]	@ (8007224 <xPortStartScheduler+0x124>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a47      	ldr	r2, [pc, #284]	@ (8007228 <xPortStartScheduler+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10b      	bne.n	8007128 <xPortStartScheduler+0x28>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007128:	4b3e      	ldr	r3, [pc, #248]	@ (8007224 <xPortStartScheduler+0x124>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a3f      	ldr	r2, [pc, #252]	@ (800722c <xPortStartScheduler+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10b      	bne.n	800714a <xPortStartScheduler+0x4a>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	60fb      	str	r3, [r7, #12]
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800714a:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <xPortStartScheduler+0x130>)
 800714c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	22ff      	movs	r2, #255	@ 0xff
 800715a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <xPortStartScheduler+0x134>)
 8007170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007172:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <xPortStartScheduler+0x138>)
 8007174:	2207      	movs	r2, #7
 8007176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007178:	e009      	b.n	800718e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800717a:	4b2f      	ldr	r3, [pc, #188]	@ (8007238 <xPortStartScheduler+0x138>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <xPortStartScheduler+0x138>)
 8007182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d0ef      	beq.n	800717a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800719a:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <xPortStartScheduler+0x138>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1c3 0307 	rsb	r3, r3, #7
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d00b      	beq.n	80071be <xPortStartScheduler+0xbe>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60bb      	str	r3, [r7, #8]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071be:	4b1e      	ldr	r3, [pc, #120]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <xPortStartScheduler+0x138>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071d0:	4a19      	ldr	r2, [pc, #100]	@ (8007238 <xPortStartScheduler+0x138>)
 80071d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071dc:	4b17      	ldr	r3, [pc, #92]	@ (800723c <xPortStartScheduler+0x13c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <xPortStartScheduler+0x13c>)
 80071e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071e8:	4b14      	ldr	r3, [pc, #80]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a13      	ldr	r2, [pc, #76]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071f4:	f000 f8da 	bl	80073ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <xPortStartScheduler+0x140>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071fe:	f000 f8f9 	bl	80073f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <xPortStartScheduler+0x144>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0f      	ldr	r2, [pc, #60]	@ (8007244 <xPortStartScheduler+0x144>)
 8007208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800720c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800720e:	f7ff ff63 	bl	80070d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007212:	f7ff fd51 	bl	8006cb8 <vTaskSwitchContext>
	prvTaskExitError();
 8007216:	f7ff ff1b 	bl	8007050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed00 	.word	0xe000ed00
 8007228:	410fc271 	.word	0x410fc271
 800722c:	410fc270 	.word	0x410fc270
 8007230:	e000e400 	.word	0xe000e400
 8007234:	20000868 	.word	0x20000868
 8007238:	2000086c 	.word	0x2000086c
 800723c:	e000ed20 	.word	0xe000ed20
 8007240:	200000f8 	.word	0x200000f8
 8007244:	e000ef34 	.word	0xe000ef34

08007248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007262:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <vPortEnterCritical+0x5c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	4a0e      	ldr	r2, [pc, #56]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800726c:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d110      	bne.n	8007296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007274:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <vPortEnterCritical+0x60>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <vPortEnterCritical+0x4e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	603b      	str	r3, [r7, #0]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vPortEnterCritical+0x4a>
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	200000f8 	.word	0x200000f8
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072b2:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <vPortExitCritical+0x26>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	e7fd      	b.n	80072ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <vPortExitCritical+0x50>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <vPortExitCritical+0x50>)
 80072da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072dc:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <vPortExitCritical+0x50>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <vPortExitCritical+0x44>
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	200000f8 	.word	0x200000f8

08007300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007300:	f3ef 8009 	mrs	r0, PSP
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <pxCurrentTCBConst>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	f01e 0f10 	tst.w	lr, #16
 8007310:	bf08      	it	eq
 8007312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007324:	f380 8811 	msr	BASEPRI, r0
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f7ff fcc2 	bl	8006cb8 <vTaskSwitchContext>
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f380 8811 	msr	BASEPRI, r0
 800733c:	bc09      	pop	{r0, r3}
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	6808      	ldr	r0, [r1, #0]
 8007342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007346:	f01e 0f10 	tst.w	lr, #16
 800734a:	bf08      	it	eq
 800734c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007350:	f380 8809 	msr	PSP, r0
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w

08007360 <pxCurrentTCBConst>:
 8007360:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop

08007368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007382:	f7ff fbdf 	bl	8006b44 <xTaskIncrementTick>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800738c:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <SysTick_Handler+0x40>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073b6:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <vPortSetupTimerInterrupt+0x38>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <vPortSetupTimerInterrupt+0x3c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	@ (80073ec <vPortSetupTimerInterrupt+0x40>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <vPortSetupTimerInterrupt+0x44>)
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ce:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	e000e010 	.word	0xe000e010
 80073e4:	e000e018 	.word	0xe000e018
 80073e8:	20000008 	.word	0x20000008
 80073ec:	10624dd3 	.word	0x10624dd3
 80073f0:	e000e014 	.word	0xe000e014

080073f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007404 <vPortEnableVFP+0x10>
 80073f8:	6801      	ldr	r1, [r0, #0]
 80073fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073fe:	6001      	str	r1, [r0, #0]
 8007400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007402:	bf00      	nop
 8007404:	e000ed88 	.word	0xe000ed88

08007408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	@ 0x28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007414:	f7ff faea 	bl	80069ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007418:	4b5c      	ldr	r3, [pc, #368]	@ (800758c <pvPortMalloc+0x184>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007420:	f000 f924 	bl	800766c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007424:	4b5a      	ldr	r3, [pc, #360]	@ (8007590 <pvPortMalloc+0x188>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 8095 	bne.w	800755c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01e      	beq.n	8007476 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007438:	2208      	movs	r2, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d015      	beq.n	8007476 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f023 0307 	bic.w	r3, r3, #7
 8007450:	3308      	adds	r3, #8
 8007452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <pvPortMalloc+0x6e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d06f      	beq.n	800755c <pvPortMalloc+0x154>
 800747c:	4b45      	ldr	r3, [pc, #276]	@ (8007594 <pvPortMalloc+0x18c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	429a      	cmp	r2, r3
 8007484:	d86a      	bhi.n	800755c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007486:	4b44      	ldr	r3, [pc, #272]	@ (8007598 <pvPortMalloc+0x190>)
 8007488:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748a:	4b43      	ldr	r3, [pc, #268]	@ (8007598 <pvPortMalloc+0x190>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007490:	e004      	b.n	800749c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d903      	bls.n	80074ae <pvPortMalloc+0xa6>
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f1      	bne.n	8007492 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074ae:	4b37      	ldr	r3, [pc, #220]	@ (800758c <pvPortMalloc+0x184>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d051      	beq.n	800755c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2208      	movs	r2, #8
 80074be:	4413      	add	r3, r2
 80074c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	1ad2      	subs	r2, r2, r3
 80074d2:	2308      	movs	r3, #8
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d920      	bls.n	800751c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <pvPortMalloc+0xfc>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f90a 	bl	8007730 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1d      	ldr	r3, [pc, #116]	@ (8007594 <pvPortMalloc+0x18c>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a1b      	ldr	r2, [pc, #108]	@ (8007594 <pvPortMalloc+0x18c>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <pvPortMalloc+0x18c>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b1b      	ldr	r3, [pc, #108]	@ (800759c <pvPortMalloc+0x194>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b17      	ldr	r3, [pc, #92]	@ (8007594 <pvPortMalloc+0x18c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a18      	ldr	r2, [pc, #96]	@ (800759c <pvPortMalloc+0x194>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <pvPortMalloc+0x188>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007552:	4b13      	ldr	r3, [pc, #76]	@ (80075a0 <pvPortMalloc+0x198>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a11      	ldr	r2, [pc, #68]	@ (80075a0 <pvPortMalloc+0x198>)
 800755a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800755c:	f7ff fa54 	bl	8006a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <pvPortMalloc+0x17a>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	60fb      	str	r3, [r7, #12]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <pvPortMalloc+0x176>
	return pvReturn;
 8007582:	69fb      	ldr	r3, [r7, #28]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3728      	adds	r7, #40	@ 0x28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20001430 	.word	0x20001430
 8007590:	20001444 	.word	0x20001444
 8007594:	20001434 	.word	0x20001434
 8007598:	20001428 	.word	0x20001428
 800759c:	20001438 	.word	0x20001438
 80075a0:	2000143c 	.word	0x2000143c

080075a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d04f      	beq.n	8007656 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075b6:	2308      	movs	r3, #8
 80075b8:	425b      	negs	r3, r3
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4413      	add	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	4b25      	ldr	r3, [pc, #148]	@ (8007660 <vPortFree+0xbc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4013      	ands	r3, r2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <vPortFree+0x46>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60fb      	str	r3, [r7, #12]
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	e7fd      	b.n	80075e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <vPortFree+0x66>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60bb      	str	r3, [r7, #8]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	4b14      	ldr	r3, [pc, #80]	@ (8007660 <vPortFree+0xbc>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4013      	ands	r3, r2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01e      	beq.n	8007656 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11a      	bne.n	8007656 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <vPortFree+0xbc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007630:	f7ff f9dc 	bl	80069ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b0a      	ldr	r3, [pc, #40]	@ (8007664 <vPortFree+0xc0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4413      	add	r3, r2
 800763e:	4a09      	ldr	r2, [pc, #36]	@ (8007664 <vPortFree+0xc0>)
 8007640:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f000 f874 	bl	8007730 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007648:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <vPortFree+0xc4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a06      	ldr	r2, [pc, #24]	@ (8007668 <vPortFree+0xc4>)
 8007650:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007652:	f7ff f9d9 	bl	8006a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007656:	bf00      	nop
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20001444 	.word	0x20001444
 8007664:	20001434 	.word	0x20001434
 8007668:	20001440 	.word	0x20001440

0800766c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007672:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007676:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007678:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <prvHeapInit+0xac>)
 800767a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00c      	beq.n	80076a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3307      	adds	r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0307 	bic.w	r3, r3, #7
 8007692:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <prvHeapInit+0xac>)
 800769c:	4413      	add	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076a4:	4a1d      	ldr	r2, [pc, #116]	@ (800771c <prvHeapInit+0xb0>)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076aa:	4b1c      	ldr	r3, [pc, #112]	@ (800771c <prvHeapInit+0xb0>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0307 	bic.w	r3, r3, #7
 80076c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <prvHeapInit+0xb4>)
 80076cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076ce:	4b14      	ldr	r3, [pc, #80]	@ (8007720 <prvHeapInit+0xb4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076d6:	4b12      	ldr	r3, [pc, #72]	@ (8007720 <prvHeapInit+0xb4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <prvHeapInit+0xb4>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007724 <prvHeapInit+0xb8>)
 80076fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4a09      	ldr	r2, [pc, #36]	@ (8007728 <prvHeapInit+0xbc>)
 8007702:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007704:	4b09      	ldr	r3, [pc, #36]	@ (800772c <prvHeapInit+0xc0>)
 8007706:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800770a:	601a      	str	r2, [r3, #0]
}
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000870 	.word	0x20000870
 800771c:	20001428 	.word	0x20001428
 8007720:	20001430 	.word	0x20001430
 8007724:	20001438 	.word	0x20001438
 8007728:	20001434 	.word	0x20001434
 800772c:	20001444 	.word	0x20001444

08007730 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007738:	4b28      	ldr	r3, [pc, #160]	@ (80077dc <prvInsertBlockIntoFreeList+0xac>)
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e002      	b.n	8007744 <prvInsertBlockIntoFreeList+0x14>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d8f7      	bhi.n	800773e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d108      	bne.n	8007772 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d118      	bne.n	80077b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <prvInsertBlockIntoFreeList+0xb0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d00d      	beq.n	80077ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	441a      	add	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e008      	b.n	80077c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077ae:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <prvInsertBlockIntoFreeList+0xb0>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e003      	b.n	80077c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d002      	beq.n	80077ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20001428 	.word	0x20001428
 80077e0:	20001430 	.word	0x20001430

080077e4 <microDelay>:
extern float pully_dia;

// External TIM handle declared in main.c
extern TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80077ee:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <microDelay+0x30>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80077f6:	bf00      	nop
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <microDelay+0x30>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	429a      	cmp	r2, r3
 8007802:	d3f9      	bcc.n	80077f8 <microDelay+0x14>
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	2000040c 	.word	0x2000040c

08007818 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 8007822:	4a04      	ldr	r2, [pc, #16]	@ (8007834 <setAcceleration+0x1c>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6013      	str	r3, [r2, #0]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	2000144c 	.word	0x2000144c

08007838 <setRPM>:

void setRPM(volatile float rpm, int steps) {
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007842:	6038      	str	r0, [r7, #0]
    volatile float speed = (rpm * steps) / 60.0f;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800784e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007856:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8007874 <setRPM+0x3c>
 800785a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800785e:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a04      	ldr	r2, [pc, #16]	@ (8007878 <setRPM+0x40>)
 8007866:	6013      	str	r3, [r2, #0]

}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	42700000 	.word	0x42700000
 8007878:	20001450 	.word	0x20001450
 800787c:	00000000 	.word	0x00000000

08007880 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 8007884:	4b34      	ldr	r3, [pc, #208]	@ (8007958 <computeNewSpeed+0xd8>)
 8007886:	ed93 7a00 	vldr	s14, [r3]
 800788a:	4b34      	ldr	r3, [pc, #208]	@ (800795c <computeNewSpeed+0xdc>)
 800788c:	edd3 7a00 	vldr	s15, [r3]
 8007890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007898:	d51a      	bpl.n	80078d0 <computeNewSpeed+0x50>
        _speed += _acceleration;
 800789a:	4b31      	ldr	r3, [pc, #196]	@ (8007960 <computeNewSpeed+0xe0>)
 800789c:	ed93 7a00 	vldr	s14, [r3]
 80078a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007958 <computeNewSpeed+0xd8>)
 80078a2:	edd3 7a00 	vldr	s15, [r3]
 80078a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007958 <computeNewSpeed+0xd8>)
 80078ac:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 80078b0:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <computeNewSpeed+0xd8>)
 80078b2:	ed93 7a00 	vldr	s14, [r3]
 80078b6:	4b29      	ldr	r3, [pc, #164]	@ (800795c <computeNewSpeed+0xdc>)
 80078b8:	edd3 7a00 	vldr	s15, [r3]
 80078bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c4:	dd29      	ble.n	800791a <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 80078c6:	4b25      	ldr	r3, [pc, #148]	@ (800795c <computeNewSpeed+0xdc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a23      	ldr	r2, [pc, #140]	@ (8007958 <computeNewSpeed+0xd8>)
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e024      	b.n	800791a <computeNewSpeed+0x9a>
        }
    }
    else if (_speed > _maxSpeed) {
 80078d0:	4b21      	ldr	r3, [pc, #132]	@ (8007958 <computeNewSpeed+0xd8>)
 80078d2:	ed93 7a00 	vldr	s14, [r3]
 80078d6:	4b21      	ldr	r3, [pc, #132]	@ (800795c <computeNewSpeed+0xdc>)
 80078d8:	edd3 7a00 	vldr	s15, [r3]
 80078dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e4:	dd19      	ble.n	800791a <computeNewSpeed+0x9a>
        _speed -= _acceleration;
 80078e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007960 <computeNewSpeed+0xe0>)
 80078e8:	edd3 7a00 	vldr	s15, [r3]
 80078ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007958 <computeNewSpeed+0xd8>)
 80078ee:	ed93 7a00 	vldr	s14, [r3]
 80078f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078f6:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <computeNewSpeed+0xd8>)
 80078f8:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < _maxSpeed) {
 80078fc:	4b16      	ldr	r3, [pc, #88]	@ (8007958 <computeNewSpeed+0xd8>)
 80078fe:	ed93 7a00 	vldr	s14, [r3]
 8007902:	4b16      	ldr	r3, [pc, #88]	@ (800795c <computeNewSpeed+0xdc>)
 8007904:	edd3 7a00 	vldr	s15, [r3]
 8007908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	d503      	bpl.n	800791a <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 8007912:	4b12      	ldr	r3, [pc, #72]	@ (800795c <computeNewSpeed+0xdc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a10      	ldr	r2, [pc, #64]	@ (8007958 <computeNewSpeed+0xd8>)
 8007918:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 800791a:	4b0f      	ldr	r3, [pc, #60]	@ (8007958 <computeNewSpeed+0xd8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7f8 fdba 	bl	8000498 <__aeabi_f2d>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	a109      	add	r1, pc, #36	@ (adr r1, 8007950 <computeNewSpeed+0xd0>)
 800792a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792e:	f7f8 ff35 	bl	800079c <__aeabi_ddiv>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f7f9 f817 	bl	800096c <__aeabi_d2iz>
 800793e:	4603      	mov	r3, r0
 8007940:	4a08      	ldr	r2, [pc, #32]	@ (8007964 <computeNewSpeed+0xe4>)
 8007942:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 8007944:	4b07      	ldr	r3, [pc, #28]	@ (8007964 <computeNewSpeed+0xe4>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}
 800794c:	f3af 8000 	nop.w
 8007950:	00000000 	.word	0x00000000
 8007954:	412e8480 	.word	0x412e8480
 8007958:	20001448 	.word	0x20001448
 800795c:	20001450 	.word	0x20001450
 8007960:	2000144c 	.word	0x2000144c
 8007964:	20001454 	.word	0x20001454

08007968 <HomeMotorMove>:

        // Optional: Implement a way to exit the loop if necessary
    }
}

void HomeMotorMove(MotorConfig* motor, int steps_to_move) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]

    // Set direction based on the steps_to_move value
    if (steps_to_move > 0) {
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd08      	ble.n	800798a <HomeMotorMove+0x22>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	889b      	ldrh	r3, [r3, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	4619      	mov	r1, r3
 8007984:	f7fa fba0 	bl	80020c8 <HAL_GPIO_WritePin>
 8007988:	e00a      	b.n	80079a0 <HomeMotorMove+0x38>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	4619      	mov	r1, r3
 8007996:	f7fa fb97 	bl	80020c8 <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	425b      	negs	r3, r3
 800799e:	603b      	str	r3, [r7, #0]
    }

    for (int i = 0; i < steps_to_move; i++) {
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e046      	b.n	8007a34 <HomeMotorMove+0xcc>
        motorStopReg = (bool) Holding_Registers_Database[5];
 80079a6:	4b28      	ldr	r3, [pc, #160]	@ (8007a48 <HomeMotorMove+0xe0>)
 80079a8:	895b      	ldrh	r3, [r3, #10]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	4b25      	ldr	r3, [pc, #148]	@ (8007a4c <HomeMotorMove+0xe4>)
 80079b6:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 80079b8:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <HomeMotorMove+0xe0>)
 80079ba:	899b      	ldrh	r3, [r3, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4b22      	ldr	r3, [pc, #136]	@ (8007a50 <HomeMotorMove+0xe8>)
 80079c8:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 80079ca:	4b20      	ldr	r3, [pc, #128]	@ (8007a4c <HomeMotorMove+0xe4>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HomeMotorMove+0x72>
//            printf("Motor stopped by motorStopReg.\n");
            motorStop(motor);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f97e 	bl	8007cd4 <motorStop>
            break;  // Exit the loop on motor stop condition
 80079d8:	e031      	b.n	8007a3e <HomeMotorMove+0xd6>
        }

        if (emergencyMotorStopReg) {
 80079da:	4b1d      	ldr	r3, [pc, #116]	@ (8007a50 <HomeMotorMove+0xe8>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d006      	beq.n	80079f0 <HomeMotorMove+0x88>
            printf("Motor stopped by emergencyMotorStopReg.\n");
 80079e2:	481c      	ldr	r0, [pc, #112]	@ (8007a54 <HomeMotorMove+0xec>)
 80079e4:	f000 face 	bl	8007f84 <puts>
            emergencyMotorStop(motor);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f993 	bl	8007d14 <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 80079ee:	e026      	b.n	8007a3e <HomeMotorMove+0xd6>
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 80079f0:	f7ff ff46 	bl	8007880 <computeNewSpeed>
 80079f4:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6898      	ldr	r0, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	4619      	mov	r1, r3
 8007a02:	f7fa fb61 	bl	80020c8 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fee9 	bl	80077e4 <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6898      	ldr	r0, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	899b      	ldrh	r3, [r3, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f7fa fb53 	bl	80020c8 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fedb 	bl	80077e4 <microDelay>
    for (int i = 0; i < steps_to_move; i++) {
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	dbb4      	blt.n	80079a6 <HomeMotorMove+0x3e>
    }
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000014 	.word	0x20000014
 8007a4c:	20001458 	.word	0x20001458
 8007a50:	20001459 	.word	0x20001459
 8007a54:	0800872c 	.word	0x0800872c

08007a58 <motorMove>:




void motorMove(MotorConfig* motor, int steps_to_move) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	@ 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
    //int steps_to_move = initial_steps_to_move;
    int current_step = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
    bool direction_set = (steps_to_move > 0);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfcc      	ite	gt
 8007a6c:	2301      	movgt	r3, #1
 8007a6e:	2300      	movle	r3, #0
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Set initial direction
    if (direction_set) {
 8007a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <motorMove+0x36>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	889b      	ldrh	r3, [r3, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	4619      	mov	r1, r3
 8007a88:	f7fa fb1e 	bl	80020c8 <HAL_GPIO_WritePin>
 8007a8c:	e0fa      	b.n	8007c84 <motorMove+0x22c>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	889b      	ldrh	r3, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f7fa fb15 	bl	80020c8 <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	425b      	negs	r3, r3
 8007aa2:	603b      	str	r3, [r7, #0]
    }

    while (current_step < steps_to_move) {
 8007aa4:	e0ee      	b.n	8007c84 <motorMove+0x22c>
        motorStopReg = (bool) Holding_Registers_Database[5];
 8007aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8007c9c <motorMove+0x244>)
 8007aa8:	895b      	ldrh	r3, [r3, #10]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf14      	ite	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	2300      	moveq	r3, #0
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ca0 <motorMove+0x248>)
 8007ab6:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 8007ab8:	4b78      	ldr	r3, [pc, #480]	@ (8007c9c <motorMove+0x244>)
 8007aba:	899b      	ldrh	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	4b77      	ldr	r3, [pc, #476]	@ (8007ca4 <motorMove+0x24c>)
 8007ac8:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 8007aca:	4b75      	ldr	r3, [pc, #468]	@ (8007ca0 <motorMove+0x248>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <motorMove+0x82>
            // printf("Motor stopped by motorStopReg.\n");
            motorStop(motor);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8fe 	bl	8007cd4 <motorStop>
            break;  // Exit the loop on motor stop condition
 8007ad8:	e0d9      	b.n	8007c8e <motorMove+0x236>
        }

        if (emergencyMotorStopReg) {
 8007ada:	4b72      	ldr	r3, [pc, #456]	@ (8007ca4 <motorMove+0x24c>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <motorMove+0x98>
            printf("Motor stopped by emergencyMotorStopReg.\n");
 8007ae2:	4871      	ldr	r0, [pc, #452]	@ (8007ca8 <motorMove+0x250>)
 8007ae4:	f000 fa4e 	bl	8007f84 <puts>
            emergencyMotorStop(motor);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f913 	bl	8007d14 <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 8007aee:	e0ce      	b.n	8007c8e <motorMove+0x236>
        }

        //Reading RMP value  from RPM holding register
          velocity = Holding_Registers_Database[0];
 8007af0:	4b6a      	ldr	r3, [pc, #424]	@ (8007c9c <motorMove+0x244>)
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afc:	4b6b      	ldr	r3, [pc, #428]	@ (8007cac <motorMove+0x254>)
 8007afe:	edc3 7a00 	vstr	s15, [r3]
          rpm = (840*velocity)/(44 * (float)pully_dia);
 8007b02:	4b6a      	ldr	r3, [pc, #424]	@ (8007cac <motorMove+0x254>)
 8007b04:	edd3 7a00 	vldr	s15, [r3]
 8007b08:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8007cb0 <motorMove+0x258>
 8007b0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007b10:	4b68      	ldr	r3, [pc, #416]	@ (8007cb4 <motorMove+0x25c>)
 8007b12:	edd3 7a00 	vldr	s15, [r3]
 8007b16:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007cb8 <motorMove+0x260>
 8007b1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b26:	ee17 2a90 	vmov	r2, s15
 8007b2a:	4b64      	ldr	r3, [pc, #400]	@ (8007cbc <motorMove+0x264>)
 8007b2c:	601a      	str	r2, [r3, #0]
		  if(rpm != prev_rpm)
 8007b2e:	4b63      	ldr	r3, [pc, #396]	@ (8007cbc <motorMove+0x264>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b63      	ldr	r3, [pc, #396]	@ (8007cc0 <motorMove+0x268>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d01e      	beq.n	8007b78 <motorMove+0x120>
		  {
		  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8007b3a:	4b60      	ldr	r3, [pc, #384]	@ (8007cbc <motorMove+0x264>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b46:	4b5f      	ldr	r3, [pc, #380]	@ (8007cc4 <motorMove+0x26c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b50:	f7ff fe72 	bl	8007838 <setRPM>
		  setAcceleration(rpm/4);
 8007b54:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <motorMove+0x264>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da00      	bge.n	8007b5e <motorMove+0x106>
 8007b5c:	3303      	adds	r3, #3
 8007b5e:	109b      	asrs	r3, r3, #2
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b68:	eeb0 0a67 	vmov.f32	s0, s15
 8007b6c:	f7ff fe54 	bl	8007818 <setAcceleration>
		  prev_rpm = rpm;
 8007b70:	4b52      	ldr	r3, [pc, #328]	@ (8007cbc <motorMove+0x264>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a52      	ldr	r2, [pc, #328]	@ (8007cc0 <motorMove+0x268>)
 8007b76:	6013      	str	r3, [r2, #0]
		  }

        // Fetch the updated steps_to_move
        int input_distance = Holding_Registers_Database[4];
 8007b78:	4b48      	ldr	r3, [pc, #288]	@ (8007c9c <motorMove+0x244>)
 8007b7a:	891b      	ldrh	r3, [r3, #8]
 8007b7c:	61bb      	str	r3, [r7, #24]

        // Calculate target position with floating-point division
        float targetPosition = input_distance * (enc_val_in_1rev / mm_in_1rev); // in encoder value
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b88:	4b4f      	ldr	r3, [pc, #316]	@ (8007cc8 <motorMove+0x270>)
 8007b8a:	ed93 6a00 	vldr	s12, [r3]
 8007b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ccc <motorMove+0x274>)
 8007b90:	edd3 6a00 	vldr	s13, [r3]
 8007b94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9c:	edc7 7a05 	vstr	s15, [r7, #20]

        // Calculate position to move
        long int positionToMove = (long int)targetPosition - encoderValue; // in encoder value
 8007ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba8:	ee17 2a90 	vmov	r2, s15
 8007bac:	4b48      	ldr	r3, [pc, #288]	@ (8007cd0 <motorMove+0x278>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	613b      	str	r3, [r7, #16]

        // Calculate steps to move
        int new_steps_to_move = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bbe:	4b41      	ldr	r3, [pc, #260]	@ (8007cc4 <motorMove+0x26c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007bca:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc8 <motorMove+0x270>)
 8007bcc:	edd3 6a00 	vldr	s13, [r3]
 8007bd0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bdc:	ee17 3a90 	vmov	r3, s15
 8007be0:	61fb      	str	r3, [r7, #28]

        // Update direction if steps have changed
        if (new_steps_to_move != steps_to_move) {
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d02a      	beq.n	8007c40 <motorMove+0x1e8>
            if (new_steps_to_move > current_step)
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	dd12      	ble.n	8007c18 <motorMove+0x1c0>
            {
                if (!direction_set)
 8007bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bf6:	f083 0301 	eor.w	r3, r3, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01d      	beq.n	8007c3c <motorMove+0x1e4>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	889b      	ldrh	r3, [r3, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f7fa fa5c 	bl	80020c8 <HAL_GPIO_WritePin>
                    direction_set = true;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c16:	e011      	b.n	8007c3c <motorMove+0x1e4>
                }
            }
            else
            {
                if (direction_set)
 8007c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <motorMove+0x1de>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	889b      	ldrh	r3, [r3, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	f7fa fa4c 	bl	80020c8 <HAL_GPIO_WritePin>
                    direction_set = false;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                }
                new_steps_to_move = -new_steps_to_move;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	425b      	negs	r3, r3
 8007c3a:	61fb      	str	r3, [r7, #28]
            }
            steps_to_move = new_steps_to_move;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	603b      	str	r3, [r7, #0]
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 8007c40:	f7ff fe1e 	bl	8007880 <computeNewSpeed>
 8007c44:	60f8      	str	r0, [r7, #12]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6898      	ldr	r0, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	899b      	ldrh	r3, [r3, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7fa fa39 	bl	80020c8 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fdc1 	bl	80077e4 <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6898      	ldr	r0, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	899b      	ldrh	r3, [r3, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f7fa fa2b 	bl	80020c8 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fdb3 	bl	80077e4 <microDelay>

        current_step++;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	3301      	adds	r3, #1
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current_step < steps_to_move) {
 8007c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	f6ff af0c 	blt.w	8007aa6 <motorMove+0x4e>
    }

    // Resetting stop flags after movement
    Holding_Registers_Database[5] = 0;
 8007c8e:	4b03      	ldr	r3, [pc, #12]	@ (8007c9c <motorMove+0x244>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	815a      	strh	r2, [r3, #10]
//    Holding_Registers_Database[6] = 0;
}
 8007c94:	bf00      	nop
 8007c96:	3728      	adds	r7, #40	@ 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000014 	.word	0x20000014
 8007ca0:	20001458 	.word	0x20001458
 8007ca4:	20001459 	.word	0x20001459
 8007ca8:	0800872c 	.word	0x0800872c
 8007cac:	200003d8 	.word	0x200003d8
 8007cb0:	44520000 	.word	0x44520000
 8007cb4:	200003e4 	.word	0x200003e4
 8007cb8:	42300000 	.word	0x42300000
 8007cbc:	200003dc 	.word	0x200003dc
 8007cc0:	200003e0 	.word	0x200003e0
 8007cc4:	200003f0 	.word	0x200003f0
 8007cc8:	20000000 	.word	0x20000000
 8007ccc:	20000004 	.word	0x20000004
 8007cd0:	200003cc 	.word	0x200003cc

08007cd4 <motorStop>:



void motorStop(MotorConfig* motor) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6898      	ldr	r0, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	899b      	ldrh	r3, [r3, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f7fa f9ee 	bl	80020c8 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	889b      	ldrh	r3, [r3, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f7fa f9e6 	bl	80020c8 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 8007cfc:	4b03      	ldr	r3, [pc, #12]	@ (8007d0c <motorStop+0x38>)
 8007cfe:	885a      	ldrh	r2, [r3, #2]
 8007d00:	4b03      	ldr	r3, [pc, #12]	@ (8007d10 <motorStop+0x3c>)
 8007d02:	811a      	strh	r2, [r3, #8]
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20000078 	.word	0x20000078
 8007d10:	20000014 	.word	0x20000014

08007d14 <emergencyMotorStop>:



void emergencyMotorStop(MotorConfig* motor) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]


    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6898      	ldr	r0, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	899b      	ldrh	r3, [r3, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	4619      	mov	r1, r3
 8007d28:	f7fa f9ce 	bl	80020c8 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	889b      	ldrh	r3, [r3, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	4619      	mov	r1, r3
 8007d38:	f7fa f9c6 	bl	80020c8 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 8007d3c:	4b03      	ldr	r3, [pc, #12]	@ (8007d4c <emergencyMotorStop+0x38>)
 8007d3e:	885a      	ldrh	r2, [r3, #2]
 8007d40:	4b03      	ldr	r3, [pc, #12]	@ (8007d50 <emergencyMotorStop+0x3c>)
 8007d42:	811a      	strh	r2, [r3, #8]

}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000078 	.word	0x20000078
 8007d50:	20000014 	.word	0x20000014

08007d54 <std>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	8181      	strh	r1, [r0, #12]
 8007d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d68:	81c2      	strh	r2, [r0, #14]
 8007d6a:	6183      	str	r3, [r0, #24]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	2208      	movs	r2, #8
 8007d70:	305c      	adds	r0, #92	@ 0x5c
 8007d72:	f000 f9e7 	bl	8008144 <memset>
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <std+0x58>)
 8007d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <std+0x5c>)
 8007d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <std+0x60>)
 8007d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <std+0x64>)
 8007d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d86:	4b0d      	ldr	r3, [pc, #52]	@ (8007dbc <std+0x68>)
 8007d88:	6224      	str	r4, [r4, #32]
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d006      	beq.n	8007d9c <std+0x48>
 8007d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d92:	4294      	cmp	r4, r2
 8007d94:	d002      	beq.n	8007d9c <std+0x48>
 8007d96:	33d0      	adds	r3, #208	@ 0xd0
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d105      	bne.n	8007da8 <std+0x54>
 8007d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f000 ba46 	b.w	8008234 <__retarget_lock_init_recursive>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	08007f95 	.word	0x08007f95
 8007db0:	08007fb7 	.word	0x08007fb7
 8007db4:	08007fef 	.word	0x08007fef
 8007db8:	08008013 	.word	0x08008013
 8007dbc:	2000145c 	.word	0x2000145c

08007dc0 <stdio_exit_handler>:
 8007dc0:	4a02      	ldr	r2, [pc, #8]	@ (8007dcc <stdio_exit_handler+0xc>)
 8007dc2:	4903      	ldr	r1, [pc, #12]	@ (8007dd0 <stdio_exit_handler+0x10>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	@ (8007dd4 <stdio_exit_handler+0x14>)
 8007dc6:	f000 b869 	b.w	8007e9c <_fwalk_sglue>
 8007dca:	bf00      	nop
 8007dcc:	200000fc 	.word	0x200000fc
 8007dd0:	08008535 	.word	0x08008535
 8007dd4:	2000010c 	.word	0x2000010c

08007dd8 <cleanup_stdio>:
 8007dd8:	6841      	ldr	r1, [r0, #4]
 8007dda:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <cleanup_stdio+0x34>)
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	d001      	beq.n	8007de8 <cleanup_stdio+0x10>
 8007de4:	f000 fba6 	bl	8008534 <_fflush_r>
 8007de8:	68a1      	ldr	r1, [r4, #8]
 8007dea:	4b09      	ldr	r3, [pc, #36]	@ (8007e10 <cleanup_stdio+0x38>)
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <cleanup_stdio+0x1e>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fb9f 	bl	8008534 <_fflush_r>
 8007df6:	68e1      	ldr	r1, [r4, #12]
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <cleanup_stdio+0x3c>)
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d004      	beq.n	8007e08 <cleanup_stdio+0x30>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	f000 bb96 	b.w	8008534 <_fflush_r>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000145c 	.word	0x2000145c
 8007e10:	200014c4 	.word	0x200014c4
 8007e14:	2000152c 	.word	0x2000152c

08007e18 <global_stdio_init.part.0>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <global_stdio_init.part.0+0x30>)
 8007e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e4c <global_stdio_init.part.0+0x34>)
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e50 <global_stdio_init.part.0+0x38>)
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	2200      	movs	r2, #0
 8007e26:	2104      	movs	r1, #4
 8007e28:	f7ff ff94 	bl	8007d54 <std>
 8007e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e30:	2201      	movs	r2, #1
 8007e32:	2109      	movs	r1, #9
 8007e34:	f7ff ff8e 	bl	8007d54 <std>
 8007e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e42:	2112      	movs	r1, #18
 8007e44:	f7ff bf86 	b.w	8007d54 <std>
 8007e48:	20001594 	.word	0x20001594
 8007e4c:	2000145c 	.word	0x2000145c
 8007e50:	08007dc1 	.word	0x08007dc1

08007e54 <__sfp_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	@ (8007e5c <__sfp_lock_acquire+0x8>)
 8007e56:	f000 b9ee 	b.w	8008236 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	2000159d 	.word	0x2000159d

08007e60 <__sfp_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__sfp_lock_release+0x8>)
 8007e62:	f000 b9e9 	b.w	8008238 <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	2000159d 	.word	0x2000159d

08007e6c <__sinit>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	f7ff fff0 	bl	8007e54 <__sfp_lock_acquire>
 8007e74:	6a23      	ldr	r3, [r4, #32]
 8007e76:	b11b      	cbz	r3, 8007e80 <__sinit+0x14>
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f7ff bff0 	b.w	8007e60 <__sfp_lock_release>
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <__sinit+0x28>)
 8007e82:	6223      	str	r3, [r4, #32]
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <__sinit+0x2c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f5      	bne.n	8007e78 <__sinit+0xc>
 8007e8c:	f7ff ffc4 	bl	8007e18 <global_stdio_init.part.0>
 8007e90:	e7f2      	b.n	8007e78 <__sinit+0xc>
 8007e92:	bf00      	nop
 8007e94:	08007dd9 	.word	0x08007dd9
 8007e98:	20001594 	.word	0x20001594

08007e9c <_fwalk_sglue>:
 8007e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	4688      	mov	r8, r1
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eac:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb0:	d505      	bpl.n	8007ebe <_fwalk_sglue+0x22>
 8007eb2:	6824      	ldr	r4, [r4, #0]
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	d1f7      	bne.n	8007ea8 <_fwalk_sglue+0xc>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	89ab      	ldrh	r3, [r5, #12]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d907      	bls.n	8007ed4 <_fwalk_sglue+0x38>
 8007ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	d003      	beq.n	8007ed4 <_fwalk_sglue+0x38>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	4306      	orrs	r6, r0
 8007ed4:	3568      	adds	r5, #104	@ 0x68
 8007ed6:	e7e9      	b.n	8007eac <_fwalk_sglue+0x10>

08007ed8 <_puts_r>:
 8007ed8:	6a03      	ldr	r3, [r0, #32]
 8007eda:	b570      	push	{r4, r5, r6, lr}
 8007edc:	6884      	ldr	r4, [r0, #8]
 8007ede:	4605      	mov	r5, r0
 8007ee0:	460e      	mov	r6, r1
 8007ee2:	b90b      	cbnz	r3, 8007ee8 <_puts_r+0x10>
 8007ee4:	f7ff ffc2 	bl	8007e6c <__sinit>
 8007ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eea:	07db      	lsls	r3, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_puts_r+0x22>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	0598      	lsls	r0, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_puts_r+0x22>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f000 f99e 	bl	8008236 <__retarget_lock_acquire_recursive>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	0719      	lsls	r1, r3, #28
 8007efe:	d502      	bpl.n	8007f06 <_puts_r+0x2e>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d135      	bne.n	8007f72 <_puts_r+0x9a>
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 f8c5 	bl	8008098 <__swsetup_r>
 8007f0e:	b380      	cbz	r0, 8007f72 <_puts_r+0x9a>
 8007f10:	f04f 35ff 	mov.w	r5, #4294967295
 8007f14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d405      	bmi.n	8007f26 <_puts_r+0x4e>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_puts_r+0x4e>
 8007f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f22:	f000 f989 	bl	8008238 <__retarget_lock_release_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da04      	bge.n	8007f38 <_puts_r+0x60>
 8007f2e:	69a2      	ldr	r2, [r4, #24]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	dc17      	bgt.n	8007f64 <_puts_r+0x8c>
 8007f34:	290a      	cmp	r1, #10
 8007f36:	d015      	beq.n	8007f64 <_puts_r+0x8c>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	7019      	strb	r1, [r3, #0]
 8007f40:	68a3      	ldr	r3, [r4, #8]
 8007f42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f46:	3b01      	subs	r3, #1
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	d1ed      	bne.n	8007f2a <_puts_r+0x52>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da11      	bge.n	8007f76 <_puts_r+0x9e>
 8007f52:	4622      	mov	r2, r4
 8007f54:	210a      	movs	r1, #10
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f85f 	bl	800801a <__swbuf_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d0d7      	beq.n	8007f10 <_puts_r+0x38>
 8007f60:	250a      	movs	r5, #10
 8007f62:	e7d7      	b.n	8007f14 <_puts_r+0x3c>
 8007f64:	4622      	mov	r2, r4
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f857 	bl	800801a <__swbuf_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d1e7      	bne.n	8007f40 <_puts_r+0x68>
 8007f70:	e7ce      	b.n	8007f10 <_puts_r+0x38>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	e7e4      	b.n	8007f40 <_puts_r+0x68>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	6022      	str	r2, [r4, #0]
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e7ee      	b.n	8007f60 <_puts_r+0x88>
	...

08007f84 <puts>:
 8007f84:	4b02      	ldr	r3, [pc, #8]	@ (8007f90 <puts+0xc>)
 8007f86:	4601      	mov	r1, r0
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	f7ff bfa5 	b.w	8007ed8 <_puts_r>
 8007f8e:	bf00      	nop
 8007f90:	20000108 	.word	0x20000108

08007f94 <__sread>:
 8007f94:	b510      	push	{r4, lr}
 8007f96:	460c      	mov	r4, r1
 8007f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9c:	f000 f8fc 	bl	8008198 <_read_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	bfab      	itete	ge
 8007fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fa8:	181b      	addge	r3, r3, r0
 8007faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fae:	bfac      	ite	ge
 8007fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fb2:	81a3      	strhlt	r3, [r4, #12]
 8007fb4:	bd10      	pop	{r4, pc}

08007fb6 <__swrite>:
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	461f      	mov	r7, r3
 8007fbc:	898b      	ldrh	r3, [r1, #12]
 8007fbe:	05db      	lsls	r3, r3, #23
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4616      	mov	r6, r2
 8007fc6:	d505      	bpl.n	8007fd4 <__swrite+0x1e>
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	2302      	movs	r3, #2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f000 f8d0 	bl	8008174 <_lseek_r>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fea:	f000 b8e7 	b.w	80081bc <_write_r>

08007fee <__sseek>:
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff6:	f000 f8bd 	bl	8008174 <_lseek_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	bf15      	itete	ne
 8008000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800800a:	81a3      	strheq	r3, [r4, #12]
 800800c:	bf18      	it	ne
 800800e:	81a3      	strhne	r3, [r4, #12]
 8008010:	bd10      	pop	{r4, pc}

08008012 <__sclose>:
 8008012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008016:	f000 b89d 	b.w	8008154 <_close_r>

0800801a <__swbuf_r>:
 800801a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801c:	460e      	mov	r6, r1
 800801e:	4614      	mov	r4, r2
 8008020:	4605      	mov	r5, r0
 8008022:	b118      	cbz	r0, 800802c <__swbuf_r+0x12>
 8008024:	6a03      	ldr	r3, [r0, #32]
 8008026:	b90b      	cbnz	r3, 800802c <__swbuf_r+0x12>
 8008028:	f7ff ff20 	bl	8007e6c <__sinit>
 800802c:	69a3      	ldr	r3, [r4, #24]
 800802e:	60a3      	str	r3, [r4, #8]
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	071a      	lsls	r2, r3, #28
 8008034:	d501      	bpl.n	800803a <__swbuf_r+0x20>
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b943      	cbnz	r3, 800804c <__swbuf_r+0x32>
 800803a:	4621      	mov	r1, r4
 800803c:	4628      	mov	r0, r5
 800803e:	f000 f82b 	bl	8008098 <__swsetup_r>
 8008042:	b118      	cbz	r0, 800804c <__swbuf_r+0x32>
 8008044:	f04f 37ff 	mov.w	r7, #4294967295
 8008048:	4638      	mov	r0, r7
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	6922      	ldr	r2, [r4, #16]
 8008050:	1a98      	subs	r0, r3, r2
 8008052:	6963      	ldr	r3, [r4, #20]
 8008054:	b2f6      	uxtb	r6, r6
 8008056:	4283      	cmp	r3, r0
 8008058:	4637      	mov	r7, r6
 800805a:	dc05      	bgt.n	8008068 <__swbuf_r+0x4e>
 800805c:	4621      	mov	r1, r4
 800805e:	4628      	mov	r0, r5
 8008060:	f000 fa68 	bl	8008534 <_fflush_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	d1ed      	bne.n	8008044 <__swbuf_r+0x2a>
 8008068:	68a3      	ldr	r3, [r4, #8]
 800806a:	3b01      	subs	r3, #1
 800806c:	60a3      	str	r3, [r4, #8]
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	6022      	str	r2, [r4, #0]
 8008074:	701e      	strb	r6, [r3, #0]
 8008076:	6962      	ldr	r2, [r4, #20]
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	d004      	beq.n	8008088 <__swbuf_r+0x6e>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	07db      	lsls	r3, r3, #31
 8008082:	d5e1      	bpl.n	8008048 <__swbuf_r+0x2e>
 8008084:	2e0a      	cmp	r6, #10
 8008086:	d1df      	bne.n	8008048 <__swbuf_r+0x2e>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 fa52 	bl	8008534 <_fflush_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0d9      	beq.n	8008048 <__swbuf_r+0x2e>
 8008094:	e7d6      	b.n	8008044 <__swbuf_r+0x2a>
	...

08008098 <__swsetup_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4b29      	ldr	r3, [pc, #164]	@ (8008140 <__swsetup_r+0xa8>)
 800809c:	4605      	mov	r5, r0
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	460c      	mov	r4, r1
 80080a2:	b118      	cbz	r0, 80080ac <__swsetup_r+0x14>
 80080a4:	6a03      	ldr	r3, [r0, #32]
 80080a6:	b90b      	cbnz	r3, 80080ac <__swsetup_r+0x14>
 80080a8:	f7ff fee0 	bl	8007e6c <__sinit>
 80080ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b0:	0719      	lsls	r1, r3, #28
 80080b2:	d422      	bmi.n	80080fa <__swsetup_r+0x62>
 80080b4:	06da      	lsls	r2, r3, #27
 80080b6:	d407      	bmi.n	80080c8 <__swsetup_r+0x30>
 80080b8:	2209      	movs	r2, #9
 80080ba:	602a      	str	r2, [r5, #0]
 80080bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	e033      	b.n	8008130 <__swsetup_r+0x98>
 80080c8:	0758      	lsls	r0, r3, #29
 80080ca:	d512      	bpl.n	80080f2 <__swsetup_r+0x5a>
 80080cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ce:	b141      	cbz	r1, 80080e2 <__swsetup_r+0x4a>
 80080d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080d4:	4299      	cmp	r1, r3
 80080d6:	d002      	beq.n	80080de <__swsetup_r+0x46>
 80080d8:	4628      	mov	r0, r5
 80080da:	f000 f8af 	bl	800823c <_free_r>
 80080de:	2300      	movs	r3, #0
 80080e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	2300      	movs	r3, #0
 80080ec:	6063      	str	r3, [r4, #4]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0308 	orr.w	r3, r3, #8
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	b94b      	cbnz	r3, 8008112 <__swsetup_r+0x7a>
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008108:	d003      	beq.n	8008112 <__swsetup_r+0x7a>
 800810a:	4621      	mov	r1, r4
 800810c:	4628      	mov	r0, r5
 800810e:	f000 fa5f 	bl	80085d0 <__smakebuf_r>
 8008112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008116:	f013 0201 	ands.w	r2, r3, #1
 800811a:	d00a      	beq.n	8008132 <__swsetup_r+0x9a>
 800811c:	2200      	movs	r2, #0
 800811e:	60a2      	str	r2, [r4, #8]
 8008120:	6962      	ldr	r2, [r4, #20]
 8008122:	4252      	negs	r2, r2
 8008124:	61a2      	str	r2, [r4, #24]
 8008126:	6922      	ldr	r2, [r4, #16]
 8008128:	b942      	cbnz	r2, 800813c <__swsetup_r+0xa4>
 800812a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800812e:	d1c5      	bne.n	80080bc <__swsetup_r+0x24>
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	0799      	lsls	r1, r3, #30
 8008134:	bf58      	it	pl
 8008136:	6962      	ldrpl	r2, [r4, #20]
 8008138:	60a2      	str	r2, [r4, #8]
 800813a:	e7f4      	b.n	8008126 <__swsetup_r+0x8e>
 800813c:	2000      	movs	r0, #0
 800813e:	e7f7      	b.n	8008130 <__swsetup_r+0x98>
 8008140:	20000108 	.word	0x20000108

08008144 <memset>:
 8008144:	4402      	add	r2, r0
 8008146:	4603      	mov	r3, r0
 8008148:	4293      	cmp	r3, r2
 800814a:	d100      	bne.n	800814e <memset+0xa>
 800814c:	4770      	bx	lr
 800814e:	f803 1b01 	strb.w	r1, [r3], #1
 8008152:	e7f9      	b.n	8008148 <memset+0x4>

08008154 <_close_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	@ (8008170 <_close_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f9 fb83 	bl	800186a <_close>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_close_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_close_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20001598 	.word	0x20001598

08008174 <_lseek_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	@ (8008194 <_lseek_r+0x20>)
 8008178:	4604      	mov	r4, r0
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	2200      	movs	r2, #0
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7f9 fb98 	bl	80018b8 <_lseek>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_lseek_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_lseek_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20001598 	.word	0x20001598

08008198 <_read_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	@ (80081b8 <_read_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 fb42 	bl	8001830 <_read>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_read_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_read_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20001598 	.word	0x20001598

080081bc <_write_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	@ (80081dc <_write_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f8 fe2e 	bl	8000e2c <_write>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_write_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_write_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20001598 	.word	0x20001598

080081e0 <__errno>:
 80081e0:	4b01      	ldr	r3, [pc, #4]	@ (80081e8 <__errno+0x8>)
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000108 	.word	0x20000108

080081ec <__libc_init_array>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008224 <__libc_init_array+0x38>)
 80081f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008228 <__libc_init_array+0x3c>)
 80081f2:	1b64      	subs	r4, r4, r5
 80081f4:	10a4      	asrs	r4, r4, #2
 80081f6:	2600      	movs	r6, #0
 80081f8:	42a6      	cmp	r6, r4
 80081fa:	d109      	bne.n	8008210 <__libc_init_array+0x24>
 80081fc:	4d0b      	ldr	r5, [pc, #44]	@ (800822c <__libc_init_array+0x40>)
 80081fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008230 <__libc_init_array+0x44>)
 8008200:	f000 fa54 	bl	80086ac <_init>
 8008204:	1b64      	subs	r4, r4, r5
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	2600      	movs	r6, #0
 800820a:	42a6      	cmp	r6, r4
 800820c:	d105      	bne.n	800821a <__libc_init_array+0x2e>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	f855 3b04 	ldr.w	r3, [r5], #4
 8008214:	4798      	blx	r3
 8008216:	3601      	adds	r6, #1
 8008218:	e7ee      	b.n	80081f8 <__libc_init_array+0xc>
 800821a:	f855 3b04 	ldr.w	r3, [r5], #4
 800821e:	4798      	blx	r3
 8008220:	3601      	adds	r6, #1
 8008222:	e7f2      	b.n	800820a <__libc_init_array+0x1e>
 8008224:	080087a4 	.word	0x080087a4
 8008228:	080087a4 	.word	0x080087a4
 800822c:	080087a4 	.word	0x080087a4
 8008230:	080087a8 	.word	0x080087a8

08008234 <__retarget_lock_init_recursive>:
 8008234:	4770      	bx	lr

08008236 <__retarget_lock_acquire_recursive>:
 8008236:	4770      	bx	lr

08008238 <__retarget_lock_release_recursive>:
 8008238:	4770      	bx	lr
	...

0800823c <_free_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4605      	mov	r5, r0
 8008240:	2900      	cmp	r1, #0
 8008242:	d041      	beq.n	80082c8 <_free_r+0x8c>
 8008244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008248:	1f0c      	subs	r4, r1, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfb8      	it	lt
 800824e:	18e4      	addlt	r4, r4, r3
 8008250:	f000 f8e0 	bl	8008414 <__malloc_lock>
 8008254:	4a1d      	ldr	r2, [pc, #116]	@ (80082cc <_free_r+0x90>)
 8008256:	6813      	ldr	r3, [r2, #0]
 8008258:	b933      	cbnz	r3, 8008268 <_free_r+0x2c>
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	6014      	str	r4, [r2, #0]
 800825e:	4628      	mov	r0, r5
 8008260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008264:	f000 b8dc 	b.w	8008420 <__malloc_unlock>
 8008268:	42a3      	cmp	r3, r4
 800826a:	d908      	bls.n	800827e <_free_r+0x42>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	1821      	adds	r1, r4, r0
 8008270:	428b      	cmp	r3, r1
 8008272:	bf01      	itttt	eq
 8008274:	6819      	ldreq	r1, [r3, #0]
 8008276:	685b      	ldreq	r3, [r3, #4]
 8008278:	1809      	addeq	r1, r1, r0
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	e7ed      	b.n	800825a <_free_r+0x1e>
 800827e:	461a      	mov	r2, r3
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b10b      	cbz	r3, 8008288 <_free_r+0x4c>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d9fa      	bls.n	800827e <_free_r+0x42>
 8008288:	6811      	ldr	r1, [r2, #0]
 800828a:	1850      	adds	r0, r2, r1
 800828c:	42a0      	cmp	r0, r4
 800828e:	d10b      	bne.n	80082a8 <_free_r+0x6c>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	4401      	add	r1, r0
 8008294:	1850      	adds	r0, r2, r1
 8008296:	4283      	cmp	r3, r0
 8008298:	6011      	str	r1, [r2, #0]
 800829a:	d1e0      	bne.n	800825e <_free_r+0x22>
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	6053      	str	r3, [r2, #4]
 80082a2:	4408      	add	r0, r1
 80082a4:	6010      	str	r0, [r2, #0]
 80082a6:	e7da      	b.n	800825e <_free_r+0x22>
 80082a8:	d902      	bls.n	80082b0 <_free_r+0x74>
 80082aa:	230c      	movs	r3, #12
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	e7d6      	b.n	800825e <_free_r+0x22>
 80082b0:	6820      	ldr	r0, [r4, #0]
 80082b2:	1821      	adds	r1, r4, r0
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf04      	itt	eq
 80082b8:	6819      	ldreq	r1, [r3, #0]
 80082ba:	685b      	ldreq	r3, [r3, #4]
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	bf04      	itt	eq
 80082c0:	1809      	addeq	r1, r1, r0
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	6054      	str	r4, [r2, #4]
 80082c6:	e7ca      	b.n	800825e <_free_r+0x22>
 80082c8:	bd38      	pop	{r3, r4, r5, pc}
 80082ca:	bf00      	nop
 80082cc:	200015a4 	.word	0x200015a4

080082d0 <sbrk_aligned>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008310 <sbrk_aligned+0x40>)
 80082d4:	460c      	mov	r4, r1
 80082d6:	6831      	ldr	r1, [r6, #0]
 80082d8:	4605      	mov	r5, r0
 80082da:	b911      	cbnz	r1, 80082e2 <sbrk_aligned+0x12>
 80082dc:	f000 f9d6 	bl	800868c <_sbrk_r>
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f9d1 	bl	800868c <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d103      	bne.n	80082f6 <sbrk_aligned+0x26>
 80082ee:	f04f 34ff 	mov.w	r4, #4294967295
 80082f2:	4620      	mov	r0, r4
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	1cc4      	adds	r4, r0, #3
 80082f8:	f024 0403 	bic.w	r4, r4, #3
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	d0f8      	beq.n	80082f2 <sbrk_aligned+0x22>
 8008300:	1a21      	subs	r1, r4, r0
 8008302:	4628      	mov	r0, r5
 8008304:	f000 f9c2 	bl	800868c <_sbrk_r>
 8008308:	3001      	adds	r0, #1
 800830a:	d1f2      	bne.n	80082f2 <sbrk_aligned+0x22>
 800830c:	e7ef      	b.n	80082ee <sbrk_aligned+0x1e>
 800830e:	bf00      	nop
 8008310:	200015a0 	.word	0x200015a0

08008314 <_malloc_r>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	1ccd      	adds	r5, r1, #3
 800831a:	f025 0503 	bic.w	r5, r5, #3
 800831e:	3508      	adds	r5, #8
 8008320:	2d0c      	cmp	r5, #12
 8008322:	bf38      	it	cc
 8008324:	250c      	movcc	r5, #12
 8008326:	2d00      	cmp	r5, #0
 8008328:	4606      	mov	r6, r0
 800832a:	db01      	blt.n	8008330 <_malloc_r+0x1c>
 800832c:	42a9      	cmp	r1, r5
 800832e:	d904      	bls.n	800833a <_malloc_r+0x26>
 8008330:	230c      	movs	r3, #12
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	2000      	movs	r0, #0
 8008336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008410 <_malloc_r+0xfc>
 800833e:	f000 f869 	bl	8008414 <__malloc_lock>
 8008342:	f8d8 3000 	ldr.w	r3, [r8]
 8008346:	461c      	mov	r4, r3
 8008348:	bb44      	cbnz	r4, 800839c <_malloc_r+0x88>
 800834a:	4629      	mov	r1, r5
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ffbf 	bl	80082d0 <sbrk_aligned>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	4604      	mov	r4, r0
 8008356:	d158      	bne.n	800840a <_malloc_r+0xf6>
 8008358:	f8d8 4000 	ldr.w	r4, [r8]
 800835c:	4627      	mov	r7, r4
 800835e:	2f00      	cmp	r7, #0
 8008360:	d143      	bne.n	80083ea <_malloc_r+0xd6>
 8008362:	2c00      	cmp	r4, #0
 8008364:	d04b      	beq.n	80083fe <_malloc_r+0xea>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	4639      	mov	r1, r7
 800836a:	4630      	mov	r0, r6
 800836c:	eb04 0903 	add.w	r9, r4, r3
 8008370:	f000 f98c 	bl	800868c <_sbrk_r>
 8008374:	4581      	cmp	r9, r0
 8008376:	d142      	bne.n	80083fe <_malloc_r+0xea>
 8008378:	6821      	ldr	r1, [r4, #0]
 800837a:	1a6d      	subs	r5, r5, r1
 800837c:	4629      	mov	r1, r5
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffa6 	bl	80082d0 <sbrk_aligned>
 8008384:	3001      	adds	r0, #1
 8008386:	d03a      	beq.n	80083fe <_malloc_r+0xea>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	442b      	add	r3, r5
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	f8d8 3000 	ldr.w	r3, [r8]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	bb62      	cbnz	r2, 80083f0 <_malloc_r+0xdc>
 8008396:	f8c8 7000 	str.w	r7, [r8]
 800839a:	e00f      	b.n	80083bc <_malloc_r+0xa8>
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	1b52      	subs	r2, r2, r5
 80083a0:	d420      	bmi.n	80083e4 <_malloc_r+0xd0>
 80083a2:	2a0b      	cmp	r2, #11
 80083a4:	d917      	bls.n	80083d6 <_malloc_r+0xc2>
 80083a6:	1961      	adds	r1, r4, r5
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	6025      	str	r5, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	6059      	strne	r1, [r3, #4]
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	bf08      	it	eq
 80083b4:	f8c8 1000 	streq.w	r1, [r8]
 80083b8:	5162      	str	r2, [r4, r5]
 80083ba:	604b      	str	r3, [r1, #4]
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 f82f 	bl	8008420 <__malloc_unlock>
 80083c2:	f104 000b 	add.w	r0, r4, #11
 80083c6:	1d23      	adds	r3, r4, #4
 80083c8:	f020 0007 	bic.w	r0, r0, #7
 80083cc:	1ac2      	subs	r2, r0, r3
 80083ce:	bf1c      	itt	ne
 80083d0:	1a1b      	subne	r3, r3, r0
 80083d2:	50a3      	strne	r3, [r4, r2]
 80083d4:	e7af      	b.n	8008336 <_malloc_r+0x22>
 80083d6:	6862      	ldr	r2, [r4, #4]
 80083d8:	42a3      	cmp	r3, r4
 80083da:	bf0c      	ite	eq
 80083dc:	f8c8 2000 	streq.w	r2, [r8]
 80083e0:	605a      	strne	r2, [r3, #4]
 80083e2:	e7eb      	b.n	80083bc <_malloc_r+0xa8>
 80083e4:	4623      	mov	r3, r4
 80083e6:	6864      	ldr	r4, [r4, #4]
 80083e8:	e7ae      	b.n	8008348 <_malloc_r+0x34>
 80083ea:	463c      	mov	r4, r7
 80083ec:	687f      	ldr	r7, [r7, #4]
 80083ee:	e7b6      	b.n	800835e <_malloc_r+0x4a>
 80083f0:	461a      	mov	r2, r3
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d1fb      	bne.n	80083f0 <_malloc_r+0xdc>
 80083f8:	2300      	movs	r3, #0
 80083fa:	6053      	str	r3, [r2, #4]
 80083fc:	e7de      	b.n	80083bc <_malloc_r+0xa8>
 80083fe:	230c      	movs	r3, #12
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f80c 	bl	8008420 <__malloc_unlock>
 8008408:	e794      	b.n	8008334 <_malloc_r+0x20>
 800840a:	6005      	str	r5, [r0, #0]
 800840c:	e7d6      	b.n	80083bc <_malloc_r+0xa8>
 800840e:	bf00      	nop
 8008410:	200015a4 	.word	0x200015a4

08008414 <__malloc_lock>:
 8008414:	4801      	ldr	r0, [pc, #4]	@ (800841c <__malloc_lock+0x8>)
 8008416:	f7ff bf0e 	b.w	8008236 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	2000159c 	.word	0x2000159c

08008420 <__malloc_unlock>:
 8008420:	4801      	ldr	r0, [pc, #4]	@ (8008428 <__malloc_unlock+0x8>)
 8008422:	f7ff bf09 	b.w	8008238 <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	2000159c 	.word	0x2000159c

0800842c <__sflush_r>:
 800842c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008434:	0716      	lsls	r6, r2, #28
 8008436:	4605      	mov	r5, r0
 8008438:	460c      	mov	r4, r1
 800843a:	d454      	bmi.n	80084e6 <__sflush_r+0xba>
 800843c:	684b      	ldr	r3, [r1, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dc02      	bgt.n	8008448 <__sflush_r+0x1c>
 8008442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd48      	ble.n	80084da <__sflush_r+0xae>
 8008448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800844a:	2e00      	cmp	r6, #0
 800844c:	d045      	beq.n	80084da <__sflush_r+0xae>
 800844e:	2300      	movs	r3, #0
 8008450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008454:	682f      	ldr	r7, [r5, #0]
 8008456:	6a21      	ldr	r1, [r4, #32]
 8008458:	602b      	str	r3, [r5, #0]
 800845a:	d030      	beq.n	80084be <__sflush_r+0x92>
 800845c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	0759      	lsls	r1, r3, #29
 8008462:	d505      	bpl.n	8008470 <__sflush_r+0x44>
 8008464:	6863      	ldr	r3, [r4, #4]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800846a:	b10b      	cbz	r3, 8008470 <__sflush_r+0x44>
 800846c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008474:	6a21      	ldr	r1, [r4, #32]
 8008476:	4628      	mov	r0, r5
 8008478:	47b0      	blx	r6
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	d106      	bne.n	800848e <__sflush_r+0x62>
 8008480:	6829      	ldr	r1, [r5, #0]
 8008482:	291d      	cmp	r1, #29
 8008484:	d82b      	bhi.n	80084de <__sflush_r+0xb2>
 8008486:	4a2a      	ldr	r2, [pc, #168]	@ (8008530 <__sflush_r+0x104>)
 8008488:	410a      	asrs	r2, r1
 800848a:	07d6      	lsls	r6, r2, #31
 800848c:	d427      	bmi.n	80084de <__sflush_r+0xb2>
 800848e:	2200      	movs	r2, #0
 8008490:	6062      	str	r2, [r4, #4]
 8008492:	04d9      	lsls	r1, r3, #19
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	d504      	bpl.n	80084a4 <__sflush_r+0x78>
 800849a:	1c42      	adds	r2, r0, #1
 800849c:	d101      	bne.n	80084a2 <__sflush_r+0x76>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b903      	cbnz	r3, 80084a4 <__sflush_r+0x78>
 80084a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80084a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	b1b9      	cbz	r1, 80084da <__sflush_r+0xae>
 80084aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084ae:	4299      	cmp	r1, r3
 80084b0:	d002      	beq.n	80084b8 <__sflush_r+0x8c>
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7ff fec2 	bl	800823c <_free_r>
 80084b8:	2300      	movs	r3, #0
 80084ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80084bc:	e00d      	b.n	80084da <__sflush_r+0xae>
 80084be:	2301      	movs	r3, #1
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	4602      	mov	r2, r0
 80084c6:	1c50      	adds	r0, r2, #1
 80084c8:	d1c9      	bne.n	800845e <__sflush_r+0x32>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0c6      	beq.n	800845e <__sflush_r+0x32>
 80084d0:	2b1d      	cmp	r3, #29
 80084d2:	d001      	beq.n	80084d8 <__sflush_r+0xac>
 80084d4:	2b16      	cmp	r3, #22
 80084d6:	d11e      	bne.n	8008516 <__sflush_r+0xea>
 80084d8:	602f      	str	r7, [r5, #0]
 80084da:	2000      	movs	r0, #0
 80084dc:	e022      	b.n	8008524 <__sflush_r+0xf8>
 80084de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	e01b      	b.n	800851e <__sflush_r+0xf2>
 80084e6:	690f      	ldr	r7, [r1, #16]
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	d0f6      	beq.n	80084da <__sflush_r+0xae>
 80084ec:	0793      	lsls	r3, r2, #30
 80084ee:	680e      	ldr	r6, [r1, #0]
 80084f0:	bf08      	it	eq
 80084f2:	694b      	ldreq	r3, [r1, #20]
 80084f4:	600f      	str	r7, [r1, #0]
 80084f6:	bf18      	it	ne
 80084f8:	2300      	movne	r3, #0
 80084fa:	eba6 0807 	sub.w	r8, r6, r7
 80084fe:	608b      	str	r3, [r1, #8]
 8008500:	f1b8 0f00 	cmp.w	r8, #0
 8008504:	dde9      	ble.n	80084da <__sflush_r+0xae>
 8008506:	6a21      	ldr	r1, [r4, #32]
 8008508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800850a:	4643      	mov	r3, r8
 800850c:	463a      	mov	r2, r7
 800850e:	4628      	mov	r0, r5
 8008510:	47b0      	blx	r6
 8008512:	2800      	cmp	r0, #0
 8008514:	dc08      	bgt.n	8008528 <__sflush_r+0xfc>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008528:	4407      	add	r7, r0
 800852a:	eba8 0800 	sub.w	r8, r8, r0
 800852e:	e7e7      	b.n	8008500 <__sflush_r+0xd4>
 8008530:	dfbffffe 	.word	0xdfbffffe

08008534 <_fflush_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	690b      	ldr	r3, [r1, #16]
 8008538:	4605      	mov	r5, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b913      	cbnz	r3, 8008544 <_fflush_r+0x10>
 800853e:	2500      	movs	r5, #0
 8008540:	4628      	mov	r0, r5
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	b118      	cbz	r0, 800854e <_fflush_r+0x1a>
 8008546:	6a03      	ldr	r3, [r0, #32]
 8008548:	b90b      	cbnz	r3, 800854e <_fflush_r+0x1a>
 800854a:	f7ff fc8f 	bl	8007e6c <__sinit>
 800854e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0f3      	beq.n	800853e <_fflush_r+0xa>
 8008556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008558:	07d0      	lsls	r0, r2, #31
 800855a:	d404      	bmi.n	8008566 <_fflush_r+0x32>
 800855c:	0599      	lsls	r1, r3, #22
 800855e:	d402      	bmi.n	8008566 <_fflush_r+0x32>
 8008560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008562:	f7ff fe68 	bl	8008236 <__retarget_lock_acquire_recursive>
 8008566:	4628      	mov	r0, r5
 8008568:	4621      	mov	r1, r4
 800856a:	f7ff ff5f 	bl	800842c <__sflush_r>
 800856e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008570:	07da      	lsls	r2, r3, #31
 8008572:	4605      	mov	r5, r0
 8008574:	d4e4      	bmi.n	8008540 <_fflush_r+0xc>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	059b      	lsls	r3, r3, #22
 800857a:	d4e1      	bmi.n	8008540 <_fflush_r+0xc>
 800857c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800857e:	f7ff fe5b 	bl	8008238 <__retarget_lock_release_recursive>
 8008582:	e7dd      	b.n	8008540 <_fflush_r+0xc>

08008584 <__swhatbuf_r>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	460c      	mov	r4, r1
 8008588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858c:	2900      	cmp	r1, #0
 800858e:	b096      	sub	sp, #88	@ 0x58
 8008590:	4615      	mov	r5, r2
 8008592:	461e      	mov	r6, r3
 8008594:	da0d      	bge.n	80085b2 <__swhatbuf_r+0x2e>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800859c:	f04f 0100 	mov.w	r1, #0
 80085a0:	bf14      	ite	ne
 80085a2:	2340      	movne	r3, #64	@ 0x40
 80085a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085a8:	2000      	movs	r0, #0
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	b016      	add	sp, #88	@ 0x58
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
 80085b2:	466a      	mov	r2, sp
 80085b4:	f000 f848 	bl	8008648 <_fstat_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dbec      	blt.n	8008596 <__swhatbuf_r+0x12>
 80085bc:	9901      	ldr	r1, [sp, #4]
 80085be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085c6:	4259      	negs	r1, r3
 80085c8:	4159      	adcs	r1, r3
 80085ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ce:	e7eb      	b.n	80085a8 <__swhatbuf_r+0x24>

080085d0 <__smakebuf_r>:
 80085d0:	898b      	ldrh	r3, [r1, #12]
 80085d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d4:	079d      	lsls	r5, r3, #30
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	d507      	bpl.n	80085ec <__smakebuf_r+0x1c>
 80085dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	2301      	movs	r3, #1
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	b003      	add	sp, #12
 80085ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ec:	ab01      	add	r3, sp, #4
 80085ee:	466a      	mov	r2, sp
 80085f0:	f7ff ffc8 	bl	8008584 <__swhatbuf_r>
 80085f4:	9f00      	ldr	r7, [sp, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	4639      	mov	r1, r7
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff fe8a 	bl	8008314 <_malloc_r>
 8008600:	b948      	cbnz	r0, 8008616 <__smakebuf_r+0x46>
 8008602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008606:	059a      	lsls	r2, r3, #22
 8008608:	d4ee      	bmi.n	80085e8 <__smakebuf_r+0x18>
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	f043 0302 	orr.w	r3, r3, #2
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	e7e2      	b.n	80085dc <__smakebuf_r+0xc>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	6020      	str	r0, [r4, #0]
 800861a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008626:	b15b      	cbz	r3, 8008640 <__smakebuf_r+0x70>
 8008628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862c:	4630      	mov	r0, r6
 800862e:	f000 f81d 	bl	800866c <_isatty_r>
 8008632:	b128      	cbz	r0, 8008640 <__smakebuf_r+0x70>
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	f043 0301 	orr.w	r3, r3, #1
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	431d      	orrs	r5, r3
 8008644:	81a5      	strh	r5, [r4, #12]
 8008646:	e7cf      	b.n	80085e8 <__smakebuf_r+0x18>

08008648 <_fstat_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	@ (8008668 <_fstat_r+0x20>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	f7f9 f914 	bl	8001882 <_fstat>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d102      	bne.n	8008664 <_fstat_r+0x1c>
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	b103      	cbz	r3, 8008664 <_fstat_r+0x1c>
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	bd38      	pop	{r3, r4, r5, pc}
 8008666:	bf00      	nop
 8008668:	20001598 	.word	0x20001598

0800866c <_isatty_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	@ (8008688 <_isatty_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f9 f913 	bl	80018a2 <_isatty>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_isatty_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_isatty_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	20001598 	.word	0x20001598

0800868c <_sbrk_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d06      	ldr	r5, [pc, #24]	@ (80086a8 <_sbrk_r+0x1c>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	f7f9 f91c 	bl	80018d4 <_sbrk>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_sbrk_r+0x1a>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_sbrk_r+0x1a>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20001598 	.word	0x20001598

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
