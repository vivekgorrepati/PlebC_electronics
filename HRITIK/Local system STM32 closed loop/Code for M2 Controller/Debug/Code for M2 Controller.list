
Code for M2 Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080078c0  080078c0  000088c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007970  08007970  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007978  08007978  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007980  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  200000fc  08007a7c  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  08007a7c  000093ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182be  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003857  00000000  00000000  000213ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00024c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001074  00000000  00000000  00026178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002915a  00000000  00000000  000271ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194bc  00000000  00000000  00050346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb3a0  00000000  00000000  00069802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  00164be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0016a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078a8 	.word	0x080078a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	080078a8 	.word	0x080078a8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <vApplicationGetIdleTaskMemory+0x30>)
 8000cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000118 	.word	0x20000118
 8000cdc:	2000016c 	.word	0x2000016c

08000ce0 <updateEncoder>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateEncoder(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <updateEncoder+0x88>)
 8000cea:	f001 f835 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	481c      	ldr	r0, [pc, #112]	@ (8000d68 <updateEncoder+0x88>)
 8000cf6:	f001 f82f 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <updateEncoder+0x8c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2b0d      	cmp	r3, #13
 8000d18:	d008      	beq.n	8000d2c <updateEncoder+0x4c>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d005      	beq.n	8000d2c <updateEncoder+0x4c>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d002      	beq.n	8000d2c <updateEncoder+0x4c>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b0b      	cmp	r3, #11
 8000d2a:	d104      	bne.n	8000d36 <updateEncoder+0x56>
  {
    encoderValue++;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <updateEncoder+0x90>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <updateEncoder+0x90>)
 8000d34:	6013      	str	r3, [r2, #0]

  }

  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b0e      	cmp	r3, #14
 8000d3a:	d008      	beq.n	8000d4e <updateEncoder+0x6e>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2b07      	cmp	r3, #7
 8000d40:	d005      	beq.n	8000d4e <updateEncoder+0x6e>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d002      	beq.n	8000d4e <updateEncoder+0x6e>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d104      	bne.n	8000d58 <updateEncoder+0x78>
  {
    encoderValue--;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <updateEncoder+0x90>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <updateEncoder+0x90>)
 8000d56:	6013      	str	r3, [r2, #0]

  }

  lastEncoded = encoded;
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <updateEncoder+0x8c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	2000036c 	.word	0x2000036c
 8000d70:	20000370 	.word	0x20000370

08000d74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d002      	beq.n	8000d8a <HAL_GPIO_EXTI_Callback+0x16>
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8000d8a:	f7ff ffa9 	bl	8000ce0 <updateEncoder>

  }
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <UART_StartReceive>:

// Function to start UART reception
void UART_StartReceive(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f000 ffef 	bl	8001d88 <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 8000daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dae:	4903      	ldr	r1, [pc, #12]	@ (8000dbc <UART_StartReceive+0x24>)
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <UART_StartReceive+0x28>)
 8000db2:	f004 fba6 	bl	8005502 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200004cc 	.word	0x200004cc
 8000dc0:	200003f0 	.word	0x200003f0

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	rpm 			= Holding_Registers_Database[0];
 8000dca:	4b27      	ldr	r3, [pc, #156]	@ (8000e68 <main+0xa4>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <main+0xa8>)
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
	acceleration 	= Holding_Registers_Database[1];
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <main+0xa4>)
 8000dde:	885b      	ldrh	r3, [r3, #2]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <main+0xac>)
 8000dea:	edc3 7a00 	vstr	s15, [r3]
	motorSetSteps 	= Holding_Registers_Database[3];
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <main+0xa4>)
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <main+0xb0>)
 8000df6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f000 fc62 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f846 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f000 f91a 	bl	8001038 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e04:	f000 f894 	bl	8000f30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e08:	f000 f8e6 	bl	8000fd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e0c:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <main+0xb4>)
 8000e0e:	f002 fb95 	bl	800353c <HAL_TIM_Base_Start>
  UART_StartReceive();
 8000e12:	f7ff ffc1 	bl	8000d98 <UART_StartReceive>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <main+0xb8>)
 8000e18:	f107 041c 	add.w	r4, r7, #28
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 f8b6 	bl	8005fa2 <osThreadCreate>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <main+0xbc>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <main+0xc0>)
 8000e3e:	463c      	mov	r4, r7
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 f8a5 	bl	8005fa2 <osThreadCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e88 <main+0xc4>)
 8000e5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e5e:	f005 f899 	bl	8005f94 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e62:	bf00      	nop
 8000e64:	e7fd      	b.n	8000e62 <main+0x9e>
 8000e66:	bf00      	nop
 8000e68:	20000014 	.word	0x20000014
 8000e6c:	2000037c 	.word	0x2000037c
 8000e70:	20000384 	.word	0x20000384
 8000e74:	2000038c 	.word	0x2000038c
 8000e78:	200003a4 	.word	0x200003a4
 8000e7c:	080078cc 	.word	0x080078cc
 8000e80:	20000474 	.word	0x20000474
 8000e84:	080078f4 	.word	0x080078f4
 8000e88:	20000478 	.word	0x20000478

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b096      	sub	sp, #88	@ 0x58
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2244      	movs	r2, #68	@ 0x44
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fcd8 	bl	8007850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000eb2:	f000 ffa7 	bl	8001e04 <HAL_PWREx_ControlVoltageScaling>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ebc:	f000 fa59 	bl	8001372 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000eda:	230a      	movs	r3, #10
 8000edc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 ffde 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000efa:	f000 fa3a 	bl	8001372 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2303      	movs	r3, #3
 8000f04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fba6 	bl	8002668 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f22:	f000 fa26 	bl	8001372 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3758      	adds	r7, #88	@ 0x58
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f50:	4a20      	ldr	r2, [pc, #128]	@ (8000fd4 <MX_TIM1_Init+0xa4>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f56:	224f      	movs	r2, #79	@ 0x4f
 8000f58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7a:	4815      	ldr	r0, [pc, #84]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f7c:	f002 fa86 	bl	800348c <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f86:	f000 f9f4 	bl	8001372 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f98:	f002 fcc7 	bl	800392a <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fa2:	f000 f9e6 	bl	8001372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM1_Init+0xa0>)
 8000fb8:	f002 fedc 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fc2:	f000 f9d6 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200003a4 	.word	0x200003a4
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <MX_USART1_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_USART1_UART_Init+0x58>)
 800101c:	f002 ff50 	bl	8003ec0 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f9a4 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200003f0 	.word	0x200003f0
 8001034:	40013800 	.word	0x40013800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a39      	ldr	r2, [pc, #228]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <MX_GPIO_Init+0x100>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a33      	ldr	r2, [pc, #204]	@ (8001138 <MX_GPIO_Init+0x100>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a2d      	ldr	r2, [pc, #180]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_GPIO_Init+0x100>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <MX_GPIO_Init+0x100>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <MX_GPIO_Init+0x100>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <MX_GPIO_Init+0x100>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f240 1113 	movw	r1, #275	@ 0x113
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b8:	f000 fe66 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	@ (800113c <MX_GPIO_Init+0x104>)
 80010d0:	f000 fc98 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 80010d4:	f240 1313 	movw	r3, #275	@ 0x113
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f000 fc88 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80010f4:	2303      	movs	r3, #3
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010f8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <MX_GPIO_Init+0x108>)
 800110a:	f000 fc7b 	bl	8001a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	2006      	movs	r0, #6
 8001114:	f000 fbcc 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001118:	2006      	movs	r0, #6
 800111a:	f000 fbe5 	bl	80018e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	2007      	movs	r0, #7
 8001124:	f000 fbc4 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001128:	2007      	movs	r0, #7
 800112a:	f000 fbdd 	bl	80018e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	48000800 	.word	0x48000800
 8001140:	48000400 	.word	0x48000400

08001144 <StartMotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Define motor configurations
	MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 800114c:	4b59      	ldr	r3, [pc, #356]	@ (80012b4 <StartMotorTask+0x170>)
 800114e:	f107 0408 	add.w	r4, r7, #8
 8001152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Infinite loop */
  for(;;)
  {
	  //Reading RMP value from RPM holding register
	  rpm = Holding_Registers_Database[0];;
 8001158:	4b57      	ldr	r3, [pc, #348]	@ (80012b8 <StartMotorTask+0x174>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001164:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <StartMotorTask+0x178>)
 8001166:	edc3 7a00 	vstr	s15, [r3]
	  if(rpm != prev_rpm)
 800116a:	4b54      	ldr	r3, [pc, #336]	@ (80012bc <StartMotorTask+0x178>)
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <StartMotorTask+0x17c>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	eeb4 7a67 	vcmp.f32	s14, s15
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d00d      	beq.n	800119c <StartMotorTask+0x58>
	  {
		  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8001180:	4b4e      	ldr	r3, [pc, #312]	@ (80012bc <StartMotorTask+0x178>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	4b4f      	ldr	r3, [pc, #316]	@ (80012c4 <StartMotorTask+0x180>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	f006 f972 	bl	8007478 <setRPM>
		  prev_rpm = rpm;
 8001194:	4b49      	ldr	r3, [pc, #292]	@ (80012bc <StartMotorTask+0x178>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a49      	ldr	r2, [pc, #292]	@ (80012c0 <StartMotorTask+0x17c>)
 800119a:	6013      	str	r3, [r2, #0]
	  }

	  //Reading acceleration value from acceleration holding register
	  acceleration = Holding_Registers_Database[1];
 800119c:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <StartMotorTask+0x174>)
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	4b47      	ldr	r3, [pc, #284]	@ (80012c8 <StartMotorTask+0x184>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
	  if(acceleration != prev_acceleration)
 80011ae:	4b46      	ldr	r3, [pc, #280]	@ (80012c8 <StartMotorTask+0x184>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <StartMotorTask+0x188>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d00a      	beq.n	80011da <StartMotorTask+0x96>
	  {
		   setAcceleration(acceleration);
 80011c4:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <StartMotorTask+0x184>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	f006 f943 	bl	8007458 <setAcceleration>
		   prev_acceleration = acceleration;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <StartMotorTask+0x184>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a3d      	ldr	r2, [pc, #244]	@ (80012cc <StartMotorTask+0x188>)
 80011d8:	6013      	str	r3, [r2, #0]
	  }

	  // Disable interrupts and read the encoder value
	  //__disable_irq();
	  currentPosition = encoderValue; // Read the latest encoder value
 80011da:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <StartMotorTask+0x18c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a3d      	ldr	r2, [pc, #244]	@ (80012d4 <StartMotorTask+0x190>)
 80011e0:	6013      	str	r3, [r2, #0]
	  //__enable_irq();

	  input_angle = Holding_Registers_Database[4];
 80011e2:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <StartMotorTask+0x174>)
 80011e4:	891b      	ldrh	r3, [r3, #8]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <StartMotorTask+0x194>)
 80011ea:	601a      	str	r2, [r3, #0]


	// Calculate target position with floating-point division
	targetPosition = input_angle * (enc_val_in_1rev/360); // in encoder value
 80011ec:	4b3a      	ldr	r3, [pc, #232]	@ (80012d8 <StartMotorTask+0x194>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f8:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <StartMotorTask+0x198>)
 80011fa:	edd3 6a00 	vldr	s13, [r3]
 80011fe:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 80012e0 <StartMotorTask+0x19c>
 8001202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120a:	4b36      	ldr	r3, [pc, #216]	@ (80012e4 <StartMotorTask+0x1a0>)
 800120c:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <StartMotorTask+0x1a0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 2a90 	vmov	r2, s15
 800121e:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <StartMotorTask+0x190>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a30      	ldr	r2, [pc, #192]	@ (80012e8 <StartMotorTask+0x1a4>)
 8001226:	6013      	str	r3, [r2, #0]

	if (abs(positionToMove) > 12) {   //tolerance = 12
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <StartMotorTask+0x1a4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfb8      	it	lt
 8001230:	425b      	neglt	r3, r3
 8001232:	2b0c      	cmp	r3, #12
 8001234:	dd31      	ble.n	800129a <StartMotorTask+0x156>


		// Calculate steps to move
		stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 8001236:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <StartMotorTask+0x1a4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <StartMotorTask+0x180>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <StartMotorTask+0x198>)
 8001250:	edd3 6a00 	vldr	s13, [r3]
 8001254:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <StartMotorTask+0x1a8>)
 8001266:	601a      	str	r2, [r3, #0]

		if ((prev_input_angle != input_angle) || (prevstepsToMove != stepsToMove))
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <StartMotorTask+0x1ac>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <StartMotorTask+0x194>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d105      	bne.n	8001280 <StartMotorTask+0x13c>
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <StartMotorTask+0x1b0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <StartMotorTask+0x1a8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d007      	beq.n	8001290 <StartMotorTask+0x14c>
		{
			//Enable Drive
//	    	HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);

			// Move motor
			motorMove(&motor1, stepsToMove);
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <StartMotorTask+0x1a8>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f98c 	bl	80075a8 <motorMove>
		}

		if ((prev_input_angle == input_angle) || (prevstepsToMove == stepsToMove))
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <StartMotorTask+0x1ac>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <StartMotorTask+0x194>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
//			HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
		}
	}


	prev_input_angle = input_angle;
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <StartMotorTask+0x194>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <StartMotorTask+0x1ac>)
 80012a0:	6013      	str	r3, [r2, #0]
	prevstepsToMove = stepsToMove;
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <StartMotorTask+0x1a8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <StartMotorTask+0x1b0>)
 80012a8:	6013      	str	r3, [r2, #0]
    osDelay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f004 fec5 	bl	800603a <osDelay>
	  rpm = Holding_Registers_Database[0];;
 80012b0:	e752      	b.n	8001158 <StartMotorTask+0x14>
 80012b2:	bf00      	nop
 80012b4:	08007910 	.word	0x08007910
 80012b8:	20000014 	.word	0x20000014
 80012bc:	2000037c 	.word	0x2000037c
 80012c0:	20000380 	.word	0x20000380
 80012c4:	2000038c 	.word	0x2000038c
 80012c8:	20000384 	.word	0x20000384
 80012cc:	20000388 	.word	0x20000388
 80012d0:	20000370 	.word	0x20000370
 80012d4:	20000394 	.word	0x20000394
 80012d8:	20000390 	.word	0x20000390
 80012dc:	20000004 	.word	0x20000004
 80012e0:	43b40000 	.word	0x43b40000
 80012e4:	20000398 	.word	0x20000398
 80012e8:	2000039c 	.word	0x2000039c
 80012ec:	200003a0 	.word	0x200003a0
 80012f0:	20000374 	.word	0x20000374
 80012f4:	20000378 	.word	0x20000378

080012f8 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
	Input_Registers_Database[0] = encoderValue; // Store the encoder value in the first input register
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <StartEncoderTask+0x4c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <StartEncoderTask+0x50>)
 8001308:	801a      	strh	r2, [r3, #0]
	int angle_covered 			= encoderValue * (360/enc_val_in_1rev);
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <StartEncoderTask+0x4c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <StartEncoderTask+0x54>)
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8001350 <StartEncoderTask+0x58>
 8001320:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	60fb      	str	r3, [r7, #12]
	Input_Registers_Database[1] = angle_covered; // Store the encoder value in the first input register
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <StartEncoderTask+0x50>)
 8001338:	805a      	strh	r2, [r3, #2]

    osDelay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f004 fe7d 	bl	800603a <osDelay>
  {
 8001340:	bf00      	nop
 8001342:	e7dd      	b.n	8001300 <StartEncoderTask+0x8>
 8001344:	20000370 	.word	0x20000370
 8001348:	20000078 	.word	0x20000078
 800134c:	20000004 	.word	0x20000004
 8001350:	43b40000 	.word	0x43b40000

08001354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001364:	d101      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001366:	f000 f9cb 	bl	8001700 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001376:	b672      	cpsid	i
}
 8001378:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <Error_Handler+0x8>
	...

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_MspInit+0x4c>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_MspInit+0x4c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6613      	str	r3, [r2, #96]	@ 0x60
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_MspInit+0x4c>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_MspInit+0x4c>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <HAL_MspInit+0x4c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_MspInit+0x4c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	210f      	movs	r1, #15
 80013ba:	f06f 0001 	mvn.w	r0, #1
 80013be:	f000 fa77 	bl	80018b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_TIM_Base_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40012c00 	.word	0x40012c00
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ac      	sub	sp, #176	@ 0xb0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2288      	movs	r2, #136	@ 0x88
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fa0d 	bl	8007850 <memset>
  if(huart->Instance==USART1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a26      	ldr	r2, [pc, #152]	@ (80014d4 <HAL_UART_MspInit+0xc4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d144      	bne.n	80014ca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fb61 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001458:	f7ff ff8b 	bl	8001372 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001460:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001466:	6613      	str	r3, [r2, #96]	@ 0x60
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 800146a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_UART_MspInit+0xc8>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a6:	2307      	movs	r3, #7
 80014a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b6:	f000 faa5 	bl	8001a04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2025      	movs	r0, #37	@ 0x25
 80014c0:	f000 f9f6 	bl	80018b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014c4:	2025      	movs	r0, #37	@ 0x25
 80014c6:	f000 fa0f 	bl	80018e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	37b0      	adds	r7, #176	@ 0xb0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	@ 0x38
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_InitTick+0xe0>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <HAL_InitTick+0xe0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_InitTick+0xe0>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001502:	f107 0210 	add.w	r2, r7, #16
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fa6f 	bl	80029f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800151c:	f001 fa3c 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001520:	6378      	str	r0, [r7, #52]	@ 0x34
 8001522:	e004      	b.n	800152e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001524:	f001 fa38 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001528:	4603      	mov	r3, r0
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800152e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001530:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <HAL_InitTick+0xe4>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3b01      	subs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <HAL_InitTick+0xe8>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_InitTick+0xe8>)
 8001546:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800154a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_InitTick+0xe8>)
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_InitTick+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_InitTick+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_InitTick+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001564:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <HAL_InitTick+0xe8>)
 8001566:	f001 ff91 	bl	800348c <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001570:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001578:	4812      	ldr	r0, [pc, #72]	@ (80015c4 <HAL_InitTick+0xe8>)
 800157a:	f002 f847 	bl	800360c <HAL_TIM_Base_Start_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800158c:	201c      	movs	r0, #28
 800158e:	f000 f9ab 	bl	80018e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	201c      	movs	r0, #28
 800159e:	f000 f987 	bl	80018b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a2:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <HAL_InitTick+0xec>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e002      	b.n	80015b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3738      	adds	r7, #56	@ 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	2000047c 	.word	0x2000047c
 80015c8:	2000000c 	.word	0x2000000c

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 fbd6 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001614:	2002      	movs	r0, #2
 8001616:	f000 fbcf 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f002 f861 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000047c 	.word	0x2000047c

08001634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <USART1_IRQHandler+0x10>)
 800163a:	f002 fd23 	bl	8004084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003f0 	.word	0x200003f0

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f006 f8e1 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff fb91 	bl	8000dc4 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80016b0:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 80016b4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80016b8:	200013ec 	.word	0x200013ec

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_Init+0x3c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_Init+0x3c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f8df 	bl	800189a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	200f      	movs	r0, #15
 80016de:	f7ff fefd 	bl	80014dc <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	e001      	b.n	80016f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ee:	f7ff fe47 	bl	8001380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000010 	.word	0x20000010
 8001724:	200004c8 	.word	0x200004c8

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200004c8 	.word	0x200004c8

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff4c 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c2:	f7ff ff61 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f7ff ffb1 	bl	8001834 <NVIC_EncodePriority>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff80 	bl	80017e0 <__NVIC_SetPriority>
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff54 	bl	80017a4 <__NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d008      	beq.n	800192e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2204      	movs	r2, #4
 8001920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e022      	b.n	8001974 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020e 	bic.w	r2, r2, #14
 800193c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f003 021c 	and.w	r2, r3, #28
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d005      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2204      	movs	r2, #4
 800199c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e029      	b.n	80019f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 020e 	bic.w	r2, r2, #14
 80019b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f003 021c 	and.w	r2, r3, #28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    }
  }
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e17f      	b.n	8001d14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8171 	beq.w	8001d0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 0201 	and.w	r2, r3, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d118      	bne.n	8001ae4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d017      	beq.n	8001b20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80ac 	beq.w	8001d0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <HAL_GPIO_Init+0x330>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bba:	4a5e      	ldr	r2, [pc, #376]	@ (8001d34 <HAL_GPIO_Init+0x330>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d34 <HAL_GPIO_Init+0x330>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bce:	4a5a      	ldr	r2, [pc, #360]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x242>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001d3c <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x23e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4e      	ldr	r2, [pc, #312]	@ (8001d40 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x23a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d44 <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x236>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x232>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d4c <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x22e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x22a>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x244>
 8001c46:	2300      	movs	r3, #0
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c58:	4937      	ldr	r1, [pc, #220]	@ (8001d38 <HAL_GPIO_Init+0x334>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c90:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb4:	4a27      	ldr	r2, [pc, #156]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cde:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d08:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <HAL_GPIO_Init+0x350>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f47f ae78 	bne.w	8001a14 <HAL_GPIO_Init+0x10>
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48001800 	.word	0x48001800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ffcc 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e12:	d130      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e14:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e20:	d038      	beq.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e22:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2232      	movs	r2, #50	@ 0x32
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	3301      	adds	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	e002      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5c:	d102      	bne.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f2      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e70:	d110      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e00f      	b.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e82:	d007      	beq.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e3ca      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec2:	4b97      	ldr	r3, [pc, #604]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	4b94      	ldr	r3, [pc, #592]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80e4 	beq.w	80020ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_RCC_OscConfig+0x4a>
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	f040 808b 	bne.w	8002008 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	f040 8087 	bne.w	8002008 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001efa:	4b89      	ldr	r3, [pc, #548]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x62>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e3a2      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <HAL_RCC_OscConfig+0x7c>
 8001f22:	4b7f      	ldr	r3, [pc, #508]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f2a:	e005      	b.n	8001f38 <HAL_RCC_OscConfig+0x88>
 8001f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d223      	bcs.n	8001f84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fd87 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e383      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f50:	4b73      	ldr	r3, [pc, #460]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a72      	ldr	r2, [pc, #456]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b70      	ldr	r3, [pc, #448]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	496d      	ldr	r1, [pc, #436]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	4968      	ldr	r1, [pc, #416]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
 8001f82:	e025      	b.n	8001fd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f84:	4b66      	ldr	r3, [pc, #408]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a65      	ldr	r2, [pc, #404]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b63      	ldr	r3, [pc, #396]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4960      	ldr	r1, [pc, #384]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	495b      	ldr	r1, [pc, #364]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fd47 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e343      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd0:	f000 fc4a 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	4950      	ldr	r1, [pc, #320]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	4a4e      	ldr	r2, [pc, #312]	@ (8002128 <HAL_RCC_OscConfig+0x278>)
 8001fee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800212c <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa71 	bl	80014dc <HAL_InitTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d052      	beq.n	80020aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	e327      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d032      	beq.n	8002076 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002010:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a42      	ldr	r2, [pc, #264]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800201c:	f7ff fb84 	bl	8001728 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002024:	f7ff fb80 	bl	8001728 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e310      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002036:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a36      	ldr	r2, [pc, #216]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4931      	ldr	r1, [pc, #196]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	492c      	ldr	r1, [pc, #176]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e01a      	b.n	80020ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002076:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002082:	f7ff fb51 	bl	8001728 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800208a:	f7ff fb4d 	bl	8001728 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e2dd      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x1da>
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d074      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x21a>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d10e      	bne.n	80020e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d10b      	bne.n	80020e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d064      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d160      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e2ba      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x24a>
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	e026      	b.n	8002148 <HAL_RCC_OscConfig+0x298>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002102:	d115      	bne.n	8002130 <HAL_RCC_OscConfig+0x280>
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 800210a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a02      	ldr	r2, [pc, #8]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x298>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	08007928 	.word	0x08007928
 8002128:	20000008 	.word	0x20000008
 800212c:	2000000c 	.word	0x2000000c
 8002130:	4ba0      	ldr	r3, [pc, #640]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a9f      	ldr	r2, [pc, #636]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b9d      	ldr	r3, [pc, #628]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a9c      	ldr	r2, [pc, #624]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff faea 	bl	8001728 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fae6 	bl	8001728 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e276      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216a:	4b92      	ldr	r3, [pc, #584]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2a8>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff fad6 	bl	8001728 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff fad2 	bl	8001728 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	@ 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e262      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002192:	4b88      	ldr	r3, [pc, #544]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x2d0>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d060      	beq.n	8002270 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x310>
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d116      	bne.n	80021ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c0:	4b7c      	ldr	r3, [pc, #496]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x328>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e23f      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b76      	ldr	r3, [pc, #472]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	4973      	ldr	r1, [pc, #460]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ec:	e040      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d023      	beq.n	800223e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f6:	4b6f      	ldr	r3, [pc, #444]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff fa91 	bl	8001728 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fa8d 	bl	8001728 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e21d      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221c:	4b65      	ldr	r3, [pc, #404]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b62      	ldr	r3, [pc, #392]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	495f      	ldr	r1, [pc, #380]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b5d      	ldr	r3, [pc, #372]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5c      	ldr	r2, [pc, #368]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7ff fa6d 	bl	8001728 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7ff fa69 	bl	8001728 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1f9      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002284:	4b4b      	ldr	r3, [pc, #300]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228a:	4a4a      	ldr	r2, [pc, #296]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff fa48 	bl	8001728 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff fa44 	bl	8001728 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1d4      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ae:	4b41      	ldr	r3, [pc, #260]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCC_OscConfig+0x3ec>
 80022bc:	e01b      	b.n	80022f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022be:	4b3d      	ldr	r3, [pc, #244]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c4:	4a3b      	ldr	r2, [pc, #236]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7ff fa2b 	bl	8001728 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d6:	f7ff fa27 	bl	8001728 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1b7      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e8:	4b32      	ldr	r3, [pc, #200]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80a6 	beq.w	8002450 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002308:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002320:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d118      	bne.n	800236e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233c:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <HAL_RCC_OscConfig+0x508>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002348:	f7ff f9ee 	bl	8001728 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7ff f9ea 	bl	8001728 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e17a      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_RCC_OscConfig+0x508>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d8>
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002386:	e029      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d115      	bne.n	80023bc <HAL_RCC_OscConfig+0x50c>
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c2:	4a9b      	ldr	r2, [pc, #620]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023cc:	4b98      	ldr	r3, [pc, #608]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a97      	ldr	r2, [pc, #604]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d016      	beq.n	8002412 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f9a0 	bl	8001728 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7ff f99c 	bl	8001728 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e12a      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b8b      	ldr	r3, [pc, #556]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ed      	beq.n	80023ec <HAL_RCC_OscConfig+0x53c>
 8002410:	e015      	b.n	800243e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff f989 	bl	8001728 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff f985 	bl	8001728 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e113      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	4b7f      	ldr	r3, [pc, #508]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ed      	bne.n	800241a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243e:	7ffb      	ldrb	r3, [r7, #31]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	4a79      	ldr	r2, [pc, #484]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80fe 	beq.w	8002656 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 80d0 	bne.w	8002604 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002464:	4b72      	ldr	r3, [pc, #456]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0203 	and.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	429a      	cmp	r2, r3
 8002476:	d130      	bne.n	80024da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	3b01      	subs	r3, #1
 8002484:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d127      	bne.n	80024da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d11f      	bne.n	80024da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024a4:	2a07      	cmp	r2, #7
 80024a6:	bf14      	ite	ne
 80024a8:	2201      	movne	r2, #1
 80024aa:	2200      	moveq	r2, #0
 80024ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d113      	bne.n	80024da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d109      	bne.n	80024da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d06e      	beq.n	80025b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d069      	beq.n	80025b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0ad      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a4b      	ldr	r2, [pc, #300]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002508:	f7ff f90e 	bl	8001728 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7ff f90a 	bl	8001728 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e09a      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252e:	4b40      	ldr	r3, [pc, #256]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <HAL_RCC_OscConfig+0x784>)
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800253e:	3a01      	subs	r2, #1
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002548:	0212      	lsls	r2, r2, #8
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002550:	0852      	lsrs	r2, r2, #1
 8002552:	3a01      	subs	r2, #1
 8002554:	0552      	lsls	r2, r2, #21
 8002556:	4311      	orrs	r1, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800255c:	0852      	lsrs	r2, r2, #1
 800255e:	3a01      	subs	r2, #1
 8002560:	0652      	lsls	r2, r2, #25
 8002562:	4311      	orrs	r1, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002568:	0912      	lsrs	r2, r2, #4
 800256a:	0452      	lsls	r2, r2, #17
 800256c:	430a      	orrs	r2, r1
 800256e:	4930      	ldr	r1, [pc, #192]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002574:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a2a      	ldr	r2, [pc, #168]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800258c:	f7ff f8cc 	bl	8001728 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f8c8 	bl	8001728 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e058      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b2:	e050      	b.n	8002656 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e04f      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d148      	bne.n	8002656 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d0:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025dc:	f7ff f8a4 	bl	8001728 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7ff f8a0 	bl	8001728 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e030      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x734>
 8002602:	e028      	b.n	8002656 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d023      	beq.n	8002652 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a08      	ldr	r2, [pc, #32]	@ (8002630 <HAL_RCC_OscConfig+0x780>)
 8002610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff f887 	bl	8001728 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261c:	e00c      	b.n	8002638 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff f883 	bl	8001728 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d905      	bls.n	8002638 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e013      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
 8002630:	40021000 	.word	0x40021000
 8002634:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_OscConfig+0x7b0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ec      	bne.n	800261e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x7b0>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4905      	ldr	r1, [pc, #20]	@ (8002660 <HAL_RCC_OscConfig+0x7b0>)
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_RCC_OscConfig+0x7b4>)
 800264c:	4013      	ands	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e001      	b.n	8002656 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	feeefffc 	.word	0xfeeefffc

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0e7      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b72      	ldr	r3, [pc, #456]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4970      	ldr	r1, [pc, #448]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b6e      	ldr	r3, [pc, #440]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0cf      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d908      	bls.n	80026da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4960      	ldr	r1, [pc, #384]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04c      	beq.n	8002780 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d121      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0a6      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d115      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e09a      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e08e      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e086      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4943      	ldr	r1, [pc, #268]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe ffea 	bl	8001728 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe ffe6 	bl	8001728 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e06e      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002798:	429a      	cmp	r2, r3
 800279a:	d208      	bcs.n	80027ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b2e      	ldr	r3, [pc, #184]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	492b      	ldr	r1, [pc, #172]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d210      	bcs.n	80027de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027bc:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 0207 	bic.w	r2, r3, #7
 80027c4:	4923      	ldr	r1, [pc, #140]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e036      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4918      	ldr	r1, [pc, #96]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4910      	ldr	r1, [pc, #64]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800281c:	f000 f824 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	490b      	ldr	r1, [pc, #44]	@ (800285c <HAL_RCC_ClockConfig+0x1f4>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_RCC_ClockConfig+0x1fc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fe4b 	bl	80014dc <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	72fb      	strb	r3, [r7, #11]

  return status;
 800284a:	7afb      	ldrb	r3, [r7, #11]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40022000 	.word	0x40022000
 8002858:	40021000 	.word	0x40021000
 800285c:	08007928 	.word	0x08007928
 8002860:	20000008 	.word	0x20000008
 8002864:	2000000c 	.word	0x2000000c

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x34>
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d121      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d11e      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800289c:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a8:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d102      	bne.n	80028e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e0:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e004      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <HAL_RCC_GetSysClockFreq+0x114>)
 80028ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d134      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0xa6>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d003      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0xac>
 800290c:	e005      	b.n	800291a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x110>)
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_RCC_GetSysClockFreq+0x114>)
 8002916:	617b      	str	r3, [r7, #20]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	617b      	str	r3, [r7, #20]
      break;
 800291e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	3301      	adds	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	fb03 f202 	mul.w	r2, r3, r2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	0e5b      	lsrs	r3, r3, #25
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	3301      	adds	r3, #1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002960:	69bb      	ldr	r3, [r7, #24]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	08007940 	.word	0x08007940
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000008 	.word	0x20000008

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4904      	ldr	r1, [pc, #16]	@ (80029c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08007938 	.word	0x08007938

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c8:	f7ff ffda 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0adb      	lsrs	r3, r3, #11
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4904      	ldr	r1, [pc, #16]	@ (80029ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08007938 	.word	0x08007938

080029f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	220f      	movs	r2, #15
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_RCC_GetClockConfig+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40022000 	.word	0x40022000

08002a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a60:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a6c:	f7ff f9bc 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002a70:	6178      	str	r0, [r7, #20]
 8002a72:	e014      	b.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a8c:	f7ff f9ac 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa4:	d10b      	bne.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	@ 0x80
 8002aaa:	d919      	bls.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ab0:	d902      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e013      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab8:	2301      	movs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e010      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b80      	cmp	r3, #128	@ 0x80
 8002ac2:	d902      	bls.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e00a      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	@ 0x80
 8002ace:	d102      	bne.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e004      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b70      	cmp	r3, #112	@ 0x70
 8002ada:	d101      	bne.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
 8002ae8:	4909      	ldr	r1, [pc, #36]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b20:	2300      	movs	r3, #0
 8002b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d041      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b38:	d02a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b3e:	d824      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b4a:	d81e      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b54:	d010      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b56:	e018      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b58:	4b86      	ldr	r3, [pc, #536]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a85      	ldr	r2, [pc, #532]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b64:	e015      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fabb 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b76:	e00c      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fba6 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b88:	e003      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b98:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba6:	4973      	ldr	r1, [pc, #460]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002bae:	e001      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d041      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bc8:	d02a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bce:	d824      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bda:	d81e      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be4:	d010      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be8:	4b62      	ldr	r3, [pc, #392]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a61      	ldr	r2, [pc, #388]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa73 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c06:	e00c      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3320      	adds	r3, #32
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb5e 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c28:	4b52      	ldr	r3, [pc, #328]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c36:	494f      	ldr	r1, [pc, #316]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a0 	beq.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a40      	ldr	r2, [pc, #256]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fd48 	bl	8001728 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fd44 	bl	8001728 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	74fb      	strb	r3, [r7, #19]
        break;
 8002cae:	e005      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d15c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d019      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cec:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	4a20      	ldr	r2, [pc, #128]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d0c:	4a19      	ldr	r2, [pc, #100]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fd03 	bl	8001728 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	e00b      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fcff 	bl	8001728 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ec      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d62:	4904      	ldr	r1, [pc, #16]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d6a:	e009      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	7c7b      	ldrb	r3, [r7, #17]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b9e      	ldr	r3, [pc, #632]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	4a9d      	ldr	r2, [pc, #628]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9e:	4b98      	ldr	r3, [pc, #608]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	4994      	ldr	r1, [pc, #592]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 020c 	bic.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	498c      	ldr	r1, [pc, #560]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de2:	4b87      	ldr	r3, [pc, #540]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	4983      	ldr	r1, [pc, #524]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e04:	4b7e      	ldr	r3, [pc, #504]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	497b      	ldr	r1, [pc, #492]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e26:	4b76      	ldr	r3, [pc, #472]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	4972      	ldr	r1, [pc, #456]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e48:	4b6d      	ldr	r3, [pc, #436]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	496a      	ldr	r1, [pc, #424]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	4961      	ldr	r1, [pc, #388]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	4959      	ldr	r1, [pc, #356]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	4950      	ldr	r1, [pc, #320]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	4948      	ldr	r1, [pc, #288]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef2:	4b43      	ldr	r3, [pc, #268]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	493f      	ldr	r1, [pc, #252]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d028      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f14:	4b3a      	ldr	r3, [pc, #232]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f22:	4937      	ldr	r1, [pc, #220]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a31      	ldr	r2, [pc, #196]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
 8002f40:	e011      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f8c8 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	491f      	ldr	r1, [pc, #124]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f92:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	60d3      	str	r3, [r2, #12]
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f899 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	4908      	ldr	r1, [pc, #32]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fee:	d109      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a02      	ldr	r2, [pc, #8]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
 8002ffc:	e014      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f867 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003034:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003042:	4928      	ldr	r1, [pc, #160]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003052:	d10d      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f844 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	74bb      	strb	r3, [r7, #18]
 800306e:	e011      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3320      	adds	r3, #32
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f925 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ae:	490d      	ldr	r1, [pc, #52]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030d2:	4904      	ldr	r1, [pc, #16]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030da:	7cbb      	ldrb	r3, [r7, #18]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000

080030e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030f6:	4b75      	ldr	r3, [pc, #468]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003102:	4b72      	ldr	r3, [pc, #456]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d10d      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
       ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800311a:	4b6c      	ldr	r3, [pc, #432]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
       ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d047      	beq.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e044      	b.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d018      	beq.n	800316e <RCCEx_PLLSAI1_Config+0x86>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d825      	bhi.n	800318c <RCCEx_PLLSAI1_Config+0xa4>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x62>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d009      	beq.n	800315c <RCCEx_PLLSAI1_Config+0x74>
 8003148:	e020      	b.n	800318c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314a:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11d      	bne.n	8003192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315a:	e01a      	b.n	8003192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315c:	4b5b      	ldr	r3, [pc, #364]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316c:	e013      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800316e:	4b57      	ldr	r3, [pc, #348]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317a:	4b54      	ldr	r3, [pc, #336]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318a:	e006      	b.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e004      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319a:	bf00      	nop
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a2:	4b4a      	ldr	r3, [pc, #296]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4944      	ldr	r1, [pc, #272]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d17d      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a40      	ldr	r2, [pc, #256]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe faaa 	bl	8001728 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d6:	e009      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d8:	f7fe faa6 	bl	8001728 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ea:	e005      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ec:	4b37      	ldr	r3, [pc, #220]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ef      	bne.n	80031d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d160      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003204:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800320c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6892      	ldr	r2, [r2, #8]
 8003214:	0211      	lsls	r1, r2, #8
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	0912      	lsrs	r2, r2, #4
 800321c:	0452      	lsls	r2, r2, #17
 800321e:	430a      	orrs	r2, r1
 8003220:	492a      	ldr	r1, [pc, #168]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	610b      	str	r3, [r1, #16]
 8003226:	e027      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d112      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800322e:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003236:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	0211      	lsls	r1, r2, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6912      	ldr	r2, [r2, #16]
 8003244:	0852      	lsrs	r2, r2, #1
 8003246:	3a01      	subs	r2, #1
 8003248:	0552      	lsls	r2, r2, #21
 800324a:	430a      	orrs	r2, r1
 800324c:	491f      	ldr	r1, [pc, #124]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	610b      	str	r3, [r1, #16]
 8003252:	e011      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003254:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800325c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	0211      	lsls	r1, r2, #8
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6952      	ldr	r2, [r2, #20]
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0652      	lsls	r2, r2, #25
 8003270:	430a      	orrs	r2, r1
 8003272:	4916      	ldr	r1, [pc, #88]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003278:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800327e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fa50 	bl	8001728 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328a:	e009      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328c:	f7fe fa4c 	bl	8001728 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	73fb      	strb	r3, [r7, #15]
          break;
 800329e:	e005      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4904      	ldr	r1, [pc, #16]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032de:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032ea:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0203 	and.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10d      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
       ||
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003302:	4b61      	ldr	r3, [pc, #388]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
       ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d047      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e044      	b.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d018      	beq.n	8003356 <RCCEx_PLLSAI2_Config+0x86>
 8003324:	2b03      	cmp	r3, #3
 8003326:	d825      	bhi.n	8003374 <RCCEx_PLLSAI2_Config+0xa4>
 8003328:	2b01      	cmp	r3, #1
 800332a:	d002      	beq.n	8003332 <RCCEx_PLLSAI2_Config+0x62>
 800332c:	2b02      	cmp	r3, #2
 800332e:	d009      	beq.n	8003344 <RCCEx_PLLSAI2_Config+0x74>
 8003330:	e020      	b.n	8003374 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003332:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003342:	e01a      	b.n	800337a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003344:	4b50      	ldr	r3, [pc, #320]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e013      	b.n	800337e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003356:	4b4c      	ldr	r3, [pc, #304]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003362:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003372:	e006      	b.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e004      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003382:	bf00      	nop
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800338a:	4b3f      	ldr	r3, [pc, #252]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	430b      	orrs	r3, r1
 80033a0:	4939      	ldr	r1, [pc, #228]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d167      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033ac:	4b36      	ldr	r3, [pc, #216]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a35      	ldr	r2, [pc, #212]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe f9b6 	bl	8001728 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033be:	e009      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033c0:	f7fe f9b2 	bl	8001728 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d902      	bls.n	80033d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
        break;
 80033d2:	e005      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ef      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d14a      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ec:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	0211      	lsls	r1, r2, #8
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68d2      	ldr	r2, [r2, #12]
 8003402:	0912      	lsrs	r2, r2, #4
 8003404:	0452      	lsls	r2, r2, #17
 8003406:	430a      	orrs	r2, r1
 8003408:	491f      	ldr	r1, [pc, #124]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	614b      	str	r3, [r1, #20]
 800340e:	e011      	b.n	8003434 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003410:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003418:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
 8003420:	0211      	lsls	r1, r2, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6912      	ldr	r2, [r2, #16]
 8003426:	0852      	lsrs	r2, r2, #1
 8003428:	3a01      	subs	r2, #1
 800342a:	0652      	lsls	r2, r2, #25
 800342c:	430a      	orrs	r2, r1
 800342e:	4916      	ldr	r1, [pc, #88]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a13      	ldr	r2, [pc, #76]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe f972 	bl	8001728 <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003446:	e009      	b.n	800345c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003448:	f7fe f96e 	bl	8001728 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
          break;
 800345a:	e005      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4904      	ldr	r1, [pc, #16]	@ (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	4313      	orrs	r3, r2
 800347a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e049      	b.n	8003532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd ff8c 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fb1e 	bl	8003b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d001      	beq.n	8003554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e047      	b.n	80035e4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_TIM_Base_Start+0xb4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356e:	d018      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_TIM_Base_Start+0xb8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1e      	ldr	r2, [pc, #120]	@ (80035f8 <HAL_TIM_Base_Start+0xbc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <HAL_TIM_Base_Start+0xc0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_TIM_Base_Start+0xc4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_Base_Start+0x66>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_TIM_Base_Start+0xc8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d115      	bne.n	80035ce <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <HAL_TIM_Base_Start+0xcc>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d015      	beq.n	80035e0 <HAL_TIM_Base_Start+0xa4>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ba:	d011      	beq.n	80035e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	e008      	b.n	80035e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e000      	b.n	80035e2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40013400 	.word	0x40013400
 8003604:	40014000 	.word	0x40014000
 8003608:	00010007 	.word	0x00010007

0800360c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e04f      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a23      	ldr	r2, [pc, #140]	@ (80036d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01d      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364e:	d018      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1f      	ldr	r2, [pc, #124]	@ (80036d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1e      	ldr	r2, [pc, #120]	@ (80036d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1c      	ldr	r2, [pc, #112]	@ (80036dc <HAL_TIM_Base_Start_IT+0xd0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	@ (80036e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d115      	bne.n	80036ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d015      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369a:	d011      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	e008      	b.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40013400 	.word	0x40013400
 80036e4:	40014000 	.word	0x40014000
 80036e8:	00010007 	.word	0x00010007

080036ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0202 	mvn.w	r2, #2
 8003718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9ce 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9c0 	bl	8003abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9d1 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0204 	mvn.w	r2, #4
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9a4 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f996 	bl	8003abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9a7 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0208 	mvn.w	r2, #8
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f97a 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f96c 	bl	8003abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f97d 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b10      	cmp	r3, #16
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0210 	mvn.w	r2, #16
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2208      	movs	r2, #8
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f950 	bl	8003ad0 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f942 	bl	8003abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f953 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fd72 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	2b80      	cmp	r3, #128	@ 0x80
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b80      	cmp	r3, #128	@ 0x80
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fafe 	bl	8003e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b80      	cmp	r3, #128	@ 0x80
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 faf1 	bl	8003eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f901 	bl	8003af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b20      	cmp	r3, #32
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0220 	mvn.w	r2, #32
 800391a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fab1 	bl	8003e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_TIM_ConfigClockSource+0x1c>
 8003942:	2302      	movs	r3, #2
 8003944:	e0b6      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x18a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003964:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003968:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003970:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003982:	d03e      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0xd8>
 8003984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003988:	f200 8087 	bhi.w	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003990:	f000 8086 	beq.w	8003aa0 <HAL_TIM_ConfigClockSource+0x176>
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003998:	d87f      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 800399a:	2b70      	cmp	r3, #112	@ 0x70
 800399c:	d01a      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0xaa>
 800399e:	2b70      	cmp	r3, #112	@ 0x70
 80039a0:	d87b      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039a2:	2b60      	cmp	r3, #96	@ 0x60
 80039a4:	d050      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x11e>
 80039a6:	2b60      	cmp	r3, #96	@ 0x60
 80039a8:	d877      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039aa:	2b50      	cmp	r3, #80	@ 0x50
 80039ac:	d03c      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0xfe>
 80039ae:	2b50      	cmp	r3, #80	@ 0x50
 80039b0:	d873      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	d058      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0x13e>
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d86f      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039ba:	2b30      	cmp	r3, #48	@ 0x30
 80039bc:	d064      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x15e>
 80039be:	2b30      	cmp	r3, #48	@ 0x30
 80039c0:	d86b      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d060      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x15e>
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d867      	bhi.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d05c      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x15e>
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d05a      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x15e>
 80039d2:	e062      	b.n	8003a9a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e4:	f000 f9a6 	bl	8003d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
      break;
 8003a00:	e04f      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a12:	f000 f98f 	bl	8003d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a24:	609a      	str	r2, [r3, #8]
      break;
 8003a26:	e03c      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a34:	461a      	mov	r2, r3
 8003a36:	f000 f903 	bl	8003c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2150      	movs	r1, #80	@ 0x50
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f95c 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a46:	e02c      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a54:	461a      	mov	r2, r3
 8003a56:	f000 f922 	bl	8003c9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2160      	movs	r1, #96	@ 0x60
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f94c 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a66:	e01c      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a74:	461a      	mov	r2, r3
 8003a76:	f000 f8e3 	bl	8003c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2140      	movs	r1, #64	@ 0x40
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f93c 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a86:	e00c      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f000 f933 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a98:	e003      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <TIM_Base_SetConfig+0x114>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2a:	d00f      	beq.n	8003b4c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c24 <TIM_Base_SetConfig+0x118>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00b      	beq.n	8003b4c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3c      	ldr	r2, [pc, #240]	@ (8003c28 <TIM_Base_SetConfig+0x11c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <TIM_Base_SetConfig+0x120>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <TIM_Base_SetConfig+0x124>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <TIM_Base_SetConfig+0x114>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6c:	d01b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2c      	ldr	r2, [pc, #176]	@ (8003c24 <TIM_Base_SetConfig+0x118>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d017      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	@ (8003c28 <TIM_Base_SetConfig+0x11c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <TIM_Base_SetConfig+0x120>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00f      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a29      	ldr	r2, [pc, #164]	@ (8003c30 <TIM_Base_SetConfig+0x124>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a28      	ldr	r2, [pc, #160]	@ (8003c34 <TIM_Base_SetConfig+0x128>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a27      	ldr	r2, [pc, #156]	@ (8003c38 <TIM_Base_SetConfig+0x12c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x9a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <TIM_Base_SetConfig+0x130>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00f      	beq.n	8003c04 <TIM_Base_SetConfig+0xf8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <TIM_Base_SetConfig+0x124>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a11      	ldr	r2, [pc, #68]	@ (8003c34 <TIM_Base_SetConfig+0x128>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0xf8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a10      	ldr	r2, [pc, #64]	@ (8003c38 <TIM_Base_SetConfig+0x12c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0xf8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8003c3c <TIM_Base_SetConfig+0x130>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d103      	bne.n	8003c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	615a      	str	r2, [r3, #20]
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 030a 	bic.w	r3, r3, #10
 8003c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b087      	sub	sp, #28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0210 	bic.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	031b      	lsls	r3, r3, #12
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f043 0307 	orr.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e068      	b.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2d      	ldr	r2, [pc, #180]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfe:	d018      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a14      	ldr	r2, [pc, #80]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10c      	bne.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000

08003e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e040      	b.n	8003f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fa94 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	@ 0x24
 8003eec:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fbc0 	bl	8004684 <UART_SetConfig>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e022      	b.n	8003f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fe6c 	bl	8004bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fef3 	bl	8004d38 <UART_CheckIdleState>
 8003f52:	4603      	mov	r3, r0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	f040 8081 	bne.w	8004078 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_Transmit+0x26>
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e079      	b.n	800407a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Transmit+0x38>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e072      	b.n	800407a <HAL_UART_Transmit+0x11e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	@ 0x21
 8003fa8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003faa:	f7fd fbbd 	bl	8001728 <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc8:	d108      	bne.n	8003fdc <HAL_UART_Transmit+0x80>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e003      	b.n	8003fe4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8003fec:	e02c      	b.n	8004048 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	@ 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fee6 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e038      	b.n	800407a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401a:	b292      	uxth	r2, r2
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	3302      	adds	r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e007      	b.n	8004036 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1cc      	bne.n	8003fee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	2140      	movs	r1, #64	@ 0x40
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 feb3 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e005      	b.n	800407a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b0ba      	sub	sp, #232	@ 0xe8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040b2:	4013      	ands	r3, r2
 80040b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d115      	bne.n	80040ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00f      	beq.n	80040ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 82a6 	beq.w	800462e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
      }
      return;
 80040ea:	e2a0      	b.n	800462e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8117 	beq.w	8004324 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004106:	4b85      	ldr	r3, [pc, #532]	@ (800431c <HAL_UART_IRQHandler+0x298>)
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 810a 	beq.w	8004324 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_UART_IRQHandler+0xbc>
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d011      	beq.n	8004170 <HAL_UART_IRQHandler+0xec>
 800414c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2202      	movs	r2, #2
 800415e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004166:	f043 0204 	orr.w	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d011      	beq.n	80041a0 <HAL_UART_IRQHandler+0x11c>
 800417c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2204      	movs	r2, #4
 800418e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2208      	movs	r2, #8
 80041ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_UART_IRQHandler+0x18a>
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 820c 	beq.w	8004632 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	d005      	beq.n	8004266 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004262:	2b00      	cmp	r3, #0
 8004264:	d04f      	beq.n	8004306 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 ff3e 	bl	80050e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d141      	bne.n	80042fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1d9      	bne.n	800427a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d013      	beq.n	80042f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <HAL_UART_IRQHandler+0x29c>)
 80042d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd fb50 	bl	8001980 <HAL_DMA_Abort_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d017      	beq.n	8004316 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80042f0:	4610      	mov	r0, r2
 80042f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	e00f      	b.n	8004316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9ba 	bl	8004670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	e00b      	b.n	8004316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f9b6 	bl	8004670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004304:	e007      	b.n	8004316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9b2 	bl	8004670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
    return;
 8004314:	e18d      	b.n	8004632 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004316:	bf00      	nop
    return;
 8004318:	e18b      	b.n	8004632 <HAL_UART_IRQHandler+0x5ae>
 800431a:	bf00      	nop
 800431c:	04000120 	.word	0x04000120
 8004320:	080051af 	.word	0x080051af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 8146 	bne.w	80045ba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 813f 	beq.w	80045ba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8138 	beq.w	80045ba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	f040 80b4 	bne.w	80044ca <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800436e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 815f 	beq.w	8004636 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800437e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004382:	429a      	cmp	r2, r3
 8004384:	f080 8157 	bcs.w	8004636 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800438e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8085 	bne.w	80044ae <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1da      	bne.n	80043a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004412:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004416:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800441a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e1      	bne.n	80043ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800443a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800443c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800444e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004454:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800445c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800447c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004492:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004496:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800449e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fd fa2b 	bl	8001904 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 fc68 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c8:	e0b5      	b.n	8004636 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80a7 	beq.w	800463a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80044ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a2 	beq.w	800463a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800450a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004518:	647b      	str	r3, [r7, #68]	@ 0x44
 800451a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800451e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e4      	bne.n	80044f6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	623b      	str	r3, [r7, #32]
   return(result);
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004550:	633a      	str	r2, [r7, #48]	@ 0x30
 8004552:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e3      	bne.n	800452c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	665a      	str	r2, [r3, #100]	@ 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	60fb      	str	r3, [r7, #12]
   return(result);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	617b      	str	r3, [r7, #20]
   return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e4      	bne.n	8004576 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f001 fbf0 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045b8:	e03f      	b.n	800463a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_UART_IRQHandler+0x560>
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 ff86 	bl	80054ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045e2:	e02d      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01c      	beq.n	800463e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
    }
    return;
 800460c:	e017      	b.n	800463e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d012      	beq.n	8004640 <HAL_UART_IRQHandler+0x5bc>
 800461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fdd7 	bl	80051da <UART_EndTransmit_IT>
    return;
 800462c:	e008      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
      return;
 800462e:	bf00      	nop
 8004630:	e006      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004632:	bf00      	nop
 8004634:	e004      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004636:	bf00      	nop
 8004638:	e002      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
      return;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_UART_IRQHandler+0x5bc>
    return;
 800463e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004640:	37e8      	adds	r7, #232	@ 0xe8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop

08004648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b08a      	sub	sp, #40	@ 0x28
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004944 <UART_SetConfig+0x2c0>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a99      	ldr	r2, [pc, #612]	@ (8004948 <UART_SetConfig+0x2c4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ec:	4313      	orrs	r3, r2
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a90      	ldr	r2, [pc, #576]	@ (800494c <UART_SetConfig+0x2c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d126      	bne.n	800475c <UART_SetConfig+0xd8>
 800470e:	4b90      	ldr	r3, [pc, #576]	@ (8004950 <UART_SetConfig+0x2cc>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b03      	cmp	r3, #3
 800471a:	d81b      	bhi.n	8004754 <UART_SetConfig+0xd0>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <UART_SetConfig+0xa0>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e116      	b.n	800496a <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e112      	b.n	800496a <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e10e      	b.n	800496a <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e10a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e106      	b.n	800496a <UART_SetConfig+0x2e6>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7c      	ldr	r2, [pc, #496]	@ (8004954 <UART_SetConfig+0x2d0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d138      	bne.n	80047d8 <UART_SetConfig+0x154>
 8004766:	4b7a      	ldr	r3, [pc, #488]	@ (8004950 <UART_SetConfig+0x2cc>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d82d      	bhi.n	80047d0 <UART_SetConfig+0x14c>
 8004774:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <UART_SetConfig+0xf8>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047d1 	.word	0x080047d1
 8004784:	080047d1 	.word	0x080047d1
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e0d8      	b.n	800496a <UART_SetConfig+0x2e6>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e0d4      	b.n	800496a <UART_SetConfig+0x2e6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e0d0      	b.n	800496a <UART_SetConfig+0x2e6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e0cc      	b.n	800496a <UART_SetConfig+0x2e6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e0c8      	b.n	800496a <UART_SetConfig+0x2e6>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004958 <UART_SetConfig+0x2d4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d125      	bne.n	800482e <UART_SetConfig+0x1aa>
 80047e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004950 <UART_SetConfig+0x2cc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d016      	beq.n	800481e <UART_SetConfig+0x19a>
 80047f0:	2b30      	cmp	r3, #48	@ 0x30
 80047f2:	d818      	bhi.n	8004826 <UART_SetConfig+0x1a2>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d00a      	beq.n	800480e <UART_SetConfig+0x18a>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d814      	bhi.n	8004826 <UART_SetConfig+0x1a2>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <UART_SetConfig+0x182>
 8004800:	2b10      	cmp	r3, #16
 8004802:	d008      	beq.n	8004816 <UART_SetConfig+0x192>
 8004804:	e00f      	b.n	8004826 <UART_SetConfig+0x1a2>
 8004806:	2300      	movs	r3, #0
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480c:	e0ad      	b.n	800496a <UART_SetConfig+0x2e6>
 800480e:	2302      	movs	r3, #2
 8004810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004814:	e0a9      	b.n	800496a <UART_SetConfig+0x2e6>
 8004816:	2304      	movs	r3, #4
 8004818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481c:	e0a5      	b.n	800496a <UART_SetConfig+0x2e6>
 800481e:	2308      	movs	r3, #8
 8004820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004824:	e0a1      	b.n	800496a <UART_SetConfig+0x2e6>
 8004826:	2310      	movs	r3, #16
 8004828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482c:	e09d      	b.n	800496a <UART_SetConfig+0x2e6>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a4a      	ldr	r2, [pc, #296]	@ (800495c <UART_SetConfig+0x2d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d125      	bne.n	8004884 <UART_SetConfig+0x200>
 8004838:	4b45      	ldr	r3, [pc, #276]	@ (8004950 <UART_SetConfig+0x2cc>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004842:	2bc0      	cmp	r3, #192	@ 0xc0
 8004844:	d016      	beq.n	8004874 <UART_SetConfig+0x1f0>
 8004846:	2bc0      	cmp	r3, #192	@ 0xc0
 8004848:	d818      	bhi.n	800487c <UART_SetConfig+0x1f8>
 800484a:	2b80      	cmp	r3, #128	@ 0x80
 800484c:	d00a      	beq.n	8004864 <UART_SetConfig+0x1e0>
 800484e:	2b80      	cmp	r3, #128	@ 0x80
 8004850:	d814      	bhi.n	800487c <UART_SetConfig+0x1f8>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x1d8>
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d008      	beq.n	800486c <UART_SetConfig+0x1e8>
 800485a:	e00f      	b.n	800487c <UART_SetConfig+0x1f8>
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e082      	b.n	800496a <UART_SetConfig+0x2e6>
 8004864:	2302      	movs	r3, #2
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e07e      	b.n	800496a <UART_SetConfig+0x2e6>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004872:	e07a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e076      	b.n	800496a <UART_SetConfig+0x2e6>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004882:	e072      	b.n	800496a <UART_SetConfig+0x2e6>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <UART_SetConfig+0x2dc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d12a      	bne.n	80048e4 <UART_SetConfig+0x260>
 800488e:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <UART_SetConfig+0x2cc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489c:	d01a      	beq.n	80048d4 <UART_SetConfig+0x250>
 800489e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a2:	d81b      	bhi.n	80048dc <UART_SetConfig+0x258>
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a8:	d00c      	beq.n	80048c4 <UART_SetConfig+0x240>
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d815      	bhi.n	80048dc <UART_SetConfig+0x258>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <UART_SetConfig+0x238>
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b8:	d008      	beq.n	80048cc <UART_SetConfig+0x248>
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x258>
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c2:	e052      	b.n	800496a <UART_SetConfig+0x2e6>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e04e      	b.n	800496a <UART_SetConfig+0x2e6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e04a      	b.n	800496a <UART_SetConfig+0x2e6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e046      	b.n	800496a <UART_SetConfig+0x2e6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e042      	b.n	800496a <UART_SetConfig+0x2e6>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <UART_SetConfig+0x2c4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d13a      	bne.n	8004964 <UART_SetConfig+0x2e0>
 80048ee:	4b18      	ldr	r3, [pc, #96]	@ (8004950 <UART_SetConfig+0x2cc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048fc:	d01a      	beq.n	8004934 <UART_SetConfig+0x2b0>
 80048fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004902:	d81b      	bhi.n	800493c <UART_SetConfig+0x2b8>
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004908:	d00c      	beq.n	8004924 <UART_SetConfig+0x2a0>
 800490a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490e:	d815      	bhi.n	800493c <UART_SetConfig+0x2b8>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <UART_SetConfig+0x298>
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004918:	d008      	beq.n	800492c <UART_SetConfig+0x2a8>
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x2b8>
 800491c:	2300      	movs	r3, #0
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004922:	e022      	b.n	800496a <UART_SetConfig+0x2e6>
 8004924:	2302      	movs	r3, #2
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492a:	e01e      	b.n	800496a <UART_SetConfig+0x2e6>
 800492c:	2304      	movs	r3, #4
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004932:	e01a      	b.n	800496a <UART_SetConfig+0x2e6>
 8004934:	2308      	movs	r3, #8
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493a:	e016      	b.n	800496a <UART_SetConfig+0x2e6>
 800493c:	2310      	movs	r3, #16
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004942:	e012      	b.n	800496a <UART_SetConfig+0x2e6>
 8004944:	efff69f3 	.word	0xefff69f3
 8004948:	40008000 	.word	0x40008000
 800494c:	40013800 	.word	0x40013800
 8004950:	40021000 	.word	0x40021000
 8004954:	40004400 	.word	0x40004400
 8004958:	40004800 	.word	0x40004800
 800495c:	40004c00 	.word	0x40004c00
 8004960:	40005000 	.word	0x40005000
 8004964:	2310      	movs	r3, #16
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a9f      	ldr	r2, [pc, #636]	@ (8004bec <UART_SetConfig+0x568>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d17a      	bne.n	8004a6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004978:	2b08      	cmp	r3, #8
 800497a:	d824      	bhi.n	80049c6 <UART_SetConfig+0x342>
 800497c:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <UART_SetConfig+0x300>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049c7 	.word	0x080049c7
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fd fff6 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b8f      	ldr	r3, [pc, #572]	@ (8004bf0 <UART_SetConfig+0x56c>)
 80049b2:	61fb      	str	r3, [r7, #28]
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fd ff57 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 80049ba:	61f8      	str	r0, [r7, #28]
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80fb 	beq.w	8004bd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d305      	bcc.n	80049f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049fc:	e0e8      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2200      	movs	r2, #0
 8004a02:	461c      	mov	r4, r3
 8004a04:	4615      	mov	r5, r2
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	022b      	lsls	r3, r5, #8
 8004a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a14:	0222      	lsls	r2, r4, #8
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6849      	ldr	r1, [r1, #4]
 8004a1a:	0849      	lsrs	r1, r1, #1
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	4688      	mov	r8, r1
 8004a20:	4681      	mov	r9, r0
 8004a22:	eb12 0a08 	adds.w	sl, r2, r8
 8004a26:	eb43 0b09 	adc.w	fp, r3, r9
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	4650      	mov	r0, sl
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	f7fb ffbe 	bl	80009bc <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4e:	d308      	bcc.n	8004a62 <UART_SetConfig+0x3de>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a56:	d204      	bcs.n	8004a62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e0b6      	b.n	8004bd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a68:	e0b2      	b.n	8004bd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a72:	d15e      	bne.n	8004b32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d828      	bhi.n	8004ace <UART_SetConfig+0x44a>
 8004a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <UART_SetConfig+0x400>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	08004acf 	.word	0x08004acf
 8004a94:	08004abf 	.word	0x08004abf
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004acf 	.word	0x08004acf
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7fd ff76 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004aac:	61f8      	str	r0, [r7, #28]
        break;
 8004aae:	e014      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ab0:	f7fd ff88 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8004ab4:	61f8      	str	r0, [r7, #28]
        break;
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8004bf0 <UART_SetConfig+0x56c>)
 8004aba:	61fb      	str	r3, [r7, #28]
        break;
 8004abc:	e00d      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7fd fed3 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004ac2:	61f8      	str	r0, [r7, #28]
        break;
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aca:	61fb      	str	r3, [r7, #28]
        break;
 8004acc:	e005      	b.n	8004ada <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d077      	beq.n	8004bd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	005a      	lsls	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b0f      	cmp	r3, #15
 8004afa:	d916      	bls.n	8004b2a <UART_SetConfig+0x4a6>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b02:	d212      	bcs.n	8004b2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f023 030f 	bic.w	r3, r3, #15
 8004b0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	8afb      	ldrh	r3, [r7, #22]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	8afa      	ldrh	r2, [r7, #22]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e052      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b30:	e04e      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d827      	bhi.n	8004b8a <UART_SetConfig+0x506>
 8004b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0x4bc>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fd ff18 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004b68:	61f8      	str	r0, [r7, #28]
        break;
 8004b6a:	e014      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fd ff2a 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61f8      	str	r0, [r7, #28]
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <UART_SetConfig+0x56c>)
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fd fe75 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004b7e:	61f8      	str	r0, [r7, #28]
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b86:	61fb      	str	r3, [r7, #28]
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b94:	bf00      	nop
    }

    if (pclk != 0U)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d019      	beq.n	8004bd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085a      	lsrs	r2, r3, #1
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d909      	bls.n	8004bca <UART_SetConfig+0x546>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbc:	d205      	bcs.n	8004bca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8004bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3728      	adds	r7, #40	@ 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bea:	bf00      	nop
 8004bec:	40008000 	.word	0x40008000
 8004bf0:	00f42400 	.word	0x00f42400

08004bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf2:	d10a      	bne.n	8004d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d48:	f7fc fcee 	bl	8001728 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d10e      	bne.n	8004d7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f82d 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e023      	b.n	8004dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d10e      	bne.n	8004da6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f817 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e00d      	b.n	8004dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b09c      	sub	sp, #112	@ 0x70
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	e0a5      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	f000 80a1 	beq.w	8004f28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fc fc9f 	bl	8001728 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x32>
 8004df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d13e      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e1c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e067      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d04f      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e96:	d147      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ea0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ef4:	623a      	str	r2, [r7, #32]
 8004ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e010      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	f43f af4a 	beq.w	8004ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3770      	adds	r7, #112	@ 0x70
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b097      	sub	sp, #92	@ 0x5c
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f86:	d10e      	bne.n	8004fa6 <UART_Start_Receive_IT+0x52>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <UART_Start_Receive_IT+0x48>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f9a:	e02d      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22ff      	movs	r2, #255	@ 0xff
 8004fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fa4:	e028      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <UART_Start_Receive_IT+0x76>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <UART_Start_Receive_IT+0x6c>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	22ff      	movs	r2, #255	@ 0xff
 8004fba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fbe:	e01b      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	227f      	movs	r2, #127	@ 0x7f
 8004fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fc8:	e016      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fd2:	d10d      	bne.n	8004ff0 <UART_Start_Receive_IT+0x9c>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <UART_Start_Receive_IT+0x92>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	227f      	movs	r2, #127	@ 0x7f
 8004fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fe4:	e008      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	223f      	movs	r2, #63	@ 0x3f
 8004fea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fee:	e003      	b.n	8004ff8 <UART_Start_Receive_IT+0xa4>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2222      	movs	r2, #34	@ 0x22
 8005004:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3308      	adds	r3, #8
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	657b      	str	r3, [r7, #84]	@ 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005026:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005028:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800502c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d107      	bne.n	8005054 <UART_Start_Receive_IT+0x100>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a24      	ldr	r2, [pc, #144]	@ (80050e0 <UART_Start_Receive_IT+0x18c>)
 8005050:	665a      	str	r2, [r3, #100]	@ 0x64
 8005052:	e002      	b.n	800505a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a23      	ldr	r2, [pc, #140]	@ (80050e4 <UART_Start_Receive_IT+0x190>)
 8005058:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d019      	beq.n	800509e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
 800508a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800508e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_Start_Receive_IT+0x116>
 800509c:	e018      	b.n	80050d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f043 0320 	orr.w	r3, r3, #32
 80050b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	375c      	adds	r7, #92	@ 0x5c
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	0800538f 	.word	0x0800538f
 80050e4:	0800522f 	.word	0x0800522f

080050e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b095      	sub	sp, #84	@ 0x54
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005110:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e6      	bne.n	80050f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	61fb      	str	r3, [r7, #28]
   return(result);
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515a:	2b01      	cmp	r3, #1
 800515c:	d118      	bne.n	8005190 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	60bb      	str	r3, [r7, #8]
   return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0310 	bic.w	r3, r3, #16
 8005172:	647b      	str	r3, [r7, #68]	@ 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80051a2:	bf00      	nop
 80051a4:	3754      	adds	r7, #84	@ 0x54
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fa4f 	bl	8004670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b088      	sub	sp, #32
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	613b      	str	r3, [r7, #16]
   return(result);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fa11 	bl	8004648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b096      	sub	sp, #88	@ 0x58
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800523c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005244:	2b22      	cmp	r3, #34	@ 0x22
 8005246:	f040 8094 	bne.w	8005372 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005250:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005254:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005258:	b2d9      	uxtb	r1, r3
 800525a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800525e:	b2da      	uxtb	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	400a      	ands	r2, r1
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d179      	bne.n	8005386 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	623b      	str	r3, [r7, #32]
   return(result);
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005308:	2b01      	cmp	r3, #1
 800530a:	d12e      	bne.n	800536a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0310 	bic.w	r3, r3, #16
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	617b      	str	r3, [r7, #20]
   return(result);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d103      	bne.n	800535a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2210      	movs	r2, #16
 8005358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fd18 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005368:	e00d      	b.n	8005386 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff f976 	bl	800465c <HAL_UART_RxCpltCallback>
}
 8005370:	e009      	b.n	8005386 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	8b1b      	ldrh	r3, [r3, #24]
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0208 	orr.w	r2, r2, #8
 8005382:	b292      	uxth	r2, r2
 8005384:	831a      	strh	r2, [r3, #24]
}
 8005386:	bf00      	nop
 8005388:	3758      	adds	r7, #88	@ 0x58
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b096      	sub	sp, #88	@ 0x58
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800539c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a4:	2b22      	cmp	r3, #34	@ 0x22
 80053a6:	f040 8094 	bne.w	80054d2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053b0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80053ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80053be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d179      	bne.n	80054e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
 8005412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e6      	bne.n	80053f2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	61fb      	str	r3, [r7, #28]
   return(result);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800544a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005468:	2b01      	cmp	r3, #1
 800546a:	d12e      	bne.n	80054ca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f023 0310 	bic.w	r3, r3, #16
 8005486:	647b      	str	r3, [r7, #68]	@ 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	613b      	str	r3, [r7, #16]
   return(result);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e6      	bne.n	8005472 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d103      	bne.n	80054ba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fc68 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054c8:	e00d      	b.n	80054e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff f8c6 	bl	800465c <HAL_UART_RxCpltCallback>
}
 80054d0:	e009      	b.n	80054e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	8b1b      	ldrh	r3, [r3, #24]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0208 	orr.w	r2, r2, #8
 80054e2:	b292      	uxth	r2, r2
 80054e4:	831a      	strh	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	3758      	adds	r7, #88	@ 0x58
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b08c      	sub	sp, #48	@ 0x30
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005514:	2b20      	cmp	r3, #32
 8005516:	d14a      	bne.n	80055ae <HAL_UARTEx_ReceiveToIdle_IT+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_UARTEx_ReceiveToIdle_IT+0x22>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e043      	b.n	80055b0 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    }

    __HAL_LOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 8005532:	2302      	movs	r3, #2
 8005534:	e03c      	b.n	80055b0 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	661a      	str	r2, [r3, #96]	@ 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	461a      	mov	r2, r3
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff fd02 	bl	8004f54 <UART_Start_Receive_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800555a:	2b00      	cmp	r3, #0
 800555c:	d124      	bne.n	80055a8 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005562:	2b01      	cmp	r3, #1
 8005564:	d11d      	bne.n	80055a2 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	617b      	str	r3, [r7, #20]
   return(result);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f043 0310 	orr.w	r3, r3, #16
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
 800558e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	61fb      	str	r3, [r7, #28]
   return(result);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <HAL_UARTEx_ReceiveToIdle_IT+0x6c>
 80055a0:	e002      	b.n	80055a8 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80055a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055ac:	e000      	b.n	80055b0 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	@ 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 80055c2:	2201      	movs	r2, #1
 80055c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055cc:	f7fc fbdc 	bl	8001d88 <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f828 	bl	800562c <crc16>
 80055dc:	4603      	mov	r3, r0
 80055de:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	89fa      	ldrh	r2, [r7, #14]
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	b299      	uxth	r1, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	3302      	adds	r3, #2
 8005604:	b29a      	uxth	r2, r3
 8005606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4806      	ldr	r0, [pc, #24]	@ (8005628 <sendData+0x70>)
 800560e:	f7fe fca5 	bl	8003f5c <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8005612:	2200      	movs	r2, #0
 8005614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800561c:	f7fc fbb4 	bl	8001d88 <HAL_GPIO_WritePin>

}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200003f0 	.word	0x200003f0

0800562c <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8005638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800563c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 800563e:	2300      	movs	r3, #0
 8005640:	81bb      	strh	r3, [r7, #12]
 8005642:	e022      	b.n	800568a <crc16+0x5e>
        crc ^= data[i];
 8005644:	89bb      	ldrh	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	4053      	eors	r3, r2
 8005652:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8005654:	2300      	movs	r3, #0
 8005656:	72fb      	strb	r3, [r7, #11]
 8005658:	e011      	b.n	800567e <crc16+0x52>
            if (crc & 0x0001) {
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8005664:	89fb      	ldrh	r3, [r7, #14]
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <crc16+0x74>)
 800566c:	4053      	eors	r3, r2
 800566e:	81fb      	strh	r3, [r7, #14]
 8005670:	e002      	b.n	8005678 <crc16+0x4c>
            } else {
                crc >>= 1;
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	3301      	adds	r3, #1
 800567c:	72fb      	strb	r3, [r7, #11]
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	2b07      	cmp	r3, #7
 8005682:	d9ea      	bls.n	800565a <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8005684:	89bb      	ldrh	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	81bb      	strh	r3, [r7, #12]
 800568a:	89ba      	ldrh	r2, [r7, #12]
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3d8      	bcc.n	8005644 <crc16+0x18>
            }
        }
    }
    return crc;
 8005692:	89fb      	ldrh	r3, [r7, #14]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	ffffa001 	.word	0xffffa001

080056a4 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 80056ae:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <modbusException+0x38>)
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <modbusException+0x3c>)
 80056b4:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 80056b6:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <modbusException+0x38>)
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <modbusException+0x3c>)
 80056c2:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 80056c4:	4a06      	ldr	r2, [pc, #24]	@ (80056e0 <modbusException+0x3c>)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 80056ca:	2103      	movs	r1, #3
 80056cc:	4804      	ldr	r0, [pc, #16]	@ (80056e0 <modbusException+0x3c>)
 80056ce:	f7ff ff73 	bl	80055b8 <sendData>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200004cc 	.word	0x200004cc
 80056e0:	200005cc 	.word	0x200005cc

080056e4 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	460a      	mov	r2, r1
 80056ee:	80fb      	strh	r3, [r7, #6]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 80056f4:	88bb      	ldrh	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <readHoldingRegs+0x1c>
 80056fa:	88bb      	ldrh	r3, [r7, #4]
 80056fc:	2b32      	cmp	r3, #50	@ 0x32
 80056fe:	d904      	bls.n	800570a <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005700:	2003      	movs	r0, #3
 8005702:	f7ff ffcf 	bl	80056a4 <modbusException>
        return 0;
 8005706:	2300      	movs	r3, #0
 8005708:	e04c      	b.n	80057a4 <readHoldingRegs+0xc0>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	88bb      	ldrh	r3, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8005716:	89fb      	ldrh	r3, [r7, #14]
 8005718:	2b32      	cmp	r3, #50	@ 0x32
 800571a:	d904      	bls.n	8005726 <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800571c:	2002      	movs	r0, #2
 800571e:	f7ff ffc1 	bl	80056a4 <modbusException>
        return 0;
 8005722:	2300      	movs	r3, #0
 8005724:	e03e      	b.n	80057a4 <readHoldingRegs+0xc0>
    }

    memset(TxData, '\0', 256);
 8005726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800572a:	2100      	movs	r1, #0
 800572c:	481f      	ldr	r0, [pc, #124]	@ (80057ac <readHoldingRegs+0xc8>)
 800572e:	f002 f88f 	bl	8007850 <memset>
    TxData[0] = Slave_ID;
 8005732:	4b1f      	ldr	r3, [pc, #124]	@ (80057b0 <readHoldingRegs+0xcc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b1c      	ldr	r3, [pc, #112]	@ (80057ac <readHoldingRegs+0xc8>)
 800573a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 800573c:	4b1d      	ldr	r3, [pc, #116]	@ (80057b4 <readHoldingRegs+0xd0>)
 800573e:	785a      	ldrb	r2, [r3, #1]
 8005740:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <readHoldingRegs+0xc8>)
 8005742:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8005744:	88bb      	ldrh	r3, [r7, #4]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	b2da      	uxtb	r2, r3
 800574c:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <readHoldingRegs+0xc8>)
 800574e:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005750:	2303      	movs	r3, #3
 8005752:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e01b      	b.n	8005792 <readHoldingRegs+0xae>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	4a16      	ldr	r2, [pc, #88]	@ (80057b8 <readHoldingRegs+0xd4>)
 800575e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b299      	uxth	r1, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	617a      	str	r2, [r7, #20]
 800576c:	b2c9      	uxtb	r1, r1
 800576e:	4a0f      	ldr	r2, [pc, #60]	@ (80057ac <readHoldingRegs+0xc8>)
 8005770:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	4a10      	ldr	r2, [pc, #64]	@ (80057b8 <readHoldingRegs+0xd4>)
 8005776:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	617a      	str	r2, [r7, #20]
 8005780:	b2c9      	uxtb	r1, r1
 8005782:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <readHoldingRegs+0xc8>)
 8005784:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	3301      	adds	r3, #1
 800578a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3301      	adds	r3, #1
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	88bb      	ldrh	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	429a      	cmp	r2, r3
 8005798:	dbdf      	blt.n	800575a <readHoldingRegs+0x76>
    }

    sendData(TxData, indx);
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	4803      	ldr	r0, [pc, #12]	@ (80057ac <readHoldingRegs+0xc8>)
 800579e:	f7ff ff0b 	bl	80055b8 <sendData>
    return 1;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200005cc 	.word	0x200005cc
 80057b0:	20000000 	.word	0x20000000
 80057b4:	200004cc 	.word	0x200004cc
 80057b8:	20000014 	.word	0x20000014

080057bc <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	460a      	mov	r2, r1
 80057c6:	80fb      	strh	r3, [r7, #6]
 80057c8:	4613      	mov	r3, r2
 80057ca:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 80057cc:	88bb      	ldrh	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <readInputRegs+0x1c>
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	2b32      	cmp	r3, #50	@ 0x32
 80057d6:	d904      	bls.n	80057e2 <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 80057d8:	2003      	movs	r0, #3
 80057da:	f7ff ff63 	bl	80056a4 <modbusException>
        return 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	e04c      	b.n	800587c <readInputRegs+0xc0>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 80057ee:	89fb      	ldrh	r3, [r7, #14]
 80057f0:	2b32      	cmp	r3, #50	@ 0x32
 80057f2:	d904      	bls.n	80057fe <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80057f4:	2002      	movs	r0, #2
 80057f6:	f7ff ff55 	bl	80056a4 <modbusException>
        return 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e03e      	b.n	800587c <readInputRegs+0xc0>
    }

    memset(TxData, '\0', 256);
 80057fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005802:	2100      	movs	r1, #0
 8005804:	481f      	ldr	r0, [pc, #124]	@ (8005884 <readInputRegs+0xc8>)
 8005806:	f002 f823 	bl	8007850 <memset>
    TxData[0] = Slave_ID;
 800580a:	4b1f      	ldr	r3, [pc, #124]	@ (8005888 <readInputRegs+0xcc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	4b1c      	ldr	r3, [pc, #112]	@ (8005884 <readInputRegs+0xc8>)
 8005812:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005814:	4b1d      	ldr	r3, [pc, #116]	@ (800588c <readInputRegs+0xd0>)
 8005816:	785a      	ldrb	r2, [r3, #1]
 8005818:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <readInputRegs+0xc8>)
 800581a:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 800581c:	88bb      	ldrh	r3, [r7, #4]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	4b17      	ldr	r3, [pc, #92]	@ (8005884 <readInputRegs+0xc8>)
 8005826:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005828:	2303      	movs	r3, #3
 800582a:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e01b      	b.n	800586a <readInputRegs+0xae>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <readInputRegs+0xd4>)
 8005836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	b299      	uxth	r1, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	617a      	str	r2, [r7, #20]
 8005844:	b2c9      	uxtb	r1, r1
 8005846:	4a0f      	ldr	r2, [pc, #60]	@ (8005884 <readInputRegs+0xc8>)
 8005848:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	4a10      	ldr	r2, [pc, #64]	@ (8005890 <readInputRegs+0xd4>)
 800584e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	617a      	str	r2, [r7, #20]
 8005858:	b2c9      	uxtb	r1, r1
 800585a:	4a0a      	ldr	r2, [pc, #40]	@ (8005884 <readInputRegs+0xc8>)
 800585c:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	3301      	adds	r3, #1
 8005862:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	3301      	adds	r3, #1
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	dbdf      	blt.n	8005832 <readInputRegs+0x76>
    }

    sendData(TxData, indx);
 8005872:	6979      	ldr	r1, [r7, #20]
 8005874:	4803      	ldr	r0, [pc, #12]	@ (8005884 <readInputRegs+0xc8>)
 8005876:	f7ff fe9f 	bl	80055b8 <sendData>
    return 1;
 800587a:	2301      	movs	r3, #1
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200005cc 	.word	0x200005cc
 8005888:	20000000 	.word	0x20000000
 800588c:	200004cc 	.word	0x200004cc
 8005890:	20000078 	.word	0x20000078

08005894 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	460a      	mov	r2, r1
 800589e:	80fb      	strh	r3, [r7, #6]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 80058a4:	88bb      	ldrh	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <readCoils+0x1e>
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80058b0:	d904      	bls.n	80058bc <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 80058b2:	2003      	movs	r0, #3
 80058b4:	f7ff fef6 	bl	80056a4 <modbusException>
        return 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e082      	b.n	80059c2 <readCoils+0x12e>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	88bb      	ldrh	r3, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 80058c8:	897b      	ldrh	r3, [r7, #10]
 80058ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80058cc:	d904      	bls.n	80058d8 <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80058ce:	2002      	movs	r0, #2
 80058d0:	f7ff fee8 	bl	80056a4 <modbusException>
        return 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e074      	b.n	80059c2 <readCoils+0x12e>
    }

    memset(TxData, '\0', 256);
 80058d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058dc:	2100      	movs	r1, #0
 80058de:	483b      	ldr	r0, [pc, #236]	@ (80059cc <readCoils+0x138>)
 80058e0:	f001 ffb6 	bl	8007850 <memset>
    TxData[0] = Slave_ID;
 80058e4:	4b3a      	ldr	r3, [pc, #232]	@ (80059d0 <readCoils+0x13c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b38      	ldr	r3, [pc, #224]	@ (80059cc <readCoils+0x138>)
 80058ec:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80058ee:	4b39      	ldr	r3, [pc, #228]	@ (80059d4 <readCoils+0x140>)
 80058f0:	785a      	ldrb	r2, [r3, #1]
 80058f2:	4b36      	ldr	r3, [pc, #216]	@ (80059cc <readCoils+0x138>)
 80058f4:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 80058f6:	88bb      	ldrh	r3, [r7, #4]
 80058f8:	08db      	lsrs	r3, r3, #3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	88ba      	ldrh	r2, [r7, #4]
 8005900:	f002 0207 	and.w	r2, r2, #7
 8005904:	b292      	uxth	r2, r2
 8005906:	2a00      	cmp	r2, #0
 8005908:	bf14      	ite	ne
 800590a:	2201      	movne	r2, #1
 800590c:	2200      	moveq	r2, #0
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	4413      	add	r3, r2
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <readCoils+0x138>)
 8005916:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005918:	2303      	movs	r3, #3
 800591a:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	08db      	lsrs	r3, r3, #3
 8005920:	b29b      	uxth	r3, r3
 8005922:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e033      	b.n	800599e <readCoils+0x10a>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8005936:	4a25      	ldr	r2, [pc, #148]	@ (80059cc <readCoils+0x138>)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b25a      	sxtb	r2, r3
 8005940:	4925      	ldr	r1, [pc, #148]	@ (80059d8 <readCoils+0x144>)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	440b      	add	r3, r1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	4619      	mov	r1, r3
 800594a:	8afb      	ldrh	r3, [r7, #22]
 800594c:	fa41 f303 	asr.w	r3, r1, r3
 8005950:	f003 0101 	and.w	r1, r3, #1
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	b25b      	sxtb	r3, r3
 800595c:	4313      	orrs	r3, r2
 800595e:	b25b      	sxtb	r3, r3
 8005960:	b2d9      	uxtb	r1, r3
 8005962:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <readCoils+0x138>)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	460a      	mov	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3301      	adds	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
        bitPosition++;
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	3301      	adds	r3, #1
 8005976:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b07      	cmp	r3, #7
 800597c:	dd04      	ble.n	8005988 <readCoils+0xf4>
            indxPosition = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
            indx++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	2b07      	cmp	r3, #7
 800598c:	d904      	bls.n	8005998 <readCoils+0x104>
            bitPosition = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	82fb      	strh	r3, [r7, #22]
            startByte++;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3301      	adds	r3, #1
 8005996:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	88bb      	ldrh	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	dbc7      	blt.n	8005936 <readCoils+0xa2>
        }
    }

    if (numCoils % 8 != 0) indx++;
 80059a6:	88bb      	ldrh	r3, [r7, #4]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <readCoils+0x124>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	4804      	ldr	r0, [pc, #16]	@ (80059cc <readCoils+0x138>)
 80059bc:	f7ff fdfc 	bl	80055b8 <sendData>
    return 1;
 80059c0:	2301      	movs	r3, #1
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200005cc 	.word	0x200005cc
 80059d0:	20000000 	.word	0x20000000
 80059d4:	200004cc 	.word	0x200004cc
 80059d8:	200000dc 	.word	0x200000dc

080059dc <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	460a      	mov	r2, r1
 80059e6:	80fb      	strh	r3, [r7, #6]
 80059e8:	4613      	mov	r3, r2
 80059ea:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b31      	cmp	r3, #49	@ 0x31
 80059f0:	d904      	bls.n	80059fc <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80059f2:	2002      	movs	r0, #2
 80059f4:	f7ff fe56 	bl	80056a4 <modbusException>
        return 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e022      	b.n	8005a42 <writeSingleHoldingReg+0x66>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	4913      	ldr	r1, [pc, #76]	@ (8005a4c <writeSingleHoldingReg+0x70>)
 8005a00:	88ba      	ldrh	r2, [r7, #4]
 8005a02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = Slave_ID;
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <writeSingleHoldingReg+0x74>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b11      	ldr	r3, [pc, #68]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a0e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005a10:	4b11      	ldr	r3, [pc, #68]	@ (8005a58 <writeSingleHoldingReg+0x7c>)
 8005a12:	785a      	ldrb	r2, [r3, #1]
 8005a14:	4b0f      	ldr	r3, [pc, #60]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a16:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005a18:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <writeSingleHoldingReg+0x7c>)
 8005a1a:	789a      	ldrb	r2, [r3, #2]
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a1e:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005a20:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <writeSingleHoldingReg+0x7c>)
 8005a22:	78da      	ldrb	r2, [r3, #3]
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a26:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005a28:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <writeSingleHoldingReg+0x7c>)
 8005a2a:	791a      	ldrb	r2, [r3, #4]
 8005a2c:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a2e:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <writeSingleHoldingReg+0x7c>)
 8005a32:	795a      	ldrb	r2, [r3, #5]
 8005a34:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a36:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005a38:	2106      	movs	r1, #6
 8005a3a:	4806      	ldr	r0, [pc, #24]	@ (8005a54 <writeSingleHoldingReg+0x78>)
 8005a3c:	f7ff fdbc 	bl	80055b8 <sendData>
    return 1;
 8005a40:	2301      	movs	r3, #1
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000014 	.word	0x20000014
 8005a50:	20000000 	.word	0x20000000
 8005a54:	200005cc 	.word	0x200005cc
 8005a58:	200004cc 	.word	0x200004cc

08005a5c <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	603a      	str	r2, [r7, #0]
 8005a66:	80fb      	strh	r3, [r7, #6]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 8005a6c:	88bb      	ldrh	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <writeHoldingRegs+0x1c>
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	2b7b      	cmp	r3, #123	@ 0x7b
 8005a76:	d904      	bls.n	8005a82 <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005a78:	2003      	movs	r0, #3
 8005a7a:	f7ff fe13 	bl	80056a4 <modbusException>
        return 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e041      	b.n	8005b06 <writeHoldingRegs+0xaa>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	88bb      	ldrh	r3, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	2b31      	cmp	r3, #49	@ 0x31
 8005a92:	d904      	bls.n	8005a9e <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005a94:	2002      	movs	r0, #2
 8005a96:	f7ff fe05 	bl	80056a4 <modbusException>
        return 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e033      	b.n	8005b06 <writeHoldingRegs+0xaa>
    }

    for (int i = 0; i < numRegs; i++) {
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e00e      	b.n	8005ac2 <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	441a      	add	r2, r3
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	80f9      	strh	r1, [r7, #6]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	4b16      	ldr	r3, [pc, #88]	@ (8005b10 <writeHoldingRegs+0xb4>)
 8005ab8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	88bb      	ldrh	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	dbec      	blt.n	8005aa4 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = Slave_ID;
 8005aca:	4b12      	ldr	r3, [pc, #72]	@ (8005b14 <writeHoldingRegs+0xb8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b11      	ldr	r3, [pc, #68]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005ad2:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <writeHoldingRegs+0xc0>)
 8005ad6:	785a      	ldrb	r2, [r3, #1]
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005ada:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005adc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <writeHoldingRegs+0xc0>)
 8005ade:	789a      	ldrb	r2, [r3, #2]
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005ae2:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <writeHoldingRegs+0xc0>)
 8005ae6:	78da      	ldrb	r2, [r3, #3]
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005aea:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005aec:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <writeHoldingRegs+0xc0>)
 8005aee:	791a      	ldrb	r2, [r3, #4]
 8005af0:	4b09      	ldr	r3, [pc, #36]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005af2:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005af4:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <writeHoldingRegs+0xc0>)
 8005af6:	795a      	ldrb	r2, [r3, #5]
 8005af8:	4b07      	ldr	r3, [pc, #28]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005afa:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005afc:	2106      	movs	r1, #6
 8005afe:	4806      	ldr	r0, [pc, #24]	@ (8005b18 <writeHoldingRegs+0xbc>)
 8005b00:	f7ff fd5a 	bl	80055b8 <sendData>
    return 1;
 8005b04:	2301      	movs	r3, #1
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000014 	.word	0x20000014
 8005b14:	20000000 	.word	0x20000000
 8005b18:	200005cc 	.word	0x200005cc
 8005b1c:	200004cc 	.word	0x200004cc

08005b20 <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	460a      	mov	r2, r1
 8005b2a:	80fb      	strh	r3, [r7, #6]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b34:	d904      	bls.n	8005b40 <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005b36:	2002      	movs	r0, #2
 8005b38:	f7ff fdb4 	bl	80056a4 <modbusException>
        return 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e05e      	b.n	8005bfe <writeSingleCoil+0xde>
    }

    int bytePos = writeAddr / 8;
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8005b50:	797b      	ldrb	r3, [r7, #5]
 8005b52:	2bff      	cmp	r3, #255	@ 0xff
 8005b54:	d116      	bne.n	8005b84 <writeSingleCoil+0x64>
 8005b56:	4b2c      	ldr	r3, [pc, #176]	@ (8005c08 <writeSingleCoil+0xe8>)
 8005b58:	795b      	ldrb	r3, [r3, #5]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d112      	bne.n	8005b84 <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c0c <writeSingleCoil+0xec>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b25a      	sxtb	r2, r3
 8005b68:	2101      	movs	r1, #1
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	b25b      	sxtb	r3, r3
 8005b72:	4313      	orrs	r3, r2
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	b2d9      	uxtb	r1, r3
 8005b78:	4a24      	ldr	r2, [pc, #144]	@ (8005c0c <writeSingleCoil+0xec>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	460a      	mov	r2, r1
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e020      	b.n	8005bc6 <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 8005b84:	797b      	ldrb	r3, [r7, #5]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d118      	bne.n	8005bbc <writeSingleCoil+0x9c>
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c08 <writeSingleCoil+0xe8>)
 8005b8c:	795b      	ldrb	r3, [r3, #5]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d114      	bne.n	8005bbc <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 8005b92:	4a1e      	ldr	r2, [pc, #120]	@ (8005c0c <writeSingleCoil+0xec>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b25a      	sxtb	r2, r3
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	4013      	ands	r3, r2
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	b2d9      	uxtb	r1, r3
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <writeSingleCoil+0xec>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e004      	b.n	8005bc6 <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8005bbc:	2003      	movs	r0, #3
 8005bbe:	f7ff fd71 	bl	80056a4 <modbusException>
        return 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e01b      	b.n	8005bfe <writeSingleCoil+0xde>
    }

    TxData[0] = Slave_ID;
 8005bc6:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <writeSingleCoil+0xf0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bce:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <writeSingleCoil+0xe8>)
 8005bd2:	785a      	ldrb	r2, [r3, #1]
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bd6:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <writeSingleCoil+0xe8>)
 8005bda:	789a      	ldrb	r2, [r3, #2]
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bde:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005be0:	4b09      	ldr	r3, [pc, #36]	@ (8005c08 <writeSingleCoil+0xe8>)
 8005be2:	78da      	ldrb	r2, [r3, #3]
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005be6:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8005be8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bea:	797b      	ldrb	r3, [r7, #5]
 8005bec:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8005bf4:	2106      	movs	r1, #6
 8005bf6:	4807      	ldr	r0, [pc, #28]	@ (8005c14 <writeSingleCoil+0xf4>)
 8005bf8:	f7ff fcde 	bl	80055b8 <sendData>
    return 1;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200004cc 	.word	0x200004cc
 8005c0c:	200000dc 	.word	0x200000dc
 8005c10:	20000000 	.word	0x20000000
 8005c14:	200005cc 	.word	0x200005cc

08005c18 <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	@ 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	603a      	str	r2, [r7, #0]
 8005c22:	80fb      	strh	r3, [r7, #6]
 8005c24:	460b      	mov	r3, r1
 8005c26:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 8005c28:	88bb      	ldrh	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <writeMultiCoils+0x1e>
 8005c2e:	88bb      	ldrh	r3, [r7, #4]
 8005c30:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8005c34:	d904      	bls.n	8005c40 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8005c36:	2003      	movs	r0, #3
 8005c38:	f7ff fd34 	bl	80056a4 <modbusException>
        return 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e09e      	b.n	8005d7e <writeMultiCoils+0x166>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	88bb      	ldrh	r3, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 8005c4c:	8a7b      	ldrh	r3, [r7, #18]
 8005c4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c50:	d904      	bls.n	8005c5c <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005c52:	2002      	movs	r0, #2
 8005c54:	f7ff fd26 	bl	80056a4 <modbusException>
        return 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e090      	b.n	8005d7e <writeMultiCoils+0x166>
    }

    int startByte = startAddr / 8;
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	08db      	lsrs	r3, r3, #3
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t bitPosition = startAddr % 8;
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	847b      	strh	r3, [r7, #34]	@ 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 8005c6c:	88bb      	ldrh	r3, [r7, #4]
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e052      	b.n	8005d3a <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e047      	b.n	8005d2a <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 8005c9a:	88bb      	ldrh	r3, [r7, #4]
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	da47      	bge.n	8005d32 <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fa42 f303 	asr.w	r3, r2, r3
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 8005cba:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <writeMultiCoils+0x170>)
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b25a      	sxtb	r2, r3
 8005cc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	b2d9      	uxtb	r1, r3
 8005cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d88 <writeMultiCoils+0x170>)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	4413      	add	r3, r2
 8005cda:	460a      	mov	r2, r1
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e013      	b.n	8005d08 <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 8005ce0:	4a29      	ldr	r2, [pc, #164]	@ (8005d88 <writeMultiCoils+0x170>)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	4413      	add	r3, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b25a      	sxtb	r2, r3
 8005cea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cec:	2101      	movs	r1, #1
 8005cee:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	b25b      	sxtb	r3, r3
 8005cfc:	b2d9      	uxtb	r1, r3
 8005cfe:	4a22      	ldr	r2, [pc, #136]	@ (8005d88 <writeMultiCoils+0x170>)
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	4413      	add	r3, r2
 8005d04:	460a      	mov	r2, r1
 8005d06:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 8005d08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (bitPosition > 7) {
 8005d0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d10:	2b07      	cmp	r3, #7
 8005d12:	d904      	bls.n	8005d1e <writeMultiCoils+0x106>
                bitPosition = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	847b      	strh	r3, [r7, #34]	@ 0x22
                startByte++;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            indx++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	ddb4      	ble.n	8005c9a <writeMultiCoils+0x82>
 8005d30:	e000      	b.n	8005d34 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 8005d32:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	dba8      	blt.n	8005c94 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = Slave_ID;
 8005d42:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <writeMultiCoils+0x174>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d4a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005d4c:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <writeMultiCoils+0x17c>)
 8005d4e:	785a      	ldrb	r2, [r3, #1]
 8005d50:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d52:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005d54:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <writeMultiCoils+0x17c>)
 8005d56:	789a      	ldrb	r2, [r3, #2]
 8005d58:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d5a:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <writeMultiCoils+0x17c>)
 8005d5e:	78da      	ldrb	r2, [r3, #3]
 8005d60:	4b0b      	ldr	r3, [pc, #44]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d62:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <writeMultiCoils+0x17c>)
 8005d66:	791a      	ldrb	r2, [r3, #4]
 8005d68:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d6a:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005d6c:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <writeMultiCoils+0x17c>)
 8005d6e:	795a      	ldrb	r2, [r3, #5]
 8005d70:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d72:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005d74:	2106      	movs	r1, #6
 8005d76:	4806      	ldr	r0, [pc, #24]	@ (8005d90 <writeMultiCoils+0x178>)
 8005d78:	f7ff fc1e 	bl	80055b8 <sendData>
    return 1;
 8005d7c:	2301      	movs	r3, #1
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3728      	adds	r7, #40	@ 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200000dc 	.word	0x200000dc
 8005d8c:	20000000 	.word	0x20000000
 8005d90:	200005cc 	.word	0x200005cc
 8005d94:	200004cc 	.word	0x200004cc

08005d98 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a69      	ldr	r2, [pc, #420]	@ (8005f50 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f040 80cd 	bne.w	8005f4a <HAL_UARTEx_RxEventCallback+0x1b2>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_UARTEx_RxEventCallback+0x26>
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbc:	d906      	bls.n	8005dcc <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dc2:	4964      	ldr	r1, [pc, #400]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fb9c 	bl	8005502 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005dca:	e0be      	b.n	8005f4a <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dd6:	f7fb ffd7 	bl	8001d88 <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != Slave_ID) {
 8005dda:	4b5e      	ldr	r3, [pc, #376]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	4b5d      	ldr	r3, [pc, #372]	@ (8005f58 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d006      	beq.n	8005df6 <HAL_UARTEx_RxEventCallback+0x5e>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dec:	4959      	ldr	r1, [pc, #356]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fb87 	bl	8005502 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005df4:	e0a9      	b.n	8005f4a <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	4a56      	ldr	r2, [pc, #344]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	b21a      	sxth	r2, r3
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	3b02      	subs	r3, #2
 8005e06:	4953      	ldr	r1, [pc, #332]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	3b02      	subs	r3, #2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	484e      	ldr	r0, [pc, #312]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e1c:	f7ff fc06 	bl	800562c <crc16>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	89fb      	ldrh	r3, [r7, #14]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d006      	beq.n	8005e38 <HAL_UARTEx_RxEventCallback+0xa0>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e2e:	4949      	ldr	r1, [pc, #292]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fb66 	bl	8005502 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005e36:	e088      	b.n	8005f4a <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8005e38:	4b46      	ldr	r3, [pc, #280]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e3a:	789b      	ldrb	r3, [r3, #2]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	4b44      	ldr	r3, [pc, #272]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 8005e4c:	4b41      	ldr	r3, [pc, #260]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b21a      	sxth	r2, r3
 8005e54:	4b3f      	ldr	r3, [pc, #252]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e56:	795b      	ldrb	r3, [r3, #5]
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 8005e60:	2201      	movs	r2, #1
 8005e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e6a:	f7fb ff8d 	bl	8001d88 <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 8005e6e:	4b39      	ldr	r3, [pc, #228]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d85e      	bhi.n	8005f36 <HAL_UARTEx_RxEventCallback+0x19e>
 8005e78:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <HAL_UARTEx_RxEventCallback+0xe8>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005ec1 	.word	0x08005ec1
 8005e84:	08005f37 	.word	0x08005f37
 8005e88:	08005ecf 	.word	0x08005ecf
 8005e8c:	08005edd 	.word	0x08005edd
 8005e90:	08005eeb 	.word	0x08005eeb
 8005e94:	08005efb 	.word	0x08005efb
 8005e98:	08005f37 	.word	0x08005f37
 8005e9c:	08005f37 	.word	0x08005f37
 8005ea0:	08005f37 	.word	0x08005f37
 8005ea4:	08005f37 	.word	0x08005f37
 8005ea8:	08005f37 	.word	0x08005f37
 8005eac:	08005f37 	.word	0x08005f37
 8005eb0:	08005f37 	.word	0x08005f37
 8005eb4:	08005f37 	.word	0x08005f37
 8005eb8:	08005f1b 	.word	0x08005f1b
 8005ebc:	08005f29 	.word	0x08005f29
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8005ec0:	897a      	ldrh	r2, [r7, #10]
 8005ec2:	89bb      	ldrh	r3, [r7, #12]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fce4 	bl	8005894 <readCoils>
                break;
 8005ecc:	e037      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 8005ece:	897a      	ldrh	r2, [r7, #10]
 8005ed0:	89bb      	ldrh	r3, [r7, #12]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fc05 	bl	80056e4 <readHoldingRegs>
                break;
 8005eda:	e030      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 8005edc:	897a      	ldrh	r2, [r7, #10]
 8005ede:	89bb      	ldrh	r3, [r7, #12]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fc6a 	bl	80057bc <readInputRegs>
                break;
 8005ee8:	e029      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 8005eea:	4b1a      	ldr	r3, [pc, #104]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005eec:	791a      	ldrb	r2, [r3, #4]
 8005eee:	89bb      	ldrh	r3, [r7, #12]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fe14 	bl	8005b20 <writeSingleCoil>
                break;
 8005ef8:	e021      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 8005efa:	4b16      	ldr	r3, [pc, #88]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	b21a      	sxth	r2, r3
 8005f02:	4b14      	ldr	r3, [pc, #80]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005f04:	795b      	ldrb	r3, [r3, #5]
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	89bb      	ldrh	r3, [r7, #12]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fd62 	bl	80059dc <writeSingleHoldingReg>
                break;
 8005f18:	e011      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 8005f1a:	8979      	ldrh	r1, [r7, #10]
 8005f1c:	89bb      	ldrh	r3, [r7, #12]
 8005f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f5c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fe79 	bl	8005c18 <writeMultiCoils>
                break;
 8005f26:	e00a      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 8005f28:	8979      	ldrh	r1, [r7, #10]
 8005f2a:	89bb      	ldrh	r3, [r7, #12]
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f60 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fd94 	bl	8005a5c <writeHoldingRegs>
                break;
 8005f34:	e003      	b.n	8005f3e <HAL_UARTEx_RxEventCallback+0x1a6>
            default:
                modbusException(ILLEGAL_FUNCTION);
 8005f36:	2001      	movs	r0, #1
 8005f38:	f7ff fbb4 	bl	80056a4 <modbusException>
                break;
 8005f3c:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f42:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fadc 	bl	8005502 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40013800 	.word	0x40013800
 8005f54:	200004cc 	.word	0x200004cc
 8005f58:	20000000 	.word	0x20000000
 8005f5c:	200004d3 	.word	0x200004d3
 8005f60:	200004d2 	.word	0x200004d2

08005f64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f76:	2b84      	cmp	r3, #132	@ 0x84
 8005f78:	d005      	beq.n	8005f86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	3303      	adds	r3, #3
 8005f84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f98:	f000 fae4 	bl	8006564 <vTaskStartScheduler>
  
  return osOK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa4:	b089      	sub	sp, #36	@ 0x24
 8005fa6:	af04      	add	r7, sp, #16
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <osThreadCreate+0x54>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01c      	beq.n	8005ff6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685c      	ldr	r4, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691e      	ldr	r6, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff ffc8 	bl	8005f64 <makeFreeRtosPriority>
 8005fd4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fde:	9202      	str	r2, [sp, #8]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	9100      	str	r1, [sp, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f8ed 	bl	80061ca <xTaskCreateStatic>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e01c      	b.n	8006030 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685c      	ldr	r4, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006002:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff ffaa 	bl	8005f64 <makeFreeRtosPriority>
 8006010:	4602      	mov	r2, r0
 8006012:	f107 030c 	add.w	r3, r7, #12
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	9200      	str	r2, [sp, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	4632      	mov	r2, r6
 800601e:	4629      	mov	r1, r5
 8006020:	4620      	mov	r0, r4
 8006022:	f000 f932 	bl	800628a <xTaskCreate>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800603a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <osDelay+0x16>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e000      	b.n	8006052 <osDelay+0x18>
 8006050:	2301      	movs	r3, #1
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fa50 	bl	80064f8 <vTaskDelay>
  
  return osOK;
 8006058:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f103 0208 	add.w	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f04f 32ff 	mov.w	r2, #4294967295
 800607a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f103 0208 	add.w	r2, r3, #8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f103 0208 	add.w	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d103      	bne.n	8006124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e00c      	b.n	800613e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3308      	adds	r3, #8
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e002      	b.n	8006132 <vListInsert+0x2e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	d2f6      	bcs.n	800612c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6892      	ldr	r2, [r2, #8]
 800618c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6852      	ldr	r2, [r2, #4]
 8006196:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d103      	bne.n	80061aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b08e      	sub	sp, #56	@ 0x38
 80061ce:	af04      	add	r7, sp, #16
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xTaskCreateStatic+0x4a>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	61fb      	str	r3, [r7, #28]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006214:	2354      	movs	r3, #84	@ 0x54
 8006216:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b54      	cmp	r3, #84	@ 0x54
 800621c:	d00b      	beq.n	8006236 <xTaskCreateStatic+0x6c>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61bb      	str	r3, [r7, #24]
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01e      	beq.n	800627c <xTaskCreateStatic+0xb2>
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	2202      	movs	r2, #2
 8006252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006256:	2300      	movs	r3, #0
 8006258:	9303      	str	r3, [sp, #12]
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	9302      	str	r3, [sp, #8]
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f850 	bl	8006314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006274:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006276:	f000 f8d5 	bl	8006424 <prvAddNewTaskToReadyList>
 800627a:	e001      	b.n	8006280 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006280:	697b      	ldr	r3, [r7, #20]
	}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	@ 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800628a:	b580      	push	{r7, lr}
 800628c:	b08c      	sub	sp, #48	@ 0x30
 800628e:	af04      	add	r7, sp, #16
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fed2 	bl	8007048 <pvPortMalloc>
 80062a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00e      	beq.n	80062ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062ac:	2054      	movs	r0, #84	@ 0x54
 80062ae:	f000 fecb 	bl	8007048 <pvPortMalloc>
 80062b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c0:	e005      	b.n	80062ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062c2:	6978      	ldr	r0, [r7, #20]
 80062c4:	f000 ff8e 	bl	80071e4 <vPortFree>
 80062c8:	e001      	b.n	80062ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d017      	beq.n	8006304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	2300      	movs	r3, #0
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	9302      	str	r3, [sp, #8]
 80062e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f80e 	bl	8006314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f8:	69f8      	ldr	r0, [r7, #28]
 80062fa:	f000 f893 	bl	8006424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062fe:	2301      	movs	r3, #1
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e002      	b.n	800630a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800630a:	69bb      	ldr	r3, [r7, #24]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800632c:	3b01      	subs	r3, #1
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	617b      	str	r3, [r7, #20]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01f      	beq.n	80063a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e012      	b.n	8006390 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	3334      	adds	r3, #52	@ 0x34
 800637a:	460a      	mov	r2, r1
 800637c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d006      	beq.n	8006398 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d9e9      	bls.n	800636a <prvInitialiseNewTask+0x56>
 8006396:	e000      	b.n	800639a <prvInitialiseNewTask+0x86>
			{
				break;
 8006398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a2:	e003      	b.n	80063ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d901      	bls.n	80063b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063b2:	2306      	movs	r3, #6
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2200      	movs	r2, #0
 80063c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fe68 	bl	80060a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	3318      	adds	r3, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fe63 	bl	80060a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f1c3 0207 	rsb	r2, r3, #7
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	2200      	movs	r2, #0
 80063f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	69b8      	ldr	r0, [r7, #24]
 8006406:	f000 fc0d 	bl	8006c24 <pxPortInitialiseStack>
 800640a:	4602      	mov	r2, r0
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800641c:	bf00      	nop
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800642c:	f000 fd2c 	bl	8006e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006430:	4b2a      	ldr	r3, [pc, #168]	@ (80064dc <prvAddNewTaskToReadyList+0xb8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	4a29      	ldr	r2, [pc, #164]	@ (80064dc <prvAddNewTaskToReadyList+0xb8>)
 8006438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800643a:	4b29      	ldr	r3, [pc, #164]	@ (80064e0 <prvAddNewTaskToReadyList+0xbc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006442:	4a27      	ldr	r2, [pc, #156]	@ (80064e0 <prvAddNewTaskToReadyList+0xbc>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006448:	4b24      	ldr	r3, [pc, #144]	@ (80064dc <prvAddNewTaskToReadyList+0xb8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d110      	bne.n	8006472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006450:	f000 fac4 	bl	80069dc <prvInitialiseTaskLists>
 8006454:	e00d      	b.n	8006472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006456:	4b23      	ldr	r3, [pc, #140]	@ (80064e4 <prvAddNewTaskToReadyList+0xc0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800645e:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <prvAddNewTaskToReadyList+0xbc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d802      	bhi.n	8006472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800646c:	4a1c      	ldr	r2, [pc, #112]	@ (80064e0 <prvAddNewTaskToReadyList+0xbc>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006472:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <prvAddNewTaskToReadyList+0xc4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <prvAddNewTaskToReadyList+0xc4>)
 800647a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	409a      	lsls	r2, r3
 8006484:	4b19      	ldr	r3, [pc, #100]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4313      	orrs	r3, r2
 800648a:	4a18      	ldr	r2, [pc, #96]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <prvAddNewTaskToReadyList+0xcc>)
 800649c:	441a      	add	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f7ff fe09 	bl	80060bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064aa:	f000 fd1f 	bl	8006eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <prvAddNewTaskToReadyList+0xc0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <prvAddNewTaskToReadyList+0xbc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d207      	bcs.n	80064d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064c4:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <prvAddNewTaskToReadyList+0xd0>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200007cc 	.word	0x200007cc
 80064e0:	200006cc 	.word	0x200006cc
 80064e4:	200007d8 	.word	0x200007d8
 80064e8:	200007e8 	.word	0x200007e8
 80064ec:	200007d4 	.word	0x200007d4
 80064f0:	200006d0 	.word	0x200006d0
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800650a:	4b14      	ldr	r3, [pc, #80]	@ (800655c <vTaskDelay+0x64>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <vTaskDelay+0x32>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800652a:	f000 f87d 	bl	8006628 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb11 	bl	8006b58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006536:	f000 f885 	bl	8006644 <xTaskResumeAll>
 800653a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006542:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <vTaskDelay+0x68>)
 8006544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200007f4 	.word	0x200007f4
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006572:	463a      	mov	r2, r7
 8006574:	1d39      	adds	r1, r7, #4
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f7fa fb96 	bl	8000cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	9202      	str	r2, [sp, #8]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2300      	movs	r3, #0
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	460a      	mov	r2, r1
 8006592:	491f      	ldr	r1, [pc, #124]	@ (8006610 <vTaskStartScheduler+0xac>)
 8006594:	481f      	ldr	r0, [pc, #124]	@ (8006614 <vTaskStartScheduler+0xb0>)
 8006596:	f7ff fe18 	bl	80061ca <xTaskCreateStatic>
 800659a:	4603      	mov	r3, r0
 800659c:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <vTaskStartScheduler+0xb4>)
 800659e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <vTaskStartScheduler+0xb4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065a8:	2301      	movs	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e001      	b.n	80065b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d116      	bne.n	80065e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	613b      	str	r3, [r7, #16]
}
 80065ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065cc:	4b13      	ldr	r3, [pc, #76]	@ (800661c <vTaskStartScheduler+0xb8>)
 80065ce:	f04f 32ff 	mov.w	r2, #4294967295
 80065d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065d4:	4b12      	ldr	r3, [pc, #72]	@ (8006620 <vTaskStartScheduler+0xbc>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <vTaskStartScheduler+0xc0>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065e0:	f000 fbae 	bl	8006d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065e4:	e00f      	b.n	8006606 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d10b      	bne.n	8006606 <vTaskStartScheduler+0xa2>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vTaskStartScheduler+0x9e>
}
 8006606:	bf00      	nop
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	08007920 	.word	0x08007920
 8006614:	080069ad 	.word	0x080069ad
 8006618:	200007f0 	.word	0x200007f0
 800661c:	200007ec 	.word	0x200007ec
 8006620:	200007d8 	.word	0x200007d8
 8006624:	200007d0 	.word	0x200007d0

08006628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <vTaskSuspendAll+0x18>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	4a03      	ldr	r2, [pc, #12]	@ (8006640 <vTaskSuspendAll+0x18>)
 8006634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006636:	bf00      	nop
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	200007f4 	.word	0x200007f4

08006644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006652:	4b42      	ldr	r3, [pc, #264]	@ (800675c <xTaskResumeAll+0x118>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xTaskResumeAll+0x2e>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	603b      	str	r3, [r7, #0]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006672:	f000 fc09 	bl	8006e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006676:	4b39      	ldr	r3, [pc, #228]	@ (800675c <xTaskResumeAll+0x118>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3b01      	subs	r3, #1
 800667c:	4a37      	ldr	r2, [pc, #220]	@ (800675c <xTaskResumeAll+0x118>)
 800667e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006680:	4b36      	ldr	r3, [pc, #216]	@ (800675c <xTaskResumeAll+0x118>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d161      	bne.n	800674c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006688:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <xTaskResumeAll+0x11c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05d      	beq.n	800674c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006690:	e02e      	b.n	80066f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006692:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <xTaskResumeAll+0x120>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3318      	adds	r3, #24
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fd69 	bl	8006176 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fd64 	bl	8006176 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	2201      	movs	r2, #1
 80066b4:	409a      	lsls	r2, r3
 80066b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006768 <xTaskResumeAll+0x124>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006768 <xTaskResumeAll+0x124>)
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4a27      	ldr	r2, [pc, #156]	@ (800676c <xTaskResumeAll+0x128>)
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7ff fcf0 	bl	80060bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e0:	4b23      	ldr	r3, [pc, #140]	@ (8006770 <xTaskResumeAll+0x12c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ea:	4b22      	ldr	r3, [pc, #136]	@ (8006774 <xTaskResumeAll+0x130>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006764 <xTaskResumeAll+0x120>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1cc      	bne.n	8006692 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066fe:	f000 fa0b 	bl	8006b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006702:	4b1d      	ldr	r3, [pc, #116]	@ (8006778 <xTaskResumeAll+0x134>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d010      	beq.n	8006730 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800670e:	f000 f837 	bl	8006780 <xTaskIncrementTick>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006718:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <xTaskResumeAll+0x130>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3b01      	subs	r3, #1
 8006722:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f1      	bne.n	800670e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800672a:	4b13      	ldr	r3, [pc, #76]	@ (8006778 <xTaskResumeAll+0x134>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006730:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <xTaskResumeAll+0x130>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800673c:	4b0f      	ldr	r3, [pc, #60]	@ (800677c <xTaskResumeAll+0x138>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674c:	f000 fbce 	bl	8006eec <vPortExitCritical>

	return xAlreadyYielded;
 8006750:	68bb      	ldr	r3, [r7, #8]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200007f4 	.word	0x200007f4
 8006760:	200007cc 	.word	0x200007cc
 8006764:	2000078c 	.word	0x2000078c
 8006768:	200007d4 	.word	0x200007d4
 800676c:	200006d0 	.word	0x200006d0
 8006770:	200006cc 	.word	0x200006cc
 8006774:	200007e0 	.word	0x200007e0
 8006778:	200007dc 	.word	0x200007dc
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678a:	4b4f      	ldr	r3, [pc, #316]	@ (80068c8 <xTaskIncrementTick+0x148>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 808f 	bne.w	80068b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006794:	4b4d      	ldr	r3, [pc, #308]	@ (80068cc <xTaskIncrementTick+0x14c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800679c:	4a4b      	ldr	r2, [pc, #300]	@ (80068cc <xTaskIncrementTick+0x14c>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d121      	bne.n	80067ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067a8:	4b49      	ldr	r3, [pc, #292]	@ (80068d0 <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	603b      	str	r3, [r7, #0]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xTaskIncrementTick+0x46>
 80067ca:	4b41      	ldr	r3, [pc, #260]	@ (80068d0 <xTaskIncrementTick+0x150>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	4b40      	ldr	r3, [pc, #256]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a3e      	ldr	r2, [pc, #248]	@ (80068d0 <xTaskIncrementTick+0x150>)
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4a3e      	ldr	r2, [pc, #248]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4b3e      	ldr	r3, [pc, #248]	@ (80068d8 <xTaskIncrementTick+0x158>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a3c      	ldr	r2, [pc, #240]	@ (80068d8 <xTaskIncrementTick+0x158>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f000 f996 	bl	8006b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ec:	4b3b      	ldr	r3, [pc, #236]	@ (80068dc <xTaskIncrementTick+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d348      	bcc.n	8006888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f6:	4b36      	ldr	r3, [pc, #216]	@ (80068d0 <xTaskIncrementTick+0x150>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <xTaskIncrementTick+0x15c>)
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	601a      	str	r2, [r3, #0]
					break;
 8006808:	e03e      	b.n	8006888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680a:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <xTaskIncrementTick+0x150>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	429a      	cmp	r2, r3
 8006820:	d203      	bcs.n	800682a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006822:	4a2e      	ldr	r2, [pc, #184]	@ (80068dc <xTaskIncrementTick+0x15c>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006828:	e02e      	b.n	8006888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3304      	adds	r3, #4
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fca1 	bl	8006176 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3318      	adds	r3, #24
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fc98 	bl	8006176 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	2201      	movs	r2, #1
 800684c:	409a      	lsls	r2, r3
 800684e:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <xTaskIncrementTick+0x160>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4313      	orrs	r3, r2
 8006854:	4a22      	ldr	r2, [pc, #136]	@ (80068e0 <xTaskIncrementTick+0x160>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4a1f      	ldr	r2, [pc, #124]	@ (80068e4 <xTaskIncrementTick+0x164>)
 8006866:	441a      	add	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7ff fc24 	bl	80060bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006878:	4b1b      	ldr	r3, [pc, #108]	@ (80068e8 <xTaskIncrementTick+0x168>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	429a      	cmp	r2, r3
 8006880:	d3b9      	bcc.n	80067f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006886:	e7b6      	b.n	80067f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006888:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <xTaskIncrementTick+0x168>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688e:	4915      	ldr	r1, [pc, #84]	@ (80068e4 <xTaskIncrementTick+0x164>)
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d901      	bls.n	80068a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068a4:	4b11      	ldr	r3, [pc, #68]	@ (80068ec <xTaskIncrementTick+0x16c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e004      	b.n	80068bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068b2:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <xTaskIncrementTick+0x170>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3301      	adds	r3, #1
 80068b8:	4a0d      	ldr	r2, [pc, #52]	@ (80068f0 <xTaskIncrementTick+0x170>)
 80068ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068bc:	697b      	ldr	r3, [r7, #20]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200007f4 	.word	0x200007f4
 80068cc:	200007d0 	.word	0x200007d0
 80068d0:	20000784 	.word	0x20000784
 80068d4:	20000788 	.word	0x20000788
 80068d8:	200007e4 	.word	0x200007e4
 80068dc:	200007ec 	.word	0x200007ec
 80068e0:	200007d4 	.word	0x200007d4
 80068e4:	200006d0 	.word	0x200006d0
 80068e8:	200006cc 	.word	0x200006cc
 80068ec:	200007e0 	.word	0x200007e0
 80068f0:	200007dc 	.word	0x200007dc

080068f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <vTaskSwitchContext+0xa4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006902:	4b26      	ldr	r3, [pc, #152]	@ (800699c <vTaskSwitchContext+0xa8>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006908:	e040      	b.n	800698c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800690a:	4b24      	ldr	r3, [pc, #144]	@ (800699c <vTaskSwitchContext+0xa8>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	4b23      	ldr	r3, [pc, #140]	@ (80069a0 <vTaskSwitchContext+0xac>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	fab3 f383 	clz	r3, r3
 800691c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	f1c3 031f 	rsb	r3, r3, #31
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	491f      	ldr	r1, [pc, #124]	@ (80069a4 <vTaskSwitchContext+0xb0>)
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <vTaskSwitchContext+0x5e>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	607b      	str	r3, [r7, #4]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <vTaskSwitchContext+0x5a>
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <vTaskSwitchContext+0xb0>)
 800695e:	4413      	add	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3308      	adds	r3, #8
 8006974:	429a      	cmp	r2, r3
 8006976:	d104      	bne.n	8006982 <vTaskSwitchContext+0x8e>
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a07      	ldr	r2, [pc, #28]	@ (80069a8 <vTaskSwitchContext+0xb4>)
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200007f4 	.word	0x200007f4
 800699c:	200007e0 	.word	0x200007e0
 80069a0:	200007d4 	.word	0x200007d4
 80069a4:	200006d0 	.word	0x200006d0
 80069a8:	200006cc 	.word	0x200006cc

080069ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069b4:	f000 f852 	bl	8006a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069b8:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <prvIdleTask+0x28>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d9f9      	bls.n	80069b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069c0:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <prvIdleTask+0x2c>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069d0:	e7f0      	b.n	80069b4 <prvIdleTask+0x8>
 80069d2:	bf00      	nop
 80069d4:	200006d0 	.word	0x200006d0
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	e00c      	b.n	8006a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4a12      	ldr	r2, [pc, #72]	@ (8006a3c <prvInitialiseTaskLists+0x60>)
 80069f4:	4413      	add	r3, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fb33 	bl	8006062 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3301      	adds	r3, #1
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b06      	cmp	r3, #6
 8006a06:	d9ef      	bls.n	80069e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a08:	480d      	ldr	r0, [pc, #52]	@ (8006a40 <prvInitialiseTaskLists+0x64>)
 8006a0a:	f7ff fb2a 	bl	8006062 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a0e:	480d      	ldr	r0, [pc, #52]	@ (8006a44 <prvInitialiseTaskLists+0x68>)
 8006a10:	f7ff fb27 	bl	8006062 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a14:	480c      	ldr	r0, [pc, #48]	@ (8006a48 <prvInitialiseTaskLists+0x6c>)
 8006a16:	f7ff fb24 	bl	8006062 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a1a:	480c      	ldr	r0, [pc, #48]	@ (8006a4c <prvInitialiseTaskLists+0x70>)
 8006a1c:	f7ff fb21 	bl	8006062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a20:	480b      	ldr	r0, [pc, #44]	@ (8006a50 <prvInitialiseTaskLists+0x74>)
 8006a22:	f7ff fb1e 	bl	8006062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <prvInitialiseTaskLists+0x78>)
 8006a28:	4a05      	ldr	r2, [pc, #20]	@ (8006a40 <prvInitialiseTaskLists+0x64>)
 8006a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <prvInitialiseTaskLists+0x7c>)
 8006a2e:	4a05      	ldr	r2, [pc, #20]	@ (8006a44 <prvInitialiseTaskLists+0x68>)
 8006a30:	601a      	str	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200006d0 	.word	0x200006d0
 8006a40:	2000075c 	.word	0x2000075c
 8006a44:	20000770 	.word	0x20000770
 8006a48:	2000078c 	.word	0x2000078c
 8006a4c:	200007a0 	.word	0x200007a0
 8006a50:	200007b8 	.word	0x200007b8
 8006a54:	20000784 	.word	0x20000784
 8006a58:	20000788 	.word	0x20000788

08006a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a62:	e019      	b.n	8006a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a64:	f000 fa10 	bl	8006e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a68:	4b10      	ldr	r3, [pc, #64]	@ (8006aac <prvCheckTasksWaitingTermination+0x50>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fb7e 	bl	8006176 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <prvCheckTasksWaitingTermination+0x54>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab0 <prvCheckTasksWaitingTermination+0x54>)
 8006a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a84:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x58>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x58>)
 8006a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a8e:	f000 fa2d 	bl	8006eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f810 	bl	8006ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x58>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e1      	bne.n	8006a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200007a0 	.word	0x200007a0
 8006ab0:	200007cc 	.word	0x200007cc
 8006ab4:	200007b4 	.word	0x200007b4

08006ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fb88 	bl	80071e4 <vPortFree>
				vPortFree( pxTCB );
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fb85 	bl	80071e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ada:	e019      	b.n	8006b10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d103      	bne.n	8006aee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb7c 	bl	80071e4 <vPortFree>
	}
 8006aec:	e010      	b.n	8006b10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d00b      	beq.n	8006b10 <prvDeleteTCB+0x58>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	60fb      	str	r3, [r7, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <prvDeleteTCB+0x54>
	}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <prvResetNextTaskUnblockTime+0x38>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <prvResetNextTaskUnblockTime+0x3c>)
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b30:	e008      	b.n	8006b44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <prvResetNextTaskUnblockTime+0x38>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a04      	ldr	r2, [pc, #16]	@ (8006b54 <prvResetNextTaskUnblockTime+0x3c>)
 8006b42:	6013      	str	r3, [r2, #0]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20000784 	.word	0x20000784
 8006b54:	200007ec 	.word	0x200007ec

08006b58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b62:	4b29      	ldr	r3, [pc, #164]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b68:	4b28      	ldr	r3, [pc, #160]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fb01 	bl	8006176 <uxListRemove>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b7a:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	2201      	movs	r2, #1
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43da      	mvns	r2, r3
 8006b88:	4b21      	ldr	r3, [pc, #132]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	4a20      	ldr	r2, [pc, #128]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d10a      	bne.n	8006bb0 <prvAddCurrentTaskToDelayedList+0x58>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	481a      	ldr	r0, [pc, #104]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006baa:	f7ff fa87 	bl	80060bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bae:	e026      	b.n	8006bfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bb8:	4b14      	ldr	r3, [pc, #80]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d209      	bcs.n	8006bdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7ff fa95 	bl	8006104 <vListInsert>
}
 8006bda:	e010      	b.n	8006bfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7ff fa8b 	bl	8006104 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d202      	bcs.n	8006bfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bf8:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6013      	str	r3, [r2, #0]
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200007d0 	.word	0x200007d0
 8006c0c:	200006cc 	.word	0x200006cc
 8006c10:	200007d4 	.word	0x200007d4
 8006c14:	200007b8 	.word	0x200007b8
 8006c18:	20000788 	.word	0x20000788
 8006c1c:	20000784 	.word	0x20000784
 8006c20:	200007ec 	.word	0x200007ec

08006c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3b04      	subs	r3, #4
 8006c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b04      	subs	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c54:	4a0c      	ldr	r2, [pc, #48]	@ (8006c88 <pxPortInitialiseStack+0x64>)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b14      	subs	r3, #20
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f06f 0202 	mvn.w	r2, #2
 8006c72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b20      	subs	r3, #32
 8006c78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	08006c8d 	.word	0x08006c8d

08006c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c96:	4b13      	ldr	r3, [pc, #76]	@ (8006ce4 <prvTaskExitError+0x58>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d00b      	beq.n	8006cb8 <prvTaskExitError+0x2c>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <prvTaskExitError+0x28>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60bb      	str	r3, [r7, #8]
}
 8006cca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ccc:	bf00      	nop
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0fc      	beq.n	8006cce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200000f8 	.word	0x200000f8
	...

08006cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cf0:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <pxCurrentTCBConst2>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f380 8809 	msr	PSP, r0
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst2>:
 8006d10:	200006cc 	.word	0x200006cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d18:	4808      	ldr	r0, [pc, #32]	@ (8006d3c <prvPortStartFirstTask+0x24>)
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f380 8808 	msr	MSP, r0
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8814 	msr	CONTROL, r0
 8006d2a:	b662      	cpsie	i
 8006d2c:	b661      	cpsie	f
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	df00      	svc	0
 8006d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed08 	.word	0xe000ed08

08006d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d46:	4b47      	ldr	r3, [pc, #284]	@ (8006e64 <xPortStartScheduler+0x124>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a47      	ldr	r2, [pc, #284]	@ (8006e68 <xPortStartScheduler+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10b      	bne.n	8006d68 <xPortStartScheduler+0x28>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d68:	4b3e      	ldr	r3, [pc, #248]	@ (8006e64 <xPortStartScheduler+0x124>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e6c <xPortStartScheduler+0x12c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10b      	bne.n	8006d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60fb      	str	r3, [r7, #12]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d8a:	4b39      	ldr	r3, [pc, #228]	@ (8006e70 <xPortStartScheduler+0x130>)
 8006d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	22ff      	movs	r2, #255	@ 0xff
 8006d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4b31      	ldr	r3, [pc, #196]	@ (8006e74 <xPortStartScheduler+0x134>)
 8006db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006db2:	4b31      	ldr	r3, [pc, #196]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db8:	e009      	b.n	8006dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006dba:	4b2f      	ldr	r3, [pc, #188]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd6:	2b80      	cmp	r3, #128	@ 0x80
 8006dd8:	d0ef      	beq.n	8006dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dda:	4b27      	ldr	r3, [pc, #156]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1c3 0307 	rsb	r3, r3, #7
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d00b      	beq.n	8006dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e08:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e10:	4a19      	ldr	r2, [pc, #100]	@ (8006e78 <xPortStartScheduler+0x138>)
 8006e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e1c:	4b17      	ldr	r3, [pc, #92]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a16      	ldr	r2, [pc, #88]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e28:	4b14      	ldr	r3, [pc, #80]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <xPortStartScheduler+0x13c>)
 8006e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e34:	f000 f8da 	bl	8006fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e38:	4b11      	ldr	r3, [pc, #68]	@ (8006e80 <xPortStartScheduler+0x140>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e3e:	f000 f8f9 	bl	8007034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <xPortStartScheduler+0x144>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a0f      	ldr	r2, [pc, #60]	@ (8006e84 <xPortStartScheduler+0x144>)
 8006e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e4e:	f7ff ff63 	bl	8006d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e52:	f7ff fd4f 	bl	80068f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006e56:	f7ff ff19 	bl	8006c8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	e000ed00 	.word	0xe000ed00
 8006e68:	410fc271 	.word	0x410fc271
 8006e6c:	410fc270 	.word	0x410fc270
 8006e70:	e000e400 	.word	0xe000e400
 8006e74:	200007f8 	.word	0x200007f8
 8006e78:	200007fc 	.word	0x200007fc
 8006e7c:	e000ed20 	.word	0xe000ed20
 8006e80:	200000f8 	.word	0x200000f8
 8006e84:	e000ef34 	.word	0xe000ef34

08006e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ea2:	4b10      	ldr	r3, [pc, #64]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006eac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <vPortEnterCritical+0x5c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d110      	bne.n	8006ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <vPortEnterCritical+0x60>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	603b      	str	r3, [r7, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vPortEnterCritical+0x4a>
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	200000f8 	.word	0x200000f8
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ef2:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <vPortExitCritical+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <vPortExitCritical+0x26>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	607b      	str	r3, [r7, #4]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f12:	4b0a      	ldr	r3, [pc, #40]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4a08      	ldr	r2, [pc, #32]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f1c:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <vPortExitCritical+0x50>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <vPortExitCritical+0x44>
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	200000f8 	.word	0x200000f8

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7ff fcc0 	bl	80068f4 <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	200006cc 	.word	0x200006cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7ff fbdd 	bl	8006780 <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <SysTick_Handler+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
}
 8006fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <vPortSetupTimerInterrupt+0x34>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8007024 <vPortSetupTimerInterrupt+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <vPortSetupTimerInterrupt+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <vPortSetupTimerInterrupt+0x40>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	4a09      	ldr	r2, [pc, #36]	@ (8007030 <vPortSetupTimerInterrupt+0x44>)
 800700a:	3b01      	subs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800700e:	4b04      	ldr	r3, [pc, #16]	@ (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e010 	.word	0xe000e010
 8007024:	e000e018 	.word	0xe000e018
 8007028:	20000008 	.word	0x20000008
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	e000e014 	.word	0xe000e014

08007034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007044 <vPortEnableVFP+0x10>
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800703e:	6001      	str	r1, [r0, #0]
 8007040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007042:	bf00      	nop
 8007044:	e000ed88 	.word	0xe000ed88

08007048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	@ 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007054:	f7ff fae8 	bl	8006628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007058:	4b5c      	ldr	r3, [pc, #368]	@ (80071cc <pvPortMalloc+0x184>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007060:	f000 f924 	bl	80072ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007064:	4b5a      	ldr	r3, [pc, #360]	@ (80071d0 <pvPortMalloc+0x188>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8095 	bne.w	800719c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01e      	beq.n	80070b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007078:	2208      	movs	r2, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d015      	beq.n	80070b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <pvPortMalloc+0x6e>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d06f      	beq.n	800719c <pvPortMalloc+0x154>
 80070bc:	4b45      	ldr	r3, [pc, #276]	@ (80071d4 <pvPortMalloc+0x18c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d86a      	bhi.n	800719c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c6:	4b44      	ldr	r3, [pc, #272]	@ (80071d8 <pvPortMalloc+0x190>)
 80070c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070ca:	4b43      	ldr	r3, [pc, #268]	@ (80071d8 <pvPortMalloc+0x190>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070d0:	e004      	b.n	80070dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d903      	bls.n	80070ee <pvPortMalloc+0xa6>
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f1      	bne.n	80070d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ee:	4b37      	ldr	r3, [pc, #220]	@ (80071cc <pvPortMalloc+0x184>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d051      	beq.n	800719c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4413      	add	r3, r2
 8007100:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	2308      	movs	r3, #8
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	429a      	cmp	r2, r3
 8007118:	d920      	bls.n	800715c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800711a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <pvPortMalloc+0xfc>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007156:	69b8      	ldr	r0, [r7, #24]
 8007158:	f000 f90a 	bl	8007370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800715c:	4b1d      	ldr	r3, [pc, #116]	@ (80071d4 <pvPortMalloc+0x18c>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <pvPortMalloc+0x18c>)
 8007168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800716a:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <pvPortMalloc+0x18c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <pvPortMalloc+0x194>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d203      	bcs.n	800717e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007176:	4b17      	ldr	r3, [pc, #92]	@ (80071d4 <pvPortMalloc+0x18c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <pvPortMalloc+0x194>)
 800717c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	4b13      	ldr	r3, [pc, #76]	@ (80071d0 <pvPortMalloc+0x188>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	431a      	orrs	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007192:	4b13      	ldr	r3, [pc, #76]	@ (80071e0 <pvPortMalloc+0x198>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3301      	adds	r3, #1
 8007198:	4a11      	ldr	r2, [pc, #68]	@ (80071e0 <pvPortMalloc+0x198>)
 800719a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800719c:	f7ff fa52 	bl	8006644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <pvPortMalloc+0x17a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <pvPortMalloc+0x176>
	return pvReturn;
 80071c2:	69fb      	ldr	r3, [r7, #28]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3728      	adds	r7, #40	@ 0x28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	200013c0 	.word	0x200013c0
 80071d0:	200013d4 	.word	0x200013d4
 80071d4:	200013c4 	.word	0x200013c4
 80071d8:	200013b8 	.word	0x200013b8
 80071dc:	200013c8 	.word	0x200013c8
 80071e0:	200013cc 	.word	0x200013cc

080071e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d04f      	beq.n	8007296 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f6:	2308      	movs	r3, #8
 80071f8:	425b      	negs	r3, r3
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	4b25      	ldr	r3, [pc, #148]	@ (80072a0 <vPortFree+0xbc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <vPortFree+0x46>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <vPortFree+0x66>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60bb      	str	r3, [r7, #8]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <vPortFree+0xbc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01e      	beq.n	8007296 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11a      	bne.n	8007296 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <vPortFree+0xbc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	43db      	mvns	r3, r3
 800726a:	401a      	ands	r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007270:	f7ff f9da 	bl	8006628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <vPortFree+0xc0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4413      	add	r3, r2
 800727e:	4a09      	ldr	r2, [pc, #36]	@ (80072a4 <vPortFree+0xc0>)
 8007280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f000 f874 	bl	8007370 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007288:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <vPortFree+0xc4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a06      	ldr	r2, [pc, #24]	@ (80072a8 <vPortFree+0xc4>)
 8007290:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007292:	f7ff f9d7 	bl	8006644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007296:	bf00      	nop
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200013d4 	.word	0x200013d4
 80072a4:	200013c4 	.word	0x200013c4
 80072a8:	200013d0 	.word	0x200013d0

080072ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072b2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80072b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b8:	4b27      	ldr	r3, [pc, #156]	@ (8007358 <prvHeapInit+0xac>)
 80072ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3307      	adds	r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0307 	bic.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <prvHeapInit+0xac>)
 80072dc:	4413      	add	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <prvHeapInit+0xb0>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072ea:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <prvHeapInit+0xb0>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	4413      	add	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f8:	2208      	movs	r2, #8
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0307 	bic.w	r3, r3, #7
 8007306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a15      	ldr	r2, [pc, #84]	@ (8007360 <prvHeapInit+0xb4>)
 800730c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800730e:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <prvHeapInit+0xb4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800732c:	4b0c      	ldr	r3, [pc, #48]	@ (8007360 <prvHeapInit+0xb4>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a0a      	ldr	r2, [pc, #40]	@ (8007364 <prvHeapInit+0xb8>)
 800733a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <prvHeapInit+0xbc>)
 8007342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007344:	4b09      	ldr	r3, [pc, #36]	@ (800736c <prvHeapInit+0xc0>)
 8007346:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000800 	.word	0x20000800
 800735c:	200013b8 	.word	0x200013b8
 8007360:	200013c0 	.word	0x200013c0
 8007364:	200013c8 	.word	0x200013c8
 8007368:	200013c4 	.word	0x200013c4
 800736c:	200013d4 	.word	0x200013d4

08007370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007378:	4b28      	ldr	r3, [pc, #160]	@ (800741c <prvInsertBlockIntoFreeList+0xac>)
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e002      	b.n	8007384 <prvInsertBlockIntoFreeList+0x14>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d8f7      	bhi.n	800737e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d108      	bne.n	80073b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	441a      	add	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d118      	bne.n	80073f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <prvInsertBlockIntoFreeList+0xb0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d00d      	beq.n	80073ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e008      	b.n	8007400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <prvInsertBlockIntoFreeList+0xb0>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e003      	b.n	8007400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d002      	beq.n	800740e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	200013b8 	.word	0x200013b8
 8007420:	200013c0 	.word	0x200013c0

08007424 <microDelay>:
extern int prev_rpm;

// External TIM handle declared in main.c
extern TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800742e:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <microDelay+0x30>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8007436:	bf00      	nop
 8007438:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <microDelay+0x30>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	429a      	cmp	r2, r3
 8007442:	d3f9      	bcc.n	8007438 <microDelay+0x14>
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	200003a4 	.word	0x200003a4

08007458 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 8007462:	4a04      	ldr	r2, [pc, #16]	@ (8007474 <setAcceleration+0x1c>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6013      	str	r3, [r2, #0]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	200013dc 	.word	0x200013dc

08007478 <setRPM>:

void setRPM(volatile float rpm, int steps) {
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007482:	6038      	str	r0, [r7, #0]
    volatile float speed = (rpm * steps) / 60.0f;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800748e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007496:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80074b4 <setRPM+0x3c>
 800749a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800749e:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a04      	ldr	r2, [pc, #16]	@ (80074b8 <setRPM+0x40>)
 80074a6:	6013      	str	r3, [r2, #0]

}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	42700000 	.word	0x42700000
 80074b8:	200013e0 	.word	0x200013e0
 80074bc:	00000000 	.word	0x00000000

080074c0 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 80074c4:	4b34      	ldr	r3, [pc, #208]	@ (8007598 <computeNewSpeed+0xd8>)
 80074c6:	ed93 7a00 	vldr	s14, [r3]
 80074ca:	4b34      	ldr	r3, [pc, #208]	@ (800759c <computeNewSpeed+0xdc>)
 80074cc:	edd3 7a00 	vldr	s15, [r3]
 80074d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d8:	d51a      	bpl.n	8007510 <computeNewSpeed+0x50>
        _speed += _acceleration;
 80074da:	4b31      	ldr	r3, [pc, #196]	@ (80075a0 <computeNewSpeed+0xe0>)
 80074dc:	ed93 7a00 	vldr	s14, [r3]
 80074e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007598 <computeNewSpeed+0xd8>)
 80074e2:	edd3 7a00 	vldr	s15, [r3]
 80074e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007598 <computeNewSpeed+0xd8>)
 80074ec:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 80074f0:	4b29      	ldr	r3, [pc, #164]	@ (8007598 <computeNewSpeed+0xd8>)
 80074f2:	ed93 7a00 	vldr	s14, [r3]
 80074f6:	4b29      	ldr	r3, [pc, #164]	@ (800759c <computeNewSpeed+0xdc>)
 80074f8:	edd3 7a00 	vldr	s15, [r3]
 80074fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	dd29      	ble.n	800755a <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 8007506:	4b25      	ldr	r3, [pc, #148]	@ (800759c <computeNewSpeed+0xdc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <computeNewSpeed+0xd8>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	e024      	b.n	800755a <computeNewSpeed+0x9a>
        }
    }
    else if (_speed > _maxSpeed) {
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <computeNewSpeed+0xd8>)
 8007512:	ed93 7a00 	vldr	s14, [r3]
 8007516:	4b21      	ldr	r3, [pc, #132]	@ (800759c <computeNewSpeed+0xdc>)
 8007518:	edd3 7a00 	vldr	s15, [r3]
 800751c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007524:	dd19      	ble.n	800755a <computeNewSpeed+0x9a>
        _speed -= _acceleration;
 8007526:	4b1e      	ldr	r3, [pc, #120]	@ (80075a0 <computeNewSpeed+0xe0>)
 8007528:	edd3 7a00 	vldr	s15, [r3]
 800752c:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <computeNewSpeed+0xd8>)
 800752e:	ed93 7a00 	vldr	s14, [r3]
 8007532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007536:	4b18      	ldr	r3, [pc, #96]	@ (8007598 <computeNewSpeed+0xd8>)
 8007538:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < _maxSpeed) {
 800753c:	4b16      	ldr	r3, [pc, #88]	@ (8007598 <computeNewSpeed+0xd8>)
 800753e:	ed93 7a00 	vldr	s14, [r3]
 8007542:	4b16      	ldr	r3, [pc, #88]	@ (800759c <computeNewSpeed+0xdc>)
 8007544:	edd3 7a00 	vldr	s15, [r3]
 8007548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007550:	d503      	bpl.n	800755a <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 8007552:	4b12      	ldr	r3, [pc, #72]	@ (800759c <computeNewSpeed+0xdc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <computeNewSpeed+0xd8>)
 8007558:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 800755a:	4b0f      	ldr	r3, [pc, #60]	@ (8007598 <computeNewSpeed+0xd8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f7f8 ff9a 	bl	8000498 <__aeabi_f2d>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	a109      	add	r1, pc, #36	@ (adr r1, 8007590 <computeNewSpeed+0xd0>)
 800756a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756e:	f7f9 f915 	bl	800079c <__aeabi_ddiv>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	f7f9 f9f7 	bl	800096c <__aeabi_d2iz>
 800757e:	4603      	mov	r3, r0
 8007580:	4a08      	ldr	r2, [pc, #32]	@ (80075a4 <computeNewSpeed+0xe4>)
 8007582:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <computeNewSpeed+0xe4>)
 8007586:	681b      	ldr	r3, [r3, #0]
}
 8007588:	4618      	mov	r0, r3
 800758a:	bd80      	pop	{r7, pc}
 800758c:	f3af 8000 	nop.w
 8007590:	00000000 	.word	0x00000000
 8007594:	412e8480 	.word	0x412e8480
 8007598:	200013d8 	.word	0x200013d8
 800759c:	200013e0 	.word	0x200013e0
 80075a0:	200013dc 	.word	0x200013dc
 80075a4:	200013e4 	.word	0x200013e4

080075a8 <motorMove>:
}




void motorMove(MotorConfig* motor, int steps_to_move) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	@ 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
    //int steps_to_move = initial_steps_to_move;
    int current_step = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	@ 0x24
    bool direction_set = (steps_to_move > 0);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfcc      	ite	gt
 80075bc:	2301      	movgt	r3, #1
 80075be:	2300      	movle	r3, #0
 80075c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Set initial direction
    if (direction_set) {
 80075c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <motorMove+0x36>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	889b      	ldrh	r3, [r3, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	4619      	mov	r1, r3
 80075d8:	f7fa fbd6 	bl	8001d88 <HAL_GPIO_WritePin>
 80075dc:	e0d8      	b.n	8007790 <motorMove+0x1e8>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	889b      	ldrh	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	4619      	mov	r1, r3
 80075ea:	f7fa fbcd 	bl	8001d88 <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	425b      	negs	r3, r3
 80075f2:	603b      	str	r3, [r7, #0]
    }

    while (current_step < steps_to_move) {
 80075f4:	e0cc      	b.n	8007790 <motorMove+0x1e8>
        motorStopReg = (bool) Holding_Registers_Database[5];
 80075f6:	4b6c      	ldr	r3, [pc, #432]	@ (80077a8 <motorMove+0x200>)
 80075f8:	895b      	ldrh	r3, [r3, #10]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b69      	ldr	r3, [pc, #420]	@ (80077ac <motorMove+0x204>)
 8007606:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 8007608:	4b67      	ldr	r3, [pc, #412]	@ (80077a8 <motorMove+0x200>)
 800760a:	899b      	ldrh	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2da      	uxtb	r2, r3
 8007616:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <motorMove+0x208>)
 8007618:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 800761a:	4b64      	ldr	r3, [pc, #400]	@ (80077ac <motorMove+0x204>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <motorMove+0x82>
            motorStop(motor);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f8d4 	bl	80077d0 <motorStop>
            break;  // Exit the loop on motor stop condition
 8007628:	e0b7      	b.n	800779a <motorMove+0x1f2>
        }

        if (emergencyMotorStopReg) {
 800762a:	4b61      	ldr	r3, [pc, #388]	@ (80077b0 <motorMove+0x208>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <motorMove+0x92>
            emergencyMotorStop(motor);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f8ec 	bl	8007810 <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 8007638:	e0af      	b.n	800779a <motorMove+0x1f2>
        }

        //Reading RMP value  from RPM holding register
          rpm = Holding_Registers_Database[0];
 800763a:	4b5b      	ldr	r3, [pc, #364]	@ (80077a8 <motorMove+0x200>)
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	4b5c      	ldr	r3, [pc, #368]	@ (80077b4 <motorMove+0x20c>)
 8007642:	601a      	str	r2, [r3, #0]
		  if(rpm != prev_rpm)
 8007644:	4b5b      	ldr	r3, [pc, #364]	@ (80077b4 <motorMove+0x20c>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b5b      	ldr	r3, [pc, #364]	@ (80077b8 <motorMove+0x210>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d01a      	beq.n	8007686 <motorMove+0xde>
		  {
		  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8007650:	4b58      	ldr	r3, [pc, #352]	@ (80077b4 <motorMove+0x20c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800765c:	4b57      	ldr	r3, [pc, #348]	@ (80077bc <motorMove+0x214>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	eeb0 0a67 	vmov.f32	s0, s15
 8007666:	f7ff ff07 	bl	8007478 <setRPM>
		  setAcceleration(acceleration);
 800766a:	4b55      	ldr	r3, [pc, #340]	@ (80077c0 <motorMove+0x218>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007676:	eeb0 0a67 	vmov.f32	s0, s15
 800767a:	f7ff feed 	bl	8007458 <setAcceleration>
		  prev_rpm = rpm;
 800767e:	4b4d      	ldr	r3, [pc, #308]	@ (80077b4 <motorMove+0x20c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a4d      	ldr	r2, [pc, #308]	@ (80077b8 <motorMove+0x210>)
 8007684:	6013      	str	r3, [r2, #0]
		  }

        // Fetch the updated steps_to_move
        int input_angle = Holding_Registers_Database[4];
 8007686:	4b48      	ldr	r3, [pc, #288]	@ (80077a8 <motorMove+0x200>)
 8007688:	891b      	ldrh	r3, [r3, #8]
 800768a:	61bb      	str	r3, [r7, #24]

        // Calculate target position with floating-point division
        float targetPosition = input_angle * (enc_val_in_1rev / 360); // in encoder value
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007696:	4b4b      	ldr	r3, [pc, #300]	@ (80077c4 <motorMove+0x21c>)
 8007698:	edd3 6a00 	vldr	s13, [r3]
 800769c:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80077c8 <motorMove+0x220>
 80076a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80076a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a8:	edc7 7a05 	vstr	s15, [r7, #20]

        // Calculate position to move
        long int positionToMove = (long int)targetPosition - encoderValue; // in encoder value
 80076ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80076b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b4:	ee17 2a90 	vmov	r2, s15
 80076b8:	4b44      	ldr	r3, [pc, #272]	@ (80077cc <motorMove+0x224>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	613b      	str	r3, [r7, #16]

        // Calculate steps to move
        int new_steps_to_move = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ca:	4b3c      	ldr	r3, [pc, #240]	@ (80077bc <motorMove+0x214>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80076d6:	4b3b      	ldr	r3, [pc, #236]	@ (80077c4 <motorMove+0x21c>)
 80076d8:	edd3 6a00 	vldr	s13, [r3]
 80076dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076e8:	ee17 3a90 	vmov	r3, s15
 80076ec:	61fb      	str	r3, [r7, #28]

        // Update direction if steps have changed
        if (new_steps_to_move != steps_to_move) {
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d02a      	beq.n	800774c <motorMove+0x1a4>
            if (new_steps_to_move > current_step)
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	429a      	cmp	r2, r3
 80076fc:	dd12      	ble.n	8007724 <motorMove+0x17c>
            {
                if (!direction_set)
 80076fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007702:	f083 0301 	eor.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01d      	beq.n	8007748 <motorMove+0x1a0>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	889b      	ldrh	r3, [r3, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	4619      	mov	r1, r3
 8007718:	f7fa fb36 	bl	8001d88 <HAL_GPIO_WritePin>
                    direction_set = true;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007722:	e011      	b.n	8007748 <motorMove+0x1a0>
                }
            }
            else
            {
                if (direction_set)
 8007724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <motorMove+0x19a>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	889b      	ldrh	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	4619      	mov	r1, r3
 8007738:	f7fa fb26 	bl	8001d88 <HAL_GPIO_WritePin>
                    direction_set = false;
 800773c:	2300      	movs	r3, #0
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                }
                new_steps_to_move = -new_steps_to_move;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	425b      	negs	r3, r3
 8007746:	61fb      	str	r3, [r7, #28]
            }
            steps_to_move = new_steps_to_move;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	603b      	str	r3, [r7, #0]
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 800774c:	f7ff feb8 	bl	80074c0 <computeNewSpeed>
 8007750:	60f8      	str	r0, [r7, #12]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6898      	ldr	r0, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	899b      	ldrh	r3, [r3, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	4619      	mov	r1, r3
 800775e:	f7fa fb13 	bl	8001d88 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	b29b      	uxth	r3, r3
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fe5b 	bl	8007424 <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6898      	ldr	r0, [r3, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	899b      	ldrh	r3, [r3, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	4619      	mov	r1, r3
 800777a:	f7fa fb05 	bl	8001d88 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fe4d 	bl	8007424 <microDelay>

        current_step++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current_step < steps_to_move) {
 8007790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	f6ff af2e 	blt.w	80075f6 <motorMove+0x4e>
    }

      // Resetting stop flags after movement
      Holding_Registers_Database[5] = 0;
 800779a:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <motorMove+0x200>)
 800779c:	2200      	movs	r2, #0
 800779e:	815a      	strh	r2, [r3, #10]
//    Holding_Registers_Database[6] = 0;
}
 80077a0:	bf00      	nop
 80077a2:	3728      	adds	r7, #40	@ 0x28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000014 	.word	0x20000014
 80077ac:	200013e8 	.word	0x200013e8
 80077b0:	200013e9 	.word	0x200013e9
 80077b4:	2000037c 	.word	0x2000037c
 80077b8:	20000380 	.word	0x20000380
 80077bc:	2000038c 	.word	0x2000038c
 80077c0:	20000384 	.word	0x20000384
 80077c4:	20000004 	.word	0x20000004
 80077c8:	43b40000 	.word	0x43b40000
 80077cc:	20000370 	.word	0x20000370

080077d0 <motorStop>:




void motorStop(MotorConfig* motor) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6898      	ldr	r0, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	899b      	ldrh	r3, [r3, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7fa fad0 	bl	8001d88 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	889b      	ldrh	r3, [r3, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	4619      	mov	r1, r3
 80077f4:	f7fa fac8 	bl	8001d88 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 80077f8:	4b03      	ldr	r3, [pc, #12]	@ (8007808 <motorStop+0x38>)
 80077fa:	885a      	ldrh	r2, [r3, #2]
 80077fc:	4b03      	ldr	r3, [pc, #12]	@ (800780c <motorStop+0x3c>)
 80077fe:	811a      	strh	r2, [r3, #8]
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000078 	.word	0x20000078
 800780c:	20000014 	.word	0x20000014

08007810 <emergencyMotorStop>:



void emergencyMotorStop(MotorConfig* motor) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]


    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6898      	ldr	r0, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	899b      	ldrh	r3, [r3, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	4619      	mov	r1, r3
 8007824:	f7fa fab0 	bl	8001d88 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	889b      	ldrh	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	4619      	mov	r1, r3
 8007834:	f7fa faa8 	bl	8001d88 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 8007838:	4b03      	ldr	r3, [pc, #12]	@ (8007848 <emergencyMotorStop+0x38>)
 800783a:	885a      	ldrh	r2, [r3, #2]
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <emergencyMotorStop+0x3c>)
 800783e:	811a      	strh	r2, [r3, #8]

}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000078 	.word	0x20000078
 800784c:	20000014 	.word	0x20000014

08007850 <memset>:
 8007850:	4402      	add	r2, r0
 8007852:	4603      	mov	r3, r0
 8007854:	4293      	cmp	r3, r2
 8007856:	d100      	bne.n	800785a <memset+0xa>
 8007858:	4770      	bx	lr
 800785a:	f803 1b01 	strb.w	r1, [r3], #1
 800785e:	e7f9      	b.n	8007854 <memset+0x4>

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4d0d      	ldr	r5, [pc, #52]	@ (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	@ (800789c <__libc_init_array+0x3c>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2600      	movs	r6, #0
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4d0b      	ldr	r5, [pc, #44]	@ (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	@ (80078a4 <__libc_init_array+0x44>)
 8007874:	f000 f818 	bl	80078a8 <_init>
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2600      	movs	r6, #0
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	08007978 	.word	0x08007978
 800789c:	08007978 	.word	0x08007978
 80078a0:	08007978 	.word	0x08007978
 80078a4:	0800797c 	.word	0x0800797c

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
