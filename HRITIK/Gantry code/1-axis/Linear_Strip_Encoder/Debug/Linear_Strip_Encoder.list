
Linear_Strip_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005924  08005924  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800592c  0800592c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000410c  20000084  080059b8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  080059b8  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ccc  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  00033d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00036a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00037c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001827d  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013500  00000000  00000000  00050f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d1e  00000000  00000000  00064405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  000fb174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005788 	.word	0x08005788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08005788 	.word	0x08005788

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <vApplicationGetIdleTaskMemory+0x30>)
 8000ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000a0 	.word	0x200000a0
 8000d00:	200000f4 	.word	0x200000f4

08000d04 <updateEncoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncoder(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	481f      	ldr	r0, [pc, #124]	; (8000d8c <updateEncoder+0x88>)
 8000d0e:	f001 f819 	bl	8001d44 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 8000d16:	2102      	movs	r1, #2
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <updateEncoder+0x88>)
 8000d1a:	f001 f813 	bl	8001d44 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <updateEncoder+0x8c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d008      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d005      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d002      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b0b      	cmp	r3, #11
 8000d4e:	d104      	bne.n	8000d5a <updateEncoder+0x56>
    encoderValue++;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <updateEncoder+0x90>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <updateEncoder+0x90>)
 8000d58:	6013      	str	r3, [r2, #0]
  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b0e      	cmp	r3, #14
 8000d5e:	d008      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	d005      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d002      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d104      	bne.n	8000d7c <updateEncoder+0x78>
    encoderValue--;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <updateEncoder+0x90>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <updateEncoder+0x90>)
 8000d7a:	6013      	str	r3, [r2, #0]

  lastEncoded = encoded;
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <updateEncoder+0x8c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	200002f4 	.word	0x200002f4
 8000d94:	200002f8 	.word	0x200002f8

08000d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d002      	beq.n	8000dae <HAL_GPIO_EXTI_Callback+0x16>
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8000dae:	f7ff ffa9 	bl	8000d04 <updateEncoder>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_UART_RxCpltCallback>:


char RxString[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <HAL_UART_RxCpltCallback+0x78>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12e      	bne.n	8000e2c <HAL_UART_RxCpltCallback+0x70>
    {
        if (received_char == '/')
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_UART_RxCpltCallback+0x7c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000dd4:	d108      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x2c>
        {
            // Initialize the received string buffer
            received_index = 0;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_UART_RxCpltCallback+0x80>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
            memset(received_string, 0, sizeof(received_string));
 8000ddc:	2232      	movs	r2, #50	; 0x32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <HAL_UART_RxCpltCallback+0x84>)
 8000de2:	f004 fc3d 	bl	8005660 <memset>
 8000de6:	e01c      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x66>
        }
        else if (received_char == '*')
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_UART_RxCpltCallback+0x7c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b2a      	cmp	r3, #42	; 0x2a
 8000dee:	d10b      	bne.n	8000e08 <HAL_UART_RxCpltCallback+0x4c>
        {
            // Null-terminate the string
            received_string[received_index] = '\0';
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_RxCpltCallback+0x80>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_UART_RxCpltCallback+0x84>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	54d1      	strb	r1, [r2, r3]
            // Parse the received string to an integer
            input_distance = atoi(received_string);
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <HAL_UART_RxCpltCallback+0x84>)
 8000dfc:	f004 fc02 	bl	8005604 <atoi>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_RxCpltCallback+0x88>)
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e00c      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x66>
//            motor_run = 1; // Set flag to start motor
        }
        else
        {
            // Store the received character in the buffer
            if (received_index < sizeof(received_string) - 1)
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_UART_RxCpltCallback+0x80>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b30      	cmp	r3, #48	; 0x30
 8000e0e:	d808      	bhi.n	8000e22 <HAL_UART_RxCpltCallback+0x66>
            {
                received_string[received_index++] = received_char;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_UART_RxCpltCallback+0x80>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_UART_RxCpltCallback+0x80>)
 8000e18:	600a      	str	r2, [r1, #0]
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_UART_RxCpltCallback+0x7c>)
 8000e1c:	7811      	ldrb	r1, [r2, #0]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_UART_RxCpltCallback+0x84>)
 8000e20:	54d1      	strb	r1, [r2, r3]
            }
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char,  1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	4904      	ldr	r1, [pc, #16]	; (8000e38 <HAL_UART_RxCpltCallback+0x7c>)
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_UART_RxCpltCallback+0x8c>)
 8000e28:	f002 f98d 	bl	8003146 <HAL_UART_Receive_IT>

    }
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	200002fc 	.word	0x200002fc
 8000e3c:	20000338 	.word	0x20000338
 8000e40:	20000304 	.word	0x20000304
 8000e44:	20000300 	.word	0x20000300
 8000e48:	20000394 	.word	0x20000394

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fc19 	bl	8001688 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char,  1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	491a      	ldr	r1, [pc, #104]	; (8000ec4 <main+0x78>)
 8000e5a:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <main+0x7c>)
 8000e5c:	f002 f973 	bl	8003146 <HAL_UART_Receive_IT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f83e 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f924 	bl	80010b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e68:	f000 f8a2 	bl	8000fb0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000e6c:	f000 f8f0 	bl	8001050 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e70:	4816      	ldr	r0, [pc, #88]	; (8000ecc <main+0x80>)
 8000e72:	f001 fccb 	bl	800280c <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <main+0x84>)
 8000e78:	f107 041c 	add.w	r4, r7, #28
 8000e7c:	461d      	mov	r5, r3
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 f8a2 	bl	8003fda <osThreadCreate>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <main+0x88>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <main+0x8c>)
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f891 	bl	8003fda <osThreadCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <main+0x90>)
 8000ebc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ebe:	f003 f885 	bl	8003fcc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <main+0x76>
 8000ec4:	200002fc 	.word	0x200002fc
 8000ec8:	20000394 	.word	0x20000394
 8000ecc:	2000034c 	.word	0x2000034c
 8000ed0:	080057b8 	.word	0x080057b8
 8000ed4:	200003d8 	.word	0x200003d8
 8000ed8:	080057d4 	.word	0x080057d4
 8000edc:	200003dc 	.word	0x200003dc

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fbb6 	bl	8005660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <SystemClock_Config+0xcc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <SystemClock_Config+0xcc>)
 8000f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <SystemClock_Config+0xcc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f50:	2308      	movs	r3, #8
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 ff37 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f70:	f000 f9f7 	bl	8001362 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2103      	movs	r1, #3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f999 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f9c:	f000 f9e1 	bl	8001362 <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	; 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <MX_TIM1_Init+0x9c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fd4:	225a      	movs	r2, #90	; 0x5a
 8000fd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_TIM1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <MX_TIM1_Init+0x98>)
 8000ffa:	f001 fbb7 	bl	800276c <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001004:	f000 f9ad 	bl	8001362 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_TIM1_Init+0x98>)
 8001016:	f001 fdbd 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001020:	f000 f99f 	bl	8001362 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_TIM1_Init+0x98>)
 8001032:	f001 ffb9 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800103c:	f000 f991 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000034c 	.word	0x2000034c
 800104c:	40010000 	.word	0x40010000

08001050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <MX_USART2_UART_Init+0x58>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 8001088:	f002 f810 	bl	80030ac <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f000 f966 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  // Enable the UART receive interrupt
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char,  1);
 8001096:	2201      	movs	r2, #1
 8001098:	4904      	ldr	r1, [pc, #16]	; (80010ac <MX_USART2_UART_Init+0x5c>)
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <MX_USART2_UART_Init+0x54>)
 800109c:	f002 f853 	bl	8003146 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000394 	.word	0x20000394
 80010a8:	40004400 	.word	0x40004400
 80010ac:	200002fc 	.word	0x200002fc

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <MX_GPIO_Init+0xec>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <MX_GPIO_Init+0xec>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <MX_GPIO_Init+0xec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_GPIO_Init+0xec>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <MX_GPIO_Init+0xec>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_GPIO_Init+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_GPIO_Init+0xec>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a25      	ldr	r2, [pc, #148]	; (800119c <MX_GPIO_Init+0xec>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_GPIO_Init+0xec>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2103      	movs	r1, #3
 800111e:	4820      	ldr	r0, [pc, #128]	; (80011a0 <MX_GPIO_Init+0xf0>)
 8001120:	f000 fe28 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 8001124:	2303      	movs	r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4819      	ldr	r0, [pc, #100]	; (80011a0 <MX_GPIO_Init+0xf0>)
 800113c:	f000 fc7e 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 8001140:	2310      	movs	r3, #16
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4813      	ldr	r0, [pc, #76]	; (80011a0 <MX_GPIO_Init+0xf0>)
 8001154:	f000 fc72 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001158:	2303      	movs	r3, #3
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800115c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001162:	2301      	movs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_GPIO_Init+0xf4>)
 800116e:	f000 fc65 	bl	8001a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	2006      	movs	r0, #6
 8001178:	f000 fba4 	bl	80018c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800117c:	2006      	movs	r0, #6
 800117e:	f000 fbbd 	bl	80018fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	2007      	movs	r0, #7
 8001188:	f000 fb9c 	bl	80018c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800118c:	2007      	movs	r0, #7
 800118e:	f000 fbb5 	bl	80018fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400

080011a8 <StartEncoderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
//	updatedEncoderValue = encoderValue;
//	__enable_irq();
//	char msg[25];
//	snprintf(msg, sizeof(msg), "distance covered: %d	", ((int)(updatedEncoderValue*(mm_in_1rev/enc_val_in_1rev))));
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 5);
	osDelay(10);
 80011b0:	200a      	movs	r0, #10
 80011b2:	f002 ff5e 	bl	8004072 <osDelay>
 80011b6:	e7fb      	b.n	80011b0 <StartEncoderTask+0x8>

080011b8 <homePosition>:
* @param argument: Not used
* @retval None
*/

// Function to initialize motor position
void homePosition(MotorConfig* motor) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // Move motor backward until limit switch is triggered
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 80011c0:	e01e      	b.n	8001200 <homePosition+0x48>
    	// Calculate the new speed and step interval
		unsigned long stepInterval = computeNewSpeed();
 80011c2:	f004 f989 	bl	80054d8 <computeNewSpeed>
 80011c6:	60f8      	str	r0, [r7, #12]

		// Generate a step pulse with the calculated interval
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	899b      	ldrh	r3, [r3, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	f000 fdce 	bl	8001d74 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f92c 	bl	800543c <microDelay>
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6898      	ldr	r0, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	899b      	ldrh	r3, [r3, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f000 fdc0 	bl	8001d74 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 f91e 	bl	800543c <microDelay>
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 8001200:	2110      	movs	r1, #16
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <homePosition+0x80>)
 8001204:	f000 fd9e 	bl	8001d44 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d0d9      	beq.n	80011c2 <homePosition+0xa>
    }
    HAL_Delay(300);
 800120e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001212:	f000 fa7b 	bl	800170c <HAL_Delay>
    // move motor forward 3mm or 480 steps
    motorMove(motor, 480); // motor will move 3mm or 480 steps after hitting the limit switch
 8001216:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f004 f9a8 	bl	8005570 <motorMove>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
    // Set encoder value to zero
    __disable_irq();
    encoderValue = 0;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <homePosition+0x84>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800122a:	b662      	cpsie	i
}
 800122c:	bf00      	nop
    __enable_irq();
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000
 800123c:	200002f8 	.word	0x200002f8

08001240 <StartMotorTask>:

/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */

  // Define motor configurations
  MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <StartMotorTask+0xd8>)
 800124a:	f107 0408 	add.w	r4, r7, #8
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Setup stepper motor parameters
  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <StartMotorTask+0xdc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <StartMotorTask+0xe0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	f004 f911 	bl	8005490 <setRPM>
  setAcceleration(20.0f); // Set acceleration in steps per second^2
 800126e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001272:	f004 f8fd 	bl	8005470 <setAcceleration>

  // Initialize motor position
   homePosition(&motor1);
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff9c 	bl	80011b8 <homePosition>
  for(;;)
  {

    // Disable interrupts and read the encoder value
//    __disable_irq();
    currentPosition = encoderValue; // Read the latest encoder value
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <StartMotorTask+0xe4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a28      	ldr	r2, [pc, #160]	; (8001328 <StartMotorTask+0xe8>)
 8001286:	6013      	str	r3, [r2, #0]
//    __enable_irq();

	// Calculate target position with floating-point division
	//targetPosition = input_distance * ((float)encoderPulseValue / 360.0f); // in encoder value
	targetPosition = input_distance * (enc_val_in_1rev/mm_in_1rev); // in encoder value
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <StartMotorTask+0xec>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <StartMotorTask+0xf0>)
 8001296:	ed93 6a00 	vldr	s12, [r3]
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <StartMotorTask+0xf4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <StartMotorTask+0xf8>)
 80012b0:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <StartMotorTask+0xf8>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012be:	ee17 2a90 	vmov	r2, s15
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <StartMotorTask+0xe8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <StartMotorTask+0xfc>)
 80012ca:	6013      	str	r3, [r2, #0]

	// Calculate steps to move
	//stepsToMove = positionToMove * (motorSetSteps / (float)encoderPulseValue);
	stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <StartMotorTask+0xfc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <StartMotorTask+0xe0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <StartMotorTask+0xf0>)
 80012e6:	edd3 6a00 	vldr	s13, [r3]
 80012ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 2a90 	vmov	r2, s15
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <StartMotorTask+0x100>)
 80012fc:	601a      	str	r2, [r3, #0]

	// Move motor
	motorMove(&motor1, stepsToMove);
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <StartMotorTask+0x100>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f931 	bl	8005570 <motorMove>

	osDelay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f002 feaf 	bl	8004072 <osDelay>
    currentPosition = encoderValue; // Read the latest encoder value
 8001314:	e7b4      	b.n	8001280 <StartMotorTask+0x40>
 8001316:	bf00      	nop
 8001318:	080057f0 	.word	0x080057f0
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	200002f8 	.word	0x200002f8
 8001328:	2000033c 	.word	0x2000033c
 800132c:	20000300 	.word	0x20000300
 8001330:	20000008 	.word	0x20000008
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000340 	.word	0x20000340
 800133c:	20000344 	.word	0x20000344
 8001340:	20000348 	.word	0x20000348

08001344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d101      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001356:	f000 f9b9 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
}
 8001368:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136a:	e7fe      	b.n	800136a <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_MspInit+0x54>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_MspInit+0x54>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x54>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_MspInit+0x54>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_MspInit+0x54>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_MspInit+0x54>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	210f      	movs	r1, #15
 80013ae:	f06f 0001 	mvn.w	r0, #1
 80013b2:	f000 fa87 	bl	80018c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_TIM_Base_MspInit+0x40>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x40>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_TIM_Base_MspInit+0x40>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_UART_MspInit+0x94>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d133      	bne.n	8001492 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_UART_MspInit+0x98>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <HAL_UART_MspInit+0x98>)
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_UART_MspInit+0x98>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_UART_MspInit+0x98>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_UART_MspInit+0x98>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_UART_MspInit+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001472:	2307      	movs	r3, #7
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <HAL_UART_MspInit+0x9c>)
 800147e:	f000 fadd 	bl	8001a3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	2026      	movs	r0, #38	; 0x26
 8001488:	f000 fa1c 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800148c:	2026      	movs	r0, #38	; 0x26
 800148e:	f000 fa35 	bl	80018fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40004400 	.word	0x40004400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_InitTick+0xe8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_InitTick+0xe8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_InitTick+0xe8>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f912 	bl	8002708 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ee:	f001 f8e3 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80014f2:	6378      	str	r0, [r7, #52]	; 0x34
 80014f4:	e004      	b.n	8001500 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014f6:	f001 f8df 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80014fa:	4603      	mov	r3, r0
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001502:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_InitTick+0xec>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	3b01      	subs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_InitTick+0xf0>)
 8001510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_InitTick+0xf0>)
 8001518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800151c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_InitTick+0xf0>)
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_InitTick+0xf0>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_InitTick+0xf0>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_InitTick+0xf0>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <HAL_InitTick+0xf0>)
 8001538:	f001 f918 	bl	800276c <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11b      	bne.n	8001582 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <HAL_InitTick+0xf0>)
 800154c:	f001 f9b8 	bl	80028c0 <HAL_TIM_Base_Start_IT>
 8001550:	4603      	mov	r3, r0
 8001552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800155a:	2b00      	cmp	r3, #0
 800155c:	d111      	bne.n	8001582 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155e:	201c      	movs	r0, #28
 8001560:	f000 f9cc 	bl	80018fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d808      	bhi.n	800157c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800156a:	2200      	movs	r2, #0
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	201c      	movs	r0, #28
 8001570:	f000 f9a8 	bl	80018c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_InitTick+0xf4>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e002      	b.n	8001582 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001586:	4618      	mov	r0, r3
 8001588:	3738      	adds	r7, #56	; 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	431bde83 	.word	0x431bde83
 8001598:	200003e0 	.word	0x200003e0
 800159c:	20000014 	.word	0x20000014

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fbe9 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 fbe2 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM2_IRQHandler+0x10>)
 80015ee:	f001 f9c9 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200003e0 	.word	0x200003e0

080015fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <USART2_IRQHandler+0x10>)
 8001602:	f001 fdd1 	bl	80031a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000394 	.word	0x20000394

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001650:	4c0b      	ldr	r4, [pc, #44]	; (8001680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165e:	f7ff ffd7 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f003 ffd9 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fbf1 	bl	8000e4c <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001678:	08005934 	.word	0x08005934
  ldr r2, =_sbss
 800167c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001680:	20004190 	.word	0x20004190

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_Init+0x40>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_Init+0x40>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x40>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f8fc 	bl	80018ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff fef6 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fe56 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000018 	.word	0x20000018
 80016f0:	20000428 	.word	0x20000428

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000428 	.word	0x20000428

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000018 	.word	0x20000018

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff4c 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d6:	f7ff ff61 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7ff ffb1 	bl	8001848 <NVIC_EncodePriority>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff80 	bl	80017f4 <__NVIC_SetPriority>
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff54 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001926:	f7ff fee5 	bl	80016f4 <HAL_GetTick>
 800192a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d008      	beq.n	800194a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e052      	b.n	80019f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0216 	bic.w	r2, r2, #22
 8001958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <HAL_DMA_Abort+0x62>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	e013      	b.n	80019c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199c:	f7ff feaa 	bl	80016f4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d90c      	bls.n	80019c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e015      	b.n	80019f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1e4      	bne.n	800199c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00c      	b.n	8001a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e159      	b.n	8001d0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8148 	bne.w	8001d06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a2 	beq.w	8001d06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a56      	ldr	r2, [pc, #344]	; (8001d24 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <HAL_GPIO_Init+0x2e8>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_GPIO_Init+0x2ec>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_GPIO_Init+0x2f0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x202>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_GPIO_Init+0x2f4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x1fe>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_GPIO_Init+0x2f8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x1fa>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a46      	ldr	r2, [pc, #280]	; (8001d38 <HAL_GPIO_Init+0x2fc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x1f6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a45      	ldr	r2, [pc, #276]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x1f2>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x204>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x2ec>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d00:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f aea2 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffe6 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e267      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b85      	ldr	r3, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e242      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x74>
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x98>
 8001e56:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6f      	ldr	r2, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e70:	4b69      	ldr	r3, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a68      	ldr	r2, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc30 	bl	80016f4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fc2c 	bl	80016f4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e207      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc1c 	bl	80016f4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc18 	bl	80016f4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1f3      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1c7      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fbd1 	bl	80016f4 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fbcd 	bl	80016f4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1a8      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fbb0 	bl	80016f4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff fbac 	bl	80016f4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e187      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fb90 	bl	80016f4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fb8c 	bl	80016f4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e167      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x200>
 8001ff6:	e01b      	b.n	8002030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb79 	bl	80016f4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	e00e      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002006:	f7ff fb75 	bl	80016f4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d907      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e150      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
 8002020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ea      	bne.n	8002006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8097 	beq.w	800216c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a7c      	ldr	r2, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b77      	ldr	r3, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b74      	ldr	r3, [pc, #464]	; (800224c <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff fb35 	bl	80016f4 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff fb31 	bl	80016f4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e10c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x474>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2ea>
 80020b4:	4b64      	ldr	r3, [pc, #400]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x30c>
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a5b      	ldr	r2, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0304 	bic.w	r3, r3, #4
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff faf6 	bl	80016f4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff faf2 	bl	80016f4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0cb      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ee      	beq.n	800210c <HAL_RCC_OscConfig+0x334>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fae0 	bl	80016f4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff fadc 	bl	80016f4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0b5      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ee      	bne.n	8002138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a1 	beq.w	80022b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d05c      	beq.n	800223c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d141      	bne.n	800220e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fab0 	bl	80016f4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff faac 	bl	80016f4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e087      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	019b      	lsls	r3, r3, #6
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	3b01      	subs	r3, #1
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fa85 	bl	80016f4 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff fa81 	bl	80016f4 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e05c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x416>
 800220c:	e054      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fa6e 	bl	80016f4 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff fa6a 	bl	80016f4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e045      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x444>
 800223a:	e03d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e038      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000
 8002250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4ec>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d028      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d121      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800228a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7ff f99c 	bl	80016f4 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff f998 	bl	80016f4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f81a 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	08005808 	.word	0x08005808
 800248c:	20000010 	.word	0x20000010
 8002490:	20000014 	.word	0x20000014

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002498:	b094      	sub	sp, #80	; 0x50
 800249a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
 80024a0:	2300      	movs	r3, #0
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x40>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	f200 80e1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	e0db      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024cc:	e0db      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <HAL_RCC_GetSysClockFreq+0x208>)
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024d2:	e0d8      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
 8002502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002506:	4622      	mov	r2, r4
 8002508:	462b      	mov	r3, r5
 800250a:	f04f 0000 	mov.w	r0, #0
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002518:	0150      	lsls	r0, r2, #5
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4621      	mov	r1, r4
 8002520:	1a51      	subs	r1, r2, r1
 8002522:	6139      	str	r1, [r7, #16]
 8002524:	4629      	mov	r1, r5
 8002526:	eb63 0301 	sbc.w	r3, r3, r1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002538:	4659      	mov	r1, fp
 800253a:	018b      	lsls	r3, r1, #6
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002542:	4651      	mov	r1, sl
 8002544:	018a      	lsls	r2, r1, #6
 8002546:	4651      	mov	r1, sl
 8002548:	ebb2 0801 	subs.w	r8, r2, r1
 800254c:	4659      	mov	r1, fp
 800254e:	eb63 0901 	sbc.w	r9, r3, r1
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	4690      	mov	r8, r2
 8002568:	4699      	mov	r9, r3
 800256a:	4623      	mov	r3, r4
 800256c:	eb18 0303 	adds.w	r3, r8, r3
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	462b      	mov	r3, r5
 8002574:	eb49 0303 	adc.w	r3, r9, r3
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002586:	4629      	mov	r1, r5
 8002588:	024b      	lsls	r3, r1, #9
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002590:	4621      	mov	r1, r4
 8002592:	024a      	lsls	r2, r1, #9
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	2200      	movs	r2, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025a4:	f7fe fa12 	bl	80009cc <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e058      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	4611      	mov	r1, r2
 80025be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	f04f 0000 	mov.w	r0, #0
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	0159      	lsls	r1, r3, #5
 80025da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025de:	0150      	lsls	r0, r2, #5
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4641      	mov	r1, r8
 80025e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ea:	4649      	mov	r1, r9
 80025ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002604:	ebb2 040a 	subs.w	r4, r2, sl
 8002608:	eb63 050b 	sbc.w	r5, r3, fp
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	464b      	mov	r3, r9
 8002628:	eb45 0303 	adc.w	r3, r5, r3
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264e:	2200      	movs	r2, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	61fa      	str	r2, [r7, #28]
 8002654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002658:	f7fe f9b8 	bl	80009cc <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002688:	4618      	mov	r0, r3
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000010 	.word	0x20000010

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026bc:	f7ff fff0 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08005818 	.word	0x08005818

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e4:	f7ff ffdc 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0b5b      	lsrs	r3, r3, #13
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	08005818 	.word	0x08005818

08002708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	220f      	movs	r2, #15
 8002716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_RCC_GetClockConfig+0x60>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0207 	and.w	r2, r3, #7
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fe16 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fae2 	bl	8002d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e03c      	b.n	800289e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start+0xa0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d018      	beq.n	8002868 <HAL_TIM_Base_Start+0x5c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d013      	beq.n	8002868 <HAL_TIM_Base_Start+0x5c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_TIM_Base_Start+0xa4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_TIM_Base_Start+0x5c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start+0xa8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_TIM_Base_Start+0x5c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_TIM_Base_Start+0xac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_TIM_Base_Start+0x5c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_Base_Start+0xb0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d010      	beq.n	800289c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	e007      	b.n	800289c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40000c00 	.word	0x40000c00
 80028bc:	40014000 	.word	0x40014000

080028c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d001      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e044      	b.n	8002962 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_TIM_Base_Start_IT+0xb0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d018      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x6c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d013      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x6c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_TIM_Base_Start_IT+0xb4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x6c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_TIM_Base_Start_IT+0xb8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x6c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_TIM_Base_Start_IT+0xbc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x6c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_TIM_Base_Start_IT+0xc0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b06      	cmp	r3, #6
 800293c:	d010      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	e007      	b.n	8002960 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40010000 	.word	0x40010000
 8002974:	40000400 	.word	0x40000400
 8002978:	40000800 	.word	0x40000800
 800297c:	40000c00 	.word	0x40000c00
 8002980:	40014000 	.word	0x40014000

08002984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0202 	mvn.w	r2, #2
 80029b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9b5 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9a7 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f9b8 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0204 	mvn.w	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f98b 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f97d 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f98e 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0208 	mvn.w	r2, #8
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f961 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f953 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f964 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0210 	mvn.w	r2, #16
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f937 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f929 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f93a 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0201 	mvn.w	r2, #1
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fc1e 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fab2 	bl	8003098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8ff 	bl	8002d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0220 	mvn.w	r2, #32
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa7c 	bl	8003084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0b4      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x186>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be8:	d03e      	beq.n	8002c68 <HAL_TIM_ConfigClockSource+0xd4>
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	f200 8087 	bhi.w	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	f000 8086 	beq.w	8002d06 <HAL_TIM_ConfigClockSource+0x172>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d87f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d01a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xa6>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d87b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b60      	cmp	r3, #96	; 0x60
 8002c0a:	d050      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x11a>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d877      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d03c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xfa>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d873      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d058      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x13a>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d86f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d064      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d86b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d060      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d867      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d05a      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c38:	e062      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f000 f98d 	bl	8002f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
      break;
 8002c66:	e04f      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f000 f976 	bl	8002f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8a:	609a      	str	r2, [r3, #8]
      break;
 8002c8c:	e03c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f8ea 	bl	8002e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2150      	movs	r1, #80	; 0x50
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f943 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e02c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f909 	bl	8002ed2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2160      	movs	r1, #96	; 0x60
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f933 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e01c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f8ca 	bl	8002e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2140      	movs	r1, #64	; 0x40
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f923 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002cec:	e00c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 f91a 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002cfe:	e003      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e000      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a34      	ldr	r2, [pc, #208]	; (8002e58 <TIM_Base_SetConfig+0xe4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00f      	beq.n	8002dac <TIM_Base_SetConfig+0x38>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d00b      	beq.n	8002dac <TIM_Base_SetConfig+0x38>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <TIM_Base_SetConfig+0xe8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <TIM_Base_SetConfig+0x38>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <TIM_Base_SetConfig+0xec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_Base_SetConfig+0x38>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <TIM_Base_SetConfig+0xf0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <TIM_Base_SetConfig+0xe4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01b      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d017      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <TIM_Base_SetConfig+0xe8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <TIM_Base_SetConfig+0xec>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00f      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <TIM_Base_SetConfig+0xf0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <TIM_Base_SetConfig+0xf4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <TIM_Base_SetConfig+0xf8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <TIM_Base_SetConfig+0xfc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <TIM_Base_SetConfig+0xe4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800

08002e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 030a 	bic.w	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0210 	bic.w	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	031b      	lsls	r3, r3, #12
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	621a      	str	r2, [r3, #32]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f043 0307 	orr.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e050      	b.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d013      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40014000 	.word	0x40014000

08003084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e03f      	b.n	800313e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f998 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fcdf 	bl	8003ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	4613      	mov	r3, r2
 8003152:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	d11d      	bne.n	800319c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Receive_IT+0x26>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e016      	b.n	800319e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_UART_Receive_IT+0x38>
 800317a:	2302      	movs	r3, #2
 800317c:	e00f      	b.n	800319e <HAL_UART_Receive_IT+0x58>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	461a      	mov	r2, r3
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fab6 	bl	8003704 <UART_Start_Receive_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	e000      	b.n	800319e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0ba      	sub	sp, #232	; 0xe8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_UART_IRQHandler+0x66>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fb99 	bl	800393e <UART_Receive_IT>
      return;
 800320c:	e256      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800320e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80de 	beq.w	80033d4 <HAL_UART_IRQHandler+0x22c>
 8003218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80d1 	beq.w	80033d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_UART_IRQHandler+0xf6>
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d011      	beq.n	80032ce <HAL_UART_IRQHandler+0x126>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0208 	orr.w	r2, r3, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 81ed 	beq.w	80036b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_UART_IRQHandler+0x14e>
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fb24 	bl	800393e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_UART_IRQHandler+0x17a>
 800331a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa2c 	bl	8003780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d141      	bne.n	80033ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3314      	adds	r3, #20
 800333c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800334c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3314      	adds	r3, #20
 800335e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800336e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800337a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1d9      	bne.n	8003336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_UART_IRQHandler+0x3dc>)
 8003390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fb2e 	bl	80019f8 <HAL_DMA_Abort_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00e      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f990 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00a      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f98c 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e006      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f988 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033ce:	e170      	b.n	80036b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	bf00      	nop
    return;
 80033d2:	e16e      	b.n	80036b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 814a 	bne.w	8003672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8143 	beq.w	8003672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 813c 	beq.w	8003672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	f040 80b4 	bne.w	8003588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800342c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8140 	beq.w	80036b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	429a      	cmp	r2, r3
 8003440:	f080 8139 	bcs.w	80036b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	f000 8088 	beq.w	800356a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800348a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800349e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1d9      	bne.n	800345a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e1      	bne.n	80034a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800350c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e3      	bne.n	80034e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f023 0310 	bic.w	r3, r3, #16
 800353e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800354c:	65ba      	str	r2, [r7, #88]	; 0x58
 800354e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e3      	bne.n	8003528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe f9d7 	bl	8001918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003572:	b29b      	uxth	r3, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8b6 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003580:	e099      	b.n	80036b6 <HAL_UART_IRQHandler+0x50e>
 8003582:	bf00      	nop
 8003584:	08003847 	.word	0x08003847
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 808b 	beq.w	80036ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8086 	beq.w	80036ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035d2:	647a      	str	r2, [r7, #68]	; 0x44
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e3      	bne.n	80035ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	623b      	str	r3, [r7, #32]
   return(result);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800360a:	633a      	str	r2, [r7, #48]	; 0x30
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e3      	bne.n	80035e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	60fb      	str	r3, [r7, #12]
   return(result);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003650:	61fa      	str	r2, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	617b      	str	r3, [r7, #20]
   return(result);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e3      	bne.n	800362c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f83e 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003670:	e023      	b.n	80036ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x4ea>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8ef 	bl	800386e <UART_Transmit_IT>
    return;
 8003690:	e014      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <HAL_UART_IRQHandler+0x514>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f92f 	bl	800390e <UART_EndTransmit_IT>
    return;
 80036b0:	e004      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
    return;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
      return;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
      return;
 80036ba:	bf00      	nop
  }
}
 80036bc:	37e8      	adds	r7, #232	; 0xe8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop

080036c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2222      	movs	r2, #34	; 0x22
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0220 	orr.w	r2, r2, #32
 8003770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b095      	sub	sp, #84	; 0x54
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a8:	643a      	str	r2, [r7, #64]	; 0x40
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e5      	bne.n	8003788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e5      	bne.n	80037bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d119      	bne.n	800382c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	60bb      	str	r3, [r7, #8]
   return(result);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003818:	61ba      	str	r2, [r7, #24]
 800381a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	613b      	str	r3, [r7, #16]
   return(result);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800383a:	bf00      	nop
 800383c:	3754      	adds	r7, #84	; 0x54
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff ff39 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b21      	cmp	r3, #33	; 0x21
 8003880:	d13e      	bne.n	8003900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	d114      	bne.n	80038b6 <UART_Transmit_IT+0x48>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d110      	bne.n	80038b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	1c9a      	adds	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	621a      	str	r2, [r3, #32]
 80038b4:	e008      	b.n	80038c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6211      	str	r1, [r2, #32]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fec8 	bl	80036c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b08c      	sub	sp, #48	; 0x30
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b22      	cmp	r3, #34	; 0x22
 8003950:	f040 80ab 	bne.w	8003aaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d117      	bne.n	800398e <UART_Receive_IT+0x50>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397c:	b29a      	uxth	r2, r3
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
 800398c:	e026      	b.n	80039dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d007      	beq.n	80039b2 <UART_Receive_IT+0x74>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <UART_Receive_IT+0x82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e008      	b.n	80039d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d15a      	bne.n	8003aa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0220 	bic.w	r2, r2, #32
 80039fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d135      	bne.n	8003a9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	613b      	str	r3, [r7, #16]
   return(result);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	623a      	str	r2, [r7, #32]
 8003a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	69f9      	ldr	r1, [r7, #28]
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e5      	bne.n	8003a36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d10a      	bne.n	8003a8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fe29 	bl	80036ec <HAL_UARTEx_RxEventCallback>
 8003a9a:	e002      	b.n	8003aa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd f98d 	bl	8000dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e002      	b.n	8003aac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3730      	adds	r7, #48	; 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b0c0      	sub	sp, #256	; 0x100
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	ea40 0301 	orr.w	r3, r0, r1
 8003adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b0c:	f021 010c 	bic.w	r1, r1, #12
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	6999      	ldr	r1, [r3, #24]
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	ea40 0301 	orr.w	r3, r0, r1
 8003b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b8f      	ldr	r3, [pc, #572]	; (8003d80 <UART_SetConfig+0x2cc>)
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d005      	beq.n	8003b54 <UART_SetConfig+0xa0>
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <UART_SetConfig+0x2d0>)
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d104      	bne.n	8003b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fdc4 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8003b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b5c:	e003      	b.n	8003b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5e:	f7fe fdab 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b70:	f040 810c 	bne.w	8003d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b96:	4621      	mov	r1, r4
 8003b98:	eb12 0801 	adds.w	r8, r2, r1
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	eb43 0901 	adc.w	r9, r3, r1
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bb6:	4690      	mov	r8, r2
 8003bb8:	4699      	mov	r9, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	eb18 0303 	adds.w	r3, r8, r3
 8003bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	eb49 0303 	adc.w	r3, r9, r3
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be2:	460b      	mov	r3, r1
 8003be4:	18db      	adds	r3, r3, r3
 8003be6:	653b      	str	r3, [r7, #80]	; 0x50
 8003be8:	4613      	mov	r3, r2
 8003bea:	eb42 0303 	adc.w	r3, r2, r3
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bf8:	f7fc fee8 	bl	80009cc <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011c      	lsls	r4, r3, #4
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c24:	415b      	adcs	r3, r3
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb43 0b01 	adc.w	fp, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	469b      	mov	fp, r3
 8003c50:	4643      	mov	r3, r8
 8003c52:	eb1a 0303 	adds.w	r3, sl, r3
 8003c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
 8003c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c8e:	f7fc fe9d 	bl	80009cc <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2264      	movs	r2, #100	; 0x64
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	1acb      	subs	r3, r1, r3
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cbc:	441c      	add	r4, r3
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	1851      	adds	r1, r2, r1
 8003ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4651      	mov	r1, sl
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d14:	464b      	mov	r3, r9
 8003d16:	460a      	mov	r2, r1
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d4a:	f7fc fe3f 	bl	80009cc <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4422      	add	r2, r4
 8003d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d7c:	e105      	b.n	8003f8a <UART_SetConfig+0x4d6>
 8003d7e:	bf00      	nop
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	6239      	str	r1, [r7, #32]
 8003da6:	415b      	adcs	r3, r3
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
 8003daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dae:	4641      	mov	r1, r8
 8003db0:	1854      	adds	r4, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb43 0501 	adc.w	r5, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	00eb      	lsls	r3, r5, #3
 8003dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	4643      	mov	r3, r8
 8003dce:	18e3      	adds	r3, r4, r3
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	eb45 0303 	adc.w	r3, r5, r3
 8003dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	008b      	lsls	r3, r1, #2
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e04:	4621      	mov	r1, r4
 8003e06:	008a      	lsls	r2, r1, #2
 8003e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e0c:	f7fc fdde 	bl	80009cc <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	011c      	lsls	r4, r3, #4
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	61b9      	str	r1, [r7, #24]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e40:	4641      	mov	r1, r8
 8003e42:	1851      	adds	r1, r2, r1
 8003e44:	6139      	str	r1, [r7, #16]
 8003e46:	4649      	mov	r1, r9
 8003e48:	414b      	adcs	r3, r1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e58:	4659      	mov	r1, fp
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4651      	mov	r1, sl
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e74:	464b      	mov	r3, r9
 8003e76:	460a      	mov	r2, r1
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e98:	4649      	mov	r1, r9
 8003e9a:	008b      	lsls	r3, r1, #2
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	008a      	lsls	r2, r1, #2
 8003ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eaa:	f7fc fd8f 	bl	80009cc <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a34      	ldr	r2, [pc, #208]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	441c      	add	r4, r3
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	673b      	str	r3, [r7, #112]	; 0x70
 8003edc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1851      	adds	r1, r2, r1
 8003ef6:	6039      	str	r1, [r7, #0]
 8003ef8:	4649      	mov	r1, r9
 8003efa:	414b      	adcs	r3, r1
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	00cb      	lsls	r3, r1, #3
 8003f0e:	4651      	mov	r1, sl
 8003f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f14:	4651      	mov	r1, sl
 8003f16:	00ca      	lsls	r2, r1, #3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4642      	mov	r2, r8
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f24:	464b      	mov	r3, r9
 8003f26:	460a      	mov	r2, r1
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	667a      	str	r2, [r7, #100]	; 0x64
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f46:	4649      	mov	r1, r9
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f50:	4641      	mov	r1, r8
 8003f52:	008a      	lsls	r2, r1, #2
 8003f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f58:	f7fc fd38 	bl	80009cc <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4422      	add	r2, r4
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fae:	2b84      	cmp	r3, #132	; 0x84
 8003fb0:	d005      	beq.n	8003fbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3303      	adds	r3, #3
 8003fbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fd0:	f000 fade 	bl	8004590 <vTaskStartScheduler>
  
  return osOK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fdc:	b089      	sub	sp, #36	; 0x24
 8003fde:	af04      	add	r7, sp, #16
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <osThreadCreate+0x54>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01c      	beq.n	800402e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685c      	ldr	r4, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681d      	ldr	r5, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691e      	ldr	r6, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ffc8 	bl	8003f9c <makeFreeRtosPriority>
 800400c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004016:	9202      	str	r2, [sp, #8]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	9100      	str	r1, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4632      	mov	r2, r6
 8004020:	4629      	mov	r1, r5
 8004022:	4620      	mov	r0, r4
 8004024:	f000 f8ed 	bl	8004202 <xTaskCreateStatic>
 8004028:	4603      	mov	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e01c      	b.n	8004068 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685c      	ldr	r4, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403a:	b29e      	uxth	r6, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ffaa 	bl	8003f9c <makeFreeRtosPriority>
 8004048:	4602      	mov	r2, r0
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4632      	mov	r2, r6
 8004056:	4629      	mov	r1, r5
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f92f 	bl	80042bc <xTaskCreate>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004068:	68fb      	ldr	r3, [r7, #12]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004072 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <osDelay+0x16>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e000      	b.n	800408a <osDelay+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa4c 	bl	8004528 <vTaskDelay>
  
  return osOK;
 8004090:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e00c      	b.n	8004176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3308      	adds	r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <vListInsert+0x2e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d2f6      	bcs.n	8004164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6852      	ldr	r2, [r2, #4]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08e      	sub	sp, #56	; 0x38
 8004206:	af04      	add	r7, sp, #16
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <xTaskCreateStatic+0x46>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	61fb      	str	r3, [r7, #28]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004248:	2354      	movs	r3, #84	; 0x54
 800424a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b54      	cmp	r3, #84	; 0x54
 8004250:	d00a      	beq.n	8004268 <xTaskCreateStatic+0x66>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61bb      	str	r3, [r7, #24]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01e      	beq.n	80042ae <xTaskCreateStatic+0xac>
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01b      	beq.n	80042ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004288:	2300      	movs	r3, #0
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f850 	bl	8004346 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a8:	f000 f8d4 	bl	8004454 <prvAddNewTaskToReadyList>
 80042ac:	e001      	b.n	80042b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042b2:	697b      	ldr	r3, [r7, #20]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fec9 	bl	8005068 <pvPortMalloc>
 80042d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042de:	2054      	movs	r0, #84	; 0x54
 80042e0:	f000 fec2 	bl	8005068 <pvPortMalloc>
 80042e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
 80042f2:	e005      	b.n	8004300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f000 ff83 	bl	8005200 <vPortFree>
 80042fa:	e001      	b.n	8004300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	2300      	movs	r3, #0
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f80e 	bl	8004346 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800432a:	69f8      	ldr	r0, [r7, #28]
 800432c:	f000 f892 	bl	8004454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e002      	b.n	800433c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800433c:	69bb      	ldr	r3, [r7, #24]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800435e:	3b01      	subs	r3, #1
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f023 0307 	bic.w	r3, r3, #7
 800436c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	617b      	str	r3, [r7, #20]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01f      	beq.n	80043d4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e012      	b.n	80043c0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	7819      	ldrb	r1, [r3, #0]
 80043a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	3334      	adds	r3, #52	; 0x34
 80043aa:	460a      	mov	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d9e9      	bls.n	800439a <prvInitialiseNewTask+0x54>
 80043c6:	e000      	b.n	80043ca <prvInitialiseNewTask+0x84>
			{
				break;
 80043c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d2:	e003      	b.n	80043dc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d901      	bls.n	80043e6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043e2:	2306      	movs	r3, #6
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2200      	movs	r2, #0
 80043f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	3304      	adds	r3, #4
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fe6c 	bl	80040da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	3318      	adds	r3, #24
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe67 	bl	80040da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004410:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	f1c3 0207 	rsb	r2, r3, #7
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2200      	movs	r2, #0
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	69b8      	ldr	r0, [r7, #24]
 8004436:	f000 fc05 	bl	8004c44 <pxPortInitialiseStack>
 800443a:	4602      	mov	r2, r0
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800444c:	bf00      	nop
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800445c:	f000 fd22 	bl	8004ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <prvAddNewTaskToReadyList+0xb8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a29      	ldr	r2, [pc, #164]	; (800450c <prvAddNewTaskToReadyList+0xb8>)
 8004468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <prvAddNewTaskToReadyList+0xbc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <prvAddNewTaskToReadyList+0xbc>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <prvAddNewTaskToReadyList+0xb8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d110      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004480:	f000 fabc 	bl	80049fc <prvInitialiseTaskLists>
 8004484:	e00d      	b.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <prvAddNewTaskToReadyList+0xc0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <prvAddNewTaskToReadyList+0xbc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	429a      	cmp	r2, r3
 800449a:	d802      	bhi.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <prvAddNewTaskToReadyList+0xbc>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <prvAddNewTaskToReadyList+0xc4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <prvAddNewTaskToReadyList+0xc4>)
 80044aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <prvAddNewTaskToReadyList+0xc8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <prvAddNewTaskToReadyList+0xcc>)
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7ff fe0d 	bl	80040f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044da:	f000 fd13 	bl	8004f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <prvAddNewTaskToReadyList+0xc0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00e      	beq.n	8004504 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvAddNewTaskToReadyList+0xbc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d207      	bcs.n	8004504 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <prvAddNewTaskToReadyList+0xd0>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000052c 	.word	0x2000052c
 8004510:	2000042c 	.word	0x2000042c
 8004514:	20000538 	.word	0x20000538
 8004518:	20000548 	.word	0x20000548
 800451c:	20000534 	.word	0x20000534
 8004520:	20000430 	.word	0x20000430
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d017      	beq.n	800456a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <vTaskDelay+0x60>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <vTaskDelay+0x30>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004558:	f000 f87a 	bl	8004650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800455c:	2100      	movs	r1, #0
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fb0a 	bl	8004b78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004564:	f000 f882 	bl	800466c <xTaskResumeAll>
 8004568:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <vTaskDelay+0x64>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000554 	.word	0x20000554
 800458c:	e000ed04 	.word	0xe000ed04

08004590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800459e:	463a      	mov	r2, r7
 80045a0:	1d39      	adds	r1, r7, #4
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc fb92 	bl	8000cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	9202      	str	r2, [sp, #8]
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	460a      	mov	r2, r1
 80045be:	491e      	ldr	r1, [pc, #120]	; (8004638 <vTaskStartScheduler+0xa8>)
 80045c0:	481e      	ldr	r0, [pc, #120]	; (800463c <vTaskStartScheduler+0xac>)
 80045c2:	f7ff fe1e 	bl	8004202 <xTaskCreateStatic>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <vTaskStartScheduler+0xb0>)
 80045ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <vTaskStartScheduler+0xb0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e001      	b.n	80045de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d116      	bne.n	8004612 <vTaskStartScheduler+0x82>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	613b      	str	r3, [r7, #16]
}
 80045f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <vTaskStartScheduler+0xb4>)
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <vTaskStartScheduler+0xb8>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <vTaskStartScheduler+0xbc>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800460c:	f000 fba8 	bl	8004d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004610:	e00e      	b.n	8004630 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d10a      	bne.n	8004630 <vTaskStartScheduler+0xa0>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60fb      	str	r3, [r7, #12]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <vTaskStartScheduler+0x9e>
}
 8004630:	bf00      	nop
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08005800 	.word	0x08005800
 800463c:	080049cd 	.word	0x080049cd
 8004640:	20000550 	.word	0x20000550
 8004644:	2000054c 	.word	0x2000054c
 8004648:	20000538 	.word	0x20000538
 800464c:	20000530 	.word	0x20000530

08004650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <vTaskSuspendAll+0x18>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	4a03      	ldr	r2, [pc, #12]	; (8004668 <vTaskSuspendAll+0x18>)
 800465c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800465e:	bf00      	nop
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000554 	.word	0x20000554

0800466c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <xTaskResumeAll+0x114>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <xTaskResumeAll+0x2c>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	603b      	str	r3, [r7, #0]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004698:	f000 fc04 	bl	8004ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <xTaskResumeAll+0x114>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4a37      	ldr	r2, [pc, #220]	; (8004780 <xTaskResumeAll+0x114>)
 80046a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a6:	4b36      	ldr	r3, [pc, #216]	; (8004780 <xTaskResumeAll+0x114>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d161      	bne.n	8004772 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ae:	4b35      	ldr	r3, [pc, #212]	; (8004784 <xTaskResumeAll+0x118>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d05d      	beq.n	8004772 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046b6:	e02e      	b.n	8004716 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <xTaskResumeAll+0x11c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3318      	adds	r3, #24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fd72 	bl	80041ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fd6d 	bl	80041ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	2201      	movs	r2, #1
 80046da:	409a      	lsls	r2, r3
 80046dc:	4b2b      	ldr	r3, [pc, #172]	; (800478c <xTaskResumeAll+0x120>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	4a2a      	ldr	r2, [pc, #168]	; (800478c <xTaskResumeAll+0x120>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4a27      	ldr	r2, [pc, #156]	; (8004790 <xTaskResumeAll+0x124>)
 80046f4:	441a      	add	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7ff fcf9 	bl	80040f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <xTaskResumeAll+0x128>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004710:	4b21      	ldr	r3, [pc, #132]	; (8004798 <xTaskResumeAll+0x12c>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004716:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <xTaskResumeAll+0x11c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1cc      	bne.n	80046b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004724:	f000 fa08 	bl	8004b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004728:	4b1c      	ldr	r3, [pc, #112]	; (800479c <xTaskResumeAll+0x130>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d010      	beq.n	8004756 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004734:	f000 f836 	bl	80047a4 <xTaskIncrementTick>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <xTaskResumeAll+0x12c>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f1      	bne.n	8004734 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <xTaskResumeAll+0x130>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <xTaskResumeAll+0x12c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <xTaskResumeAll+0x134>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004772:	f000 fbc7 	bl	8004f04 <vPortExitCritical>

	return xAlreadyYielded;
 8004776:	68bb      	ldr	r3, [r7, #8]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000554 	.word	0x20000554
 8004784:	2000052c 	.word	0x2000052c
 8004788:	200004ec 	.word	0x200004ec
 800478c:	20000534 	.word	0x20000534
 8004790:	20000430 	.word	0x20000430
 8004794:	2000042c 	.word	0x2000042c
 8004798:	20000540 	.word	0x20000540
 800479c:	2000053c 	.word	0x2000053c
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ae:	4b4e      	ldr	r3, [pc, #312]	; (80048e8 <xTaskIncrementTick+0x144>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 808e 	bne.w	80048d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047b8:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <xTaskIncrementTick+0x148>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047c0:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <xTaskIncrementTick+0x148>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d120      	bne.n	800480e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047cc:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <xTaskIncrementTick+0x14c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <xTaskIncrementTick+0x48>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	603b      	str	r3, [r7, #0]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xTaskIncrementTick+0x46>
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <xTaskIncrementTick+0x14c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <xTaskIncrementTick+0x150>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	; (80048f0 <xTaskIncrementTick+0x14c>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <xTaskIncrementTick+0x150>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <xTaskIncrementTick+0x154>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a3c      	ldr	r2, [pc, #240]	; (80048f8 <xTaskIncrementTick+0x154>)
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	f000 f995 	bl	8004b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <xTaskIncrementTick+0x158>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d348      	bcc.n	80048aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <xTaskIncrementTick+0x14c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <xTaskIncrementTick+0x158>)
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	601a      	str	r2, [r3, #0]
					break;
 800482a:	e03e      	b.n	80048aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <xTaskIncrementTick+0x14c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d203      	bcs.n	800484c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004844:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <xTaskIncrementTick+0x158>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800484a:	e02e      	b.n	80048aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fcac 	bl	80041ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3318      	adds	r3, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fca3 	bl	80041ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	2201      	movs	r2, #1
 800486e:	409a      	lsls	r2, r3
 8004870:	4b23      	ldr	r3, [pc, #140]	; (8004900 <xTaskIncrementTick+0x15c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <xTaskIncrementTick+0x15c>)
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <xTaskIncrementTick+0x160>)
 8004888:	441a      	add	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3304      	adds	r3, #4
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f7ff fc2f 	bl	80040f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <xTaskIncrementTick+0x164>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3b9      	bcc.n	8004818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a8:	e7b6      	b.n	8004818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <xTaskIncrementTick+0x164>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4914      	ldr	r1, [pc, #80]	; (8004904 <xTaskIncrementTick+0x160>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d901      	bls.n	80048c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <xTaskIncrementTick+0x168>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e004      	b.n	80048de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <xTaskIncrementTick+0x16c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <xTaskIncrementTick+0x16c>)
 80048dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000554 	.word	0x20000554
 80048ec:	20000530 	.word	0x20000530
 80048f0:	200004e4 	.word	0x200004e4
 80048f4:	200004e8 	.word	0x200004e8
 80048f8:	20000544 	.word	0x20000544
 80048fc:	2000054c 	.word	0x2000054c
 8004900:	20000534 	.word	0x20000534
 8004904:	20000430 	.word	0x20000430
 8004908:	2000042c 	.word	0x2000042c
 800490c:	20000540 	.word	0x20000540
 8004910:	2000053c 	.word	0x2000053c

08004914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800491a:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <vTaskSwitchContext+0xa4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <vTaskSwitchContext+0xa8>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004928:	e03f      	b.n	80049aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <vTaskSwitchContext+0xa8>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004930:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <vTaskSwitchContext+0xac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	f1c3 031f 	rsb	r3, r3, #31
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	491f      	ldr	r1, [pc, #124]	; (80049c4 <vTaskSwitchContext+0xb0>)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <vTaskSwitchContext+0x5c>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vTaskSwitchContext+0x5a>
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <vTaskSwitchContext+0xb0>)
 800497c:	4413      	add	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3308      	adds	r3, #8
 8004992:	429a      	cmp	r2, r3
 8004994:	d104      	bne.n	80049a0 <vTaskSwitchContext+0x8c>
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <vTaskSwitchContext+0xb4>)
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000554 	.word	0x20000554
 80049bc:	20000540 	.word	0x20000540
 80049c0:	20000534 	.word	0x20000534
 80049c4:	20000430 	.word	0x20000430
 80049c8:	2000042c 	.word	0x2000042c

080049cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049d4:	f000 f852 	bl	8004a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <prvIdleTask+0x28>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d9f9      	bls.n	80049d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <prvIdleTask+0x2c>)
 80049e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049f0:	e7f0      	b.n	80049d4 <prvIdleTask+0x8>
 80049f2:	bf00      	nop
 80049f4:	20000430 	.word	0x20000430
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	e00c      	b.n	8004a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <prvInitialiseTaskLists+0x60>)
 8004a14:	4413      	add	r3, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fb3f 	bl	800409a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d9ef      	bls.n	8004a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a28:	480d      	ldr	r0, [pc, #52]	; (8004a60 <prvInitialiseTaskLists+0x64>)
 8004a2a:	f7ff fb36 	bl	800409a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2e:	480d      	ldr	r0, [pc, #52]	; (8004a64 <prvInitialiseTaskLists+0x68>)
 8004a30:	f7ff fb33 	bl	800409a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a34:	480c      	ldr	r0, [pc, #48]	; (8004a68 <prvInitialiseTaskLists+0x6c>)
 8004a36:	f7ff fb30 	bl	800409a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a3a:	480c      	ldr	r0, [pc, #48]	; (8004a6c <prvInitialiseTaskLists+0x70>)
 8004a3c:	f7ff fb2d 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a40:	480b      	ldr	r0, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x74>)
 8004a42:	f7ff fb2a 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <prvInitialiseTaskLists+0x78>)
 8004a48:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x64>)
 8004a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <prvInitialiseTaskLists+0x7c>)
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <prvInitialiseTaskLists+0x68>)
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000430 	.word	0x20000430
 8004a60:	200004bc 	.word	0x200004bc
 8004a64:	200004d0 	.word	0x200004d0
 8004a68:	200004ec 	.word	0x200004ec
 8004a6c:	20000500 	.word	0x20000500
 8004a70:	20000518 	.word	0x20000518
 8004a74:	200004e4 	.word	0x200004e4
 8004a78:	200004e8 	.word	0x200004e8

08004a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a82:	e019      	b.n	8004ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a84:	f000 fa0e 	bl	8004ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <prvCheckTasksWaitingTermination+0x50>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fb8a 	bl	80041ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <prvCheckTasksWaitingTermination+0x54>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <prvCheckTasksWaitingTermination+0x54>)
 8004aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aae:	f000 fa29 	bl	8004f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f810 	bl	8004ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvCheckTasksWaitingTermination+0x58>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e1      	bne.n	8004a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000500 	.word	0x20000500
 8004ad0:	2000052c 	.word	0x2000052c
 8004ad4:	20000514 	.word	0x20000514

08004ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb86 	bl	8005200 <vPortFree>
				vPortFree( pxTCB );
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fb83 	bl	8005200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004afa:	e018      	b.n	8004b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d103      	bne.n	8004b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fb7a 	bl	8005200 <vPortFree>
	}
 8004b0c:	e00f      	b.n	8004b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d00a      	beq.n	8004b2e <prvDeleteTCB+0x56>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <prvDeleteTCB+0x54>
	}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <prvResetNextTaskUnblockTime+0x38>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <prvResetNextTaskUnblockTime+0x3c>)
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b50:	e008      	b.n	8004b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <prvResetNextTaskUnblockTime+0x38>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <prvResetNextTaskUnblockTime+0x3c>)
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	200004e4 	.word	0x200004e4
 8004b74:	2000054c 	.word	0x2000054c

08004b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb0d 	bl	80041ae <uxListRemove>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4013      	ands	r3, r2
 8004bae:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d10a      	bne.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x58>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	481a      	ldr	r0, [pc, #104]	; (8004c34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bca:	f7ff fa93 	bl	80040f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bce:	e026      	b.n	8004c1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bd8:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d209      	bcs.n	8004bfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f7ff faa1 	bl	800413c <vListInsert>
}
 8004bfa:	e010      	b.n	8004c1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7ff fa97 	bl	800413c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d202      	bcs.n	8004c1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000530 	.word	0x20000530
 8004c2c:	2000042c 	.word	0x2000042c
 8004c30:	20000534 	.word	0x20000534
 8004c34:	20000518 	.word	0x20000518
 8004c38:	200004e8 	.word	0x200004e8
 8004c3c:	200004e4 	.word	0x200004e4
 8004c40:	2000054c 	.word	0x2000054c

08004c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3b04      	subs	r3, #4
 8004c54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3b04      	subs	r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c74:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <pxPortInitialiseStack+0x64>)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b14      	subs	r3, #20
 8004c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f06f 0202 	mvn.w	r2, #2
 8004c92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3b20      	subs	r3, #32
 8004c98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	08004cad 	.word	0x08004cad

08004cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <prvTaskExitError+0x54>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d00a      	beq.n	8004cd6 <prvTaskExitError+0x2a>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <prvTaskExitError+0x28>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cea:	bf00      	nop
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0fc      	beq.n	8004cec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	2000001c 	.word	0x2000001c
	...

08004d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <pxCurrentTCBConst2>)
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	6808      	ldr	r0, [r1, #0]
 8004d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	f380 8809 	msr	PSP, r0
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f380 8811 	msr	BASEPRI, r0
 8004d2a:	4770      	bx	lr
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst2>:
 8004d30:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d38:	4808      	ldr	r0, [pc, #32]	; (8004d5c <prvPortStartFirstTask+0x24>)
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f380 8808 	msr	MSP, r0
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8814 	msr	CONTROL, r0
 8004d4a:	b662      	cpsie	i
 8004d4c:	b661      	cpsie	f
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	df00      	svc	0
 8004d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d5a:	bf00      	nop
 8004d5c:	e000ed08 	.word	0xe000ed08

08004d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d66:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <xPortStartScheduler+0x120>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a46      	ldr	r2, [pc, #280]	; (8004e84 <xPortStartScheduler+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d10a      	bne.n	8004d86 <xPortStartScheduler+0x26>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d86:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <xPortStartScheduler+0x120>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a3f      	ldr	r2, [pc, #252]	; (8004e88 <xPortStartScheduler+0x128>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10a      	bne.n	8004da6 <xPortStartScheduler+0x46>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	60fb      	str	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004da6:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <xPortStartScheduler+0x12c>)
 8004da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	22ff      	movs	r2, #255	; 0xff
 8004db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <xPortStartScheduler+0x130>)
 8004dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <xPortStartScheduler+0x134>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dd4:	e009      	b.n	8004dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <xPortStartScheduler+0x134>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	; (8004e94 <xPortStartScheduler+0x134>)
 8004dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d0ef      	beq.n	8004dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <xPortStartScheduler+0x134>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1c3 0307 	rsb	r3, r3, #7
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d00a      	beq.n	8004e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60bb      	str	r3, [r7, #8]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e18:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <xPortStartScheduler+0x134>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <xPortStartScheduler+0x134>)
 8004e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e22:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <xPortStartScheduler+0x134>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e2a:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <xPortStartScheduler+0x134>)
 8004e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <xPortStartScheduler+0x138>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <xPortStartScheduler+0x138>)
 8004e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <xPortStartScheduler+0x138>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <xPortStartScheduler+0x138>)
 8004e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e4e:	f000 f8dd 	bl	800500c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <xPortStartScheduler+0x13c>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e58:	f000 f8fc 	bl	8005054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <xPortStartScheduler+0x140>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <xPortStartScheduler+0x140>)
 8004e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e68:	f7ff ff66 	bl	8004d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e6c:	f7ff fd52 	bl	8004914 <vTaskSwitchContext>
	prvTaskExitError();
 8004e70:	f7ff ff1c 	bl	8004cac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	e000ed00 	.word	0xe000ed00
 8004e84:	410fc271 	.word	0x410fc271
 8004e88:	410fc270 	.word	0x410fc270
 8004e8c:	e000e400 	.word	0xe000e400
 8004e90:	20000558 	.word	0x20000558
 8004e94:	2000055c 	.word	0x2000055c
 8004e98:	e000ed20 	.word	0xe000ed20
 8004e9c:	2000001c 	.word	0x2000001c
 8004ea0:	e000ef34 	.word	0xe000ef34

08004ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
}
 8004ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <vPortEnterCritical+0x58>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <vPortEnterCritical+0x58>)
 8004ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <vPortEnterCritical+0x58>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10f      	bne.n	8004ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortEnterCritical+0x5c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <vPortEnterCritical+0x4a>
	}
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	2000001c 	.word	0x2000001c
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <vPortExitCritical+0x50>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <vPortExitCritical+0x24>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <vPortExitCritical+0x50>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <vPortExitCritical+0x50>)
 8004f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <vPortExitCritical+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <vPortExitCritical+0x42>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000001c 	.word	0x2000001c
	...

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <pxCurrentTCBConst>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f01e 0f10 	tst.w	lr, #16
 8004f70:	bf08      	it	eq
 8004f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f84:	f380 8811 	msr	BASEPRI, r0
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f7ff fcc0 	bl	8004914 <vTaskSwitchContext>
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f380 8811 	msr	BASEPRI, r0
 8004f9c:	bc09      	pop	{r0, r3}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa6:	f01e 0f10 	tst.w	lr, #16
 8004faa:	bf08      	it	eq
 8004fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fb0:	f380 8809 	msr	PSP, r0
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fe2:	f7ff fbdf 	bl	80047a4 <xTaskIncrementTick>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <SysTick_Handler+0x40>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f383 8811 	msr	BASEPRI, r3
}
 8004ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <vPortSetupTimerInterrupt+0x34>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <vPortSetupTimerInterrupt+0x38>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <vPortSetupTimerInterrupt+0x3c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <vPortSetupTimerInterrupt+0x40>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <vPortSetupTimerInterrupt+0x44>)
 800502a:	3b01      	subs	r3, #1
 800502c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800502e:	4b04      	ldr	r3, [pc, #16]	; (8005040 <vPortSetupTimerInterrupt+0x34>)
 8005030:	2207      	movs	r2, #7
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e010 	.word	0xe000e010
 8005044:	e000e018 	.word	0xe000e018
 8005048:	20000010 	.word	0x20000010
 800504c:	10624dd3 	.word	0x10624dd3
 8005050:	e000e014 	.word	0xe000e014

08005054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005064 <vPortEnableVFP+0x10>
 8005058:	6801      	ldr	r1, [r0, #0]
 800505a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800505e:	6001      	str	r1, [r0, #0]
 8005060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005062:	bf00      	nop
 8005064:	e000ed88 	.word	0xe000ed88

08005068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005074:	f7ff faec 	bl	8004650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005078:	4b5b      	ldr	r3, [pc, #364]	; (80051e8 <pvPortMalloc+0x180>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005080:	f000 f920 	bl	80052c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005084:	4b59      	ldr	r3, [pc, #356]	; (80051ec <pvPortMalloc+0x184>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8093 	bne.w	80051b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005098:	2208      	movs	r2, #8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d014      	beq.n	80050d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	3308      	adds	r3, #8
 80050b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <pvPortMalloc+0x6c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	617b      	str	r3, [r7, #20]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d06e      	beq.n	80051b8 <pvPortMalloc+0x150>
 80050da:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <pvPortMalloc+0x188>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d869      	bhi.n	80051b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <pvPortMalloc+0x18c>)
 80050e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050e8:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <pvPortMalloc+0x18c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ee:	e004      	b.n	80050fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <pvPortMalloc+0xa4>
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f1      	bne.n	80050f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800510c:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <pvPortMalloc+0x180>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	429a      	cmp	r2, r3
 8005114:	d050      	beq.n	80051b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2208      	movs	r2, #8
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	2308      	movs	r3, #8
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	429a      	cmp	r2, r3
 8005136:	d91f      	bls.n	8005178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <pvPortMalloc+0xf8>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	613b      	str	r3, [r7, #16]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005172:	69b8      	ldr	r0, [r7, #24]
 8005174:	f000 f908 	bl	8005388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <pvPortMalloc+0x188>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <pvPortMalloc+0x188>)
 8005184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <pvPortMalloc+0x188>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <pvPortMalloc+0x190>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d203      	bcs.n	800519a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005192:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <pvPortMalloc+0x188>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <pvPortMalloc+0x190>)
 8005198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <pvPortMalloc+0x184>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <pvPortMalloc+0x194>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a11      	ldr	r2, [pc, #68]	; (80051fc <pvPortMalloc+0x194>)
 80051b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051b8:	f7ff fa58 	bl	800466c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <pvPortMalloc+0x174>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60fb      	str	r3, [r7, #12]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <pvPortMalloc+0x172>
	return pvReturn;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20004168 	.word	0x20004168
 80051ec:	2000417c 	.word	0x2000417c
 80051f0:	2000416c 	.word	0x2000416c
 80051f4:	20004160 	.word	0x20004160
 80051f8:	20004170 	.word	0x20004170
 80051fc:	20004174 	.word	0x20004174

08005200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04d      	beq.n	80052ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005212:	2308      	movs	r3, #8
 8005214:	425b      	negs	r3, r3
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <vPortFree+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <vPortFree+0x44>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60fb      	str	r3, [r7, #12]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <vPortFree+0x62>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60bb      	str	r3, [r7, #8]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <vPortFree+0xb8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11a      	bne.n	80052ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <vPortFree+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005288:	f7ff f9e2 	bl	8004650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vPortFree+0xbc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <vPortFree+0xbc>)
 8005298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f000 f874 	bl	8005388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <vPortFree+0xc0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <vPortFree+0xc0>)
 80052a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052aa:	f7ff f9df 	bl	800466c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ae:	bf00      	nop
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000417c 	.word	0x2000417c
 80052bc:	2000416c 	.word	0x2000416c
 80052c0:	20004178 	.word	0x20004178

080052c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <prvHeapInit+0xac>)
 80052d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <prvHeapInit+0xac>)
 80052f4:	4413      	add	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <prvHeapInit+0xb0>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <prvHeapInit+0xb0>)
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005310:	2208      	movs	r2, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <prvHeapInit+0xb4>)
 8005324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <prvHeapInit+0xb4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvHeapInit+0xb4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <prvHeapInit+0xb4>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <prvHeapInit+0xb8>)
 8005352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a09      	ldr	r2, [pc, #36]	; (8005380 <prvHeapInit+0xbc>)
 800535a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <prvHeapInit+0xc0>)
 800535e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20000560 	.word	0x20000560
 8005374:	20004160 	.word	0x20004160
 8005378:	20004168 	.word	0x20004168
 800537c:	20004170 	.word	0x20004170
 8005380:	2000416c 	.word	0x2000416c
 8005384:	2000417c 	.word	0x2000417c

08005388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <prvInsertBlockIntoFreeList+0xac>)
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <prvInsertBlockIntoFreeList+0x14>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d8f7      	bhi.n	8005396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d108      	bne.n	80053ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d118      	bne.n	8005410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d00d      	beq.n	8005406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e008      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e003      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d002      	beq.n	8005426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20004160 	.word	0x20004160
 8005438:	20004168 	.word	0x20004168

0800543c <microDelay>:
static float _speed = 0.0;
static float _acceleration = 0.0;
static float _maxSpeed = 0.0;
static long _stepInterval = 0;

void microDelay(uint16_t delay) {
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <microDelay+0x30>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800544e:	bf00      	nop
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <microDelay+0x30>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	429a      	cmp	r2, r3
 800545a:	d3f9      	bcc.n	8005450 <microDelay+0x14>
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	2000034c 	.word	0x2000034c

08005470 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 800547a:	4a04      	ldr	r2, [pc, #16]	; (800548c <setAcceleration+0x1c>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20004184 	.word	0x20004184

08005490 <setRPM>:

void setRPM(float rpm, int steps) {
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	ed87 0a01 	vstr	s0, [r7, #4]
 800549a:	6038      	str	r0, [r7, #0]
    float speed = (rpm * (float)steps) / 60;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80054aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ae:	eddf 6a07 	vldr	s13, [pc, #28]	; 80054cc <setRPM+0x3c>
 80054b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054b6:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 80054ba:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <setRPM+0x40>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	42700000 	.word	0x42700000
 80054d0:	20004188 	.word	0x20004188
 80054d4:	00000000 	.word	0x00000000

080054d8 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <computeNewSpeed+0x88>)
 80054de:	ed93 7a00 	vldr	s14, [r3]
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <computeNewSpeed+0x8c>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	d519      	bpl.n	8005526 <computeNewSpeed+0x4e>
        _speed += _acceleration;
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <computeNewSpeed+0x88>)
 80054f4:	ed93 7a00 	vldr	s14, [r3]
 80054f8:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <computeNewSpeed+0x90>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <computeNewSpeed+0x88>)
 8005504:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <computeNewSpeed+0x88>)
 800550a:	ed93 7a00 	vldr	s14, [r3]
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <computeNewSpeed+0x8c>)
 8005510:	edd3 7a00 	vldr	s15, [r3]
 8005514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	dd03      	ble.n	8005526 <computeNewSpeed+0x4e>
            _speed = _maxSpeed;
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <computeNewSpeed+0x8c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a0f      	ldr	r2, [pc, #60]	; (8005560 <computeNewSpeed+0x88>)
 8005524:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 8005526:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <computeNewSpeed+0x88>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fa ffbc 	bl	80004a8 <__aeabi_f2d>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	a108      	add	r1, pc, #32	; (adr r1, 8005558 <computeNewSpeed+0x80>)
 8005536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800553a:	f7fb f937 	bl	80007ac <__aeabi_ddiv>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	f7fb fa19 	bl	800097c <__aeabi_d2iz>
 800554a:	4603      	mov	r3, r0
 800554c:	4a07      	ldr	r2, [pc, #28]	; (800556c <computeNewSpeed+0x94>)
 800554e:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <computeNewSpeed+0x94>)
 8005552:	681b      	ldr	r3, [r3, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00000000 	.word	0x00000000
 800555c:	412e8480 	.word	0x412e8480
 8005560:	20004180 	.word	0x20004180
 8005564:	20004188 	.word	0x20004188
 8005568:	20004184 	.word	0x20004184
 800556c:	2000418c 	.word	0x2000418c

08005570 <motorMove>:

        // Optional: Implement a way to exit the loop if necessary
    }
}

void motorMove(MotorConfig* motor, int steps_to_move) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

	if (steps_to_move >0)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	dd08      	ble.n	8005592 <motorMove+0x22>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction pin for forward movement
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	889b      	ldrh	r3, [r3, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	4619      	mov	r1, r3
 800558c:	f7fc fbf2 	bl	8001d74 <HAL_GPIO_WritePin>
 8005590:	e00a      	b.n	80055a8 <motorMove+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction pin for backward movement
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	889b      	ldrh	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	4619      	mov	r1, r3
 800559e:	f7fc fbe9 	bl	8001d74 <HAL_GPIO_WritePin>
		steps_to_move = steps_to_move * (-1); // converting steps to positive value
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	425b      	negs	r3, r3
 80055a6:	603b      	str	r3, [r7, #0]
	}



    for(int i = 0; i < steps_to_move; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e021      	b.n	80055f2 <motorMove+0x82>
    {
        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 80055ae:	f7ff ff93 	bl	80054d8 <computeNewSpeed>
 80055b2:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6898      	ldr	r0, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	899b      	ldrh	r3, [r3, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	4619      	mov	r1, r3
 80055c0:	f7fc fbd8 	bl	8001d74 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ff36 	bl	800543c <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6898      	ldr	r0, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	899b      	ldrh	r3, [r3, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	4619      	mov	r1, r3
 80055dc:	f7fc fbca 	bl	8001d74 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff28 	bl	800543c <microDelay>
    for(int i = 0; i < steps_to_move; i++)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	dbd9      	blt.n	80055ae <motorMove+0x3e>

        // Optional: Implement a way to exit the loop if necessary
    }
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <atoi>:
 8005604:	220a      	movs	r2, #10
 8005606:	2100      	movs	r1, #0
 8005608:	f000 b8b4 	b.w	8005774 <strtol>

0800560c <__errno>:
 800560c:	4b01      	ldr	r3, [pc, #4]	; (8005614 <__errno+0x8>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000020 	.word	0x20000020

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4d0d      	ldr	r5, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 800561e:	1b64      	subs	r4, r4, r5
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	2600      	movs	r6, #0
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4d0b      	ldr	r5, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	4c0c      	ldr	r4, [pc, #48]	; (800565c <__libc_init_array+0x44>)
 800562c:	f000 f8ac 	bl	8005788 <_init>
 8005630:	1b64      	subs	r4, r4, r5
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	2600      	movs	r6, #0
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	0800592c 	.word	0x0800592c
 8005654:	0800592c 	.word	0x0800592c
 8005658:	0800592c 	.word	0x0800592c
 800565c:	08005930 	.word	0x08005930

08005660 <memset>:
 8005660:	4402      	add	r2, r0
 8005662:	4603      	mov	r3, r0
 8005664:	4293      	cmp	r3, r2
 8005666:	d100      	bne.n	800566a <memset+0xa>
 8005668:	4770      	bx	lr
 800566a:	f803 1b01 	strb.w	r1, [r3], #1
 800566e:	e7f9      	b.n	8005664 <memset+0x4>

08005670 <_strtol_l.constprop.0>:
 8005670:	2b01      	cmp	r3, #1
 8005672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005676:	d001      	beq.n	800567c <_strtol_l.constprop.0+0xc>
 8005678:	2b24      	cmp	r3, #36	; 0x24
 800567a:	d906      	bls.n	800568a <_strtol_l.constprop.0+0x1a>
 800567c:	f7ff ffc6 	bl	800560c <__errno>
 8005680:	2316      	movs	r3, #22
 8005682:	6003      	str	r3, [r0, #0]
 8005684:	2000      	movs	r0, #0
 8005686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005770 <_strtol_l.constprop.0+0x100>
 800568e:	460d      	mov	r5, r1
 8005690:	462e      	mov	r6, r5
 8005692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800569a:	f017 0708 	ands.w	r7, r7, #8
 800569e:	d1f7      	bne.n	8005690 <_strtol_l.constprop.0+0x20>
 80056a0:	2c2d      	cmp	r4, #45	; 0x2d
 80056a2:	d132      	bne.n	800570a <_strtol_l.constprop.0+0x9a>
 80056a4:	782c      	ldrb	r4, [r5, #0]
 80056a6:	2701      	movs	r7, #1
 80056a8:	1cb5      	adds	r5, r6, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d05b      	beq.n	8005766 <_strtol_l.constprop.0+0xf6>
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d109      	bne.n	80056c6 <_strtol_l.constprop.0+0x56>
 80056b2:	2c30      	cmp	r4, #48	; 0x30
 80056b4:	d107      	bne.n	80056c6 <_strtol_l.constprop.0+0x56>
 80056b6:	782c      	ldrb	r4, [r5, #0]
 80056b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056bc:	2c58      	cmp	r4, #88	; 0x58
 80056be:	d14d      	bne.n	800575c <_strtol_l.constprop.0+0xec>
 80056c0:	786c      	ldrb	r4, [r5, #1]
 80056c2:	2310      	movs	r3, #16
 80056c4:	3502      	adds	r5, #2
 80056c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80056ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80056ce:	f04f 0c00 	mov.w	ip, #0
 80056d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80056d6:	4666      	mov	r6, ip
 80056d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80056dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80056e0:	f1be 0f09 	cmp.w	lr, #9
 80056e4:	d816      	bhi.n	8005714 <_strtol_l.constprop.0+0xa4>
 80056e6:	4674      	mov	r4, lr
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	dd24      	ble.n	8005736 <_strtol_l.constprop.0+0xc6>
 80056ec:	f1bc 0f00 	cmp.w	ip, #0
 80056f0:	db1e      	blt.n	8005730 <_strtol_l.constprop.0+0xc0>
 80056f2:	45b1      	cmp	r9, r6
 80056f4:	d31c      	bcc.n	8005730 <_strtol_l.constprop.0+0xc0>
 80056f6:	d101      	bne.n	80056fc <_strtol_l.constprop.0+0x8c>
 80056f8:	45a2      	cmp	sl, r4
 80056fa:	db19      	blt.n	8005730 <_strtol_l.constprop.0+0xc0>
 80056fc:	fb06 4603 	mla	r6, r6, r3, r4
 8005700:	f04f 0c01 	mov.w	ip, #1
 8005704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005708:	e7e8      	b.n	80056dc <_strtol_l.constprop.0+0x6c>
 800570a:	2c2b      	cmp	r4, #43	; 0x2b
 800570c:	bf04      	itt	eq
 800570e:	782c      	ldrbeq	r4, [r5, #0]
 8005710:	1cb5      	addeq	r5, r6, #2
 8005712:	e7ca      	b.n	80056aa <_strtol_l.constprop.0+0x3a>
 8005714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005718:	f1be 0f19 	cmp.w	lr, #25
 800571c:	d801      	bhi.n	8005722 <_strtol_l.constprop.0+0xb2>
 800571e:	3c37      	subs	r4, #55	; 0x37
 8005720:	e7e2      	b.n	80056e8 <_strtol_l.constprop.0+0x78>
 8005722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005726:	f1be 0f19 	cmp.w	lr, #25
 800572a:	d804      	bhi.n	8005736 <_strtol_l.constprop.0+0xc6>
 800572c:	3c57      	subs	r4, #87	; 0x57
 800572e:	e7db      	b.n	80056e8 <_strtol_l.constprop.0+0x78>
 8005730:	f04f 3cff 	mov.w	ip, #4294967295
 8005734:	e7e6      	b.n	8005704 <_strtol_l.constprop.0+0x94>
 8005736:	f1bc 0f00 	cmp.w	ip, #0
 800573a:	da05      	bge.n	8005748 <_strtol_l.constprop.0+0xd8>
 800573c:	2322      	movs	r3, #34	; 0x22
 800573e:	6003      	str	r3, [r0, #0]
 8005740:	4646      	mov	r6, r8
 8005742:	b942      	cbnz	r2, 8005756 <_strtol_l.constprop.0+0xe6>
 8005744:	4630      	mov	r0, r6
 8005746:	e79e      	b.n	8005686 <_strtol_l.constprop.0+0x16>
 8005748:	b107      	cbz	r7, 800574c <_strtol_l.constprop.0+0xdc>
 800574a:	4276      	negs	r6, r6
 800574c:	2a00      	cmp	r2, #0
 800574e:	d0f9      	beq.n	8005744 <_strtol_l.constprop.0+0xd4>
 8005750:	f1bc 0f00 	cmp.w	ip, #0
 8005754:	d000      	beq.n	8005758 <_strtol_l.constprop.0+0xe8>
 8005756:	1e69      	subs	r1, r5, #1
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	e7f3      	b.n	8005744 <_strtol_l.constprop.0+0xd4>
 800575c:	2430      	movs	r4, #48	; 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1b1      	bne.n	80056c6 <_strtol_l.constprop.0+0x56>
 8005762:	2308      	movs	r3, #8
 8005764:	e7af      	b.n	80056c6 <_strtol_l.constprop.0+0x56>
 8005766:	2c30      	cmp	r4, #48	; 0x30
 8005768:	d0a5      	beq.n	80056b6 <_strtol_l.constprop.0+0x46>
 800576a:	230a      	movs	r3, #10
 800576c:	e7ab      	b.n	80056c6 <_strtol_l.constprop.0+0x56>
 800576e:	bf00      	nop
 8005770:	08005821 	.word	0x08005821

08005774 <strtol>:
 8005774:	4613      	mov	r3, r2
 8005776:	460a      	mov	r2, r1
 8005778:	4601      	mov	r1, r0
 800577a:	4802      	ldr	r0, [pc, #8]	; (8005784 <strtol+0x10>)
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f7ff bf77 	b.w	8005670 <_strtol_l.constprop.0>
 8005782:	bf00      	nop
 8005784:	20000020 	.word	0x20000020

08005788 <_init>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr

08005794 <_fini>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr
