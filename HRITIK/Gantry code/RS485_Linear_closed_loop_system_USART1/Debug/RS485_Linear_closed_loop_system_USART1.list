
RS485_Linear_closed_loop_system_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800b680  0800b680  0001b680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd4  0800bbd4  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd4  0800bbd4  0001bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbdc  0800bbdc  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800bbe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004310  200002d0  0800beb4  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045e0  0800beb4  000245e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015684  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332d  00000000  00000000  00035984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00038cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00039f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001945d  00000000  00000000  0003b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001541a  00000000  00000000  0005458d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098677  00000000  00000000  000699a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010201e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  00102070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b664 	.word	0x0800b664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800b664 	.word	0x0800b664

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <vApplicationGetIdleTaskMemory+0x2c>)
 8001018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <vApplicationGetIdleTaskMemory+0x30>)
 800101e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002ec 	.word	0x200002ec
 8001038:	20000340 	.word	0x20000340

0800103c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001044:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001048:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001054:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001058:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800105c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001064:	e000      	b.n	8001068 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001066:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001068:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001072:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <updateEncoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncoder(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8001092:	2101      	movs	r1, #1
 8001094:	4824      	ldr	r0, [pc, #144]	; (8001128 <updateEncoder+0x9c>)
 8001096:	f001 f9bb 	bl	8002410 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 800109e:	2102      	movs	r1, #2
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <updateEncoder+0x9c>)
 80010a2:	f001 f9b5 	bl	8002410 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <updateEncoder+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b0d      	cmp	r3, #13
 80010c4:	d008      	beq.n	80010d8 <updateEncoder+0x4c>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d005      	beq.n	80010d8 <updateEncoder+0x4c>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d002      	beq.n	80010d8 <updateEncoder+0x4c>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b0b      	cmp	r3, #11
 80010d6:	d109      	bne.n	80010ec <updateEncoder+0x60>
  {
    encoderValue++;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <updateEncoder+0xa4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <updateEncoder+0xa4>)
 80010e0:	6013      	str	r3, [r2, #0]
    encoderPulses++;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <updateEncoder+0xa8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <updateEncoder+0xa8>)
 80010ea:	6013      	str	r3, [r2, #0]
  }

  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b0e      	cmp	r3, #14
 80010f0:	d008      	beq.n	8001104 <updateEncoder+0x78>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d005      	beq.n	8001104 <updateEncoder+0x78>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d002      	beq.n	8001104 <updateEncoder+0x78>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b08      	cmp	r3, #8
 8001102:	d109      	bne.n	8001118 <updateEncoder+0x8c>
  {
    encoderValue--;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <updateEncoder+0xa4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <updateEncoder+0xa4>)
 800110c:	6013      	str	r3, [r2, #0]
    encoderPulses++;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <updateEncoder+0xa8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <updateEncoder+0xa8>)
 8001116:	6013      	str	r3, [r2, #0]
  }

  lastEncoded = encoded;
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <updateEncoder+0xa0>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020400 	.word	0x40020400
 800112c:	20000540 	.word	0x20000540
 8001130:	20000544 	.word	0x20000544
 8001134:	20000580 	.word	0x20000580

08001138 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <HAL_GPIO_EXTI_Callback+0x16>
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 800114e:	f7ff ff9d 	bl	800108c <updateEncoder>

  }
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <UART_StartReceive>:

// Function to start UART reception
void UART_StartReceive(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <UART_StartReceive+0x20>)
 8001168:	f001 f96a 	bl	8002440 <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	4903      	ldr	r1, [pc, #12]	; (8001180 <UART_StartReceive+0x24>)
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <UART_StartReceive+0x28>)
 8001174:	f002 fbdf 	bl	8003936 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40020000 	.word	0x40020000
 8001180:	20000668 	.word	0x20000668
 8001184:	200005cc 	.word	0x200005cc

08001188 <_write>:

int _write(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e009      	b.n	80011b2 <_write+0x2a>

		ITM_SendChar((*ptr++));
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	60ba      	str	r2, [r7, #8]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff48 	bl	800103c <ITM_SendChar>
	for(i=0; i<len; i++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf1      	blt.n	800119e <_write+0x16>

	return len;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	velocity = Holding_Registers_Database[0];
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <main+0xb4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <main+0xb8>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	acceleration = Holding_Registers_Database[1];
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <main+0xb4>)
 80011de:	885b      	ldrh	r3, [r3, #2]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <main+0xbc>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]
	pully_dia = Holding_Registers_Database[2];
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <main+0xb4>)
 80011f0:	889b      	ldrh	r3, [r3, #4]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <main+0xc0>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	motorSetSteps = Holding_Registers_Database[3];
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <main+0xb4>)
 8001202:	88db      	ldrh	r3, [r3, #6]
 8001204:	461a      	mov	r2, r3
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <main+0xc4>)
 8001208:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120a:	f000 fda3 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f847 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 f927 	bl	8001464 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001216:	f000 f8ab 	bl	8001370 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800121a:	f000 f8f9 	bl	8001410 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800121e:	481b      	ldr	r0, [pc, #108]	; (800128c <main+0xc8>)
 8001220:	f001 fe5a 	bl	8002ed8 <HAL_TIM_Base_Start>
  UART_StartReceive();
 8001224:	f7ff ff9a 	bl	800115c <UART_StartReceive>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <main+0xcc>)
 800122a:	f107 041c 	add.w	r4, r7, #28
 800122e:	461d      	mov	r5, r3
 8001230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f004 f815 	bl	8005272 <osThreadCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <main+0xd0>)
 800124c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <main+0xd4>)
 8001250:	463c      	mov	r4, r7
 8001252:	461d      	mov	r5, r3
 8001254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8001260:	463b      	mov	r3, r7
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f804 	bl	8005272 <osThreadCreate>
 800126a:	4603      	mov	r3, r0
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <main+0xd8>)
 800126e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001270:	f003 fff8 	bl	8005264 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001274:	e7fe      	b.n	8001274 <main+0xb0>
 8001276:	bf00      	nop
 8001278:	20000014 	.word	0x20000014
 800127c:	20000550 	.word	0x20000550
 8001280:	20000560 	.word	0x20000560
 8001284:	2000055c 	.word	0x2000055c
 8001288:	20000568 	.word	0x20000568
 800128c:	20000584 	.word	0x20000584
 8001290:	0800b698 	.word	0x0800b698
 8001294:	20000610 	.word	0x20000610
 8001298:	0800b6b4 	.word	0x0800b6b4
 800129c:	20000614 	.word	0x20000614

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fcfc 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <SystemClock_Config+0xc8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <SystemClock_Config+0xcc>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2310      	movs	r3, #16
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f001 f8bd 	bl	80024a4 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001330:	f000 fad3 	bl	80018da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb1f 	bl	8002994 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800135c:	f000 fabd 	bl	80018da <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM1_Init+0x98>)
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <MX_TIM1_Init+0x9c>)
 8001390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM1_Init+0x98>)
 8001394:	2263      	movs	r2, #99	; 0x63
 8001396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM1_Init+0x98>)
 80013a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_TIM1_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_TIM1_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_TIM1_Init+0x98>)
 80013ba:	f001 fd3d 	bl	8002e38 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013c4:	f000 fa89 	bl	80018da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM1_Init+0x98>)
 80013d6:	f001 ff43 	bl	8003260 <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013e0:	f000 fa7b 	bl	80018da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM1_Init+0x98>)
 80013f2:	f002 f93f 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013fc:	f000 fa6d 	bl	80018da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000584 	.word	0x20000584
 800140c:	40010000 	.word	0x40010000

08001410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART1_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001448:	f002 f996 	bl	8003778 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 fa42 	bl	80018da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200005cc 	.word	0x200005cc
 8001460:	40011000 	.word	0x40011000

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <MX_GPIO_Init+0x10c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <MX_GPIO_Init+0x10c>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_GPIO_Init+0x10c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <MX_GPIO_Init+0x10c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a34      	ldr	r2, [pc, #208]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a26      	ldr	r2, [pc, #152]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_GPIO_Init+0x10c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f240 1113 	movw	r1, #275	; 0x113
 80014f0:	4820      	ldr	r0, [pc, #128]	; (8001574 <MX_GPIO_Init+0x110>)
 80014f2:	f000 ffa5 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 80014f6:	2302      	movs	r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	481b      	ldr	r0, [pc, #108]	; (8001578 <MX_GPIO_Init+0x114>)
 800150a:	f000 fdfd 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 800150e:	f240 1313 	movw	r3, #275	; 0x113
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_GPIO_Init+0x110>)
 8001528:	f000 fdee 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800152c:	2303      	movs	r3, #3
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001530:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001536:	2301      	movs	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_GPIO_Init+0x118>)
 8001542:	f000 fde1 	bl	8002108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2105      	movs	r1, #5
 800154a:	2006      	movs	r0, #6
 800154c:	f000 fd20 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001550:	2006      	movs	r0, #6
 8001552:	f000 fd39 	bl	8001fc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2007      	movs	r0, #7
 800155c:	f000 fd18 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001560:	2007      	movs	r0, #7
 8001562:	f000 fd31 	bl	8001fc8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020800 	.word	0x40020800
 800157c:	40020400 	.word	0x40020400

08001580 <StartEncoderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	Input_Registers_Database[0] = encoderValue; // Store the encoder value in the first input register
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <StartEncoderTask+0x4c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <StartEncoderTask+0x50>)
 8001590:	801a      	strh	r2, [r3, #0]
	int distance_covered = encoderValue * (mm_in_1rev/enc_val_in_1rev);
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <StartEncoderTask+0x4c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <StartEncoderTask+0x54>)
 80015a0:	ed93 6a00 	vldr	s12, [r3]
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <StartEncoderTask+0x58>)
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b6:	ee17 3a90 	vmov	r3, s15
 80015ba:	60fb      	str	r3, [r7, #12]
	Input_Registers_Database[1] = distance_covered; // Store the encoder value in the first input register
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <StartEncoderTask+0x50>)
 80015c2:	805a      	strh	r2, [r3, #2]


    osDelay(5);
 80015c4:	2005      	movs	r0, #5
 80015c6:	f003 fea0 	bl	800530a <osDelay>
  {
 80015ca:	e7dd      	b.n	8001588 <StartEncoderTask+0x8>
 80015cc:	20000544 	.word	0x20000544
 80015d0:	20000078 	.word	0x20000078
 80015d4:	20000004 	.word	0x20000004
 80015d8:	20000000 	.word	0x20000000

080015dc <homePosition>:
* @param argument: Not used
* @retval None
*/

// Function to initialize motor position
void homePosition(MotorConfig* motor) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	setRPM(15, motorSetSteps); // (RPM, Driver Steps)
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <homePosition+0xb0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80015ee:	f005 f897 	bl	8006720 <setRPM>
	setAcceleration(5.0f); // Set acceleration in steps per second^2
 80015f2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80015f6:	f005 f883 	bl	8006700 <setAcceleration>

    // Move motor backward until limit switch is triggered
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 80015fa:	e01e      	b.n	800163a <homePosition+0x5e>
    	// Calculate the new speed and step interval
		unsigned long stepInterval = computeNewSpeed();
 80015fc:	f005 f8b4 	bl	8006768 <computeNewSpeed>
 8001600:	60f8      	str	r0, [r7, #12]

		// Generate a step pulse with the calculated interval
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6898      	ldr	r0, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	899b      	ldrh	r3, [r3, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f000 ff17 	bl	8002440 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f005 f857 	bl	80066cc <microDelay>
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6898      	ldr	r0, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	899b      	ldrh	r3, [r3, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	f000 ff09 	bl	8002440 <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f005 f849 	bl	80066cc <microDelay>
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 800163a:	2102      	movs	r1, #2
 800163c:	4814      	ldr	r0, [pc, #80]	; (8001690 <homePosition+0xb4>)
 800163e:	f000 fee7 	bl	8002410 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b01      	cmp	r3, #1
 8001646:	d0d9      	beq.n	80015fc <homePosition+0x20>
    }
    HAL_Delay(300);
 8001648:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800164c:	f000 fbc4 	bl	8001dd8 <HAL_Delay>
    // move motor forward 3mm or 480 steps

    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <homePosition+0xb8>)
 8001656:	f000 fef3 	bl	8002440 <HAL_GPIO_WritePin>
    HomeMotorMove(motor, 160*3); // motor will move 3mm or 480 steps after hitting the limit switch, 1mm = 160 steps
 800165a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f005 f8f6 	bl	8006850 <HomeMotorMove>
//    HomeMotorMove(motor, 160*10);
    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <homePosition+0xb8>)
 800166a:	f000 fee9 	bl	8002440 <HAL_GPIO_WritePin>

    // Set encoder value to zero
    HAL_Delay(10);
 800166e:	200a      	movs	r0, #10
 8001670:	f000 fbb2 	bl	8001dd8 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
    __disable_irq();

    encoderValue = 0;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <homePosition+0xbc>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800167e:	b662      	cpsie	i
}
 8001680:	bf00      	nop
    __enable_irq();
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000568 	.word	0x20000568
 8001690:	40020800 	.word	0x40020800
 8001694:	40020000 	.word	0x40020000
 8001698:	20000544 	.word	0x20000544

0800169c <StartMotorTask>:

/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */

  // Define motor configurations
  MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <StartMotorTask+0x1c8>)
 80016a6:	f107 0408 	add.w	r4, r7, #8
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initialize motor position
   homePosition(&motor1);
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff91 	bl	80015dc <homePosition>

  /* Infinite loop */
  for(;;)
  {
	  //Reading RMP value  from RPM holding register
	  velocity = Holding_Registers_Database[0];
 80016ba:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <StartMotorTask+0x1cc>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c6:	4b69      	ldr	r3, [pc, #420]	; (800186c <StartMotorTask+0x1d0>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	  pully_dia = Holding_Registers_Database[2];
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <StartMotorTask+0x1cc>)
 80016ce:	889b      	ldrh	r3, [r3, #4]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d8:	4b65      	ldr	r3, [pc, #404]	; (8001870 <StartMotorTask+0x1d4>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
	  rpm = (840*velocity)/(44*pully_dia);
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <StartMotorTask+0x1d0>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001874 <StartMotorTask+0x1d8>
 80016e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016ec:	4b60      	ldr	r3, [pc, #384]	; (8001870 <StartMotorTask+0x1d4>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001878 <StartMotorTask+0x1dc>
 80016f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <StartMotorTask+0x1e0>)
 8001700:	edc3 7a00 	vstr	s15, [r3]
	  if(rpm != prev_rpm)
 8001704:	4b5d      	ldr	r3, [pc, #372]	; (800187c <StartMotorTask+0x1e0>)
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <StartMotorTask+0x1e4>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	eeb4 7a67 	vcmp.f32	s14, s15
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d00d      	beq.n	8001736 <StartMotorTask+0x9a>
	  {
	  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 800171a:	4b58      	ldr	r3, [pc, #352]	; (800187c <StartMotorTask+0x1e0>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <StartMotorTask+0x1e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	f004 fff9 	bl	8006720 <setRPM>
	  prev_rpm = rpm;
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <StartMotorTask+0x1e0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a53      	ldr	r2, [pc, #332]	; (8001880 <StartMotorTask+0x1e4>)
 8001734:	6013      	str	r3, [r2, #0]
	  }

	  //Reading acceleration value from acceleration holding register
	  acceleration = Holding_Registers_Database[1];
 8001736:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <StartMotorTask+0x1cc>)
 8001738:	885b      	ldrh	r3, [r3, #2]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <StartMotorTask+0x1ec>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
	  if(acceleration != prev_acceleration)
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <StartMotorTask+0x1ec>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	4b4f      	ldr	r3, [pc, #316]	; (800188c <StartMotorTask+0x1f0>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eeb4 7a67 	vcmp.f32	s14, s15
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d00a      	beq.n	8001774 <StartMotorTask+0xd8>
	  {
	   setAcceleration(acceleration);
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <StartMotorTask+0x1ec>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f004 ffca 	bl	8006700 <setAcceleration>
	   prev_acceleration = acceleration;
 800176c:	4b46      	ldr	r3, [pc, #280]	; (8001888 <StartMotorTask+0x1ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a46      	ldr	r2, [pc, #280]	; (800188c <StartMotorTask+0x1f0>)
 8001772:	6013      	str	r3, [r2, #0]
	  }

    // Disable interrupts and read the encoder value
    //__disable_irq();
    currentPosition = encoderValue; // Read the latest encoder value
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <StartMotorTask+0x1f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <StartMotorTask+0x1f8>)
 800177a:	6013      	str	r3, [r2, #0]
    //__enable_irq();

    input_distance = Holding_Registers_Database[4];
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <StartMotorTask+0x1cc>)
 800177e:	891b      	ldrh	r3, [r3, #8]
 8001780:	461a      	mov	r2, r3
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <StartMotorTask+0x1fc>)
 8001784:	601a      	str	r2, [r3, #0]


	// Calculate target position with floating-point division
	targetPosition = input_distance * (enc_val_in_1rev/mm_in_1rev); // in encoder value
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <StartMotorTask+0x1fc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <StartMotorTask+0x200>)
 8001794:	ed93 6a00 	vldr	s12, [r3]
 8001798:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <StartMotorTask+0x204>)
 800179a:	edd3 6a00 	vldr	s13, [r3]
 800179e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <StartMotorTask+0x208>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <StartMotorTask+0x208>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b6:	ee17 2a90 	vmov	r2, s15
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <StartMotorTask+0x1f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a39      	ldr	r2, [pc, #228]	; (80018a8 <StartMotorTask+0x20c>)
 80017c2:	6013      	str	r3, [r2, #0]

	// Calculate steps to move
	stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <StartMotorTask+0x20c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <StartMotorTask+0x1e8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <StartMotorTask+0x200>)
 80017de:	edd3 6a00 	vldr	s13, [r3]
 80017e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 2a90 	vmov	r2, s15
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <StartMotorTask+0x210>)
 80017f4:	601a      	str	r2, [r3, #0]

	if ((prev_input_distance != input_distance) || (prevstepsToMove != stepsToMove))
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <StartMotorTask+0x214>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <StartMotorTask+0x1fc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d105      	bne.n	800180e <StartMotorTask+0x172>
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <StartMotorTask+0x218>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <StartMotorTask+0x210>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d00c      	beq.n	8001828 <StartMotorTask+0x18c>
	{
	//Enable Drive
	HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2110      	movs	r1, #16
 8001812:	4829      	ldr	r0, [pc, #164]	; (80018b8 <StartMotorTask+0x21c>)
 8001814:	f000 fe14 	bl	8002440 <HAL_GPIO_WritePin>
	// Move motor
		motorMove(&motor1, stepsToMove);
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <StartMotorTask+0x210>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f88c 	bl	8006940 <motorMove>

	}



	if ((prev_input_distance == input_distance) || (prevstepsToMove == stepsToMove))
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <StartMotorTask+0x214>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <StartMotorTask+0x1fc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d005      	beq.n	8001840 <StartMotorTask+0x1a4>
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <StartMotorTask+0x218>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <StartMotorTask+0x210>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d104      	bne.n	800184a <StartMotorTask+0x1ae>
	{
		//Disable Drive
		HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2110      	movs	r1, #16
 8001844:	481c      	ldr	r0, [pc, #112]	; (80018b8 <StartMotorTask+0x21c>)
 8001846:	f000 fdfb 	bl	8002440 <HAL_GPIO_WritePin>
	}


	prev_input_distance = input_distance;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <StartMotorTask+0x1fc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <StartMotorTask+0x214>)
 8001850:	6013      	str	r3, [r2, #0]
	prevstepsToMove = stepsToMove;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <StartMotorTask+0x210>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <StartMotorTask+0x218>)
 8001858:	6013      	str	r3, [r2, #0]

	osDelay(5);
 800185a:	2005      	movs	r0, #5
 800185c:	f003 fd55 	bl	800530a <osDelay>
	  velocity = Holding_Registers_Database[0];
 8001860:	e72b      	b.n	80016ba <StartMotorTask+0x1e>
 8001862:	bf00      	nop
 8001864:	0800b6d0 	.word	0x0800b6d0
 8001868:	20000014 	.word	0x20000014
 800186c:	20000550 	.word	0x20000550
 8001870:	2000055c 	.word	0x2000055c
 8001874:	44520000 	.word	0x44520000
 8001878:	42300000 	.word	0x42300000
 800187c:	20000554 	.word	0x20000554
 8001880:	20000558 	.word	0x20000558
 8001884:	20000568 	.word	0x20000568
 8001888:	20000560 	.word	0x20000560
 800188c:	20000564 	.word	0x20000564
 8001890:	20000544 	.word	0x20000544
 8001894:	20000570 	.word	0x20000570
 8001898:	2000056c 	.word	0x2000056c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000574 	.word	0x20000574
 80018a8:	20000578 	.word	0x20000578
 80018ac:	2000057c 	.word	0x2000057c
 80018b0:	20000548 	.word	0x20000548
 80018b4:	2000054c 	.word	0x2000054c
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ce:	f000 fa63 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018de:	b672      	cpsid	i
}
 80018e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x54>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_MspInit+0x54>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_MspInit+0x54>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_MspInit+0x54>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	f06f 0001 	mvn.w	r0, #1
 800192a:	f000 fb31 	bl	8001f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_TIM_Base_MspInit+0x3c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10d      	bne.n	800196a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_TIM_Base_MspInit+0x40>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x40>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_TIM_Base_MspInit+0x40>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40010000 	.word	0x40010000
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_UART_MspInit+0x94>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d134      	bne.n	8001a0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_UART_MspInit+0x98>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019ec:	2307      	movs	r3, #7
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_UART_MspInit+0x9c>)
 80019f8:	f000 fb86 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2105      	movs	r1, #5
 8001a00:	2025      	movs	r0, #37	; 0x25
 8001a02:	f000 fac5 	bl	8001f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a06:	2025      	movs	r0, #37	; 0x25
 8001a08:	f000 fade 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_InitTick+0xe8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a33      	ldr	r2, [pc, #204]	; (8001b08 <HAL_InitTick+0xe8>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_InitTick+0xe8>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a4c:	f107 0210 	add.w	r2, r7, #16
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 f9bc 	bl	8002dd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a66:	f001 f98d 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8001a6a:	6378      	str	r0, [r7, #52]	; 0x34
 8001a6c:	e004      	b.n	8001a78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a6e:	f001 f989 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8001a72:	4603      	mov	r3, r0
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_InitTick+0xec>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	3b01      	subs	r3, #1
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_InitTick+0xf0>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_InitTick+0xf0>)
 8001a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a94:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_InitTick+0xf0>)
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_InitTick+0xf0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_InitTick+0xf0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_InitTick+0xf0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <HAL_InitTick+0xf0>)
 8001ab0:	f001 f9c2 	bl	8002e38 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001aba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11b      	bne.n	8001afa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <HAL_InitTick+0xf0>)
 8001ac4:	f001 fa62 	bl	8002f8c <HAL_TIM_Base_Start_IT>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d111      	bne.n	8001afa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad6:	201c      	movs	r0, #28
 8001ad8:	f000 fa76 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d808      	bhi.n	8001af4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	201c      	movs	r0, #28
 8001ae8:	f000 fa52 	bl	8001f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_InitTick+0xf4>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e002      	b.n	8001afa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001afa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3738      	adds	r7, #56	; 0x38
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	431bde83 	.word	0x431bde83
 8001b10:	20000618 	.word	0x20000618
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 fc93 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f000 fc8c 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM2_IRQHandler+0x10>)
 8001b66:	f001 fa73 	bl	8003050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000618 	.word	0x20000618

08001b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART1_IRQHandler+0x10>)
 8001b7a:	f001 ff41 	bl	8003a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200005cc 	.word	0x200005cc

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f005 f84b 	bl	8006c3c <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:

int _isatty(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f004 ffcc 	bl	8006c3c <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20020000 	.word	0x20020000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20000660 	.word	0x20000660
 8001cd8:	200045e0 	.word	0x200045e0

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d2a:	f7ff ffd7 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f004 ff8b 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7ff fa47 	bl	80011c4 <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001d44:	0800bbe4 	.word	0x0800bbe4
  ldr r2, =_sbss
 8001d48:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001d4c:	200045e0 	.word	0x200045e0

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f8fc 	bl	8001f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f7ff fe4c 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdac 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000010 	.word	0x20000010
 8001dbc:	20000664 	.word	0x20000664

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000664 	.word	0x20000664

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000010 	.word	0x20000010

08001e20 <__NVIC_SetPriorityGrouping>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff4c 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa2:	f7ff ff61 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f7ff ffb1 	bl	8001f14 <NVIC_EncodePriority>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff80 	bl	8001ec0 <__NVIC_SetPriority>
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff54 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ff2:	f7ff fee5 	bl	8001dc0 <HAL_GetTick>
 8001ff6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d008      	beq.n	8002016 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e052      	b.n	80020bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0216 	bic.w	r2, r2, #22
 8002024:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002034:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <HAL_DMA_Abort+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0208 	bic.w	r2, r2, #8
 8002054:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002066:	e013      	b.n	8002090 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002068:	f7ff feaa 	bl	8001dc0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b05      	cmp	r3, #5
 8002074:	d90c      	bls.n	8002090 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e015      	b.n	80020bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e4      	bne.n	8002068 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	223f      	movs	r2, #63	; 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00c      	b.n	80020fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2205      	movs	r2, #5
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e159      	b.n	80023d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8148 	bne.w	80023d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d005      	beq.n	800215a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	2b02      	cmp	r3, #2
 8002158:	d130      	bne.n	80021bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 0201 	and.w	r2, r3, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d017      	beq.n	80021f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a2 	beq.w	80023d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022aa:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x2ec>)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a49      	ldr	r2, [pc, #292]	; (80023f8 <HAL_GPIO_Init+0x2f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x202>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a48      	ldr	r2, [pc, #288]	; (80023fc <HAL_GPIO_Init+0x2f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x1fe>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_GPIO_Init+0x2f8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x1fa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a46      	ldr	r2, [pc, #280]	; (8002404 <HAL_GPIO_Init+0x2fc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x1f6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a45      	ldr	r2, [pc, #276]	; (8002408 <HAL_GPIO_Init+0x300>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x1f2>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x204>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x204>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x204>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x204>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x204>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x2ec>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_GPIO_Init+0x304>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_GPIO_Init+0x304>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_GPIO_Init+0x304>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_GPIO_Init+0x304>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_GPIO_Init+0x304>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a2:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_GPIO_Init+0x304>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_GPIO_Init+0x304>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_GPIO_Init+0x304>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f aea2 	bls.w	8002124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fe50 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e267      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d075      	beq.n	80025ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b7e      	ldr	r3, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05b      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d157      	bne.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e242      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x74>
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fc30 	bl	8001dc0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff fc2c 	bl	8001dc0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e207      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xc0>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fc1c 	bl	8001dc0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fc18 	bl	8001dc0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1f3      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c7      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff fbd1 	bl	8001dc0 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff fbcd 	bl	8001dc0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a8      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4925      	ldr	r1, [pc, #148]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff fbb0 	bl	8001dc0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff fbac 	bl	8001dc0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e187      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff fb90 	bl	8001dc0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7ff fb8c 	bl	8001dc0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e167      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x200>
 80026c2:	e01b      	b.n	80026fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fb79 	bl	8001dc0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00e      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff fb75 	bl	8001dc0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d907      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e150      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8097 	beq.w	8002838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a73      	ldr	r2, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7ff fb35 	bl	8001dc0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7ff fb31 	bl	8001dc0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e10c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x2ea>
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x30c>
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5e      	ldr	r2, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff faf6 	bl	8001dc0 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7ff faf2 	bl	8001dc0 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0cb      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ee      	beq.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff fae0 	bl	8001dc0 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7ff fadc 	bl	8001dc0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b5      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ee      	bne.n	8002804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a1 	beq.w	8002984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d05c      	beq.n	8002908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d141      	bne.n	80028da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fab0 	bl	8001dc0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff faac 	bl	8001dc0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e087      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7ff fa85 	bl	8001dc0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7ff fa81 	bl	8001dc0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e05c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x416>
 80028d8:	e054      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff fa6e 	bl	8001dc0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff fa6a 	bl	8001dc0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e045      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e038      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d028      	beq.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d121      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d11a      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	3b01      	subs	r3, #1
 800296a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7ff f99c 	bl	8001dc0 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff f998 	bl	8001dc0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe ff70 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	0800b710 	.word	0x0800b710
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b094      	sub	sp, #80	; 0x50
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	2300      	movs	r3, #0
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f200 80e1 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b92:	e0db      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b98:	e0db      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b9e:	e0d8      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	6139      	str	r1, [r7, #16]
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c04:	4659      	mov	r1, fp
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4651      	mov	r1, sl
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4651      	mov	r1, sl
 8002c14:	ebb2 0801 	subs.w	r8, r2, r1
 8002c18:	4659      	mov	r1, fp
 8002c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb18 0303 	adds.w	r3, r8, r3
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	462b      	mov	r3, r5
 8002c40:	eb49 0303 	adc.w	r3, r9, r3
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c52:	4629      	mov	r1, r5
 8002c54:	024b      	lsls	r3, r1, #9
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	024a      	lsls	r2, r1, #9
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	2200      	movs	r2, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c70:	f7fe f812 	bl	8000c98 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e058      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	2200      	movs	r2, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	0159      	lsls	r1, r3, #5
 8002ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002caa:	0150      	lsls	r0, r2, #5
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00eb      	lsls	r3, r5, #3
 8002ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce6:	00e2      	lsls	r2, r4, #3
 8002ce8:	4614      	mov	r4, r2
 8002cea:	461d      	mov	r5, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	eb45 0303 	adc.w	r3, r5, r3
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	61fa      	str	r2, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	f7fd ffb8 	bl	8000c98 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3750      	adds	r7, #80	; 0x50
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	0800b720 	.word	0x0800b720

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db0:	f7ff ffdc 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0b5b      	lsrs	r3, r3, #13
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	0800b720 	.word	0x0800b720

08002dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	220f      	movs	r2, #15
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_GetClockConfig+0x60>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0207 	and.w	r2, r3, #7
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40023c00 	.word	0x40023c00

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fd6c 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fae2 	bl	8003440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e03c      	b.n	8002f6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_TIM_Base_Start+0xa0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d018      	beq.n	8002f34 <HAL_TIM_Base_Start+0x5c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d013      	beq.n	8002f34 <HAL_TIM_Base_Start+0x5c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_TIM_Base_Start+0xa4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_Base_Start+0x5c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_TIM_Base_Start+0xa8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d009      	beq.n	8002f34 <HAL_TIM_Base_Start+0x5c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_TIM_Base_Start+0xac>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_Base_Start+0x5c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_TIM_Base_Start+0xb0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	e007      	b.n	8002f68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40014000 	.word	0x40014000

08002f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e044      	b.n	800302e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_TIM_Base_Start_IT+0xb0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0202 	mvn.w	r2, #2
 800307c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9b5 	bl	8003402 <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9a7 	bl	80033ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9b8 	bl	8003416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0204 	mvn.w	r2, #4
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f98b 	bl	8003402 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f97d 	bl	80033ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f98e 	bl	8003416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b08      	cmp	r3, #8
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0208 	mvn.w	r2, #8
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2204      	movs	r2, #4
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f961 	bl	8003402 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f953 	bl	80033ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f964 	bl	8003416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0210 	mvn.w	r2, #16
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2208      	movs	r2, #8
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f937 	bl	8003402 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f929 	bl	80033ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f93a 	bl	8003416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0201 	mvn.w	r2, #1
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fb74 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fab2 	bl	8003764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8ff 	bl	800342a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0220 	mvn.w	r2, #32
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa7c 	bl	8003750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIM_ConfigClockSource+0x1c>
 8003278:	2302      	movs	r3, #2
 800327a:	e0b4      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x186>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800329a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b4:	d03e      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0xd4>
 80032b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ba:	f200 8087 	bhi.w	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	f000 8086 	beq.w	80033d2 <HAL_TIM_ConfigClockSource+0x172>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	d87f      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b70      	cmp	r3, #112	; 0x70
 80032ce:	d01a      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0xa6>
 80032d0:	2b70      	cmp	r3, #112	; 0x70
 80032d2:	d87b      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b60      	cmp	r3, #96	; 0x60
 80032d6:	d050      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x11a>
 80032d8:	2b60      	cmp	r3, #96	; 0x60
 80032da:	d877      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b50      	cmp	r3, #80	; 0x50
 80032de:	d03c      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xfa>
 80032e0:	2b50      	cmp	r3, #80	; 0x50
 80032e2:	d873      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d058      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x13a>
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d86f      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b30      	cmp	r3, #48	; 0x30
 80032ee:	d064      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x15a>
 80032f0:	2b30      	cmp	r3, #48	; 0x30
 80032f2:	d86b      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d060      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x15a>
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d867      	bhi.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d05c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b10      	cmp	r3, #16
 8003302:	d05a      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	e062      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f000 f98d 	bl	8003634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	609a      	str	r2, [r3, #8]
      break;
 8003332:	e04f      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f000 f976 	bl	8003634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003356:	609a      	str	r2, [r3, #8]
      break;
 8003358:	e03c      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f000 f8ea 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2150      	movs	r1, #80	; 0x50
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f943 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003378:	e02c      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 f909 	bl	800359e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2160      	movs	r1, #96	; 0x60
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f933 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003398:	e01c      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 f8ca 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2140      	movs	r1, #64	; 0x40
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f923 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80033b8:	e00c      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f000 f91a 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80033ca:	e003      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      break;
 80033d0:	e000      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a34      	ldr	r2, [pc, #208]	; (8003524 <TIM_Base_SetConfig+0xe4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00f      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d00b      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a31      	ldr	r2, [pc, #196]	; (8003528 <TIM_Base_SetConfig+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a30      	ldr	r2, [pc, #192]	; (800352c <TIM_Base_SetConfig+0xec>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0x38>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <TIM_Base_SetConfig+0xf0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d108      	bne.n	800348a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <TIM_Base_SetConfig+0xe4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01b      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d017      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <TIM_Base_SetConfig+0xe8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <TIM_Base_SetConfig+0xec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <TIM_Base_SetConfig+0xf0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <TIM_Base_SetConfig+0xf4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <TIM_Base_SetConfig+0xf8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_Base_SetConfig+0xfc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <TIM_Base_SetConfig+0xe4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800

08003540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 030a 	bic.w	r3, r3, #10
 800357c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0210 	bic.w	r2, r3, #16
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e050      	b.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d013      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00e      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10c      	bne.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00
 800374c:	40014000 	.word	0x40014000

08003750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e03f      	b.n	800380a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe f8ee 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fe11 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	; 0x28
 8003816:	af02      	add	r7, sp, #8
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d17c      	bne.n	800392c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_Transmit+0x2c>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e075      	b.n	800392e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UART_Transmit+0x3e>
 800384c:	2302      	movs	r3, #2
 800384e:	e06e      	b.n	800392e <HAL_UART_Transmit+0x11c>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fe faab 	bl	8001dc0 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d108      	bne.n	8003894 <HAL_UART_Transmit+0x82>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e003      	b.n	800389c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038a4:	e02a      	b.n	80038fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb51 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e036      	b.n	800392e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	3302      	adds	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	e007      	b.n	80038ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1cf      	bne.n	80038a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2140      	movs	r1, #64	; 0x40
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fb21 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e006      	b.n	800392e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08c      	sub	sp, #48	; 0x30
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b20      	cmp	r3, #32
 800394e:	d152      	bne.n	80039f6 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e04b      	b.n	80039f8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800396a:	2302      	movs	r3, #2
 800396c:	e044      	b.n	80039f8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	461a      	mov	r2, r3
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fb56 	bl	8004034 <UART_Start_Receive_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800398e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12c      	bne.n	80039f0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	2b01      	cmp	r3, #1
 800399c:	d125      	bne.n	80039ea <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	617b      	str	r3, [r7, #20]
   return(result);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d4:	627a      	str	r2, [r7, #36]	; 0x24
 80039d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80039e8:	e002      	b.n	80039f0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80039f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039f4:	e000      	b.n	80039f8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0ba      	sub	sp, #232	; 0xe8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_UART_IRQHandler+0x66>
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fc05 	bl	800426e <UART_Receive_IT>
      return;
 8003a64:	e256      	b.n	8003f14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80de 	beq.w	8003c2c <HAL_UART_IRQHandler+0x22c>
 8003a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80d1 	beq.w	8003c2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_UART_IRQHandler+0xae>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xd2>
 8003aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_UART_IRQHandler+0xf6>
 8003ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0204 	orr.w	r2, r3, #4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d011      	beq.n	8003b26 <HAL_UART_IRQHandler+0x126>
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0208 	orr.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 81ed 	beq.w	8003f0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_UART_IRQHandler+0x14e>
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fb90 	bl	800426e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_UART_IRQHandler+0x17a>
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d04f      	beq.n	8003c1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa98 	bl	80040b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d141      	bne.n	8003c12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1d9      	bne.n	8003b8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d013      	beq.n	8003c0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	4a7d      	ldr	r2, [pc, #500]	; (8003ddc <HAL_UART_IRQHandler+0x3dc>)
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fa68 	bl	80020c4 <HAL_DMA_Abort_IT>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c04:	4610      	mov	r0, r2
 8003c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e00e      	b.n	8003c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f99a 	bl	8003f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	e00a      	b.n	8003c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f996 	bl	8003f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	e006      	b.n	8003c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f992 	bl	8003f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c26:	e170      	b.n	8003f0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	bf00      	nop
    return;
 8003c2a:	e16e      	b.n	8003f0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 814a 	bne.w	8003eca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8143 	beq.w	8003eca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 813c 	beq.w	8003eca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	f040 80b4 	bne.w	8003de0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8140 	beq.w	8003f0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c96:	429a      	cmp	r2, r3
 8003c98:	f080 8139 	bcs.w	8003f0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	f000 8088 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1d9      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e1      	bne.n	8003cfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e3      	bne.n	8003d3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003da4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003daa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e3      	bne.n	8003d80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe f911 	bl	8001fe4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 f94e 	bl	8005074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd8:	e099      	b.n	8003f0e <HAL_UART_IRQHandler+0x50e>
 8003dda:	bf00      	nop
 8003ddc:	08004177 	.word	0x08004177
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 808b 	beq.w	8003f12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8086 	beq.w	8003f12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e62:	633a      	str	r2, [r7, #48]	; 0x30
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e3      	bne.n	8003e3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0310 	bic.w	r3, r3, #16
 8003e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e3      	bne.n	8003e84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f001 f8d6 	bl	8005074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec8:	e023      	b.n	8003f12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_UART_IRQHandler+0x4ea>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f95b 	bl	800419e <UART_Transmit_IT>
    return;
 8003ee8:	e014      	b.n	8003f14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <HAL_UART_IRQHandler+0x514>
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f99b 	bl	800423e <UART_EndTransmit_IT>
    return;
 8003f08:	e004      	b.n	8003f14 <HAL_UART_IRQHandler+0x514>
    return;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <HAL_UART_IRQHandler+0x514>
      return;
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <HAL_UART_IRQHandler+0x514>
      return;
 8003f12:	bf00      	nop
  }
}
 8003f14:	37e8      	adds	r7, #232	; 0xe8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop

08003f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b090      	sub	sp, #64	; 0x40
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	e050      	b.n	800400c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d04c      	beq.n	800400c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f78:	f7fd ff22 	bl	8001dc0 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d241      	bcs.n	800400c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa8:	637a      	str	r2, [r7, #52]	; 0x34
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	613b      	str	r3, [r7, #16]
   return(result);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fdc:	623a      	str	r2, [r7, #32]
 8003fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	69f9      	ldr	r1, [r7, #28]
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e00f      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	429a      	cmp	r2, r3
 8004028:	d09f      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3740      	adds	r7, #64	; 0x40
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2222      	movs	r2, #34	; 0x22
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0220 	orr.w	r2, r2, #32
 80040a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b095      	sub	sp, #84	; 0x54
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d8:	643a      	str	r2, [r7, #64]	; 0x40
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	d119      	bne.n	800415c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	60bb      	str	r3, [r7, #8]
   return(result);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004148:	61ba      	str	r2, [r7, #24]
 800414a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	613b      	str	r3, [r7, #16]
   return(result);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
}
 800416a:	bf00      	nop
 800416c:	3754      	adds	r7, #84	; 0x54
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fed7 	bl	8003f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b21      	cmp	r3, #33	; 0x21
 80041b0:	d13e      	bne.n	8004230 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	d114      	bne.n	80041e6 <UART_Transmit_IT+0x48>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d110      	bne.n	80041e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	1c9a      	adds	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]
 80041e4:	e008      	b.n	80041f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6211      	str	r1, [r2, #32]
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29b      	uxth	r3, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4619      	mov	r1, r3
 8004206:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10f      	bne.n	800422c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004254:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fe5c 	bl	8003f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08c      	sub	sp, #48	; 0x30
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b22      	cmp	r3, #34	; 0x22
 8004280:	f040 80ab 	bne.w	80043da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d117      	bne.n	80042be <UART_Receive_IT+0x50>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d113      	bne.n	80042be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1c9a      	adds	r2, r3, #2
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
 80042bc:	e026      	b.n	800430c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d007      	beq.n	80042e2 <UART_Receive_IT+0x74>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <UART_Receive_IT+0x82>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e008      	b.n	8004302 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4619      	mov	r1, r3
 800431a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800431c:	2b00      	cmp	r3, #0
 800431e:	d15a      	bne.n	80043d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0220 	bic.w	r2, r2, #32
 800432e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2b01      	cmp	r3, #1
 800435e:	d135      	bne.n	80043cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	613b      	str	r3, [r7, #16]
   return(result);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	623a      	str	r2, [r7, #32]
 8004388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	69f9      	ldr	r1, [r7, #28]
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	61bb      	str	r3, [r7, #24]
   return(result);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d10a      	bne.n	80043be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fe55 	bl	8005074 <HAL_UARTEx_RxEventCallback>
 80043ca:	e002      	b.n	80043d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fdaf 	bl	8003f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e002      	b.n	80043dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3730      	adds	r7, #48	; 0x30
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b0c0      	sub	sp, #256	; 0x100
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	ea40 0301 	orr.w	r3, r0, r1
 800440c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	431a      	orrs	r2, r3
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800443c:	f021 010c 	bic.w	r1, r1, #12
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800444a:	430b      	orrs	r3, r1
 800444c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	ea40 0301 	orr.w	r3, r0, r1
 800446a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <UART_SetConfig+0x2cc>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d005      	beq.n	8004484 <UART_SetConfig+0xa0>
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b8d      	ldr	r3, [pc, #564]	; (80046b4 <UART_SetConfig+0x2d0>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d104      	bne.n	800448e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe fc92 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800448c:	e003      	b.n	8004496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448e:	f7fe fc79 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	f040 810c 	bne.w	80046bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044b6:	4622      	mov	r2, r4
 80044b8:	462b      	mov	r3, r5
 80044ba:	1891      	adds	r1, r2, r2
 80044bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044be:	415b      	adcs	r3, r3
 80044c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044c6:	4621      	mov	r1, r4
 80044c8:	eb12 0801 	adds.w	r8, r2, r1
 80044cc:	4629      	mov	r1, r5
 80044ce:	eb43 0901 	adc.w	r9, r3, r1
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e6:	4690      	mov	r8, r2
 80044e8:	4699      	mov	r9, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	eb18 0303 	adds.w	r3, r8, r3
 80044f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044f4:	462b      	mov	r3, r5
 80044f6:	eb49 0303 	adc.w	r3, r9, r3
 80044fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800450a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800450e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004512:	460b      	mov	r3, r1
 8004514:	18db      	adds	r3, r3, r3
 8004516:	653b      	str	r3, [r7, #80]	; 0x50
 8004518:	4613      	mov	r3, r2
 800451a:	eb42 0303 	adc.w	r3, r2, r3
 800451e:	657b      	str	r3, [r7, #84]	; 0x54
 8004520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004528:	f7fc fbb6 	bl	8000c98 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011c      	lsls	r4, r3, #4
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	64b9      	str	r1, [r7, #72]	; 0x48
 8004554:	415b      	adcs	r3, r3
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800455c:	4641      	mov	r1, r8
 800455e:	eb12 0a01 	adds.w	sl, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0b01 	adc.w	fp, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800457c:	4692      	mov	sl, r2
 800457e:	469b      	mov	fp, r3
 8004580:	4643      	mov	r3, r8
 8004582:	eb1a 0303 	adds.w	r3, sl, r3
 8004586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800458a:	464b      	mov	r3, r9
 800458c:	eb4b 0303 	adc.w	r3, fp, r3
 8004590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045a8:	460b      	mov	r3, r1
 80045aa:	18db      	adds	r3, r3, r3
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	4613      	mov	r3, r2
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	647b      	str	r3, [r7, #68]	; 0x44
 80045b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045be:	f7fc fb6b 	bl	8000c98 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <UART_SetConfig+0x2d4>)
 80045ca:	fba3 2301 	umull	r2, r3, r3, r1
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2264      	movs	r2, #100	; 0x64
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	1acb      	subs	r3, r1, r3
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 2302 	umull	r2, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ec:	441c      	add	r4, r3
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	63b9      	str	r1, [r7, #56]	; 0x38
 8004608:	415b      	adcs	r3, r3
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800460c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	6339      	str	r1, [r7, #48]	; 0x30
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800465c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800467a:	f7fc fb0d 	bl	8000c98 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4422      	add	r2, r4
 80046aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046ac:	e105      	b.n	80048ba <UART_SetConfig+0x4d6>
 80046ae:	bf00      	nop
 80046b0:	40011000 	.word	0x40011000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	1891      	adds	r1, r2, r2
 80046d4:	6239      	str	r1, [r7, #32]
 80046d6:	415b      	adcs	r3, r3
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046de:	4641      	mov	r1, r8
 80046e0:	1854      	adds	r4, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0501 	adc.w	r5, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	00eb      	lsls	r3, r5, #3
 80046f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f6:	00e2      	lsls	r2, r4, #3
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	18e3      	adds	r3, r4, r3
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004704:	464b      	mov	r3, r9
 8004706:	eb45 0303 	adc.w	r3, r5, r3
 800470a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800471a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800472a:	4629      	mov	r1, r5
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004734:	4621      	mov	r1, r4
 8004736:	008a      	lsls	r2, r1, #2
 8004738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800473c:	f7fc faac 	bl	8000c98 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <UART_SetConfig+0x4e4>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	011c      	lsls	r4, r3, #4
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800475c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	61b9      	str	r1, [r7, #24]
 8004768:	415b      	adcs	r3, r3
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6139      	str	r1, [r7, #16]
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047c8:	4649      	mov	r1, r9
 80047ca:	008b      	lsls	r3, r1, #2
 80047cc:	4641      	mov	r1, r8
 80047ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d2:	4641      	mov	r1, r8
 80047d4:	008a      	lsls	r2, r1, #2
 80047d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047da:	f7fc fa5d 	bl	8000c98 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <UART_SetConfig+0x4e4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <UART_SetConfig+0x4e4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004802:	441c      	add	r4, r3
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	673b      	str	r3, [r7, #112]	; 0x70
 800480c:	677a      	str	r2, [r7, #116]	; 0x74
 800480e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004812:	4642      	mov	r2, r8
 8004814:	464b      	mov	r3, r9
 8004816:	1891      	adds	r1, r2, r2
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	415b      	adcs	r3, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004822:	4641      	mov	r1, r8
 8004824:	1851      	adds	r1, r2, r1
 8004826:	6039      	str	r1, [r7, #0]
 8004828:	4649      	mov	r1, r9
 800482a:	414b      	adcs	r3, r1
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800483a:	4659      	mov	r1, fp
 800483c:	00cb      	lsls	r3, r1, #3
 800483e:	4651      	mov	r1, sl
 8004840:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004844:	4651      	mov	r1, sl
 8004846:	00ca      	lsls	r2, r1, #3
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	4603      	mov	r3, r0
 800484e:	4642      	mov	r2, r8
 8004850:	189b      	adds	r3, r3, r2
 8004852:	66bb      	str	r3, [r7, #104]	; 0x68
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	663b      	str	r3, [r7, #96]	; 0x60
 8004868:	667a      	str	r2, [r7, #100]	; 0x64
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004876:	4649      	mov	r1, r9
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4641      	mov	r1, r8
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4641      	mov	r1, r8
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004888:	f7fc fa06 	bl	8000c98 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <UART_SetConfig+0x4e4>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2164      	movs	r1, #100	; 0x64
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <UART_SetConfig+0x4e4>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4422      	add	r2, r4
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	bf00      	nop
 80048bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 80048d6:	2201      	movs	r2, #1
 80048d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048dc:	4816      	ldr	r0, [pc, #88]	; (8004938 <sendData+0x6c>)
 80048de:	f7fd fdaf 	bl	8002440 <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f829 	bl	8004940 <crc16>
 80048ee:	4603      	mov	r3, r0
 80048f0:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	89fa      	ldrh	r2, [r7, #14]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	b299      	uxth	r1, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	b2ca      	uxtb	r2, r1
 800490e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	3302      	adds	r3, #2
 8004916:	b29a      	uxth	r2, r3
 8004918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4807      	ldr	r0, [pc, #28]	; (800493c <sendData+0x70>)
 8004920:	f7fe ff77 	bl	8003812 <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8004924:	2200      	movs	r2, #0
 8004926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800492a:	4803      	ldr	r0, [pc, #12]	; (8004938 <sendData+0x6c>)
 800492c:	f7fd fd88 	bl	8002440 <HAL_GPIO_WritePin>

}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40020000 	.word	0x40020000
 800493c:	200005cc 	.word	0x200005cc

08004940 <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800494c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004950:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8004952:	2300      	movs	r3, #0
 8004954:	81bb      	strh	r3, [r7, #12]
 8004956:	e022      	b.n	800499e <crc16+0x5e>
        crc ^= data[i];
 8004958:	89bb      	ldrh	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b29a      	uxth	r2, r3
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	4053      	eors	r3, r2
 8004966:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004968:	2300      	movs	r3, #0
 800496a:	72fb      	strb	r3, [r7, #11]
 800496c:	e011      	b.n	8004992 <crc16+0x52>
            if (crc & 0x0001) {
 800496e:	89fb      	ldrh	r3, [r7, #14]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8004978:	89fb      	ldrh	r3, [r7, #14]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <crc16+0x74>)
 8004980:	4053      	eors	r3, r2
 8004982:	81fb      	strh	r3, [r7, #14]
 8004984:	e002      	b.n	800498c <crc16+0x4c>
            } else {
                crc >>= 1;
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	3301      	adds	r3, #1
 8004990:	72fb      	strb	r3, [r7, #11]
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	2b07      	cmp	r3, #7
 8004996:	d9ea      	bls.n	800496e <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8004998:	89bb      	ldrh	r3, [r7, #12]
 800499a:	3301      	adds	r3, #1
 800499c:	81bb      	strh	r3, [r7, #12]
 800499e:	89ba      	ldrh	r2, [r7, #12]
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d3d8      	bcc.n	8004958 <crc16+0x18>
            }
        }
    }
    return crc;
 80049a6:	89fb      	ldrh	r3, [r7, #14]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	ffffa001 	.word	0xffffa001

080049b8 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <modbusException+0x38>)
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <modbusException+0x3c>)
 80049c8:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <modbusException+0x38>)
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <modbusException+0x3c>)
 80049d6:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 80049d8:	4a06      	ldr	r2, [pc, #24]	; (80049f4 <modbusException+0x3c>)
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 80049de:	2103      	movs	r1, #3
 80049e0:	4804      	ldr	r0, [pc, #16]	; (80049f4 <modbusException+0x3c>)
 80049e2:	f7ff ff73 	bl	80048cc <sendData>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000668 	.word	0x20000668
 80049f4:	20000768 	.word	0x20000768

080049f8 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	460a      	mov	r2, r1
 8004a02:	80fb      	strh	r3, [r7, #6]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 8004a08:	88bb      	ldrh	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <readHoldingRegs+0x1c>
 8004a0e:	88bb      	ldrh	r3, [r7, #4]
 8004a10:	2b32      	cmp	r3, #50	; 0x32
 8004a12:	d904      	bls.n	8004a1e <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004a14:	2003      	movs	r0, #3
 8004a16:	f7ff ffcf 	bl	80049b8 <modbusException>
        return 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e04a      	b.n	8004ab4 <readHoldingRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	88bb      	ldrh	r3, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
 8004a2c:	2b32      	cmp	r3, #50	; 0x32
 8004a2e:	d904      	bls.n	8004a3a <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004a30:	2002      	movs	r0, #2
 8004a32:	f7ff ffc1 	bl	80049b8 <modbusException>
        return 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e03c      	b.n	8004ab4 <readHoldingRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8004a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a3e:	2100      	movs	r1, #0
 8004a40:	481e      	ldr	r0, [pc, #120]	; (8004abc <readHoldingRegs+0xc4>)
 8004a42:	f002 f933 	bl	8006cac <memset>
    TxData[0] = SLAVE_ID;
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <readHoldingRegs+0xc4>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <readHoldingRegs+0xc8>)
 8004a4e:	785a      	ldrb	r2, [r3, #1]
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <readHoldingRegs+0xc4>)
 8004a52:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8004a54:	88bb      	ldrh	r3, [r7, #4]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	4b17      	ldr	r3, [pc, #92]	; (8004abc <readHoldingRegs+0xc4>)
 8004a5e:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004a60:	2303      	movs	r3, #3
 8004a62:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e01b      	b.n	8004aa2 <readHoldingRegs+0xaa>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <readHoldingRegs+0xcc>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b299      	uxth	r1, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	617a      	str	r2, [r7, #20]
 8004a7c:	b2c9      	uxtb	r1, r1
 8004a7e:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <readHoldingRegs+0xc4>)
 8004a80:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <readHoldingRegs+0xcc>)
 8004a86:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	617a      	str	r2, [r7, #20]
 8004a90:	b2c9      	uxtb	r1, r1
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <readHoldingRegs+0xc4>)
 8004a94:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	88bb      	ldrh	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	dbdf      	blt.n	8004a6a <readHoldingRegs+0x72>
    }

    sendData(TxData, indx);
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	4803      	ldr	r0, [pc, #12]	; (8004abc <readHoldingRegs+0xc4>)
 8004aae:	f7ff ff0d 	bl	80048cc <sendData>
    return 1;
 8004ab2:	2301      	movs	r3, #1
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000768 	.word	0x20000768
 8004ac0:	20000668 	.word	0x20000668
 8004ac4:	20000014 	.word	0x20000014

08004ac8 <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	80fb      	strh	r3, [r7, #6]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 8004ad8:	88bb      	ldrh	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <readInputRegs+0x1c>
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	2b32      	cmp	r3, #50	; 0x32
 8004ae2:	d904      	bls.n	8004aee <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f7ff ff67 	bl	80049b8 <modbusException>
        return 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e04a      	b.n	8004b84 <readInputRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	88bb      	ldrh	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 8004afa:	89fb      	ldrh	r3, [r7, #14]
 8004afc:	2b32      	cmp	r3, #50	; 0x32
 8004afe:	d904      	bls.n	8004b0a <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004b00:	2002      	movs	r0, #2
 8004b02:	f7ff ff59 	bl	80049b8 <modbusException>
        return 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e03c      	b.n	8004b84 <readInputRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8004b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b0e:	2100      	movs	r1, #0
 8004b10:	481e      	ldr	r0, [pc, #120]	; (8004b8c <readInputRegs+0xc4>)
 8004b12:	f002 f8cb 	bl	8006cac <memset>
    TxData[0] = SLAVE_ID;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <readInputRegs+0xc4>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <readInputRegs+0xc8>)
 8004b1e:	785a      	ldrb	r2, [r3, #1]
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <readInputRegs+0xc4>)
 8004b22:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8004b24:	88bb      	ldrh	r3, [r7, #4]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <readInputRegs+0xc4>)
 8004b2e:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004b30:	2303      	movs	r3, #3
 8004b32:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	e01b      	b.n	8004b72 <readInputRegs+0xaa>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <readInputRegs+0xcc>)
 8004b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	b299      	uxth	r1, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	617a      	str	r2, [r7, #20]
 8004b4c:	b2c9      	uxtb	r1, r1
 8004b4e:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <readInputRegs+0xc4>)
 8004b50:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <readInputRegs+0xcc>)
 8004b56:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	617a      	str	r2, [r7, #20]
 8004b60:	b2c9      	uxtb	r1, r1
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <readInputRegs+0xc4>)
 8004b64:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	88bb      	ldrh	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	dbdf      	blt.n	8004b3a <readInputRegs+0x72>
    }

    sendData(TxData, indx);
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	4803      	ldr	r0, [pc, #12]	; (8004b8c <readInputRegs+0xc4>)
 8004b7e:	f7ff fea5 	bl	80048cc <sendData>
    return 1;
 8004b82:	2301      	movs	r3, #1
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000768 	.word	0x20000768
 8004b90:	20000668 	.word	0x20000668
 8004b94:	20000078 	.word	0x20000078

08004b98 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	80fb      	strh	r3, [r7, #6]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 8004ba8:	88bb      	ldrh	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <readCoils+0x1e>
 8004bae:	88bb      	ldrh	r3, [r7, #4]
 8004bb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004bb4:	d904      	bls.n	8004bc0 <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	f7ff fefe 	bl	80049b8 <modbusException>
        return 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e080      	b.n	8004cc2 <readCoils+0x12a>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	88bb      	ldrh	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 8004bcc:	897b      	ldrh	r3, [r7, #10]
 8004bce:	2bc7      	cmp	r3, #199	; 0xc7
 8004bd0:	d904      	bls.n	8004bdc <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	f7ff fef0 	bl	80049b8 <modbusException>
        return 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e072      	b.n	8004cc2 <readCoils+0x12a>
    }

    memset(TxData, '\0', 256);
 8004bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be0:	2100      	movs	r1, #0
 8004be2:	483a      	ldr	r0, [pc, #232]	; (8004ccc <readCoils+0x134>)
 8004be4:	f002 f862 	bl	8006cac <memset>
    TxData[0] = SLAVE_ID;
 8004be8:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <readCoils+0x134>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004bee:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <readCoils+0x138>)
 8004bf0:	785a      	ldrb	r2, [r3, #1]
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <readCoils+0x134>)
 8004bf4:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 8004bf6:	88bb      	ldrh	r3, [r7, #4]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	88ba      	ldrh	r2, [r7, #4]
 8004c00:	f002 0207 	and.w	r2, r2, #7
 8004c04:	b292      	uxth	r2, r2
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2201      	movne	r2, #1
 8004c0c:	2200      	moveq	r2, #0
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	4413      	add	r3, r2
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <readCoils+0x134>)
 8004c16:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e033      	b.n	8004c9e <readCoils+0x106>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8004c36:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <readCoils+0x134>)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b25a      	sxtb	r2, r3
 8004c40:	4924      	ldr	r1, [pc, #144]	; (8004cd4 <readCoils+0x13c>)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	440b      	add	r3, r1
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	8afb      	ldrh	r3, [r7, #22]
 8004c4c:	fa41 f303 	asr.w	r3, r1, r3
 8004c50:	f003 0101 	and.w	r1, r3, #1
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	b2d9      	uxtb	r1, r3
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <readCoils+0x134>)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	460a      	mov	r2, r1
 8004c6a:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
        bitPosition++;
 8004c72:	8afb      	ldrh	r3, [r7, #22]
 8004c74:	3301      	adds	r3, #1
 8004c76:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b07      	cmp	r3, #7
 8004c7c:	dd04      	ble.n	8004c88 <readCoils+0xf0>
            indxPosition = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
            indx++;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3301      	adds	r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8004c88:	8afb      	ldrh	r3, [r7, #22]
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	d904      	bls.n	8004c98 <readCoils+0x100>
            bitPosition = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	82fb      	strh	r3, [r7, #22]
            startByte++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	88bb      	ldrh	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	dbc7      	blt.n	8004c36 <readCoils+0x9e>
        }
    }

    if (numCoils % 8 != 0) indx++;
 8004ca6:	88bb      	ldrh	r3, [r7, #4]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <readCoils+0x120>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 8004cb8:	69f9      	ldr	r1, [r7, #28]
 8004cba:	4804      	ldr	r0, [pc, #16]	; (8004ccc <readCoils+0x134>)
 8004cbc:	f7ff fe06 	bl	80048cc <sendData>
    return 1;
 8004cc0:	2301      	movs	r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000768 	.word	0x20000768
 8004cd0:	20000668 	.word	0x20000668
 8004cd4:	200000dc 	.word	0x200000dc

08004cd8 <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	80fb      	strh	r3, [r7, #6]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b31      	cmp	r3, #49	; 0x31
 8004cec:	d904      	bls.n	8004cf8 <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f7ff fe62 	bl	80049b8 <modbusException>
        return 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e020      	b.n	8004d3a <writeSingleHoldingReg+0x62>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	4912      	ldr	r1, [pc, #72]	; (8004d44 <writeSingleHoldingReg+0x6c>)
 8004cfc:	88ba      	ldrh	r2, [r7, #4]
 8004cfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004d08:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <writeSingleHoldingReg+0x74>)
 8004d0a:	785a      	ldrb	r2, [r3, #1]
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d0e:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <writeSingleHoldingReg+0x74>)
 8004d12:	789a      	ldrb	r2, [r3, #2]
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d16:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <writeSingleHoldingReg+0x74>)
 8004d1a:	78da      	ldrb	r2, [r3, #3]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d1e:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <writeSingleHoldingReg+0x74>)
 8004d22:	791a      	ldrb	r2, [r3, #4]
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d26:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <writeSingleHoldingReg+0x74>)
 8004d2a:	795a      	ldrb	r2, [r3, #5]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d2e:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004d30:	2106      	movs	r1, #6
 8004d32:	4805      	ldr	r0, [pc, #20]	; (8004d48 <writeSingleHoldingReg+0x70>)
 8004d34:	f7ff fdca 	bl	80048cc <sendData>
    return 1;
 8004d38:	2301      	movs	r3, #1
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000014 	.word	0x20000014
 8004d48:	20000768 	.word	0x20000768
 8004d4c:	20000668 	.word	0x20000668

08004d50 <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	603a      	str	r2, [r7, #0]
 8004d5a:	80fb      	strh	r3, [r7, #6]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 8004d60:	88bb      	ldrh	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <writeHoldingRegs+0x1c>
 8004d66:	88bb      	ldrh	r3, [r7, #4]
 8004d68:	2b7b      	cmp	r3, #123	; 0x7b
 8004d6a:	d904      	bls.n	8004d76 <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f7ff fe23 	bl	80049b8 <modbusException>
        return 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e03f      	b.n	8004df6 <writeHoldingRegs+0xa6>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	88bb      	ldrh	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 8004d82:	897b      	ldrh	r3, [r7, #10]
 8004d84:	2b31      	cmp	r3, #49	; 0x31
 8004d86:	d904      	bls.n	8004d92 <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f7ff fe15 	bl	80049b8 <modbusException>
        return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e031      	b.n	8004df6 <writeHoldingRegs+0xa6>
    }

    for (int i = 0; i < numRegs; i++) {
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e00e      	b.n	8004db6 <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	441a      	add	r2, r3
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	80f9      	strh	r1, [r7, #6]
 8004da6:	4619      	mov	r1, r3
 8004da8:	8812      	ldrh	r2, [r2, #0]
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <writeHoldingRegs+0xb0>)
 8004dac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	88bb      	ldrh	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	dbec      	blt.n	8004d98 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <writeHoldingRegs+0xb8>)
 8004dc6:	785a      	ldrb	r2, [r3, #1]
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004dca:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <writeHoldingRegs+0xb8>)
 8004dce:	789a      	ldrb	r2, [r3, #2]
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004dd2:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <writeHoldingRegs+0xb8>)
 8004dd6:	78da      	ldrb	r2, [r3, #3]
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004dda:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <writeHoldingRegs+0xb8>)
 8004dde:	791a      	ldrb	r2, [r3, #4]
 8004de0:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004de2:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004de4:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <writeHoldingRegs+0xb8>)
 8004de6:	795a      	ldrb	r2, [r3, #5]
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004dea:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004dec:	2106      	movs	r1, #6
 8004dee:	4805      	ldr	r0, [pc, #20]	; (8004e04 <writeHoldingRegs+0xb4>)
 8004df0:	f7ff fd6c 	bl	80048cc <sendData>
    return 1;
 8004df4:	2301      	movs	r3, #1
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000014 	.word	0x20000014
 8004e04:	20000768 	.word	0x20000768
 8004e08:	20000668 	.word	0x20000668

08004e0c <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	460a      	mov	r2, r1
 8004e16:	80fb      	strh	r3, [r7, #6]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	2bc7      	cmp	r3, #199	; 0xc7
 8004e20:	d904      	bls.n	8004e2c <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004e22:	2002      	movs	r0, #2
 8004e24:	f7ff fdc8 	bl	80049b8 <modbusException>
        return 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e05c      	b.n	8004ee6 <writeSingleCoil+0xda>
    }

    int bytePos = writeAddr / 8;
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	08db      	lsrs	r3, r3, #3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8004e3c:	797b      	ldrb	r3, [r7, #5]
 8004e3e:	2bff      	cmp	r3, #255	; 0xff
 8004e40:	d116      	bne.n	8004e70 <writeSingleCoil+0x64>
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <writeSingleCoil+0xe4>)
 8004e44:	795b      	ldrb	r3, [r3, #5]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d112      	bne.n	8004e70 <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <writeSingleCoil+0xe8>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b25a      	sxtb	r2, r3
 8004e54:	2101      	movs	r1, #1
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	b2d9      	uxtb	r1, r3
 8004e64:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <writeSingleCoil+0xe8>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e020      	b.n	8004eb2 <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 8004e70:	797b      	ldrb	r3, [r7, #5]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d118      	bne.n	8004ea8 <writeSingleCoil+0x9c>
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <writeSingleCoil+0xe4>)
 8004e78:	795b      	ldrb	r3, [r3, #5]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d114      	bne.n	8004ea8 <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <writeSingleCoil+0xe8>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b25a      	sxtb	r2, r3
 8004e88:	2101      	movs	r1, #1
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	b25b      	sxtb	r3, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	4013      	ands	r3, r2
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	b2d9      	uxtb	r1, r3
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <writeSingleCoil+0xe8>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e004      	b.n	8004eb2 <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	f7ff fd85 	bl	80049b8 <modbusException>
        return 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e019      	b.n	8004ee6 <writeSingleCoil+0xda>
    }

    TxData[0] = SLAVE_ID;
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <writeSingleCoil+0xec>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <writeSingleCoil+0xe4>)
 8004eba:	785a      	ldrb	r2, [r3, #1]
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ebe:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <writeSingleCoil+0xe4>)
 8004ec2:	789a      	ldrb	r2, [r3, #2]
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ec6:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <writeSingleCoil+0xe4>)
 8004eca:	78da      	ldrb	r2, [r3, #3]
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ece:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8004ed0:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ed2:	797b      	ldrb	r3, [r7, #5]
 8004ed4:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8004edc:	2106      	movs	r1, #6
 8004ede:	4806      	ldr	r0, [pc, #24]	; (8004ef8 <writeSingleCoil+0xec>)
 8004ee0:	f7ff fcf4 	bl	80048cc <sendData>
    return 1;
 8004ee4:	2301      	movs	r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000668 	.word	0x20000668
 8004ef4:	200000dc 	.word	0x200000dc
 8004ef8:	20000768 	.word	0x20000768

08004efc <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	603a      	str	r2, [r7, #0]
 8004f06:	80fb      	strh	r3, [r7, #6]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 8004f0c:	88bb      	ldrh	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <writeMultiCoils+0x1e>
 8004f12:	88bb      	ldrh	r3, [r7, #4]
 8004f14:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004f18:	d904      	bls.n	8004f24 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8004f1a:	2003      	movs	r0, #3
 8004f1c:	f7ff fd4c 	bl	80049b8 <modbusException>
        return 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e09c      	b.n	800505e <writeMultiCoils+0x162>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	88bb      	ldrh	r3, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 8004f30:	8a7b      	ldrh	r3, [r7, #18]
 8004f32:	2bc7      	cmp	r3, #199	; 0xc7
 8004f34:	d904      	bls.n	8004f40 <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004f36:	2002      	movs	r0, #2
 8004f38:	f7ff fd3e 	bl	80049b8 <modbusException>
        return 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e08e      	b.n	800505e <writeMultiCoils+0x162>
    }

    int startByte = startAddr / 8;
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t bitPosition = startAddr % 8;
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	847b      	strh	r3, [r7, #34]	; 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 8004f50:	88bb      	ldrh	r3, [r7, #4]
 8004f52:	08db      	lsrs	r3, r3, #3
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	88bb      	ldrh	r3, [r7, #4]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e052      	b.n	800501e <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e047      	b.n	800500e <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 8004f7e:	88bb      	ldrh	r3, [r7, #4]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	da47      	bge.n	8005016 <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	fa42 f303 	asr.w	r3, r2, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d012      	beq.n	8004fc4 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 8004f9e:	4a32      	ldr	r2, [pc, #200]	; (8005068 <writeMultiCoils+0x16c>)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	4413      	add	r3, r2
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b25a      	sxtb	r2, r3
 8004fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004faa:	2101      	movs	r1, #1
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	b2d9      	uxtb	r1, r3
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <writeMultiCoils+0x16c>)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	4413      	add	r3, r2
 8004fbe:	460a      	mov	r2, r1
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e013      	b.n	8004fec <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 8004fc4:	4a28      	ldr	r2, [pc, #160]	; (8005068 <writeMultiCoils+0x16c>)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b25a      	sxtb	r2, r3
 8004fce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	4013      	ands	r3, r2
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	b2d9      	uxtb	r1, r3
 8004fe2:	4a21      	ldr	r2, [pc, #132]	; (8005068 <writeMultiCoils+0x16c>)
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	4413      	add	r3, r2
 8004fe8:	460a      	mov	r2, r1
 8004fea:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 8004fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fee:	3301      	adds	r3, #1
 8004ff0:	847b      	strh	r3, [r7, #34]	; 0x22
            if (bitPosition > 7) {
 8004ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	d904      	bls.n	8005002 <writeMultiCoils+0x106>
                bitPosition = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	847b      	strh	r3, [r7, #34]	; 0x22
                startByte++;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	3301      	adds	r3, #1
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
            }
            indx++;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b07      	cmp	r3, #7
 8005012:	ddb4      	ble.n	8004f7e <writeMultiCoils+0x82>
 8005014:	e000      	b.n	8005018 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 8005016:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	3301      	adds	r3, #1
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	dba8      	blt.n	8004f78 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8005026:	4b11      	ldr	r3, [pc, #68]	; (800506c <writeMultiCoils+0x170>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <writeMultiCoils+0x174>)
 800502e:	785a      	ldrb	r2, [r3, #1]
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <writeMultiCoils+0x170>)
 8005032:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <writeMultiCoils+0x174>)
 8005036:	789a      	ldrb	r2, [r3, #2]
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <writeMultiCoils+0x170>)
 800503a:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <writeMultiCoils+0x174>)
 800503e:	78da      	ldrb	r2, [r3, #3]
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <writeMultiCoils+0x170>)
 8005042:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <writeMultiCoils+0x174>)
 8005046:	791a      	ldrb	r2, [r3, #4]
 8005048:	4b08      	ldr	r3, [pc, #32]	; (800506c <writeMultiCoils+0x170>)
 800504a:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <writeMultiCoils+0x174>)
 800504e:	795a      	ldrb	r2, [r3, #5]
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <writeMultiCoils+0x170>)
 8005052:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005054:	2106      	movs	r1, #6
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <writeMultiCoils+0x170>)
 8005058:	f7ff fc38 	bl	80048cc <sendData>
    return 1;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200000dc 	.word	0x200000dc
 800506c:	20000768 	.word	0x20000768
 8005070:	20000668 	.word	0x20000668

08005074 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a66      	ldr	r2, [pc, #408]	; (8005220 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8005086:	4293      	cmp	r3, r2
 8005088:	f040 80c7 	bne.w	800521a <HAL_UARTEx_RxEventCallback+0x1a6>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_UARTEx_RxEventCallback+0x26>
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d906      	bls.n	80050a8 <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 800509a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800509e:	4961      	ldr	r1, [pc, #388]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fe fc48 	bl	8003936 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 80050a6:	e0b8      	b.n	800521a <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ae:	485e      	ldr	r0, [pc, #376]	; (8005228 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80050b0:	f7fd f9c6 	bl	8002440 <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != SLAVE_ID) {
 80050b4:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d006      	beq.n	80050ca <HAL_UARTEx_RxEventCallback+0x56>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 80050bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c0:	4958      	ldr	r1, [pc, #352]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fe fc37 	bl	8003936 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 80050c8:	e0a7      	b.n	800521a <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 80050ca:	887b      	ldrh	r3, [r7, #2]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a55      	ldr	r2, [pc, #340]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	887b      	ldrh	r3, [r7, #2]
 80050d8:	3b02      	subs	r3, #2
 80050da:	4952      	ldr	r1, [pc, #328]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050dc:	5ccb      	ldrb	r3, [r1, r3]
 80050de:	b21b      	sxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b21b      	sxth	r3, r3
 80050e4:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	3b02      	subs	r3, #2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	484d      	ldr	r0, [pc, #308]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050f0:	f7ff fc26 	bl	8004940 <crc16>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d006      	beq.n	800510c <HAL_UARTEx_RxEventCallback+0x98>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 80050fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005102:	4948      	ldr	r1, [pc, #288]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fe fc16 	bl	8003936 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 800510a:	e086      	b.n	800521a <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800510e:	789b      	ldrb	r3, [r3, #2]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b21a      	sxth	r2, r3
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	b21b      	sxth	r3, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	b21b      	sxth	r3, r3
 800511e:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 8005120:	4b40      	ldr	r3, [pc, #256]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	b21a      	sxth	r2, r3
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800512a:	795b      	ldrb	r3, [r3, #5]
 800512c:	b21b      	sxth	r3, r3
 800512e:	4313      	orrs	r3, r2
 8005130:	b21b      	sxth	r3, r3
 8005132:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 8005134:	2201      	movs	r2, #1
 8005136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800513a:	483b      	ldr	r0, [pc, #236]	; (8005228 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800513c:	f7fd f980 	bl	8002440 <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 8005140:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	3b01      	subs	r3, #1
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d85d      	bhi.n	8005206 <HAL_UARTEx_RxEventCallback+0x192>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_UARTEx_RxEventCallback+0xdc>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005191 	.word	0x08005191
 8005154:	08005207 	.word	0x08005207
 8005158:	0800519f 	.word	0x0800519f
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051bb 	.word	0x080051bb
 8005164:	080051cb 	.word	0x080051cb
 8005168:	08005207 	.word	0x08005207
 800516c:	08005207 	.word	0x08005207
 8005170:	08005207 	.word	0x08005207
 8005174:	08005207 	.word	0x08005207
 8005178:	08005207 	.word	0x08005207
 800517c:	08005207 	.word	0x08005207
 8005180:	08005207 	.word	0x08005207
 8005184:	08005207 	.word	0x08005207
 8005188:	080051eb 	.word	0x080051eb
 800518c:	080051f9 	.word	0x080051f9
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8005190:	897a      	ldrh	r2, [r7, #10]
 8005192:	89bb      	ldrh	r3, [r7, #12]
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fcfe 	bl	8004b98 <readCoils>
                break;
 800519c:	e037      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 800519e:	897a      	ldrh	r2, [r7, #10]
 80051a0:	89bb      	ldrh	r3, [r7, #12]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fc27 	bl	80049f8 <readHoldingRegs>
                break;
 80051aa:	e030      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 80051ac:	897a      	ldrh	r2, [r7, #10]
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fc88 	bl	8004ac8 <readInputRegs>
                break;
 80051b8:	e029      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80051bc:	791a      	ldrb	r2, [r3, #4]
 80051be:	89bb      	ldrh	r3, [r7, #12]
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fe22 	bl	8004e0c <writeSingleCoil>
                break;
 80051c8:	e021      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 80051ca:	4b16      	ldr	r3, [pc, #88]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80051d4:	795b      	ldrb	r3, [r3, #5]
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	b21b      	sxth	r3, r3
 80051dc:	b29a      	uxth	r2, r3
 80051de:	89bb      	ldrh	r3, [r7, #12]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fd78 	bl	8004cd8 <writeSingleHoldingReg>
                break;
 80051e8:	e011      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 80051ea:	8979      	ldrh	r1, [r7, #10]
 80051ec:	89bb      	ldrh	r3, [r7, #12]
 80051ee:	4a0f      	ldr	r2, [pc, #60]	; (800522c <HAL_UARTEx_RxEventCallback+0x1b8>)
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fe83 	bl	8004efc <writeMultiCoils>
                break;
 80051f6:	e00a      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 80051f8:	8979      	ldrh	r1, [r7, #10]
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fda6 	bl	8004d50 <writeHoldingRegs>
                break;
 8005204:	e003      	b.n	800520e <HAL_UARTEx_RxEventCallback+0x19a>
            default:
                modbusException(ILLEGAL_FUNCTION);
 8005206:	2001      	movs	r0, #1
 8005208:	f7ff fbd6 	bl	80049b8 <modbusException>
                break;
 800520c:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 800520e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005212:	4904      	ldr	r1, [pc, #16]	; (8005224 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fe fb8e 	bl	8003936 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40011000 	.word	0x40011000
 8005224:	20000668 	.word	0x20000668
 8005228:	40020000 	.word	0x40020000
 800522c:	2000066f 	.word	0x2000066f
 8005230:	2000066e 	.word	0x2000066e

08005234 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005246:	2b84      	cmp	r3, #132	; 0x84
 8005248:	d005      	beq.n	8005256 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800524a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	3303      	adds	r3, #3
 8005254:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005268:	f000 fade 	bl	8005828 <vTaskStartScheduler>
  
  return osOK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	bd80      	pop	{r7, pc}

08005272 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005274:	b089      	sub	sp, #36	; 0x24
 8005276:	af04      	add	r7, sp, #16
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <osThreadCreate+0x54>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01c      	beq.n	80052c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685c      	ldr	r4, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681d      	ldr	r5, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691e      	ldr	r6, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff ffc8 	bl	8005234 <makeFreeRtosPriority>
 80052a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ae:	9202      	str	r2, [sp, #8]
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	9100      	str	r1, [sp, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4632      	mov	r2, r6
 80052b8:	4629      	mov	r1, r5
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f8ed 	bl	800549a <xTaskCreateStatic>
 80052c0:	4603      	mov	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e01c      	b.n	8005300 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685c      	ldr	r4, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d2:	b29e      	uxth	r6, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ffaa 	bl	8005234 <makeFreeRtosPriority>
 80052e0:	4602      	mov	r2, r0
 80052e2:	f107 030c 	add.w	r3, r7, #12
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	9200      	str	r2, [sp, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	4632      	mov	r2, r6
 80052ee:	4629      	mov	r1, r5
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 f92f 	bl	8005554 <xTaskCreate>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e000      	b.n	8005302 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800530a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <osDelay+0x16>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	e000      	b.n	8005322 <osDelay+0x18>
 8005320:	2301      	movs	r3, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fa4c 	bl	80057c0 <vTaskDelay>
  
  return osOK;
 8005328:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f103 0208 	add.w	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 0208 	add.w	r2, r3, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f103 0208 	add.w	r2, r3, #8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	601a      	str	r2, [r3, #0]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d103      	bne.n	80053f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e00c      	b.n	800540e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3308      	adds	r3, #8
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e002      	b.n	8005402 <vListInsert+0x2e>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d2f6      	bcs.n	80053fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6892      	ldr	r2, [r2, #8]
 800545c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6852      	ldr	r2, [r2, #4]
 8005466:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d103      	bne.n	800547a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08e      	sub	sp, #56	; 0x38
 800549e:	af04      	add	r7, sp, #16
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61fb      	str	r3, [r7, #28]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054e0:	2354      	movs	r3, #84	; 0x54
 80054e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b54      	cmp	r3, #84	; 0x54
 80054e8:	d00a      	beq.n	8005500 <xTaskCreateStatic+0x66>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	61bb      	str	r3, [r7, #24]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005500:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <xTaskCreateStatic+0xac>
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01b      	beq.n	8005546 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005516:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005520:	2300      	movs	r3, #0
 8005522:	9303      	str	r3, [sp, #12]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	f107 0314 	add.w	r3, r7, #20
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f850 	bl	80055de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800553e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005540:	f000 f8d4 	bl	80056ec <prvAddNewTaskToReadyList>
 8005544:	e001      	b.n	800554a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800554a:	697b      	ldr	r3, [r7, #20]
	}
 800554c:	4618      	mov	r0, r3
 800554e:	3728      	adds	r7, #40	; 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	; 0x30
 8005558:	af04      	add	r7, sp, #16
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fec5 	bl	80062f8 <pvPortMalloc>
 800556e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005576:	2054      	movs	r0, #84	; 0x54
 8005578:	f000 febe 	bl	80062f8 <pvPortMalloc>
 800557c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
 800558a:	e005      	b.n	8005598 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800558c:	6978      	ldr	r0, [r7, #20]
 800558e:	f000 ff7f 	bl	8006490 <vPortFree>
 8005592:	e001      	b.n	8005598 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	2300      	movs	r3, #0
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	9302      	str	r3, [sp, #8]
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f80e 	bl	80055de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c2:	69f8      	ldr	r0, [r7, #28]
 80055c4:	f000 f892 	bl	80056ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e002      	b.n	80055d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055d4:	69bb      	ldr	r3, [r7, #24]
	}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	3b01      	subs	r3, #1
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	617b      	str	r3, [r7, #20]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01f      	beq.n	800566c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e012      	b.n	8005658 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	7819      	ldrb	r1, [r3, #0]
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	3334      	adds	r3, #52	; 0x34
 8005642:	460a      	mov	r2, r1
 8005644:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d9e9      	bls.n	8005632 <prvInitialiseNewTask+0x54>
 800565e:	e000      	b.n	8005662 <prvInitialiseNewTask+0x84>
			{
				break;
 8005660:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800566a:	e003      	b.n	8005674 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	2b06      	cmp	r3, #6
 8005678:	d901      	bls.n	800567e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800567a:	2306      	movs	r3, #6
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2200      	movs	r2, #0
 800568e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fe6c 	bl	8005372 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	3318      	adds	r3, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fe67 	bl	8005372 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	f1c3 0207 	rsb	r2, r3, #7
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	69b8      	ldr	r0, [r7, #24]
 80056ce:	f000 fc05 	bl	8005edc <pxPortInitialiseStack>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e4:	bf00      	nop
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056f4:	f000 fd1e 	bl	8006134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 8005700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800570a:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <prvAddNewTaskToReadyList+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d110      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005718:	f000 fabc 	bl	8005c94 <prvInitialiseTaskLists>
 800571c:	e00d      	b.n	800573a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800571e:	4b23      	ldr	r3, [pc, #140]	; (80057ac <prvAddNewTaskToReadyList+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	429a      	cmp	r2, r3
 8005732:	d802      	bhi.n	800573a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 8005742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2201      	movs	r2, #1
 800574a:	409a      	lsls	r2, r3
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4313      	orrs	r3, r2
 8005752:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvAddNewTaskToReadyList+0xcc>)
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7ff fe0d 	bl	800538c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005772:	f000 fd0f 	bl	8006194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <prvAddNewTaskToReadyList+0xc0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvAddNewTaskToReadyList+0xbc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	429a      	cmp	r2, r3
 800578a:	d207      	bcs.n	800579c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <prvAddNewTaskToReadyList+0xd0>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000968 	.word	0x20000968
 80057a8:	20000868 	.word	0x20000868
 80057ac:	20000974 	.word	0x20000974
 80057b0:	20000984 	.word	0x20000984
 80057b4:	20000970 	.word	0x20000970
 80057b8:	2000086c 	.word	0x2000086c
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d017      	beq.n	8005802 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <vTaskDelay+0x60>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vTaskDelay+0x30>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60bb      	str	r3, [r7, #8]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057f0:	f000 f87a 	bl	80058e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057f4:	2100      	movs	r1, #0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb0a 	bl	8005e10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057fc:	f000 f882 	bl	8005904 <xTaskResumeAll>
 8005800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <vTaskDelay+0x64>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000990 	.word	0x20000990
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005836:	463a      	mov	r2, r7
 8005838:	1d39      	adds	r1, r7, #4
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f7fb fbe2 	bl	8001008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	9202      	str	r2, [sp, #8]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	2300      	movs	r3, #0
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	460a      	mov	r2, r1
 8005856:	491e      	ldr	r1, [pc, #120]	; (80058d0 <vTaskStartScheduler+0xa8>)
 8005858:	481e      	ldr	r0, [pc, #120]	; (80058d4 <vTaskStartScheduler+0xac>)
 800585a:	f7ff fe1e 	bl	800549a <xTaskCreateStatic>
 800585e:	4603      	mov	r3, r0
 8005860:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <vTaskStartScheduler+0xb0>)
 8005862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005864:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <vTaskStartScheduler+0xb0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e001      	b.n	8005876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d116      	bne.n	80058aa <vTaskStartScheduler+0x82>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	613b      	str	r3, [r7, #16]
}
 800588e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <vTaskStartScheduler+0xb4>)
 8005892:	f04f 32ff 	mov.w	r2, #4294967295
 8005896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005898:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <vTaskStartScheduler+0xb8>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <vTaskStartScheduler+0xbc>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058a4:	f000 fba4 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058a8:	e00e      	b.n	80058c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d10a      	bne.n	80058c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <vTaskStartScheduler+0x9e>
}
 80058c8:	bf00      	nop
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	0800b6e0 	.word	0x0800b6e0
 80058d4:	08005c65 	.word	0x08005c65
 80058d8:	2000098c 	.word	0x2000098c
 80058dc:	20000988 	.word	0x20000988
 80058e0:	20000974 	.word	0x20000974
 80058e4:	2000096c 	.word	0x2000096c

080058e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <vTaskSuspendAll+0x18>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a03      	ldr	r2, [pc, #12]	; (8005900 <vTaskSuspendAll+0x18>)
 80058f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000990 	.word	0x20000990

08005904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <xTaskResumeAll+0x114>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <xTaskResumeAll+0x2c>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	603b      	str	r3, [r7, #0]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005930:	f000 fc00 	bl	8006134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005934:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <xTaskResumeAll+0x114>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3b01      	subs	r3, #1
 800593a:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <xTaskResumeAll+0x114>)
 800593c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <xTaskResumeAll+0x114>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d161      	bne.n	8005a0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005946:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <xTaskResumeAll+0x118>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d05d      	beq.n	8005a0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800594e:	e02e      	b.n	80059ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <xTaskResumeAll+0x11c>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3318      	adds	r3, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fd72 	bl	8005446 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fd6d 	bl	8005446 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	2201      	movs	r2, #1
 8005972:	409a      	lsls	r2, r3
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <xTaskResumeAll+0x120>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4313      	orrs	r3, r2
 800597a:	4a2a      	ldr	r2, [pc, #168]	; (8005a24 <xTaskResumeAll+0x120>)
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <xTaskResumeAll+0x124>)
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3304      	adds	r3, #4
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f7ff fcf9 	bl	800538c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <xTaskResumeAll+0x128>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <xTaskResumeAll+0x12c>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059ae:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <xTaskResumeAll+0x11c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1cc      	bne.n	8005950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059bc:	f000 fa08 	bl	8005dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xTaskResumeAll+0x130>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059cc:	f000 f836 	bl	8005a3c <xTaskIncrementTick>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059d6:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <xTaskResumeAll+0x12c>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f1      	bne.n	80059cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80059e8:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <xTaskResumeAll+0x130>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xTaskResumeAll+0x12c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <xTaskResumeAll+0x134>)
 80059fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a0a:	f000 fbc3 	bl	8006194 <vPortExitCritical>

	return xAlreadyYielded;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000990 	.word	0x20000990
 8005a1c:	20000968 	.word	0x20000968
 8005a20:	20000928 	.word	0x20000928
 8005a24:	20000970 	.word	0x20000970
 8005a28:	2000086c 	.word	0x2000086c
 8005a2c:	20000868 	.word	0x20000868
 8005a30:	2000097c 	.word	0x2000097c
 8005a34:	20000978 	.word	0x20000978
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a46:	4b4e      	ldr	r3, [pc, #312]	; (8005b80 <xTaskIncrementTick+0x144>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f040 808e 	bne.w	8005b6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a50:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <xTaskIncrementTick+0x148>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a58:	4a4a      	ldr	r2, [pc, #296]	; (8005b84 <xTaskIncrementTick+0x148>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d120      	bne.n	8005aa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a64:	4b48      	ldr	r3, [pc, #288]	; (8005b88 <xTaskIncrementTick+0x14c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	603b      	str	r3, [r7, #0]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xTaskIncrementTick+0x46>
 8005a84:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <xTaskIncrementTick+0x14c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	4b40      	ldr	r3, [pc, #256]	; (8005b8c <xTaskIncrementTick+0x150>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a3e      	ldr	r2, [pc, #248]	; (8005b88 <xTaskIncrementTick+0x14c>)
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4a3e      	ldr	r2, [pc, #248]	; (8005b8c <xTaskIncrementTick+0x150>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <xTaskIncrementTick+0x154>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <xTaskIncrementTick+0x154>)
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	f000 f995 	bl	8005dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <xTaskIncrementTick+0x158>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d348      	bcc.n	8005b42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab0:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <xTaskIncrementTick+0x14c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <xTaskIncrementTick+0x158>)
 8005abc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac0:	601a      	str	r2, [r3, #0]
					break;
 8005ac2:	e03e      	b.n	8005b42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac4:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <xTaskIncrementTick+0x14c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d203      	bcs.n	8005ae4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <xTaskIncrementTick+0x158>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ae2:	e02e      	b.n	8005b42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fcac 	bl	8005446 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3318      	adds	r3, #24
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fca3 	bl	8005446 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <xTaskIncrementTick+0x15c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <xTaskIncrementTick+0x15c>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <xTaskIncrementTick+0x160>)
 8005b20:	441a      	add	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff fc2f 	bl	800538c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <xTaskIncrementTick+0x164>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3b9      	bcc.n	8005ab0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b40:	e7b6      	b.n	8005ab0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <xTaskIncrementTick+0x164>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4914      	ldr	r1, [pc, #80]	; (8005b9c <xTaskIncrementTick+0x160>)
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d901      	bls.n	8005b5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <xTaskIncrementTick+0x168>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e004      	b.n	8005b76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <xTaskIncrementTick+0x16c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <xTaskIncrementTick+0x16c>)
 8005b74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b76:	697b      	ldr	r3, [r7, #20]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000990 	.word	0x20000990
 8005b84:	2000096c 	.word	0x2000096c
 8005b88:	20000920 	.word	0x20000920
 8005b8c:	20000924 	.word	0x20000924
 8005b90:	20000980 	.word	0x20000980
 8005b94:	20000988 	.word	0x20000988
 8005b98:	20000970 	.word	0x20000970
 8005b9c:	2000086c 	.word	0x2000086c
 8005ba0:	20000868 	.word	0x20000868
 8005ba4:	2000097c 	.word	0x2000097c
 8005ba8:	20000978 	.word	0x20000978

08005bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bb2:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <vTaskSwitchContext+0xa4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bba:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <vTaskSwitchContext+0xa8>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bc0:	e03f      	b.n	8005c42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <vTaskSwitchContext+0xa8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <vTaskSwitchContext+0xac>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	f1c3 031f 	rsb	r3, r3, #31
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	491f      	ldr	r1, [pc, #124]	; (8005c5c <vTaskSwitchContext+0xb0>)
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskSwitchContext+0x5a>
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <vTaskSwitchContext+0xb0>)
 8005c14:	4413      	add	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d104      	bne.n	8005c38 <vTaskSwitchContext+0x8c>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <vTaskSwitchContext+0xb4>)
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000990 	.word	0x20000990
 8005c54:	2000097c 	.word	0x2000097c
 8005c58:	20000970 	.word	0x20000970
 8005c5c:	2000086c 	.word	0x2000086c
 8005c60:	20000868 	.word	0x20000868

08005c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c6c:	f000 f852 	bl	8005d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <prvIdleTask+0x28>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d9f9      	bls.n	8005c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <prvIdleTask+0x2c>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c88:	e7f0      	b.n	8005c6c <prvIdleTask+0x8>
 8005c8a:	bf00      	nop
 8005c8c:	2000086c 	.word	0x2000086c
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e00c      	b.n	8005cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <prvInitialiseTaskLists+0x60>)
 8005cac:	4413      	add	r3, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fb3f 	bl	8005332 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b06      	cmp	r3, #6
 8005cbe:	d9ef      	bls.n	8005ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cc0:	480d      	ldr	r0, [pc, #52]	; (8005cf8 <prvInitialiseTaskLists+0x64>)
 8005cc2:	f7ff fb36 	bl	8005332 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cc6:	480d      	ldr	r0, [pc, #52]	; (8005cfc <prvInitialiseTaskLists+0x68>)
 8005cc8:	f7ff fb33 	bl	8005332 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ccc:	480c      	ldr	r0, [pc, #48]	; (8005d00 <prvInitialiseTaskLists+0x6c>)
 8005cce:	f7ff fb30 	bl	8005332 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cd2:	480c      	ldr	r0, [pc, #48]	; (8005d04 <prvInitialiseTaskLists+0x70>)
 8005cd4:	f7ff fb2d 	bl	8005332 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cd8:	480b      	ldr	r0, [pc, #44]	; (8005d08 <prvInitialiseTaskLists+0x74>)
 8005cda:	f7ff fb2a 	bl	8005332 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <prvInitialiseTaskLists+0x78>)
 8005ce0:	4a05      	ldr	r2, [pc, #20]	; (8005cf8 <prvInitialiseTaskLists+0x64>)
 8005ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <prvInitialiseTaskLists+0x7c>)
 8005ce6:	4a05      	ldr	r2, [pc, #20]	; (8005cfc <prvInitialiseTaskLists+0x68>)
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2000086c 	.word	0x2000086c
 8005cf8:	200008f8 	.word	0x200008f8
 8005cfc:	2000090c 	.word	0x2000090c
 8005d00:	20000928 	.word	0x20000928
 8005d04:	2000093c 	.word	0x2000093c
 8005d08:	20000954 	.word	0x20000954
 8005d0c:	20000920 	.word	0x20000920
 8005d10:	20000924 	.word	0x20000924

08005d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d1a:	e019      	b.n	8005d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d1c:	f000 fa0a 	bl	8006134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <prvCheckTasksWaitingTermination+0x50>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fb8a 	bl	8005446 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <prvCheckTasksWaitingTermination+0x54>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	4a0b      	ldr	r2, [pc, #44]	; (8005d68 <prvCheckTasksWaitingTermination+0x54>)
 8005d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d46:	f000 fa25 	bl	8006194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f810 	bl	8005d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e1      	bne.n	8005d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	2000093c 	.word	0x2000093c
 8005d68:	20000968 	.word	0x20000968
 8005d6c:	20000950 	.word	0x20000950

08005d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb82 	bl	8006490 <vPortFree>
				vPortFree( pxTCB );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb7f 	bl	8006490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d92:	e018      	b.n	8005dc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d103      	bne.n	8005da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb76 	bl	8006490 <vPortFree>
	}
 8005da4:	e00f      	b.n	8005dc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d00a      	beq.n	8005dc6 <prvDeleteTCB+0x56>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <prvDeleteTCB+0x54>
	}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <prvResetNextTaskUnblockTime+0x38>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <prvResetNextTaskUnblockTime+0x3c>)
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de8:	e008      	b.n	8005dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvResetNextTaskUnblockTime+0x38>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <prvResetNextTaskUnblockTime+0x3c>)
 8005dfa:	6013      	str	r3, [r2, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	20000920 	.word	0x20000920
 8005e0c:	20000988 	.word	0x20000988

08005e10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fb0d 	bl	8005446 <uxListRemove>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4013      	ands	r3, r2
 8005e46:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d10a      	bne.n	8005e68 <prvAddCurrentTaskToDelayedList+0x58>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	481a      	ldr	r0, [pc, #104]	; (8005ecc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e62:	f7ff fa93 	bl	800538c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e66:	e026      	b.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d209      	bcs.n	8005e94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7ff faa1 	bl	80053d4 <vListInsert>
}
 8005e92:	e010      	b.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f7ff fa97 	bl	80053d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d202      	bcs.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000096c 	.word	0x2000096c
 8005ec4:	20000868 	.word	0x20000868
 8005ec8:	20000970 	.word	0x20000970
 8005ecc:	20000954 	.word	0x20000954
 8005ed0:	20000924 	.word	0x20000924
 8005ed4:	20000920 	.word	0x20000920
 8005ed8:	20000988 	.word	0x20000988

08005edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b04      	subs	r3, #4
 8005eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <pxPortInitialiseStack+0x64>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b14      	subs	r3, #20
 8005f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f06f 0202 	mvn.w	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	08005f45 	.word	0x08005f45

08005f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvTaskExitError+0x54>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d00a      	beq.n	8005f6e <prvTaskExitError+0x2a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <prvTaskExitError+0x28>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60bb      	str	r3, [r7, #8]
}
 8005f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f82:	bf00      	nop
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0fc      	beq.n	8005f84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	200000f8 	.word	0x200000f8
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	; (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff6:	4b46      	ldr	r3, [pc, #280]	; (8006110 <xPortStartScheduler+0x120>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a46      	ldr	r2, [pc, #280]	; (8006114 <xPortStartScheduler+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10a      	bne.n	8006016 <xPortStartScheduler+0x26>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <xPortStartScheduler+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3f      	ldr	r2, [pc, #252]	; (8006118 <xPortStartScheduler+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10a      	bne.n	8006036 <xPortStartScheduler+0x46>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <xPortStartScheduler+0x12c>)
 8006038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <xPortStartScheduler+0x130>)
 800605c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <xPortStartScheduler+0x134>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006064:	e009      	b.n	800607a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <xPortStartScheduler+0x134>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <xPortStartScheduler+0x134>)
 800606e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d0ef      	beq.n	8006066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <xPortStartScheduler+0x134>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	d00a      	beq.n	80060a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60bb      	str	r3, [r7, #8]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <xPortStartScheduler+0x134>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <xPortStartScheduler+0x134>)
 80060b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <xPortStartScheduler+0x134>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <xPortStartScheduler+0x134>)
 80060bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <xPortStartScheduler+0x138>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <xPortStartScheduler+0x138>)
 80060cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <xPortStartScheduler+0x138>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <xPortStartScheduler+0x138>)
 80060d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060de:	f000 f8dd 	bl	800629c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <xPortStartScheduler+0x13c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060e8:	f000 f8fc 	bl	80062e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xPortStartScheduler+0x140>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <xPortStartScheduler+0x140>)
 80060f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f8:	f7ff ff66 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060fc:	f7ff fd56 	bl	8005bac <vTaskSwitchContext>
	prvTaskExitError();
 8006100:	f7ff ff20 	bl	8005f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed00 	.word	0xe000ed00
 8006114:	410fc271 	.word	0x410fc271
 8006118:	410fc270 	.word	0x410fc270
 800611c:	e000e400 	.word	0xe000e400
 8006120:	20000994 	.word	0x20000994
 8006124:	20000998 	.word	0x20000998
 8006128:	e000ed20 	.word	0xe000ed20
 800612c:	200000f8 	.word	0x200000f8
 8006130:	e000ef34 	.word	0xe000ef34

08006134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <vPortEnterCritical+0x58>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <vPortEnterCritical+0x58>)
 8006156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <vPortEnterCritical+0x58>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10f      	bne.n	8006180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <vPortEnterCritical+0x5c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <vPortEnterCritical+0x4c>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <vPortEnterCritical+0x4a>
	}
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	200000f8 	.word	0x200000f8
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <vPortExitCritical+0x50>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <vPortExitCritical+0x24>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <vPortExitCritical+0x50>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <vPortExitCritical+0x50>)
 80061c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <vPortExitCritical+0x50>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <vPortExitCritical+0x42>
 80061ca:	2300      	movs	r3, #0
 80061cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	200000f8 	.word	0x200000f8
	...

080061f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061f0:	f3ef 8009 	mrs	r0, PSP
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <pxCurrentTCBConst>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f01e 0f10 	tst.w	lr, #16
 8006200:	bf08      	it	eq
 8006202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	6010      	str	r0, [r2, #0]
 800620c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006214:	f380 8811 	msr	BASEPRI, r0
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f7ff fcc4 	bl	8005bac <vTaskSwitchContext>
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f380 8811 	msr	BASEPRI, r0
 800622c:	bc09      	pop	{r0, r3}
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006236:	f01e 0f10 	tst.w	lr, #16
 800623a:	bf08      	it	eq
 800623c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006240:	f380 8809 	msr	PSP, r0
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w

08006250 <pxCurrentTCBConst>:
 8006250:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop

08006258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
}
 8006270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006272:	f7ff fbe3 	bl	8005a3c <xTaskIncrementTick>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <SysTick_Handler+0x40>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f383 8811 	msr	BASEPRI, r3
}
 800628e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <vPortSetupTimerInterrupt+0x38>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <vPortSetupTimerInterrupt+0x3c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <vPortSetupTimerInterrupt+0x40>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <vPortSetupTimerInterrupt+0x44>)
 80062ba:	3b01      	subs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vPortSetupTimerInterrupt+0x34>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e010 	.word	0xe000e010
 80062d4:	e000e018 	.word	0xe000e018
 80062d8:	20000008 	.word	0x20000008
 80062dc:	10624dd3 	.word	0x10624dd3
 80062e0:	e000e014 	.word	0xe000e014

080062e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062f4 <vPortEnableVFP+0x10>
 80062e8:	6801      	ldr	r1, [r0, #0]
 80062ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ee:	6001      	str	r1, [r0, #0]
 80062f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed88 	.word	0xe000ed88

080062f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006304:	f7ff faf0 	bl	80058e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006308:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <pvPortMalloc+0x180>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006310:	f000 f920 	bl	8006554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <pvPortMalloc+0x184>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8093 	bne.w	8006448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01d      	beq.n	8006364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006328:	2208      	movs	r2, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	3308      	adds	r3, #8
 8006342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <pvPortMalloc+0x6c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06e      	beq.n	8006448 <pvPortMalloc+0x150>
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <pvPortMalloc+0x188>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d869      	bhi.n	8006448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006374:	4b43      	ldr	r3, [pc, #268]	; (8006484 <pvPortMalloc+0x18c>)
 8006376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006378:	4b42      	ldr	r3, [pc, #264]	; (8006484 <pvPortMalloc+0x18c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637e:	e004      	b.n	800638a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <pvPortMalloc+0xa4>
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f1      	bne.n	8006380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800639c:	4b36      	ldr	r3, [pc, #216]	; (8006478 <pvPortMalloc+0x180>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d050      	beq.n	8006448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2208      	movs	r2, #8
 80063ac:	4413      	add	r3, r2
 80063ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	2308      	movs	r3, #8
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d91f      	bls.n	8006408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <pvPortMalloc+0xf8>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	613b      	str	r3, [r7, #16]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006402:	69b8      	ldr	r0, [r7, #24]
 8006404:	f000 f908 	bl	8006618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <pvPortMalloc+0x188>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <pvPortMalloc+0x188>)
 8006414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006416:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <pvPortMalloc+0x188>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <pvPortMalloc+0x190>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d203      	bcs.n	800642a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <pvPortMalloc+0x188>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <pvPortMalloc+0x190>)
 8006428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <pvPortMalloc+0x184>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	431a      	orrs	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <pvPortMalloc+0x194>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a11      	ldr	r2, [pc, #68]	; (800648c <pvPortMalloc+0x194>)
 8006446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006448:	f7ff fa5c 	bl	8005904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <pvPortMalloc+0x174>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <pvPortMalloc+0x172>
	return pvReturn;
 800646c:	69fb      	ldr	r3, [r7, #28]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200045a4 	.word	0x200045a4
 800647c:	200045b8 	.word	0x200045b8
 8006480:	200045a8 	.word	0x200045a8
 8006484:	2000459c 	.word	0x2000459c
 8006488:	200045ac 	.word	0x200045ac
 800648c:	200045b0 	.word	0x200045b0

08006490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04d      	beq.n	800653e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064a2:	2308      	movs	r3, #8
 80064a4:	425b      	negs	r3, r3
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4413      	add	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <vPortFree+0xb8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <vPortFree+0x44>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <vPortFree+0x62>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60bb      	str	r3, [r7, #8]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <vPortFree+0xb8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11a      	bne.n	800653e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <vPortFree+0xb8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006518:	f7ff f9e6 	bl	80058e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortFree+0xbc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4413      	add	r3, r2
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <vPortFree+0xbc>)
 8006528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f874 	bl	8006618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <vPortFree+0xc0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a06      	ldr	r2, [pc, #24]	; (8006550 <vPortFree+0xc0>)
 8006538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800653a:	f7ff f9e3 	bl	8005904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200045b8 	.word	0x200045b8
 800654c:	200045a8 	.word	0x200045a8
 8006550:	200045b4 	.word	0x200045b4

08006554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800655a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800655e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <prvHeapInit+0xac>)
 8006562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3307      	adds	r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <prvHeapInit+0xac>)
 8006584:	4413      	add	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <prvHeapInit+0xb0>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <prvHeapInit+0xb0>)
 8006594:	2200      	movs	r2, #0
 8006596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065a0:	2208      	movs	r2, #8
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <prvHeapInit+0xb4>)
 80065b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <prvHeapInit+0xb4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <prvHeapInit+0xb4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <prvHeapInit+0xb4>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <prvHeapInit+0xb8>)
 80065e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <prvHeapInit+0xbc>)
 80065ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <prvHeapInit+0xc0>)
 80065ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	2000099c 	.word	0x2000099c
 8006604:	2000459c 	.word	0x2000459c
 8006608:	200045a4 	.word	0x200045a4
 800660c:	200045ac 	.word	0x200045ac
 8006610:	200045a8 	.word	0x200045a8
 8006614:	200045b8 	.word	0x200045b8

08006618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <prvInsertBlockIntoFreeList+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e002      	b.n	800662c <prvInsertBlockIntoFreeList+0x14>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d8f7      	bhi.n	8006626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d108      	bne.n	800665a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	441a      	add	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d118      	bne.n	80066a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d00d      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e008      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e003      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d002      	beq.n	80066b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000459c 	.word	0x2000459c
 80066c8:	200045a4 	.word	0x200045a4

080066cc <microDelay>:
extern float pully_dia;

// External TIM handle declared in main.c
extern TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <microDelay+0x30>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80066de:	bf00      	nop
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <microDelay+0x30>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3f9      	bcc.n	80066e0 <microDelay+0x14>
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000584 	.word	0x20000584

08006700 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 800670a:	4a04      	ldr	r2, [pc, #16]	; (800671c <setAcceleration+0x1c>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6013      	str	r3, [r2, #0]
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	200045c0 	.word	0x200045c0

08006720 <setRPM>:

void setRPM(volatile float rpm, int steps) {
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	ed87 0a01 	vstr	s0, [r7, #4]
 800672a:	6038      	str	r0, [r7, #0]
    volatile float speed = (rpm * steps) / 60.0f;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006736:	edd7 7a01 	vldr	s15, [r7, #4]
 800673a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800673e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800675c <setRPM+0x3c>
 8006742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006746:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <setRPM+0x40>)
 800674e:	6013      	str	r3, [r2, #0]

}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	42700000 	.word	0x42700000
 8006760:	200045c4 	.word	0x200045c4
 8006764:	00000000 	.word	0x00000000

08006768 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 800676c:	4b34      	ldr	r3, [pc, #208]	; (8006840 <computeNewSpeed+0xd8>)
 800676e:	ed93 7a00 	vldr	s14, [r3]
 8006772:	4b34      	ldr	r3, [pc, #208]	; (8006844 <computeNewSpeed+0xdc>)
 8006774:	edd3 7a00 	vldr	s15, [r3]
 8006778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006780:	d51a      	bpl.n	80067b8 <computeNewSpeed+0x50>
        _speed += _acceleration;
 8006782:	4b31      	ldr	r3, [pc, #196]	; (8006848 <computeNewSpeed+0xe0>)
 8006784:	ed93 7a00 	vldr	s14, [r3]
 8006788:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <computeNewSpeed+0xd8>)
 800678a:	edd3 7a00 	vldr	s15, [r3]
 800678e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006792:	4b2b      	ldr	r3, [pc, #172]	; (8006840 <computeNewSpeed+0xd8>)
 8006794:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <computeNewSpeed+0xd8>)
 800679a:	ed93 7a00 	vldr	s14, [r3]
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <computeNewSpeed+0xdc>)
 80067a0:	edd3 7a00 	vldr	s15, [r3]
 80067a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ac:	dd29      	ble.n	8006802 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <computeNewSpeed+0xdc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a23      	ldr	r2, [pc, #140]	; (8006840 <computeNewSpeed+0xd8>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e024      	b.n	8006802 <computeNewSpeed+0x9a>
        }
    }
    else if (_speed > _maxSpeed) {
 80067b8:	4b21      	ldr	r3, [pc, #132]	; (8006840 <computeNewSpeed+0xd8>)
 80067ba:	ed93 7a00 	vldr	s14, [r3]
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <computeNewSpeed+0xdc>)
 80067c0:	edd3 7a00 	vldr	s15, [r3]
 80067c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	dd19      	ble.n	8006802 <computeNewSpeed+0x9a>
        _speed -= _acceleration;
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <computeNewSpeed+0xe0>)
 80067d0:	edd3 7a00 	vldr	s15, [r3]
 80067d4:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <computeNewSpeed+0xd8>)
 80067d6:	ed93 7a00 	vldr	s14, [r3]
 80067da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <computeNewSpeed+0xd8>)
 80067e0:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < _maxSpeed) {
 80067e4:	4b16      	ldr	r3, [pc, #88]	; (8006840 <computeNewSpeed+0xd8>)
 80067e6:	ed93 7a00 	vldr	s14, [r3]
 80067ea:	4b16      	ldr	r3, [pc, #88]	; (8006844 <computeNewSpeed+0xdc>)
 80067ec:	edd3 7a00 	vldr	s15, [r3]
 80067f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f8:	d503      	bpl.n	8006802 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <computeNewSpeed+0xdc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <computeNewSpeed+0xd8>)
 8006800:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 8006802:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <computeNewSpeed+0xd8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fea6 	bl	8000558 <__aeabi_f2d>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	a109      	add	r1, pc, #36	; (adr r1, 8006838 <computeNewSpeed+0xd0>)
 8006812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006816:	f7fa f821 	bl	800085c <__aeabi_ddiv>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f7fa f9a1 	bl	8000b68 <__aeabi_d2iz>
 8006826:	4603      	mov	r3, r0
 8006828:	4a08      	ldr	r2, [pc, #32]	; (800684c <computeNewSpeed+0xe4>)
 800682a:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <computeNewSpeed+0xe4>)
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd80      	pop	{r7, pc}
 8006834:	f3af 8000 	nop.w
 8006838:	00000000 	.word	0x00000000
 800683c:	412e8480 	.word	0x412e8480
 8006840:	200045bc 	.word	0x200045bc
 8006844:	200045c4 	.word	0x200045c4
 8006848:	200045c0 	.word	0x200045c0
 800684c:	200045c8 	.word	0x200045c8

08006850 <HomeMotorMove>:

        // Optional: Implement a way to exit the loop if necessary
    }
}

void HomeMotorMove(MotorConfig* motor, int steps_to_move) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]

    // Set direction based on the steps_to_move value
    if (steps_to_move > 0) {
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd08      	ble.n	8006872 <HomeMotorMove+0x22>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	889b      	ldrh	r3, [r3, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	4619      	mov	r1, r3
 800686c:	f7fb fde8 	bl	8002440 <HAL_GPIO_WritePin>
 8006870:	e00a      	b.n	8006888 <HomeMotorMove+0x38>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	4619      	mov	r1, r3
 800687e:	f7fb fddf 	bl	8002440 <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	425b      	negs	r3, r3
 8006886:	603b      	str	r3, [r7, #0]
    }

    for (int i = 0; i < steps_to_move; i++) {
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e046      	b.n	800691c <HomeMotorMove+0xcc>
        motorStopReg = (bool) Holding_Registers_Database[5];
 800688e:	4b28      	ldr	r3, [pc, #160]	; (8006930 <HomeMotorMove+0xe0>)
 8006890:	895b      	ldrh	r3, [r3, #10]
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf14      	ite	ne
 8006896:	2301      	movne	r3, #1
 8006898:	2300      	moveq	r3, #0
 800689a:	b2da      	uxtb	r2, r3
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HomeMotorMove+0xe4>)
 800689e:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 80068a0:	4b23      	ldr	r3, [pc, #140]	; (8006930 <HomeMotorMove+0xe0>)
 80068a2:	899b      	ldrh	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b22      	ldr	r3, [pc, #136]	; (8006938 <HomeMotorMove+0xe8>)
 80068b0:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HomeMotorMove+0xe4>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HomeMotorMove+0x72>
//            printf("Motor stopped by motorStopReg.\n");
            motorStop(motor);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f97e 	bl	8006bbc <motorStop>
            break;  // Exit the loop on motor stop condition
 80068c0:	e031      	b.n	8006926 <HomeMotorMove+0xd6>
        }

        if (emergencyMotorStopReg) {
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HomeMotorMove+0xe8>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <HomeMotorMove+0x88>
            printf("Motor stopped by emergencyMotorStopReg.\n");
 80068ca:	481c      	ldr	r0, [pc, #112]	; (800693c <HomeMotorMove+0xec>)
 80068cc:	f001 f8de 	bl	8007a8c <puts>
            emergencyMotorStop(motor);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f993 	bl	8006bfc <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 80068d6:	e026      	b.n	8006926 <HomeMotorMove+0xd6>
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 80068d8:	f7ff ff46 	bl	8006768 <computeNewSpeed>
 80068dc:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6898      	ldr	r0, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	899b      	ldrh	r3, [r3, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	4619      	mov	r1, r3
 80068ea:	f7fb fda9 	bl	8002440 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fee9 	bl	80066cc <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6898      	ldr	r0, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	899b      	ldrh	r3, [r3, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	4619      	mov	r1, r3
 8006906:	f7fb fd9b 	bl	8002440 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	b29b      	uxth	r3, r3
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fedb 	bl	80066cc <microDelay>
    for (int i = 0; i < steps_to_move; i++) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	dbb4      	blt.n	800688e <HomeMotorMove+0x3e>
    }
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000014 	.word	0x20000014
 8006934:	200045cc 	.word	0x200045cc
 8006938:	200045cd 	.word	0x200045cd
 800693c:	0800b6e8 	.word	0x0800b6e8

08006940 <motorMove>:




void motorMove(MotorConfig* motor, int steps_to_move) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b08a      	sub	sp, #40	; 0x28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
    //int steps_to_move = initial_steps_to_move;
    int current_step = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    bool direction_set = (steps_to_move > 0);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfcc      	ite	gt
 8006954:	2301      	movgt	r3, #1
 8006956:	2300      	movle	r3, #0
 8006958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    // Set initial direction
    if (direction_set) {
 800695c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <motorMove+0x36>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	889b      	ldrh	r3, [r3, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	4619      	mov	r1, r3
 8006970:	f7fb fd66 	bl	8002440 <HAL_GPIO_WritePin>
 8006974:	e0fa      	b.n	8006b6c <motorMove+0x22c>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	889b      	ldrh	r3, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	4619      	mov	r1, r3
 8006982:	f7fb fd5d 	bl	8002440 <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	425b      	negs	r3, r3
 800698a:	603b      	str	r3, [r7, #0]
    }

    while (current_step < steps_to_move) {
 800698c:	e0ee      	b.n	8006b6c <motorMove+0x22c>
        motorStopReg = (bool) Holding_Registers_Database[5];
 800698e:	4b7d      	ldr	r3, [pc, #500]	; (8006b84 <motorMove+0x244>)
 8006990:	895b      	ldrh	r3, [r3, #10]
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2da      	uxtb	r2, r3
 800699c:	4b7a      	ldr	r3, [pc, #488]	; (8006b88 <motorMove+0x248>)
 800699e:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 80069a0:	4b78      	ldr	r3, [pc, #480]	; (8006b84 <motorMove+0x244>)
 80069a2:	899b      	ldrh	r3, [r3, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	4b77      	ldr	r3, [pc, #476]	; (8006b8c <motorMove+0x24c>)
 80069b0:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 80069b2:	4b75      	ldr	r3, [pc, #468]	; (8006b88 <motorMove+0x248>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <motorMove+0x82>
            // printf("Motor stopped by motorStopReg.\n");
            motorStop(motor);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f8fe 	bl	8006bbc <motorStop>
            break;  // Exit the loop on motor stop condition
 80069c0:	e0d9      	b.n	8006b76 <motorMove+0x236>
        }

        if (emergencyMotorStopReg) {
 80069c2:	4b72      	ldr	r3, [pc, #456]	; (8006b8c <motorMove+0x24c>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d006      	beq.n	80069d8 <motorMove+0x98>
            printf("Motor stopped by emergencyMotorStopReg.\n");
 80069ca:	4871      	ldr	r0, [pc, #452]	; (8006b90 <motorMove+0x250>)
 80069cc:	f001 f85e 	bl	8007a8c <puts>
            emergencyMotorStop(motor);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f913 	bl	8006bfc <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 80069d6:	e0ce      	b.n	8006b76 <motorMove+0x236>
        }

        //Reading RMP value  from RPM holding register
          velocity = Holding_Registers_Database[0];
 80069d8:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <motorMove+0x244>)
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e4:	4b6b      	ldr	r3, [pc, #428]	; (8006b94 <motorMove+0x254>)
 80069e6:	edc3 7a00 	vstr	s15, [r3]
          rpm = (840*velocity)/(44 * (float)pully_dia);
 80069ea:	4b6a      	ldr	r3, [pc, #424]	; (8006b94 <motorMove+0x254>)
 80069ec:	edd3 7a00 	vldr	s15, [r3]
 80069f0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006b98 <motorMove+0x258>
 80069f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80069f8:	4b68      	ldr	r3, [pc, #416]	; (8006b9c <motorMove+0x25c>)
 80069fa:	edd3 7a00 	vldr	s15, [r3]
 80069fe:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006ba0 <motorMove+0x260>
 8006a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a0e:	ee17 2a90 	vmov	r2, s15
 8006a12:	4b64      	ldr	r3, [pc, #400]	; (8006ba4 <motorMove+0x264>)
 8006a14:	601a      	str	r2, [r3, #0]
		  if(rpm != prev_rpm)
 8006a16:	4b63      	ldr	r3, [pc, #396]	; (8006ba4 <motorMove+0x264>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b63      	ldr	r3, [pc, #396]	; (8006ba8 <motorMove+0x268>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d01e      	beq.n	8006a60 <motorMove+0x120>
		  {
		  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8006a22:	4b60      	ldr	r3, [pc, #384]	; (8006ba4 <motorMove+0x264>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2e:	4b5f      	ldr	r3, [pc, #380]	; (8006bac <motorMove+0x26c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	eeb0 0a67 	vmov.f32	s0, s15
 8006a38:	f7ff fe72 	bl	8006720 <setRPM>
		  setAcceleration(rpm/4);
 8006a3c:	4b59      	ldr	r3, [pc, #356]	; (8006ba4 <motorMove+0x264>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da00      	bge.n	8006a46 <motorMove+0x106>
 8006a44:	3303      	adds	r3, #3
 8006a46:	109b      	asrs	r3, r3, #2
 8006a48:	ee07 3a90 	vmov	s15, r3
 8006a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a50:	eeb0 0a67 	vmov.f32	s0, s15
 8006a54:	f7ff fe54 	bl	8006700 <setAcceleration>
		  prev_rpm = rpm;
 8006a58:	4b52      	ldr	r3, [pc, #328]	; (8006ba4 <motorMove+0x264>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a52      	ldr	r2, [pc, #328]	; (8006ba8 <motorMove+0x268>)
 8006a5e:	6013      	str	r3, [r2, #0]
		  }

        // Fetch the updated steps_to_move
        int input_distance = Holding_Registers_Database[4];
 8006a60:	4b48      	ldr	r3, [pc, #288]	; (8006b84 <motorMove+0x244>)
 8006a62:	891b      	ldrh	r3, [r3, #8]
 8006a64:	61bb      	str	r3, [r7, #24]

        // Calculate target position with floating-point division
        float targetPosition = input_distance * (enc_val_in_1rev / mm_in_1rev); // in encoder value
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a70:	4b4f      	ldr	r3, [pc, #316]	; (8006bb0 <motorMove+0x270>)
 8006a72:	ed93 6a00 	vldr	s12, [r3]
 8006a76:	4b4f      	ldr	r3, [pc, #316]	; (8006bb4 <motorMove+0x274>)
 8006a78:	edd3 6a00 	vldr	s13, [r3]
 8006a7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a84:	edc7 7a05 	vstr	s15, [r7, #20]

        // Calculate position to move
        long int positionToMove = (long int)targetPosition - encoderValue; // in encoder value
 8006a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a90:	ee17 2a90 	vmov	r2, s15
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <motorMove+0x278>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	613b      	str	r3, [r7, #16]

        // Calculate steps to move
        int new_steps_to_move = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <motorMove+0x26c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <motorMove+0x270>)
 8006ab4:	edd3 6a00 	vldr	s13, [r3]
 8006ab8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac4:	ee17 3a90 	vmov	r3, s15
 8006ac8:	61fb      	str	r3, [r7, #28]

        // Update direction if steps have changed
        if (new_steps_to_move != steps_to_move) {
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d02a      	beq.n	8006b28 <motorMove+0x1e8>
            if (new_steps_to_move > current_step)
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dd12      	ble.n	8006b00 <motorMove+0x1c0>
            {
                if (!direction_set)
 8006ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ade:	f083 0301 	eor.w	r3, r3, #1
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <motorMove+0x1e4>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	889b      	ldrh	r3, [r3, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	4619      	mov	r1, r3
 8006af4:	f7fb fca4 	bl	8002440 <HAL_GPIO_WritePin>
                    direction_set = true;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e011      	b.n	8006b24 <motorMove+0x1e4>
                }
            }
            else
            {
                if (direction_set)
 8006b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <motorMove+0x1de>
                {
                    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	889b      	ldrh	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	4619      	mov	r1, r3
 8006b14:	f7fb fc94 	bl	8002440 <HAL_GPIO_WritePin>
                    direction_set = false;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
                new_steps_to_move = -new_steps_to_move;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	425b      	negs	r3, r3
 8006b22:	61fb      	str	r3, [r7, #28]
            }
            steps_to_move = new_steps_to_move;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	603b      	str	r3, [r7, #0]
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 8006b28:	f7ff fe1e 	bl	8006768 <computeNewSpeed>
 8006b2c:	60f8      	str	r0, [r7, #12]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6898      	ldr	r0, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	899b      	ldrh	r3, [r3, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f7fb fc81 	bl	8002440 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fdc1 	bl	80066cc <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6898      	ldr	r0, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	899b      	ldrh	r3, [r3, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fb fc73 	bl	8002440 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fdb3 	bl	80066cc <microDelay>

        current_step++;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	3301      	adds	r3, #1
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (current_step < steps_to_move) {
 8006b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	f6ff af0c 	blt.w	800698e <motorMove+0x4e>
    }

    // Resetting stop flags after movement
    Holding_Registers_Database[5] = 0;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <motorMove+0x244>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	815a      	strh	r2, [r3, #10]
//    Holding_Registers_Database[6] = 0;
}
 8006b7c:	bf00      	nop
 8006b7e:	3728      	adds	r7, #40	; 0x28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20000014 	.word	0x20000014
 8006b88:	200045cc 	.word	0x200045cc
 8006b8c:	200045cd 	.word	0x200045cd
 8006b90:	0800b6e8 	.word	0x0800b6e8
 8006b94:	20000550 	.word	0x20000550
 8006b98:	44520000 	.word	0x44520000
 8006b9c:	2000055c 	.word	0x2000055c
 8006ba0:	42300000 	.word	0x42300000
 8006ba4:	20000554 	.word	0x20000554
 8006ba8:	20000558 	.word	0x20000558
 8006bac:	20000568 	.word	0x20000568
 8006bb0:	20000000 	.word	0x20000000
 8006bb4:	20000004 	.word	0x20000004
 8006bb8:	20000544 	.word	0x20000544

08006bbc <motorStop>:



void motorStop(MotorConfig* motor) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6898      	ldr	r0, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	899b      	ldrh	r3, [r3, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7fb fc36 	bl	8002440 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	889b      	ldrh	r3, [r3, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4619      	mov	r1, r3
 8006be0:	f7fb fc2e 	bl	8002440 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 8006be4:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <motorStop+0x38>)
 8006be6:	885a      	ldrh	r2, [r3, #2]
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <motorStop+0x3c>)
 8006bea:	811a      	strh	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000078 	.word	0x20000078
 8006bf8:	20000014 	.word	0x20000014

08006bfc <emergencyMotorStop>:



void emergencyMotorStop(MotorConfig* motor) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]


    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6898      	ldr	r0, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	899b      	ldrh	r3, [r3, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f7fb fc16 	bl	8002440 <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	889b      	ldrh	r3, [r3, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f7fb fc0e 	bl	8002440 <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <emergencyMotorStop+0x38>)
 8006c26:	885a      	ldrh	r2, [r3, #2]
 8006c28:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <emergencyMotorStop+0x3c>)
 8006c2a:	811a      	strh	r2, [r3, #8]

}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000078 	.word	0x20000078
 8006c38:	20000014 	.word	0x20000014

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	200000fc 	.word	0x200000fc

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4d0d      	ldr	r5, [pc, #52]	; (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1b64      	subs	r4, r4, r5
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2600      	movs	r6, #0
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4d0b      	ldr	r5, [pc, #44]	; (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f004 fd02 	bl	800b664 <_init>
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2600      	movs	r6, #0
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	0800bbdc 	.word	0x0800bbdc
 8006c84:	0800bbdc 	.word	0x0800bbdc
 8006c88:	0800bbdc 	.word	0x0800bbdc
 8006c8c:	0800bbe0 	.word	0x0800bbe0

08006c90 <memcpy>:
 8006c90:	440a      	add	r2, r1
 8006c92:	4291      	cmp	r1, r2
 8006c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c98:	d100      	bne.n	8006c9c <memcpy+0xc>
 8006c9a:	4770      	bx	lr
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	d1f9      	bne.n	8006c9e <memcpy+0xe>
 8006caa:	bd10      	pop	{r4, pc}

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <__cvt>:
 8006cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	ec55 4b10 	vmov	r4, r5, d0
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	460e      	mov	r6, r1
 8006cc8:	4619      	mov	r1, r3
 8006cca:	462b      	mov	r3, r5
 8006ccc:	bfbb      	ittet	lt
 8006cce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cd2:	461d      	movlt	r5, r3
 8006cd4:	2300      	movge	r3, #0
 8006cd6:	232d      	movlt	r3, #45	; 0x2d
 8006cd8:	700b      	strb	r3, [r1, #0]
 8006cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ce0:	4691      	mov	r9, r2
 8006ce2:	f023 0820 	bic.w	r8, r3, #32
 8006ce6:	bfbc      	itt	lt
 8006ce8:	4622      	movlt	r2, r4
 8006cea:	4614      	movlt	r4, r2
 8006cec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf0:	d005      	beq.n	8006cfe <__cvt+0x42>
 8006cf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cf6:	d100      	bne.n	8006cfa <__cvt+0x3e>
 8006cf8:	3601      	adds	r6, #1
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	e000      	b.n	8006d00 <__cvt+0x44>
 8006cfe:	2103      	movs	r1, #3
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	ab02      	add	r3, sp, #8
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	ec45 4b10 	vmov	d0, r4, r5
 8006d0c:	4653      	mov	r3, sl
 8006d0e:	4632      	mov	r2, r6
 8006d10:	f001 fee2 	bl	8008ad8 <_dtoa_r>
 8006d14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d18:	4607      	mov	r7, r0
 8006d1a:	d102      	bne.n	8006d22 <__cvt+0x66>
 8006d1c:	f019 0f01 	tst.w	r9, #1
 8006d20:	d022      	beq.n	8006d68 <__cvt+0xac>
 8006d22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d26:	eb07 0906 	add.w	r9, r7, r6
 8006d2a:	d110      	bne.n	8006d4e <__cvt+0x92>
 8006d2c:	783b      	ldrb	r3, [r7, #0]
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d10a      	bne.n	8006d48 <__cvt+0x8c>
 8006d32:	2200      	movs	r2, #0
 8006d34:	2300      	movs	r3, #0
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fecd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d3e:	b918      	cbnz	r0, 8006d48 <__cvt+0x8c>
 8006d40:	f1c6 0601 	rsb	r6, r6, #1
 8006d44:	f8ca 6000 	str.w	r6, [sl]
 8006d48:	f8da 3000 	ldr.w	r3, [sl]
 8006d4c:	4499      	add	r9, r3
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2300      	movs	r3, #0
 8006d52:	4620      	mov	r0, r4
 8006d54:	4629      	mov	r1, r5
 8006d56:	f7f9 febf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5a:	b108      	cbz	r0, 8006d60 <__cvt+0xa4>
 8006d5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d60:	2230      	movs	r2, #48	; 0x30
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	454b      	cmp	r3, r9
 8006d66:	d307      	bcc.n	8006d78 <__cvt+0xbc>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d6c:	1bdb      	subs	r3, r3, r7
 8006d6e:	4638      	mov	r0, r7
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	b004      	add	sp, #16
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	1c59      	adds	r1, r3, #1
 8006d7a:	9103      	str	r1, [sp, #12]
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e7f0      	b.n	8006d62 <__cvt+0xa6>

08006d80 <__exponent>:
 8006d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d82:	4603      	mov	r3, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	bfb8      	it	lt
 8006d88:	4249      	neglt	r1, r1
 8006d8a:	f803 2b02 	strb.w	r2, [r3], #2
 8006d8e:	bfb4      	ite	lt
 8006d90:	222d      	movlt	r2, #45	; 0x2d
 8006d92:	222b      	movge	r2, #43	; 0x2b
 8006d94:	2909      	cmp	r1, #9
 8006d96:	7042      	strb	r2, [r0, #1]
 8006d98:	dd2a      	ble.n	8006df0 <__exponent+0x70>
 8006d9a:	f10d 0407 	add.w	r4, sp, #7
 8006d9e:	46a4      	mov	ip, r4
 8006da0:	270a      	movs	r7, #10
 8006da2:	46a6      	mov	lr, r4
 8006da4:	460a      	mov	r2, r1
 8006da6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006daa:	fb07 1516 	mls	r5, r7, r6, r1
 8006dae:	3530      	adds	r5, #48	; 0x30
 8006db0:	2a63      	cmp	r2, #99	; 0x63
 8006db2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006db6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dba:	4631      	mov	r1, r6
 8006dbc:	dcf1      	bgt.n	8006da2 <__exponent+0x22>
 8006dbe:	3130      	adds	r1, #48	; 0x30
 8006dc0:	f1ae 0502 	sub.w	r5, lr, #2
 8006dc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dc8:	1c44      	adds	r4, r0, #1
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4561      	cmp	r1, ip
 8006dce:	d30a      	bcc.n	8006de6 <__exponent+0x66>
 8006dd0:	f10d 0209 	add.w	r2, sp, #9
 8006dd4:	eba2 020e 	sub.w	r2, r2, lr
 8006dd8:	4565      	cmp	r5, ip
 8006dda:	bf88      	it	hi
 8006ddc:	2200      	movhi	r2, #0
 8006dde:	4413      	add	r3, r2
 8006de0:	1a18      	subs	r0, r3, r0
 8006de2:	b003      	add	sp, #12
 8006de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dee:	e7ed      	b.n	8006dcc <__exponent+0x4c>
 8006df0:	2330      	movs	r3, #48	; 0x30
 8006df2:	3130      	adds	r1, #48	; 0x30
 8006df4:	7083      	strb	r3, [r0, #2]
 8006df6:	70c1      	strb	r1, [r0, #3]
 8006df8:	1d03      	adds	r3, r0, #4
 8006dfa:	e7f1      	b.n	8006de0 <__exponent+0x60>

08006dfc <_printf_float>:
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	ed2d 8b02 	vpush	{d8}
 8006e04:	b08d      	sub	sp, #52	; 0x34
 8006e06:	460c      	mov	r4, r1
 8006e08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	461f      	mov	r7, r3
 8006e10:	4605      	mov	r5, r0
 8006e12:	f003 f975 	bl	800a100 <_localeconv_r>
 8006e16:	f8d0 a000 	ldr.w	sl, [r0]
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	f7f9 f9e0 	bl	80001e0 <strlen>
 8006e20:	2300      	movs	r3, #0
 8006e22:	930a      	str	r3, [sp, #40]	; 0x28
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e30:	3307      	adds	r3, #7
 8006e32:	f023 0307 	bic.w	r3, r3, #7
 8006e36:	f103 0208 	add.w	r2, r3, #8
 8006e3a:	f8c8 2000 	str.w	r2, [r8]
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e4e:	9307      	str	r3, [sp, #28]
 8006e50:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e54:	ee08 0a10 	vmov	s16, r0
 8006e58:	4b9f      	ldr	r3, [pc, #636]	; (80070d8 <_printf_float+0x2dc>)
 8006e5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e62:	f7f9 fe6b 	bl	8000b3c <__aeabi_dcmpun>
 8006e66:	bb88      	cbnz	r0, 8006ecc <_printf_float+0xd0>
 8006e68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e6c:	4b9a      	ldr	r3, [pc, #616]	; (80070d8 <_printf_float+0x2dc>)
 8006e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e72:	f7f9 fe45 	bl	8000b00 <__aeabi_dcmple>
 8006e76:	bb48      	cbnz	r0, 8006ecc <_printf_float+0xd0>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fe34 	bl	8000aec <__aeabi_dcmplt>
 8006e84:	b110      	cbz	r0, 8006e8c <_printf_float+0x90>
 8006e86:	232d      	movs	r3, #45	; 0x2d
 8006e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8c:	4b93      	ldr	r3, [pc, #588]	; (80070dc <_printf_float+0x2e0>)
 8006e8e:	4894      	ldr	r0, [pc, #592]	; (80070e0 <_printf_float+0x2e4>)
 8006e90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e94:	bf94      	ite	ls
 8006e96:	4698      	movls	r8, r3
 8006e98:	4680      	movhi	r8, r0
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	9b05      	ldr	r3, [sp, #20]
 8006ea0:	f023 0204 	bic.w	r2, r3, #4
 8006ea4:	6022      	str	r2, [r4, #0]
 8006ea6:	f04f 0900 	mov.w	r9, #0
 8006eaa:	9700      	str	r7, [sp, #0]
 8006eac:	4633      	mov	r3, r6
 8006eae:	aa0b      	add	r2, sp, #44	; 0x2c
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f9d8 	bl	8007268 <_printf_common>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f040 8090 	bne.w	8006fde <_printf_float+0x1e2>
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	b00d      	add	sp, #52	; 0x34
 8006ec4:	ecbd 8b02 	vpop	{d8}
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fe32 	bl	8000b3c <__aeabi_dcmpun>
 8006ed8:	b140      	cbz	r0, 8006eec <_printf_float+0xf0>
 8006eda:	464b      	mov	r3, r9
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfbc      	itt	lt
 8006ee0:	232d      	movlt	r3, #45	; 0x2d
 8006ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ee6:	487f      	ldr	r0, [pc, #508]	; (80070e4 <_printf_float+0x2e8>)
 8006ee8:	4b7f      	ldr	r3, [pc, #508]	; (80070e8 <_printf_float+0x2ec>)
 8006eea:	e7d1      	b.n	8006e90 <_printf_float+0x94>
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ef2:	9206      	str	r2, [sp, #24]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	d13f      	bne.n	8006f78 <_printf_float+0x17c>
 8006ef8:	2306      	movs	r3, #6
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	6861      	ldr	r1, [r4, #4]
 8006f00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f04:	2300      	movs	r3, #0
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	ab0a      	add	r3, sp, #40	; 0x28
 8006f0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f0e:	ab09      	add	r3, sp, #36	; 0x24
 8006f10:	ec49 8b10 	vmov	d0, r8, r9
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f7ff fecd 	bl	8006cbc <__cvt>
 8006f22:	9b06      	ldr	r3, [sp, #24]
 8006f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f26:	2b47      	cmp	r3, #71	; 0x47
 8006f28:	4680      	mov	r8, r0
 8006f2a:	d108      	bne.n	8006f3e <_printf_float+0x142>
 8006f2c:	1cc8      	adds	r0, r1, #3
 8006f2e:	db02      	blt.n	8006f36 <_printf_float+0x13a>
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	4299      	cmp	r1, r3
 8006f34:	dd41      	ble.n	8006fba <_printf_float+0x1be>
 8006f36:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f3a:	fa5f fb8b 	uxtb.w	fp, fp
 8006f3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f42:	d820      	bhi.n	8006f86 <_printf_float+0x18a>
 8006f44:	3901      	subs	r1, #1
 8006f46:	465a      	mov	r2, fp
 8006f48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f4c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f4e:	f7ff ff17 	bl	8006d80 <__exponent>
 8006f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f54:	1813      	adds	r3, r2, r0
 8006f56:	2a01      	cmp	r2, #1
 8006f58:	4681      	mov	r9, r0
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	dc02      	bgt.n	8006f64 <_printf_float+0x168>
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	07d2      	lsls	r2, r2, #31
 8006f62:	d501      	bpl.n	8006f68 <_printf_float+0x16c>
 8006f64:	3301      	adds	r3, #1
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d09c      	beq.n	8006eaa <_printf_float+0xae>
 8006f70:	232d      	movs	r3, #45	; 0x2d
 8006f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f76:	e798      	b.n	8006eaa <_printf_float+0xae>
 8006f78:	9a06      	ldr	r2, [sp, #24]
 8006f7a:	2a47      	cmp	r2, #71	; 0x47
 8006f7c:	d1be      	bne.n	8006efc <_printf_float+0x100>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1bc      	bne.n	8006efc <_printf_float+0x100>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e7b9      	b.n	8006efa <_printf_float+0xfe>
 8006f86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f8a:	d118      	bne.n	8006fbe <_printf_float+0x1c2>
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	dd0b      	ble.n	8006faa <_printf_float+0x1ae>
 8006f92:	6121      	str	r1, [r4, #16]
 8006f94:	b913      	cbnz	r3, 8006f9c <_printf_float+0x1a0>
 8006f96:	6822      	ldr	r2, [r4, #0]
 8006f98:	07d0      	lsls	r0, r2, #31
 8006f9a:	d502      	bpl.n	8006fa2 <_printf_float+0x1a6>
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	440b      	add	r3, r1
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fa4:	f04f 0900 	mov.w	r9, #0
 8006fa8:	e7de      	b.n	8006f68 <_printf_float+0x16c>
 8006faa:	b913      	cbnz	r3, 8006fb2 <_printf_float+0x1b6>
 8006fac:	6822      	ldr	r2, [r4, #0]
 8006fae:	07d2      	lsls	r2, r2, #31
 8006fb0:	d501      	bpl.n	8006fb6 <_printf_float+0x1ba>
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	e7f4      	b.n	8006fa0 <_printf_float+0x1a4>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7f2      	b.n	8006fa0 <_printf_float+0x1a4>
 8006fba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	db05      	blt.n	8006fd0 <_printf_float+0x1d4>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	6121      	str	r1, [r4, #16]
 8006fc8:	07d8      	lsls	r0, r3, #31
 8006fca:	d5ea      	bpl.n	8006fa2 <_printf_float+0x1a6>
 8006fcc:	1c4b      	adds	r3, r1, #1
 8006fce:	e7e7      	b.n	8006fa0 <_printf_float+0x1a4>
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	bfd4      	ite	le
 8006fd4:	f1c1 0202 	rsble	r2, r1, #2
 8006fd8:	2201      	movgt	r2, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	e7e0      	b.n	8006fa0 <_printf_float+0x1a4>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	055a      	lsls	r2, r3, #21
 8006fe2:	d407      	bmi.n	8006ff4 <_printf_float+0x1f8>
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d12c      	bne.n	800704c <_printf_float+0x250>
 8006ff2:	e764      	b.n	8006ebe <_printf_float+0xc2>
 8006ff4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ff8:	f240 80e0 	bls.w	80071bc <_printf_float+0x3c0>
 8006ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007000:	2200      	movs	r2, #0
 8007002:	2300      	movs	r3, #0
 8007004:	f7f9 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007008:	2800      	cmp	r0, #0
 800700a:	d034      	beq.n	8007076 <_printf_float+0x27a>
 800700c:	4a37      	ldr	r2, [pc, #220]	; (80070ec <_printf_float+0x2f0>)
 800700e:	2301      	movs	r3, #1
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f af51 	beq.w	8006ebe <_printf_float+0xc2>
 800701c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007020:	429a      	cmp	r2, r3
 8007022:	db02      	blt.n	800702a <_printf_float+0x22e>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	07d8      	lsls	r0, r3, #31
 8007028:	d510      	bpl.n	800704c <_printf_float+0x250>
 800702a:	ee18 3a10 	vmov	r3, s16
 800702e:	4652      	mov	r2, sl
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	f43f af41 	beq.w	8006ebe <_printf_float+0xc2>
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	f104 091a 	add.w	r9, r4, #26
 8007044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007046:	3b01      	subs	r3, #1
 8007048:	4543      	cmp	r3, r8
 800704a:	dc09      	bgt.n	8007060 <_printf_float+0x264>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	079b      	lsls	r3, r3, #30
 8007050:	f100 8105 	bmi.w	800725e <_printf_float+0x462>
 8007054:	68e0      	ldr	r0, [r4, #12]
 8007056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007058:	4298      	cmp	r0, r3
 800705a:	bfb8      	it	lt
 800705c:	4618      	movlt	r0, r3
 800705e:	e730      	b.n	8006ec2 <_printf_float+0xc6>
 8007060:	2301      	movs	r3, #1
 8007062:	464a      	mov	r2, r9
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f af27 	beq.w	8006ebe <_printf_float+0xc2>
 8007070:	f108 0801 	add.w	r8, r8, #1
 8007074:	e7e6      	b.n	8007044 <_printf_float+0x248>
 8007076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc39      	bgt.n	80070f0 <_printf_float+0x2f4>
 800707c:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <_printf_float+0x2f0>)
 800707e:	2301      	movs	r3, #1
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f af19 	beq.w	8006ebe <_printf_float+0xc2>
 800708c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007090:	4313      	orrs	r3, r2
 8007092:	d102      	bne.n	800709a <_printf_float+0x29e>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07d9      	lsls	r1, r3, #31
 8007098:	d5d8      	bpl.n	800704c <_printf_float+0x250>
 800709a:	ee18 3a10 	vmov	r3, s16
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f af09 	beq.w	8006ebe <_printf_float+0xc2>
 80070ac:	f04f 0900 	mov.w	r9, #0
 80070b0:	f104 0a1a 	add.w	sl, r4, #26
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	425b      	negs	r3, r3
 80070b8:	454b      	cmp	r3, r9
 80070ba:	dc01      	bgt.n	80070c0 <_printf_float+0x2c4>
 80070bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070be:	e792      	b.n	8006fe6 <_printf_float+0x1ea>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4652      	mov	r2, sl
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	f43f aef7 	beq.w	8006ebe <_printf_float+0xc2>
 80070d0:	f109 0901 	add.w	r9, r9, #1
 80070d4:	e7ee      	b.n	80070b4 <_printf_float+0x2b8>
 80070d6:	bf00      	nop
 80070d8:	7fefffff 	.word	0x7fefffff
 80070dc:	0800b72c 	.word	0x0800b72c
 80070e0:	0800b730 	.word	0x0800b730
 80070e4:	0800b738 	.word	0x0800b738
 80070e8:	0800b734 	.word	0x0800b734
 80070ec:	0800b73c 	.word	0x0800b73c
 80070f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bfa8      	it	ge
 80070f8:	461a      	movge	r2, r3
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	4691      	mov	r9, r2
 80070fe:	dc37      	bgt.n	8007170 <_printf_float+0x374>
 8007100:	f04f 0b00 	mov.w	fp, #0
 8007104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007108:	f104 021a 	add.w	r2, r4, #26
 800710c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	eba3 0309 	sub.w	r3, r3, r9
 8007114:	455b      	cmp	r3, fp
 8007116:	dc33      	bgt.n	8007180 <_printf_float+0x384>
 8007118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800711c:	429a      	cmp	r2, r3
 800711e:	db3b      	blt.n	8007198 <_printf_float+0x39c>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	07da      	lsls	r2, r3, #31
 8007124:	d438      	bmi.n	8007198 <_printf_float+0x39c>
 8007126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007128:	9a05      	ldr	r2, [sp, #20]
 800712a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800712c:	1a9a      	subs	r2, r3, r2
 800712e:	eba3 0901 	sub.w	r9, r3, r1
 8007132:	4591      	cmp	r9, r2
 8007134:	bfa8      	it	ge
 8007136:	4691      	movge	r9, r2
 8007138:	f1b9 0f00 	cmp.w	r9, #0
 800713c:	dc35      	bgt.n	80071aa <_printf_float+0x3ae>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007146:	f104 0a1a 	add.w	sl, r4, #26
 800714a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	eba3 0309 	sub.w	r3, r3, r9
 8007154:	4543      	cmp	r3, r8
 8007156:	f77f af79 	ble.w	800704c <_printf_float+0x250>
 800715a:	2301      	movs	r3, #1
 800715c:	4652      	mov	r2, sl
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f aeaa 	beq.w	8006ebe <_printf_float+0xc2>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	e7ec      	b.n	800714a <_printf_float+0x34e>
 8007170:	4613      	mov	r3, r2
 8007172:	4631      	mov	r1, r6
 8007174:	4642      	mov	r2, r8
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	d1c0      	bne.n	8007100 <_printf_float+0x304>
 800717e:	e69e      	b.n	8006ebe <_printf_float+0xc2>
 8007180:	2301      	movs	r3, #1
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	9205      	str	r2, [sp, #20]
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f ae97 	beq.w	8006ebe <_printf_float+0xc2>
 8007190:	9a05      	ldr	r2, [sp, #20]
 8007192:	f10b 0b01 	add.w	fp, fp, #1
 8007196:	e7b9      	b.n	800710c <_printf_float+0x310>
 8007198:	ee18 3a10 	vmov	r3, s16
 800719c:	4652      	mov	r2, sl
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	d1be      	bne.n	8007126 <_printf_float+0x32a>
 80071a8:	e689      	b.n	8006ebe <_printf_float+0xc2>
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	464b      	mov	r3, r9
 80071ae:	4442      	add	r2, r8
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	d1c1      	bne.n	800713e <_printf_float+0x342>
 80071ba:	e680      	b.n	8006ebe <_printf_float+0xc2>
 80071bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071be:	2a01      	cmp	r2, #1
 80071c0:	dc01      	bgt.n	80071c6 <_printf_float+0x3ca>
 80071c2:	07db      	lsls	r3, r3, #31
 80071c4:	d538      	bpl.n	8007238 <_printf_float+0x43c>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4642      	mov	r2, r8
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	f43f ae74 	beq.w	8006ebe <_printf_float+0xc2>
 80071d6:	ee18 3a10 	vmov	r3, s16
 80071da:	4652      	mov	r2, sl
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f ae6b 	beq.w	8006ebe <_printf_float+0xc2>
 80071e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071ec:	2200      	movs	r2, #0
 80071ee:	2300      	movs	r3, #0
 80071f0:	f7f9 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80071f4:	b9d8      	cbnz	r0, 800722e <_printf_float+0x432>
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	f108 0201 	add.w	r2, r8, #1
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	d10e      	bne.n	8007226 <_printf_float+0x42a>
 8007208:	e659      	b.n	8006ebe <_printf_float+0xc2>
 800720a:	2301      	movs	r3, #1
 800720c:	4652      	mov	r2, sl
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f ae52 	beq.w	8006ebe <_printf_float+0xc2>
 800721a:	f108 0801 	add.w	r8, r8, #1
 800721e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007220:	3b01      	subs	r3, #1
 8007222:	4543      	cmp	r3, r8
 8007224:	dcf1      	bgt.n	800720a <_printf_float+0x40e>
 8007226:	464b      	mov	r3, r9
 8007228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800722c:	e6dc      	b.n	8006fe8 <_printf_float+0x1ec>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	f104 0a1a 	add.w	sl, r4, #26
 8007236:	e7f2      	b.n	800721e <_printf_float+0x422>
 8007238:	2301      	movs	r3, #1
 800723a:	4642      	mov	r2, r8
 800723c:	e7df      	b.n	80071fe <_printf_float+0x402>
 800723e:	2301      	movs	r3, #1
 8007240:	464a      	mov	r2, r9
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	f43f ae38 	beq.w	8006ebe <_printf_float+0xc2>
 800724e:	f108 0801 	add.w	r8, r8, #1
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	4543      	cmp	r3, r8
 800725a:	dcf0      	bgt.n	800723e <_printf_float+0x442>
 800725c:	e6fa      	b.n	8007054 <_printf_float+0x258>
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	f104 0919 	add.w	r9, r4, #25
 8007266:	e7f4      	b.n	8007252 <_printf_float+0x456>

08007268 <_printf_common>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	4616      	mov	r6, r2
 800726e:	4699      	mov	r9, r3
 8007270:	688a      	ldr	r2, [r1, #8]
 8007272:	690b      	ldr	r3, [r1, #16]
 8007274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007278:	4293      	cmp	r3, r2
 800727a:	bfb8      	it	lt
 800727c:	4613      	movlt	r3, r2
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007284:	4607      	mov	r7, r0
 8007286:	460c      	mov	r4, r1
 8007288:	b10a      	cbz	r2, 800728e <_printf_common+0x26>
 800728a:	3301      	adds	r3, #1
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	0699      	lsls	r1, r3, #26
 8007292:	bf42      	ittt	mi
 8007294:	6833      	ldrmi	r3, [r6, #0]
 8007296:	3302      	addmi	r3, #2
 8007298:	6033      	strmi	r3, [r6, #0]
 800729a:	6825      	ldr	r5, [r4, #0]
 800729c:	f015 0506 	ands.w	r5, r5, #6
 80072a0:	d106      	bne.n	80072b0 <_printf_common+0x48>
 80072a2:	f104 0a19 	add.w	sl, r4, #25
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	6832      	ldr	r2, [r6, #0]
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	dc26      	bgt.n	80072fe <_printf_common+0x96>
 80072b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b4:	1e13      	subs	r3, r2, #0
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	bf18      	it	ne
 80072ba:	2301      	movne	r3, #1
 80072bc:	0692      	lsls	r2, r2, #26
 80072be:	d42b      	bmi.n	8007318 <_printf_common+0xb0>
 80072c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c4:	4649      	mov	r1, r9
 80072c6:	4638      	mov	r0, r7
 80072c8:	47c0      	blx	r8
 80072ca:	3001      	adds	r0, #1
 80072cc:	d01e      	beq.n	800730c <_printf_common+0xa4>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	68e5      	ldr	r5, [r4, #12]
 80072d2:	6832      	ldr	r2, [r6, #0]
 80072d4:	f003 0306 	and.w	r3, r3, #6
 80072d8:	2b04      	cmp	r3, #4
 80072da:	bf08      	it	eq
 80072dc:	1aad      	subeq	r5, r5, r2
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	bf0c      	ite	eq
 80072e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e8:	2500      	movne	r5, #0
 80072ea:	4293      	cmp	r3, r2
 80072ec:	bfc4      	itt	gt
 80072ee:	1a9b      	subgt	r3, r3, r2
 80072f0:	18ed      	addgt	r5, r5, r3
 80072f2:	2600      	movs	r6, #0
 80072f4:	341a      	adds	r4, #26
 80072f6:	42b5      	cmp	r5, r6
 80072f8:	d11a      	bne.n	8007330 <_printf_common+0xc8>
 80072fa:	2000      	movs	r0, #0
 80072fc:	e008      	b.n	8007310 <_printf_common+0xa8>
 80072fe:	2301      	movs	r3, #1
 8007300:	4652      	mov	r2, sl
 8007302:	4649      	mov	r1, r9
 8007304:	4638      	mov	r0, r7
 8007306:	47c0      	blx	r8
 8007308:	3001      	adds	r0, #1
 800730a:	d103      	bne.n	8007314 <_printf_common+0xac>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007314:	3501      	adds	r5, #1
 8007316:	e7c6      	b.n	80072a6 <_printf_common+0x3e>
 8007318:	18e1      	adds	r1, r4, r3
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	2030      	movs	r0, #48	; 0x30
 800731e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007322:	4422      	add	r2, r4
 8007324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800732c:	3302      	adds	r3, #2
 800732e:	e7c7      	b.n	80072c0 <_printf_common+0x58>
 8007330:	2301      	movs	r3, #1
 8007332:	4622      	mov	r2, r4
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d0e6      	beq.n	800730c <_printf_common+0xa4>
 800733e:	3601      	adds	r6, #1
 8007340:	e7d9      	b.n	80072f6 <_printf_common+0x8e>
	...

08007344 <_printf_i>:
 8007344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	7e0f      	ldrb	r7, [r1, #24]
 800734a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800734c:	2f78      	cmp	r7, #120	; 0x78
 800734e:	4691      	mov	r9, r2
 8007350:	4680      	mov	r8, r0
 8007352:	460c      	mov	r4, r1
 8007354:	469a      	mov	sl, r3
 8007356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800735a:	d807      	bhi.n	800736c <_printf_i+0x28>
 800735c:	2f62      	cmp	r7, #98	; 0x62
 800735e:	d80a      	bhi.n	8007376 <_printf_i+0x32>
 8007360:	2f00      	cmp	r7, #0
 8007362:	f000 80d8 	beq.w	8007516 <_printf_i+0x1d2>
 8007366:	2f58      	cmp	r7, #88	; 0x58
 8007368:	f000 80a3 	beq.w	80074b2 <_printf_i+0x16e>
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007374:	e03a      	b.n	80073ec <_printf_i+0xa8>
 8007376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737a:	2b15      	cmp	r3, #21
 800737c:	d8f6      	bhi.n	800736c <_printf_i+0x28>
 800737e:	a101      	add	r1, pc, #4	; (adr r1, 8007384 <_printf_i+0x40>)
 8007380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007384:	080073dd 	.word	0x080073dd
 8007388:	080073f1 	.word	0x080073f1
 800738c:	0800736d 	.word	0x0800736d
 8007390:	0800736d 	.word	0x0800736d
 8007394:	0800736d 	.word	0x0800736d
 8007398:	0800736d 	.word	0x0800736d
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	0800736d 	.word	0x0800736d
 80073a4:	0800736d 	.word	0x0800736d
 80073a8:	0800736d 	.word	0x0800736d
 80073ac:	0800736d 	.word	0x0800736d
 80073b0:	080074fd 	.word	0x080074fd
 80073b4:	08007421 	.word	0x08007421
 80073b8:	080074df 	.word	0x080074df
 80073bc:	0800736d 	.word	0x0800736d
 80073c0:	0800736d 	.word	0x0800736d
 80073c4:	0800751f 	.word	0x0800751f
 80073c8:	0800736d 	.word	0x0800736d
 80073cc:	08007421 	.word	0x08007421
 80073d0:	0800736d 	.word	0x0800736d
 80073d4:	0800736d 	.word	0x0800736d
 80073d8:	080074e7 	.word	0x080074e7
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	1d1a      	adds	r2, r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	602a      	str	r2, [r5, #0]
 80073e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0a3      	b.n	8007538 <_printf_i+0x1f4>
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	6829      	ldr	r1, [r5, #0]
 80073f4:	0606      	lsls	r6, r0, #24
 80073f6:	f101 0304 	add.w	r3, r1, #4
 80073fa:	d50a      	bpl.n	8007412 <_printf_i+0xce>
 80073fc:	680e      	ldr	r6, [r1, #0]
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	2e00      	cmp	r6, #0
 8007402:	da03      	bge.n	800740c <_printf_i+0xc8>
 8007404:	232d      	movs	r3, #45	; 0x2d
 8007406:	4276      	negs	r6, r6
 8007408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800740c:	485e      	ldr	r0, [pc, #376]	; (8007588 <_printf_i+0x244>)
 800740e:	230a      	movs	r3, #10
 8007410:	e019      	b.n	8007446 <_printf_i+0x102>
 8007412:	680e      	ldr	r6, [r1, #0]
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800741a:	bf18      	it	ne
 800741c:	b236      	sxthne	r6, r6
 800741e:	e7ef      	b.n	8007400 <_printf_i+0xbc>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	1d19      	adds	r1, r3, #4
 8007426:	6029      	str	r1, [r5, #0]
 8007428:	0601      	lsls	r1, r0, #24
 800742a:	d501      	bpl.n	8007430 <_printf_i+0xec>
 800742c:	681e      	ldr	r6, [r3, #0]
 800742e:	e002      	b.n	8007436 <_printf_i+0xf2>
 8007430:	0646      	lsls	r6, r0, #25
 8007432:	d5fb      	bpl.n	800742c <_printf_i+0xe8>
 8007434:	881e      	ldrh	r6, [r3, #0]
 8007436:	4854      	ldr	r0, [pc, #336]	; (8007588 <_printf_i+0x244>)
 8007438:	2f6f      	cmp	r7, #111	; 0x6f
 800743a:	bf0c      	ite	eq
 800743c:	2308      	moveq	r3, #8
 800743e:	230a      	movne	r3, #10
 8007440:	2100      	movs	r1, #0
 8007442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007446:	6865      	ldr	r5, [r4, #4]
 8007448:	60a5      	str	r5, [r4, #8]
 800744a:	2d00      	cmp	r5, #0
 800744c:	bfa2      	ittt	ge
 800744e:	6821      	ldrge	r1, [r4, #0]
 8007450:	f021 0104 	bicge.w	r1, r1, #4
 8007454:	6021      	strge	r1, [r4, #0]
 8007456:	b90e      	cbnz	r6, 800745c <_printf_i+0x118>
 8007458:	2d00      	cmp	r5, #0
 800745a:	d04d      	beq.n	80074f8 <_printf_i+0x1b4>
 800745c:	4615      	mov	r5, r2
 800745e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007462:	fb03 6711 	mls	r7, r3, r1, r6
 8007466:	5dc7      	ldrb	r7, [r0, r7]
 8007468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800746c:	4637      	mov	r7, r6
 800746e:	42bb      	cmp	r3, r7
 8007470:	460e      	mov	r6, r1
 8007472:	d9f4      	bls.n	800745e <_printf_i+0x11a>
 8007474:	2b08      	cmp	r3, #8
 8007476:	d10b      	bne.n	8007490 <_printf_i+0x14c>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	07de      	lsls	r6, r3, #31
 800747c:	d508      	bpl.n	8007490 <_printf_i+0x14c>
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	6861      	ldr	r1, [r4, #4]
 8007482:	4299      	cmp	r1, r3
 8007484:	bfde      	ittt	le
 8007486:	2330      	movle	r3, #48	; 0x30
 8007488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800748c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007490:	1b52      	subs	r2, r2, r5
 8007492:	6122      	str	r2, [r4, #16]
 8007494:	f8cd a000 	str.w	sl, [sp]
 8007498:	464b      	mov	r3, r9
 800749a:	aa03      	add	r2, sp, #12
 800749c:	4621      	mov	r1, r4
 800749e:	4640      	mov	r0, r8
 80074a0:	f7ff fee2 	bl	8007268 <_printf_common>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d14c      	bne.n	8007542 <_printf_i+0x1fe>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	b004      	add	sp, #16
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	4835      	ldr	r0, [pc, #212]	; (8007588 <_printf_i+0x244>)
 80074b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b8:	6829      	ldr	r1, [r5, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80074c0:	6029      	str	r1, [r5, #0]
 80074c2:	061d      	lsls	r5, r3, #24
 80074c4:	d514      	bpl.n	80074f0 <_printf_i+0x1ac>
 80074c6:	07df      	lsls	r7, r3, #31
 80074c8:	bf44      	itt	mi
 80074ca:	f043 0320 	orrmi.w	r3, r3, #32
 80074ce:	6023      	strmi	r3, [r4, #0]
 80074d0:	b91e      	cbnz	r6, 80074da <_printf_i+0x196>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f023 0320 	bic.w	r3, r3, #32
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	2310      	movs	r3, #16
 80074dc:	e7b0      	b.n	8007440 <_printf_i+0xfc>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	f043 0320 	orr.w	r3, r3, #32
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	2378      	movs	r3, #120	; 0x78
 80074e8:	4828      	ldr	r0, [pc, #160]	; (800758c <_printf_i+0x248>)
 80074ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ee:	e7e3      	b.n	80074b8 <_printf_i+0x174>
 80074f0:	0659      	lsls	r1, r3, #25
 80074f2:	bf48      	it	mi
 80074f4:	b2b6      	uxthmi	r6, r6
 80074f6:	e7e6      	b.n	80074c6 <_printf_i+0x182>
 80074f8:	4615      	mov	r5, r2
 80074fa:	e7bb      	b.n	8007474 <_printf_i+0x130>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	6826      	ldr	r6, [r4, #0]
 8007500:	6961      	ldr	r1, [r4, #20]
 8007502:	1d18      	adds	r0, r3, #4
 8007504:	6028      	str	r0, [r5, #0]
 8007506:	0635      	lsls	r5, r6, #24
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	d501      	bpl.n	8007510 <_printf_i+0x1cc>
 800750c:	6019      	str	r1, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0x1d2>
 8007510:	0670      	lsls	r0, r6, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0x1c8>
 8007514:	8019      	strh	r1, [r3, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	4615      	mov	r5, r2
 800751c:	e7ba      	b.n	8007494 <_printf_i+0x150>
 800751e:	682b      	ldr	r3, [r5, #0]
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	602a      	str	r2, [r5, #0]
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	2100      	movs	r1, #0
 800752a:	4628      	mov	r0, r5
 800752c:	f7f8 fe60 	bl	80001f0 <memchr>
 8007530:	b108      	cbz	r0, 8007536 <_printf_i+0x1f2>
 8007532:	1b40      	subs	r0, r0, r5
 8007534:	6060      	str	r0, [r4, #4]
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	2300      	movs	r3, #0
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007540:	e7a8      	b.n	8007494 <_printf_i+0x150>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	462a      	mov	r2, r5
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d0ab      	beq.n	80074a8 <_printf_i+0x164>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	079b      	lsls	r3, r3, #30
 8007554:	d413      	bmi.n	800757e <_printf_i+0x23a>
 8007556:	68e0      	ldr	r0, [r4, #12]
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	4298      	cmp	r0, r3
 800755c:	bfb8      	it	lt
 800755e:	4618      	movlt	r0, r3
 8007560:	e7a4      	b.n	80074ac <_printf_i+0x168>
 8007562:	2301      	movs	r3, #1
 8007564:	4632      	mov	r2, r6
 8007566:	4649      	mov	r1, r9
 8007568:	4640      	mov	r0, r8
 800756a:	47d0      	blx	sl
 800756c:	3001      	adds	r0, #1
 800756e:	d09b      	beq.n	80074a8 <_printf_i+0x164>
 8007570:	3501      	adds	r5, #1
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	9903      	ldr	r1, [sp, #12]
 8007576:	1a5b      	subs	r3, r3, r1
 8007578:	42ab      	cmp	r3, r5
 800757a:	dcf2      	bgt.n	8007562 <_printf_i+0x21e>
 800757c:	e7eb      	b.n	8007556 <_printf_i+0x212>
 800757e:	2500      	movs	r5, #0
 8007580:	f104 0619 	add.w	r6, r4, #25
 8007584:	e7f5      	b.n	8007572 <_printf_i+0x22e>
 8007586:	bf00      	nop
 8007588:	0800b73e 	.word	0x0800b73e
 800758c:	0800b74f 	.word	0x0800b74f

08007590 <_scanf_float>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	b087      	sub	sp, #28
 8007596:	4617      	mov	r7, r2
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	688b      	ldr	r3, [r1, #8]
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075a2:	bf83      	ittte	hi
 80075a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075a8:	195b      	addhi	r3, r3, r5
 80075aa:	9302      	strhi	r3, [sp, #8]
 80075ac:	2300      	movls	r3, #0
 80075ae:	bf86      	itte	hi
 80075b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075b4:	608b      	strhi	r3, [r1, #8]
 80075b6:	9302      	strls	r3, [sp, #8]
 80075b8:	680b      	ldr	r3, [r1, #0]
 80075ba:	468b      	mov	fp, r1
 80075bc:	2500      	movs	r5, #0
 80075be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80075c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075ca:	4680      	mov	r8, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	465e      	mov	r6, fp
 80075d0:	46aa      	mov	sl, r5
 80075d2:	46a9      	mov	r9, r5
 80075d4:	9501      	str	r5, [sp, #4]
 80075d6:	68a2      	ldr	r2, [r4, #8]
 80075d8:	b152      	cbz	r2, 80075f0 <_scanf_float+0x60>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b4e      	cmp	r3, #78	; 0x4e
 80075e0:	d864      	bhi.n	80076ac <_scanf_float+0x11c>
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d83c      	bhi.n	8007660 <_scanf_float+0xd0>
 80075e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075ea:	b2c8      	uxtb	r0, r1
 80075ec:	280e      	cmp	r0, #14
 80075ee:	d93a      	bls.n	8007666 <_scanf_float+0xd6>
 80075f0:	f1b9 0f00 	cmp.w	r9, #0
 80075f4:	d003      	beq.n	80075fe <_scanf_float+0x6e>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007602:	f1ba 0f01 	cmp.w	sl, #1
 8007606:	f200 8113 	bhi.w	8007830 <_scanf_float+0x2a0>
 800760a:	455e      	cmp	r6, fp
 800760c:	f200 8105 	bhi.w	800781a <_scanf_float+0x28a>
 8007610:	2501      	movs	r5, #1
 8007612:	4628      	mov	r0, r5
 8007614:	b007      	add	sp, #28
 8007616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800761e:	2a0d      	cmp	r2, #13
 8007620:	d8e6      	bhi.n	80075f0 <_scanf_float+0x60>
 8007622:	a101      	add	r1, pc, #4	; (adr r1, 8007628 <_scanf_float+0x98>)
 8007624:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007628:	08007767 	.word	0x08007767
 800762c:	080075f1 	.word	0x080075f1
 8007630:	080075f1 	.word	0x080075f1
 8007634:	080075f1 	.word	0x080075f1
 8007638:	080077c7 	.word	0x080077c7
 800763c:	0800779f 	.word	0x0800779f
 8007640:	080075f1 	.word	0x080075f1
 8007644:	080075f1 	.word	0x080075f1
 8007648:	08007775 	.word	0x08007775
 800764c:	080075f1 	.word	0x080075f1
 8007650:	080075f1 	.word	0x080075f1
 8007654:	080075f1 	.word	0x080075f1
 8007658:	080075f1 	.word	0x080075f1
 800765c:	0800772d 	.word	0x0800772d
 8007660:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007664:	e7db      	b.n	800761e <_scanf_float+0x8e>
 8007666:	290e      	cmp	r1, #14
 8007668:	d8c2      	bhi.n	80075f0 <_scanf_float+0x60>
 800766a:	a001      	add	r0, pc, #4	; (adr r0, 8007670 <_scanf_float+0xe0>)
 800766c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007670:	0800771f 	.word	0x0800771f
 8007674:	080075f1 	.word	0x080075f1
 8007678:	0800771f 	.word	0x0800771f
 800767c:	080077b3 	.word	0x080077b3
 8007680:	080075f1 	.word	0x080075f1
 8007684:	080076cd 	.word	0x080076cd
 8007688:	08007709 	.word	0x08007709
 800768c:	08007709 	.word	0x08007709
 8007690:	08007709 	.word	0x08007709
 8007694:	08007709 	.word	0x08007709
 8007698:	08007709 	.word	0x08007709
 800769c:	08007709 	.word	0x08007709
 80076a0:	08007709 	.word	0x08007709
 80076a4:	08007709 	.word	0x08007709
 80076a8:	08007709 	.word	0x08007709
 80076ac:	2b6e      	cmp	r3, #110	; 0x6e
 80076ae:	d809      	bhi.n	80076c4 <_scanf_float+0x134>
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d8b2      	bhi.n	800761a <_scanf_float+0x8a>
 80076b4:	2b54      	cmp	r3, #84	; 0x54
 80076b6:	d077      	beq.n	80077a8 <_scanf_float+0x218>
 80076b8:	2b59      	cmp	r3, #89	; 0x59
 80076ba:	d199      	bne.n	80075f0 <_scanf_float+0x60>
 80076bc:	2d07      	cmp	r5, #7
 80076be:	d197      	bne.n	80075f0 <_scanf_float+0x60>
 80076c0:	2508      	movs	r5, #8
 80076c2:	e029      	b.n	8007718 <_scanf_float+0x188>
 80076c4:	2b74      	cmp	r3, #116	; 0x74
 80076c6:	d06f      	beq.n	80077a8 <_scanf_float+0x218>
 80076c8:	2b79      	cmp	r3, #121	; 0x79
 80076ca:	e7f6      	b.n	80076ba <_scanf_float+0x12a>
 80076cc:	6821      	ldr	r1, [r4, #0]
 80076ce:	05c8      	lsls	r0, r1, #23
 80076d0:	d51a      	bpl.n	8007708 <_scanf_float+0x178>
 80076d2:	9b02      	ldr	r3, [sp, #8]
 80076d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076d8:	6021      	str	r1, [r4, #0]
 80076da:	f109 0901 	add.w	r9, r9, #1
 80076de:	b11b      	cbz	r3, 80076e8 <_scanf_float+0x158>
 80076e0:	3b01      	subs	r3, #1
 80076e2:	3201      	adds	r2, #1
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	60a2      	str	r2, [r4, #8]
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	60a3      	str	r3, [r4, #8]
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	3301      	adds	r3, #1
 80076f2:	6123      	str	r3, [r4, #16]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	f340 8084 	ble.w	8007808 <_scanf_float+0x278>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	e766      	b.n	80075d6 <_scanf_float+0x46>
 8007708:	eb1a 0f05 	cmn.w	sl, r5
 800770c:	f47f af70 	bne.w	80075f0 <_scanf_float+0x60>
 8007710:	6822      	ldr	r2, [r4, #0]
 8007712:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	f806 3b01 	strb.w	r3, [r6], #1
 800771c:	e7e4      	b.n	80076e8 <_scanf_float+0x158>
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	0610      	lsls	r0, r2, #24
 8007722:	f57f af65 	bpl.w	80075f0 <_scanf_float+0x60>
 8007726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800772a:	e7f4      	b.n	8007716 <_scanf_float+0x186>
 800772c:	f1ba 0f00 	cmp.w	sl, #0
 8007730:	d10e      	bne.n	8007750 <_scanf_float+0x1c0>
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	d10e      	bne.n	8007756 <_scanf_float+0x1c6>
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800773e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007742:	d108      	bne.n	8007756 <_scanf_float+0x1c6>
 8007744:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	f04f 0a01 	mov.w	sl, #1
 800774e:	e7e3      	b.n	8007718 <_scanf_float+0x188>
 8007750:	f1ba 0f02 	cmp.w	sl, #2
 8007754:	d055      	beq.n	8007802 <_scanf_float+0x272>
 8007756:	2d01      	cmp	r5, #1
 8007758:	d002      	beq.n	8007760 <_scanf_float+0x1d0>
 800775a:	2d04      	cmp	r5, #4
 800775c:	f47f af48 	bne.w	80075f0 <_scanf_float+0x60>
 8007760:	3501      	adds	r5, #1
 8007762:	b2ed      	uxtb	r5, r5
 8007764:	e7d8      	b.n	8007718 <_scanf_float+0x188>
 8007766:	f1ba 0f01 	cmp.w	sl, #1
 800776a:	f47f af41 	bne.w	80075f0 <_scanf_float+0x60>
 800776e:	f04f 0a02 	mov.w	sl, #2
 8007772:	e7d1      	b.n	8007718 <_scanf_float+0x188>
 8007774:	b97d      	cbnz	r5, 8007796 <_scanf_float+0x206>
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	f47f af3c 	bne.w	80075f6 <_scanf_float+0x66>
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007784:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007788:	f47f af39 	bne.w	80075fe <_scanf_float+0x6e>
 800778c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007790:	6022      	str	r2, [r4, #0]
 8007792:	2501      	movs	r5, #1
 8007794:	e7c0      	b.n	8007718 <_scanf_float+0x188>
 8007796:	2d03      	cmp	r5, #3
 8007798:	d0e2      	beq.n	8007760 <_scanf_float+0x1d0>
 800779a:	2d05      	cmp	r5, #5
 800779c:	e7de      	b.n	800775c <_scanf_float+0x1cc>
 800779e:	2d02      	cmp	r5, #2
 80077a0:	f47f af26 	bne.w	80075f0 <_scanf_float+0x60>
 80077a4:	2503      	movs	r5, #3
 80077a6:	e7b7      	b.n	8007718 <_scanf_float+0x188>
 80077a8:	2d06      	cmp	r5, #6
 80077aa:	f47f af21 	bne.w	80075f0 <_scanf_float+0x60>
 80077ae:	2507      	movs	r5, #7
 80077b0:	e7b2      	b.n	8007718 <_scanf_float+0x188>
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	0591      	lsls	r1, r2, #22
 80077b6:	f57f af1b 	bpl.w	80075f0 <_scanf_float+0x60>
 80077ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80077c4:	e7a8      	b.n	8007718 <_scanf_float+0x188>
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077d0:	d006      	beq.n	80077e0 <_scanf_float+0x250>
 80077d2:	0550      	lsls	r0, r2, #21
 80077d4:	f57f af0c 	bpl.w	80075f0 <_scanf_float+0x60>
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	f43f af0f 	beq.w	80075fe <_scanf_float+0x6e>
 80077e0:	0591      	lsls	r1, r2, #22
 80077e2:	bf58      	it	pl
 80077e4:	9901      	ldrpl	r1, [sp, #4]
 80077e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077ea:	bf58      	it	pl
 80077ec:	eba9 0101 	subpl.w	r1, r9, r1
 80077f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077f4:	bf58      	it	pl
 80077f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077fa:	6022      	str	r2, [r4, #0]
 80077fc:	f04f 0900 	mov.w	r9, #0
 8007800:	e78a      	b.n	8007718 <_scanf_float+0x188>
 8007802:	f04f 0a03 	mov.w	sl, #3
 8007806:	e787      	b.n	8007718 <_scanf_float+0x188>
 8007808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800780c:	4639      	mov	r1, r7
 800780e:	4640      	mov	r0, r8
 8007810:	4798      	blx	r3
 8007812:	2800      	cmp	r0, #0
 8007814:	f43f aedf 	beq.w	80075d6 <_scanf_float+0x46>
 8007818:	e6ea      	b.n	80075f0 <_scanf_float+0x60>
 800781a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800781e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007822:	463a      	mov	r2, r7
 8007824:	4640      	mov	r0, r8
 8007826:	4798      	blx	r3
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	3b01      	subs	r3, #1
 800782c:	6123      	str	r3, [r4, #16]
 800782e:	e6ec      	b.n	800760a <_scanf_float+0x7a>
 8007830:	1e6b      	subs	r3, r5, #1
 8007832:	2b06      	cmp	r3, #6
 8007834:	d825      	bhi.n	8007882 <_scanf_float+0x2f2>
 8007836:	2d02      	cmp	r5, #2
 8007838:	d836      	bhi.n	80078a8 <_scanf_float+0x318>
 800783a:	455e      	cmp	r6, fp
 800783c:	f67f aee8 	bls.w	8007610 <_scanf_float+0x80>
 8007840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007844:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007848:	463a      	mov	r2, r7
 800784a:	4640      	mov	r0, r8
 800784c:	4798      	blx	r3
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	3b01      	subs	r3, #1
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	e7f1      	b.n	800783a <_scanf_float+0x2aa>
 8007856:	9802      	ldr	r0, [sp, #8]
 8007858:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800785c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007860:	9002      	str	r0, [sp, #8]
 8007862:	463a      	mov	r2, r7
 8007864:	4640      	mov	r0, r8
 8007866:	4798      	blx	r3
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	3b01      	subs	r3, #1
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007872:	fa5f fa8a 	uxtb.w	sl, sl
 8007876:	f1ba 0f02 	cmp.w	sl, #2
 800787a:	d1ec      	bne.n	8007856 <_scanf_float+0x2c6>
 800787c:	3d03      	subs	r5, #3
 800787e:	b2ed      	uxtb	r5, r5
 8007880:	1b76      	subs	r6, r6, r5
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	05da      	lsls	r2, r3, #23
 8007886:	d52f      	bpl.n	80078e8 <_scanf_float+0x358>
 8007888:	055b      	lsls	r3, r3, #21
 800788a:	d510      	bpl.n	80078ae <_scanf_float+0x31e>
 800788c:	455e      	cmp	r6, fp
 800788e:	f67f aebf 	bls.w	8007610 <_scanf_float+0x80>
 8007892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800789a:	463a      	mov	r2, r7
 800789c:	4640      	mov	r0, r8
 800789e:	4798      	blx	r3
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	e7f1      	b.n	800788c <_scanf_float+0x2fc>
 80078a8:	46aa      	mov	sl, r5
 80078aa:	9602      	str	r6, [sp, #8]
 80078ac:	e7df      	b.n	800786e <_scanf_float+0x2de>
 80078ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	2965      	cmp	r1, #101	; 0x65
 80078b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	d00c      	beq.n	80078dc <_scanf_float+0x34c>
 80078c2:	2945      	cmp	r1, #69	; 0x45
 80078c4:	d00a      	beq.n	80078dc <_scanf_float+0x34c>
 80078c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ca:	463a      	mov	r2, r7
 80078cc:	4640      	mov	r0, r8
 80078ce:	4798      	blx	r3
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	1eb5      	subs	r5, r6, #2
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078e0:	463a      	mov	r2, r7
 80078e2:	4640      	mov	r0, r8
 80078e4:	4798      	blx	r3
 80078e6:	462e      	mov	r6, r5
 80078e8:	6825      	ldr	r5, [r4, #0]
 80078ea:	f015 0510 	ands.w	r5, r5, #16
 80078ee:	d159      	bne.n	80079a4 <_scanf_float+0x414>
 80078f0:	7035      	strb	r5, [r6, #0]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fc:	d11b      	bne.n	8007936 <_scanf_float+0x3a6>
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	454b      	cmp	r3, r9
 8007902:	eba3 0209 	sub.w	r2, r3, r9
 8007906:	d123      	bne.n	8007950 <_scanf_float+0x3c0>
 8007908:	2200      	movs	r2, #0
 800790a:	4659      	mov	r1, fp
 800790c:	4640      	mov	r0, r8
 800790e:	f000 ff0d 	bl	800872c <_strtod_r>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	f012 0f02 	tst.w	r2, #2
 800791a:	ec57 6b10 	vmov	r6, r7, d0
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	d021      	beq.n	8007966 <_scanf_float+0x3d6>
 8007922:	9903      	ldr	r1, [sp, #12]
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	600a      	str	r2, [r1, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	e9c3 6700 	strd	r6, r7, [r3]
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60e3      	str	r3, [r4, #12]
 8007934:	e66d      	b.n	8007612 <_scanf_float+0x82>
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0e5      	beq.n	8007908 <_scanf_float+0x378>
 800793c:	9905      	ldr	r1, [sp, #20]
 800793e:	230a      	movs	r3, #10
 8007940:	462a      	mov	r2, r5
 8007942:	3101      	adds	r1, #1
 8007944:	4640      	mov	r0, r8
 8007946:	f000 ff79 	bl	800883c <_strtol_r>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	9e05      	ldr	r6, [sp, #20]
 800794e:	1ac2      	subs	r2, r0, r3
 8007950:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007954:	429e      	cmp	r6, r3
 8007956:	bf28      	it	cs
 8007958:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800795c:	4912      	ldr	r1, [pc, #72]	; (80079a8 <_scanf_float+0x418>)
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f8a2 	bl	8007aa8 <siprintf>
 8007964:	e7d0      	b.n	8007908 <_scanf_float+0x378>
 8007966:	9903      	ldr	r1, [sp, #12]
 8007968:	f012 0f04 	tst.w	r2, #4
 800796c:	f103 0204 	add.w	r2, r3, #4
 8007970:	600a      	str	r2, [r1, #0]
 8007972:	d1d9      	bne.n	8007928 <_scanf_float+0x398>
 8007974:	f8d3 8000 	ldr.w	r8, [r3]
 8007978:	ee10 2a10 	vmov	r2, s0
 800797c:	ee10 0a10 	vmov	r0, s0
 8007980:	463b      	mov	r3, r7
 8007982:	4639      	mov	r1, r7
 8007984:	f7f9 f8da 	bl	8000b3c <__aeabi_dcmpun>
 8007988:	b128      	cbz	r0, 8007996 <_scanf_float+0x406>
 800798a:	4808      	ldr	r0, [pc, #32]	; (80079ac <_scanf_float+0x41c>)
 800798c:	f000 f886 	bl	8007a9c <nanf>
 8007990:	ed88 0a00 	vstr	s0, [r8]
 8007994:	e7cb      	b.n	800792e <_scanf_float+0x39e>
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f9 f92d 	bl	8000bf8 <__aeabi_d2f>
 800799e:	f8c8 0000 	str.w	r0, [r8]
 80079a2:	e7c4      	b.n	800792e <_scanf_float+0x39e>
 80079a4:	2500      	movs	r5, #0
 80079a6:	e634      	b.n	8007612 <_scanf_float+0x82>
 80079a8:	0800b760 	.word	0x0800b760
 80079ac:	0800bbd0 	.word	0x0800bbd0

080079b0 <_puts_r>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	460e      	mov	r6, r1
 80079b4:	4605      	mov	r5, r0
 80079b6:	b118      	cbz	r0, 80079c0 <_puts_r+0x10>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_puts_r+0x10>
 80079bc:	f001 ff94 	bl	80098e8 <__sinit>
 80079c0:	69ab      	ldr	r3, [r5, #24]
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	b913      	cbnz	r3, 80079cc <_puts_r+0x1c>
 80079c6:	4628      	mov	r0, r5
 80079c8:	f001 ff8e 	bl	80098e8 <__sinit>
 80079cc:	4b2c      	ldr	r3, [pc, #176]	; (8007a80 <_puts_r+0xd0>)
 80079ce:	429c      	cmp	r4, r3
 80079d0:	d120      	bne.n	8007a14 <_puts_r+0x64>
 80079d2:	686c      	ldr	r4, [r5, #4]
 80079d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d6:	07db      	lsls	r3, r3, #31
 80079d8:	d405      	bmi.n	80079e6 <_puts_r+0x36>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	0598      	lsls	r0, r3, #22
 80079de:	d402      	bmi.n	80079e6 <_puts_r+0x36>
 80079e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e2:	f002 fb92 	bl	800a10a <__retarget_lock_acquire_recursive>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	0719      	lsls	r1, r3, #28
 80079ea:	d51d      	bpl.n	8007a28 <_puts_r+0x78>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b1db      	cbz	r3, 8007a28 <_puts_r+0x78>
 80079f0:	3e01      	subs	r6, #1
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	bb39      	cbnz	r1, 8007a4e <_puts_r+0x9e>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	da38      	bge.n	8007a74 <_puts_r+0xc4>
 8007a02:	4622      	mov	r2, r4
 8007a04:	210a      	movs	r1, #10
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 ff1a 	bl	8008840 <__swbuf_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d011      	beq.n	8007a34 <_puts_r+0x84>
 8007a10:	250a      	movs	r5, #10
 8007a12:	e011      	b.n	8007a38 <_puts_r+0x88>
 8007a14:	4b1b      	ldr	r3, [pc, #108]	; (8007a84 <_puts_r+0xd4>)
 8007a16:	429c      	cmp	r4, r3
 8007a18:	d101      	bne.n	8007a1e <_puts_r+0x6e>
 8007a1a:	68ac      	ldr	r4, [r5, #8]
 8007a1c:	e7da      	b.n	80079d4 <_puts_r+0x24>
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <_puts_r+0xd8>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	bf08      	it	eq
 8007a24:	68ec      	ldreq	r4, [r5, #12]
 8007a26:	e7d5      	b.n	80079d4 <_puts_r+0x24>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 ff5a 	bl	80088e4 <__swsetup_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d0dd      	beq.n	80079f0 <_puts_r+0x40>
 8007a34:	f04f 35ff 	mov.w	r5, #4294967295
 8007a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a3a:	07da      	lsls	r2, r3, #31
 8007a3c:	d405      	bmi.n	8007a4a <_puts_r+0x9a>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	059b      	lsls	r3, r3, #22
 8007a42:	d402      	bmi.n	8007a4a <_puts_r+0x9a>
 8007a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a46:	f002 fb61 	bl	800a10c <__retarget_lock_release_recursive>
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da04      	bge.n	8007a5c <_puts_r+0xac>
 8007a52:	69a2      	ldr	r2, [r4, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dc06      	bgt.n	8007a66 <_puts_r+0xb6>
 8007a58:	290a      	cmp	r1, #10
 8007a5a:	d004      	beq.n	8007a66 <_puts_r+0xb6>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	6022      	str	r2, [r4, #0]
 8007a62:	7019      	strb	r1, [r3, #0]
 8007a64:	e7c5      	b.n	80079f2 <_puts_r+0x42>
 8007a66:	4622      	mov	r2, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 fee9 	bl	8008840 <__swbuf_r>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d1bf      	bne.n	80079f2 <_puts_r+0x42>
 8007a72:	e7df      	b.n	8007a34 <_puts_r+0x84>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	250a      	movs	r5, #10
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	6022      	str	r2, [r4, #0]
 8007a7c:	701d      	strb	r5, [r3, #0]
 8007a7e:	e7db      	b.n	8007a38 <_puts_r+0x88>
 8007a80:	0800b96c 	.word	0x0800b96c
 8007a84:	0800b98c 	.word	0x0800b98c
 8007a88:	0800b94c 	.word	0x0800b94c

08007a8c <puts>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <puts+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f7ff bf8d 	b.w	80079b0 <_puts_r>
 8007a96:	bf00      	nop
 8007a98:	200000fc 	.word	0x200000fc

08007a9c <nanf>:
 8007a9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007aa4 <nanf+0x8>
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	7fc00000 	.word	0x7fc00000

08007aa8 <siprintf>:
 8007aa8:	b40e      	push	{r1, r2, r3}
 8007aaa:	b500      	push	{lr}
 8007aac:	b09c      	sub	sp, #112	; 0x70
 8007aae:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	9006      	str	r0, [sp, #24]
 8007ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ab8:	4809      	ldr	r0, [pc, #36]	; (8007ae0 <siprintf+0x38>)
 8007aba:	9107      	str	r1, [sp, #28]
 8007abc:	9104      	str	r1, [sp, #16]
 8007abe:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <siprintf+0x3c>)
 8007ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	6800      	ldr	r0, [r0, #0]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	a902      	add	r1, sp, #8
 8007acc:	f003 f9b2 	bl	800ae34 <_svfiprintf_r>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	b01c      	add	sp, #112	; 0x70
 8007ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007adc:	b003      	add	sp, #12
 8007ade:	4770      	bx	lr
 8007ae0:	200000fc 	.word	0x200000fc
 8007ae4:	ffff0208 	.word	0xffff0208

08007ae8 <sulp>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	460d      	mov	r5, r1
 8007aee:	ec45 4b10 	vmov	d0, r4, r5
 8007af2:	4616      	mov	r6, r2
 8007af4:	f002 fefc 	bl	800a8f0 <__ulp>
 8007af8:	ec51 0b10 	vmov	r0, r1, d0
 8007afc:	b17e      	cbz	r6, 8007b1e <sulp+0x36>
 8007afe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd09      	ble.n	8007b1e <sulp+0x36>
 8007b0a:	051b      	lsls	r3, r3, #20
 8007b0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b10:	2400      	movs	r4, #0
 8007b12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	f7f8 fd75 	bl	8000608 <__aeabi_dmul>
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}

08007b20 <_strtod_l>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ed2d 8b02 	vpush	{d8}
 8007b28:	b09d      	sub	sp, #116	; 0x74
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9318      	str	r3, [sp, #96]	; 0x60
 8007b30:	4ba2      	ldr	r3, [pc, #648]	; (8007dbc <_strtod_l+0x29c>)
 8007b32:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	4688      	mov	r8, r1
 8007b3e:	f7f8 fb4f 	bl	80001e0 <strlen>
 8007b42:	f04f 0a00 	mov.w	sl, #0
 8007b46:	4605      	mov	r5, r0
 8007b48:	f04f 0b00 	mov.w	fp, #0
 8007b4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	2a2b      	cmp	r2, #43	; 0x2b
 8007b56:	d04e      	beq.n	8007bf6 <_strtod_l+0xd6>
 8007b58:	d83b      	bhi.n	8007bd2 <_strtod_l+0xb2>
 8007b5a:	2a0d      	cmp	r2, #13
 8007b5c:	d834      	bhi.n	8007bc8 <_strtod_l+0xa8>
 8007b5e:	2a08      	cmp	r2, #8
 8007b60:	d834      	bhi.n	8007bcc <_strtod_l+0xac>
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	d03e      	beq.n	8007be4 <_strtod_l+0xc4>
 8007b66:	2300      	movs	r3, #0
 8007b68:	930a      	str	r3, [sp, #40]	; 0x28
 8007b6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007b6c:	7833      	ldrb	r3, [r6, #0]
 8007b6e:	2b30      	cmp	r3, #48	; 0x30
 8007b70:	f040 80b0 	bne.w	8007cd4 <_strtod_l+0x1b4>
 8007b74:	7873      	ldrb	r3, [r6, #1]
 8007b76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b7a:	2b58      	cmp	r3, #88	; 0x58
 8007b7c:	d168      	bne.n	8007c50 <_strtod_l+0x130>
 8007b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	ab18      	add	r3, sp, #96	; 0x60
 8007b84:	9702      	str	r7, [sp, #8]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4a8d      	ldr	r2, [pc, #564]	; (8007dc0 <_strtod_l+0x2a0>)
 8007b8a:	ab19      	add	r3, sp, #100	; 0x64
 8007b8c:	a917      	add	r1, sp, #92	; 0x5c
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f001 ffae 	bl	8009af0 <__gethex>
 8007b94:	f010 0707 	ands.w	r7, r0, #7
 8007b98:	4605      	mov	r5, r0
 8007b9a:	d005      	beq.n	8007ba8 <_strtod_l+0x88>
 8007b9c:	2f06      	cmp	r7, #6
 8007b9e:	d12c      	bne.n	8007bfa <_strtod_l+0xda>
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f040 8590 	bne.w	80086d0 <_strtod_l+0xbb0>
 8007bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb2:	b1eb      	cbz	r3, 8007bf0 <_strtod_l+0xd0>
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bba:	ec43 2b10 	vmov	d0, r2, r3
 8007bbe:	b01d      	add	sp, #116	; 0x74
 8007bc0:	ecbd 8b02 	vpop	{d8}
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	2a20      	cmp	r2, #32
 8007bca:	d1cc      	bne.n	8007b66 <_strtod_l+0x46>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bd0:	e7be      	b.n	8007b50 <_strtod_l+0x30>
 8007bd2:	2a2d      	cmp	r2, #45	; 0x2d
 8007bd4:	d1c7      	bne.n	8007b66 <_strtod_l+0x46>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1c2      	bne.n	8007b6a <_strtod_l+0x4a>
 8007be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f040 856e 	bne.w	80086cc <_strtod_l+0xbac>
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	465b      	mov	r3, fp
 8007bf4:	e7e1      	b.n	8007bba <_strtod_l+0x9a>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	e7ee      	b.n	8007bd8 <_strtod_l+0xb8>
 8007bfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bfc:	b13a      	cbz	r2, 8007c0e <_strtod_l+0xee>
 8007bfe:	2135      	movs	r1, #53	; 0x35
 8007c00:	a81a      	add	r0, sp, #104	; 0x68
 8007c02:	f002 ff80 	bl	800ab06 <__copybits>
 8007c06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f002 fb3f 	bl	800a28c <_Bfree>
 8007c0e:	3f01      	subs	r7, #1
 8007c10:	2f04      	cmp	r7, #4
 8007c12:	d806      	bhi.n	8007c22 <_strtod_l+0x102>
 8007c14:	e8df f007 	tbb	[pc, r7]
 8007c18:	1714030a 	.word	0x1714030a
 8007c1c:	0a          	.byte	0x0a
 8007c1d:	00          	.byte	0x00
 8007c1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007c22:	0728      	lsls	r0, r5, #28
 8007c24:	d5c0      	bpl.n	8007ba8 <_strtod_l+0x88>
 8007c26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c2a:	e7bd      	b.n	8007ba8 <_strtod_l+0x88>
 8007c2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007c30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c3e:	e7f0      	b.n	8007c22 <_strtod_l+0x102>
 8007c40:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007dc4 <_strtod_l+0x2a4>
 8007c44:	e7ed      	b.n	8007c22 <_strtod_l+0x102>
 8007c46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007c4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c4e:	e7e8      	b.n	8007c22 <_strtod_l+0x102>
 8007c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	2b30      	cmp	r3, #48	; 0x30
 8007c5a:	d0f9      	beq.n	8007c50 <_strtod_l+0x130>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0a3      	beq.n	8007ba8 <_strtod_l+0x88>
 8007c60:	2301      	movs	r3, #1
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c70:	464f      	mov	r7, r9
 8007c72:	220a      	movs	r2, #10
 8007c74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007c76:	7806      	ldrb	r6, [r0, #0]
 8007c78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c7c:	b2d9      	uxtb	r1, r3
 8007c7e:	2909      	cmp	r1, #9
 8007c80:	d92a      	bls.n	8007cd8 <_strtod_l+0x1b8>
 8007c82:	9905      	ldr	r1, [sp, #20]
 8007c84:	462a      	mov	r2, r5
 8007c86:	f003 fa32 	bl	800b0ee <strncmp>
 8007c8a:	b398      	cbz	r0, 8007cf4 <_strtod_l+0x1d4>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	4632      	mov	r2, r6
 8007c90:	463d      	mov	r5, r7
 8007c92:	9005      	str	r0, [sp, #20]
 8007c94:	4603      	mov	r3, r0
 8007c96:	2a65      	cmp	r2, #101	; 0x65
 8007c98:	d001      	beq.n	8007c9e <_strtod_l+0x17e>
 8007c9a:	2a45      	cmp	r2, #69	; 0x45
 8007c9c:	d118      	bne.n	8007cd0 <_strtod_l+0x1b0>
 8007c9e:	b91d      	cbnz	r5, 8007ca8 <_strtod_l+0x188>
 8007ca0:	9a04      	ldr	r2, [sp, #16]
 8007ca2:	4302      	orrs	r2, r0
 8007ca4:	d09e      	beq.n	8007be4 <_strtod_l+0xc4>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007cac:	f108 0201 	add.w	r2, r8, #1
 8007cb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007cb6:	2a2b      	cmp	r2, #43	; 0x2b
 8007cb8:	d075      	beq.n	8007da6 <_strtod_l+0x286>
 8007cba:	2a2d      	cmp	r2, #45	; 0x2d
 8007cbc:	d07b      	beq.n	8007db6 <_strtod_l+0x296>
 8007cbe:	f04f 0c00 	mov.w	ip, #0
 8007cc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007cc6:	2909      	cmp	r1, #9
 8007cc8:	f240 8082 	bls.w	8007dd0 <_strtod_l+0x2b0>
 8007ccc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	e09d      	b.n	8007e10 <_strtod_l+0x2f0>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e7c4      	b.n	8007c62 <_strtod_l+0x142>
 8007cd8:	2f08      	cmp	r7, #8
 8007cda:	bfd8      	it	le
 8007cdc:	9907      	ldrle	r1, [sp, #28]
 8007cde:	f100 0001 	add.w	r0, r0, #1
 8007ce2:	bfda      	itte	le
 8007ce4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ce8:	9307      	strle	r3, [sp, #28]
 8007cea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007cee:	3701      	adds	r7, #1
 8007cf0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007cf2:	e7bf      	b.n	8007c74 <_strtod_l+0x154>
 8007cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf6:	195a      	adds	r2, r3, r5
 8007cf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cfa:	5d5a      	ldrb	r2, [r3, r5]
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	d037      	beq.n	8007d70 <_strtod_l+0x250>
 8007d00:	9005      	str	r0, [sp, #20]
 8007d02:	463d      	mov	r5, r7
 8007d04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d912      	bls.n	8007d32 <_strtod_l+0x212>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e7c2      	b.n	8007c96 <_strtod_l+0x176>
 8007d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d16:	785a      	ldrb	r2, [r3, #1]
 8007d18:	3001      	adds	r0, #1
 8007d1a:	2a30      	cmp	r2, #48	; 0x30
 8007d1c:	d0f8      	beq.n	8007d10 <_strtod_l+0x1f0>
 8007d1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	f200 84d9 	bhi.w	80086da <_strtod_l+0xbba>
 8007d28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d2a:	9005      	str	r0, [sp, #20]
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	4605      	mov	r5, r0
 8007d32:	3a30      	subs	r2, #48	; 0x30
 8007d34:	f100 0301 	add.w	r3, r0, #1
 8007d38:	d014      	beq.n	8007d64 <_strtod_l+0x244>
 8007d3a:	9905      	ldr	r1, [sp, #20]
 8007d3c:	4419      	add	r1, r3
 8007d3e:	9105      	str	r1, [sp, #20]
 8007d40:	462b      	mov	r3, r5
 8007d42:	eb00 0e05 	add.w	lr, r0, r5
 8007d46:	210a      	movs	r1, #10
 8007d48:	4573      	cmp	r3, lr
 8007d4a:	d113      	bne.n	8007d74 <_strtod_l+0x254>
 8007d4c:	182b      	adds	r3, r5, r0
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	f105 0501 	add.w	r5, r5, #1
 8007d54:	4405      	add	r5, r0
 8007d56:	dc1c      	bgt.n	8007d92 <_strtod_l+0x272>
 8007d58:	9907      	ldr	r1, [sp, #28]
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	fb03 2301 	mla	r3, r3, r1, r2
 8007d60:	9307      	str	r3, [sp, #28]
 8007d62:	2300      	movs	r3, #0
 8007d64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d66:	1c51      	adds	r1, r2, #1
 8007d68:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d6a:	7852      	ldrb	r2, [r2, #1]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	e7c9      	b.n	8007d04 <_strtod_l+0x1e4>
 8007d70:	4638      	mov	r0, r7
 8007d72:	e7d2      	b.n	8007d1a <_strtod_l+0x1fa>
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	dc04      	bgt.n	8007d82 <_strtod_l+0x262>
 8007d78:	9e07      	ldr	r6, [sp, #28]
 8007d7a:	434e      	muls	r6, r1
 8007d7c:	9607      	str	r6, [sp, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	e7e2      	b.n	8007d48 <_strtod_l+0x228>
 8007d82:	f103 0c01 	add.w	ip, r3, #1
 8007d86:	f1bc 0f10 	cmp.w	ip, #16
 8007d8a:	bfd8      	it	le
 8007d8c:	fb01 f909 	mulle.w	r9, r1, r9
 8007d90:	e7f5      	b.n	8007d7e <_strtod_l+0x25e>
 8007d92:	2d10      	cmp	r5, #16
 8007d94:	bfdc      	itt	le
 8007d96:	230a      	movle	r3, #10
 8007d98:	fb03 2909 	mlale	r9, r3, r9, r2
 8007d9c:	e7e1      	b.n	8007d62 <_strtod_l+0x242>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	2301      	movs	r3, #1
 8007da4:	e77c      	b.n	8007ca0 <_strtod_l+0x180>
 8007da6:	f04f 0c00 	mov.w	ip, #0
 8007daa:	f108 0202 	add.w	r2, r8, #2
 8007dae:	9217      	str	r2, [sp, #92]	; 0x5c
 8007db0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007db4:	e785      	b.n	8007cc2 <_strtod_l+0x1a2>
 8007db6:	f04f 0c01 	mov.w	ip, #1
 8007dba:	e7f6      	b.n	8007daa <_strtod_l+0x28a>
 8007dbc:	0800ba14 	.word	0x0800ba14
 8007dc0:	0800b768 	.word	0x0800b768
 8007dc4:	7ff00000 	.word	0x7ff00000
 8007dc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007dca:	1c51      	adds	r1, r2, #1
 8007dcc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007dce:	7852      	ldrb	r2, [r2, #1]
 8007dd0:	2a30      	cmp	r2, #48	; 0x30
 8007dd2:	d0f9      	beq.n	8007dc8 <_strtod_l+0x2a8>
 8007dd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007dd8:	2908      	cmp	r1, #8
 8007dda:	f63f af79 	bhi.w	8007cd0 <_strtod_l+0x1b0>
 8007dde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007de2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007de4:	9206      	str	r2, [sp, #24]
 8007de6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007de8:	1c51      	adds	r1, r2, #1
 8007dea:	9117      	str	r1, [sp, #92]	; 0x5c
 8007dec:	7852      	ldrb	r2, [r2, #1]
 8007dee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007df2:	2e09      	cmp	r6, #9
 8007df4:	d937      	bls.n	8007e66 <_strtod_l+0x346>
 8007df6:	9e06      	ldr	r6, [sp, #24]
 8007df8:	1b89      	subs	r1, r1, r6
 8007dfa:	2908      	cmp	r1, #8
 8007dfc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007e00:	dc02      	bgt.n	8007e08 <_strtod_l+0x2e8>
 8007e02:	4576      	cmp	r6, lr
 8007e04:	bfa8      	it	ge
 8007e06:	4676      	movge	r6, lr
 8007e08:	f1bc 0f00 	cmp.w	ip, #0
 8007e0c:	d000      	beq.n	8007e10 <_strtod_l+0x2f0>
 8007e0e:	4276      	negs	r6, r6
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	d14d      	bne.n	8007eb0 <_strtod_l+0x390>
 8007e14:	9904      	ldr	r1, [sp, #16]
 8007e16:	4301      	orrs	r1, r0
 8007e18:	f47f aec6 	bne.w	8007ba8 <_strtod_l+0x88>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f47f aee1 	bne.w	8007be4 <_strtod_l+0xc4>
 8007e22:	2a69      	cmp	r2, #105	; 0x69
 8007e24:	d027      	beq.n	8007e76 <_strtod_l+0x356>
 8007e26:	dc24      	bgt.n	8007e72 <_strtod_l+0x352>
 8007e28:	2a49      	cmp	r2, #73	; 0x49
 8007e2a:	d024      	beq.n	8007e76 <_strtod_l+0x356>
 8007e2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007e2e:	f47f aed9 	bne.w	8007be4 <_strtod_l+0xc4>
 8007e32:	499f      	ldr	r1, [pc, #636]	; (80080b0 <_strtod_l+0x590>)
 8007e34:	a817      	add	r0, sp, #92	; 0x5c
 8007e36:	f002 f8b3 	bl	8009fa0 <__match>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f43f aed2 	beq.w	8007be4 <_strtod_l+0xc4>
 8007e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b28      	cmp	r3, #40	; 0x28
 8007e46:	d12d      	bne.n	8007ea4 <_strtod_l+0x384>
 8007e48:	499a      	ldr	r1, [pc, #616]	; (80080b4 <_strtod_l+0x594>)
 8007e4a:	aa1a      	add	r2, sp, #104	; 0x68
 8007e4c:	a817      	add	r0, sp, #92	; 0x5c
 8007e4e:	f002 f8bb 	bl	8009fc8 <__hexnan>
 8007e52:	2805      	cmp	r0, #5
 8007e54:	d126      	bne.n	8007ea4 <_strtod_l+0x384>
 8007e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007e5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e64:	e6a0      	b.n	8007ba8 <_strtod_l+0x88>
 8007e66:	210a      	movs	r1, #10
 8007e68:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007e6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007e70:	e7b9      	b.n	8007de6 <_strtod_l+0x2c6>
 8007e72:	2a6e      	cmp	r2, #110	; 0x6e
 8007e74:	e7db      	b.n	8007e2e <_strtod_l+0x30e>
 8007e76:	4990      	ldr	r1, [pc, #576]	; (80080b8 <_strtod_l+0x598>)
 8007e78:	a817      	add	r0, sp, #92	; 0x5c
 8007e7a:	f002 f891 	bl	8009fa0 <__match>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f43f aeb0 	beq.w	8007be4 <_strtod_l+0xc4>
 8007e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e86:	498d      	ldr	r1, [pc, #564]	; (80080bc <_strtod_l+0x59c>)
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	a817      	add	r0, sp, #92	; 0x5c
 8007e8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e8e:	f002 f887 	bl	8009fa0 <__match>
 8007e92:	b910      	cbnz	r0, 8007e9a <_strtod_l+0x37a>
 8007e94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e96:	3301      	adds	r3, #1
 8007e98:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80080cc <_strtod_l+0x5ac>
 8007e9e:	f04f 0a00 	mov.w	sl, #0
 8007ea2:	e681      	b.n	8007ba8 <_strtod_l+0x88>
 8007ea4:	4886      	ldr	r0, [pc, #536]	; (80080c0 <_strtod_l+0x5a0>)
 8007ea6:	f003 f8c7 	bl	800b038 <nan>
 8007eaa:	ec5b ab10 	vmov	sl, fp, d0
 8007eae:	e67b      	b.n	8007ba8 <_strtod_l+0x88>
 8007eb0:	9b05      	ldr	r3, [sp, #20]
 8007eb2:	9807      	ldr	r0, [sp, #28]
 8007eb4:	1af3      	subs	r3, r6, r3
 8007eb6:	2f00      	cmp	r7, #0
 8007eb8:	bf08      	it	eq
 8007eba:	462f      	moveq	r7, r5
 8007ebc:	2d10      	cmp	r5, #16
 8007ebe:	9306      	str	r3, [sp, #24]
 8007ec0:	46a8      	mov	r8, r5
 8007ec2:	bfa8      	it	ge
 8007ec4:	f04f 0810 	movge.w	r8, #16
 8007ec8:	f7f8 fb24 	bl	8000514 <__aeabi_ui2d>
 8007ecc:	2d09      	cmp	r5, #9
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	dd13      	ble.n	8007efc <_strtod_l+0x3dc>
 8007ed4:	4b7b      	ldr	r3, [pc, #492]	; (80080c4 <_strtod_l+0x5a4>)
 8007ed6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007eda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ede:	f7f8 fb93 	bl	8000608 <__aeabi_dmul>
 8007ee2:	4682      	mov	sl, r0
 8007ee4:	4648      	mov	r0, r9
 8007ee6:	468b      	mov	fp, r1
 8007ee8:	f7f8 fb14 	bl	8000514 <__aeabi_ui2d>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4650      	mov	r0, sl
 8007ef2:	4659      	mov	r1, fp
 8007ef4:	f7f8 f9d2 	bl	800029c <__adddf3>
 8007ef8:	4682      	mov	sl, r0
 8007efa:	468b      	mov	fp, r1
 8007efc:	2d0f      	cmp	r5, #15
 8007efe:	dc38      	bgt.n	8007f72 <_strtod_l+0x452>
 8007f00:	9b06      	ldr	r3, [sp, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f43f ae50 	beq.w	8007ba8 <_strtod_l+0x88>
 8007f08:	dd24      	ble.n	8007f54 <_strtod_l+0x434>
 8007f0a:	2b16      	cmp	r3, #22
 8007f0c:	dc0b      	bgt.n	8007f26 <_strtod_l+0x406>
 8007f0e:	496d      	ldr	r1, [pc, #436]	; (80080c4 <_strtod_l+0x5a4>)
 8007f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f18:	4652      	mov	r2, sl
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	4682      	mov	sl, r0
 8007f22:	468b      	mov	fp, r1
 8007f24:	e640      	b.n	8007ba8 <_strtod_l+0x88>
 8007f26:	9a06      	ldr	r2, [sp, #24]
 8007f28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	db20      	blt.n	8007f72 <_strtod_l+0x452>
 8007f30:	4c64      	ldr	r4, [pc, #400]	; (80080c4 <_strtod_l+0x5a4>)
 8007f32:	f1c5 050f 	rsb	r5, r5, #15
 8007f36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f42:	f7f8 fb61 	bl	8000608 <__aeabi_dmul>
 8007f46:	9b06      	ldr	r3, [sp, #24]
 8007f48:	1b5d      	subs	r5, r3, r5
 8007f4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f52:	e7e3      	b.n	8007f1c <_strtod_l+0x3fc>
 8007f54:	9b06      	ldr	r3, [sp, #24]
 8007f56:	3316      	adds	r3, #22
 8007f58:	db0b      	blt.n	8007f72 <_strtod_l+0x452>
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	1b9e      	subs	r6, r3, r6
 8007f5e:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <_strtod_l+0x5a4>)
 8007f60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007f64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f68:	4650      	mov	r0, sl
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	f7f8 fc76 	bl	800085c <__aeabi_ddiv>
 8007f70:	e7d6      	b.n	8007f20 <_strtod_l+0x400>
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	eba5 0808 	sub.w	r8, r5, r8
 8007f78:	4498      	add	r8, r3
 8007f7a:	f1b8 0f00 	cmp.w	r8, #0
 8007f7e:	dd74      	ble.n	800806a <_strtod_l+0x54a>
 8007f80:	f018 030f 	ands.w	r3, r8, #15
 8007f84:	d00a      	beq.n	8007f9c <_strtod_l+0x47c>
 8007f86:	494f      	ldr	r1, [pc, #316]	; (80080c4 <_strtod_l+0x5a4>)
 8007f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	465b      	mov	r3, fp
 8007f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	4682      	mov	sl, r0
 8007f9a:	468b      	mov	fp, r1
 8007f9c:	f038 080f 	bics.w	r8, r8, #15
 8007fa0:	d04f      	beq.n	8008042 <_strtod_l+0x522>
 8007fa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fa6:	dd22      	ble.n	8007fee <_strtod_l+0x4ce>
 8007fa8:	2500      	movs	r5, #0
 8007faa:	462e      	mov	r6, r5
 8007fac:	9507      	str	r5, [sp, #28]
 8007fae:	9505      	str	r5, [sp, #20]
 8007fb0:	2322      	movs	r3, #34	; 0x22
 8007fb2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80080cc <_strtod_l+0x5ac>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f43f adf2 	beq.w	8007ba8 <_strtod_l+0x88>
 8007fc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f002 f960 	bl	800a28c <_Bfree>
 8007fcc:	9905      	ldr	r1, [sp, #20]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f002 f95c 	bl	800a28c <_Bfree>
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f002 f958 	bl	800a28c <_Bfree>
 8007fdc:	9907      	ldr	r1, [sp, #28]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f002 f954 	bl	800a28c <_Bfree>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f002 f950 	bl	800a28c <_Bfree>
 8007fec:	e5dc      	b.n	8007ba8 <_strtod_l+0x88>
 8007fee:	4b36      	ldr	r3, [pc, #216]	; (80080c8 <_strtod_l+0x5a8>)
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	4699      	mov	r9, r3
 8007ffe:	f1b8 0f01 	cmp.w	r8, #1
 8008002:	dc21      	bgt.n	8008048 <_strtod_l+0x528>
 8008004:	b10b      	cbz	r3, 800800a <_strtod_l+0x4ea>
 8008006:	4682      	mov	sl, r0
 8008008:	468b      	mov	fp, r1
 800800a:	4b2f      	ldr	r3, [pc, #188]	; (80080c8 <_strtod_l+0x5a8>)
 800800c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008010:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008014:	4652      	mov	r2, sl
 8008016:	465b      	mov	r3, fp
 8008018:	e9d9 0100 	ldrd	r0, r1, [r9]
 800801c:	f7f8 faf4 	bl	8000608 <__aeabi_dmul>
 8008020:	4b2a      	ldr	r3, [pc, #168]	; (80080cc <_strtod_l+0x5ac>)
 8008022:	460a      	mov	r2, r1
 8008024:	400b      	ands	r3, r1
 8008026:	492a      	ldr	r1, [pc, #168]	; (80080d0 <_strtod_l+0x5b0>)
 8008028:	428b      	cmp	r3, r1
 800802a:	4682      	mov	sl, r0
 800802c:	d8bc      	bhi.n	8007fa8 <_strtod_l+0x488>
 800802e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008032:	428b      	cmp	r3, r1
 8008034:	bf86      	itte	hi
 8008036:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80080d4 <_strtod_l+0x5b4>
 800803a:	f04f 3aff 	movhi.w	sl, #4294967295
 800803e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008042:	2300      	movs	r3, #0
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	e084      	b.n	8008152 <_strtod_l+0x632>
 8008048:	f018 0f01 	tst.w	r8, #1
 800804c:	d005      	beq.n	800805a <_strtod_l+0x53a>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 fad8 	bl	8000608 <__aeabi_dmul>
 8008058:	2301      	movs	r3, #1
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	3208      	adds	r2, #8
 800805e:	f109 0901 	add.w	r9, r9, #1
 8008062:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008066:	9204      	str	r2, [sp, #16]
 8008068:	e7c9      	b.n	8007ffe <_strtod_l+0x4de>
 800806a:	d0ea      	beq.n	8008042 <_strtod_l+0x522>
 800806c:	f1c8 0800 	rsb	r8, r8, #0
 8008070:	f018 020f 	ands.w	r2, r8, #15
 8008074:	d00a      	beq.n	800808c <_strtod_l+0x56c>
 8008076:	4b13      	ldr	r3, [pc, #76]	; (80080c4 <_strtod_l+0x5a4>)
 8008078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800807c:	4650      	mov	r0, sl
 800807e:	4659      	mov	r1, fp
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fbea 	bl	800085c <__aeabi_ddiv>
 8008088:	4682      	mov	sl, r0
 800808a:	468b      	mov	fp, r1
 800808c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008090:	d0d7      	beq.n	8008042 <_strtod_l+0x522>
 8008092:	f1b8 0f1f 	cmp.w	r8, #31
 8008096:	dd1f      	ble.n	80080d8 <_strtod_l+0x5b8>
 8008098:	2500      	movs	r5, #0
 800809a:	462e      	mov	r6, r5
 800809c:	9507      	str	r5, [sp, #28]
 800809e:	9505      	str	r5, [sp, #20]
 80080a0:	2322      	movs	r3, #34	; 0x22
 80080a2:	f04f 0a00 	mov.w	sl, #0
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	e786      	b.n	8007fbc <_strtod_l+0x49c>
 80080ae:	bf00      	nop
 80080b0:	0800b739 	.word	0x0800b739
 80080b4:	0800b77c 	.word	0x0800b77c
 80080b8:	0800b731 	.word	0x0800b731
 80080bc:	0800b8bc 	.word	0x0800b8bc
 80080c0:	0800bbd0 	.word	0x0800bbd0
 80080c4:	0800bab0 	.word	0x0800bab0
 80080c8:	0800ba88 	.word	0x0800ba88
 80080cc:	7ff00000 	.word	0x7ff00000
 80080d0:	7ca00000 	.word	0x7ca00000
 80080d4:	7fefffff 	.word	0x7fefffff
 80080d8:	f018 0310 	ands.w	r3, r8, #16
 80080dc:	bf18      	it	ne
 80080de:	236a      	movne	r3, #106	; 0x6a
 80080e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008490 <_strtod_l+0x970>
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4650      	mov	r0, sl
 80080e8:	4659      	mov	r1, fp
 80080ea:	2300      	movs	r3, #0
 80080ec:	f018 0f01 	tst.w	r8, #1
 80080f0:	d004      	beq.n	80080fc <_strtod_l+0x5dc>
 80080f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080f6:	f7f8 fa87 	bl	8000608 <__aeabi_dmul>
 80080fa:	2301      	movs	r3, #1
 80080fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008100:	f109 0908 	add.w	r9, r9, #8
 8008104:	d1f2      	bne.n	80080ec <_strtod_l+0x5cc>
 8008106:	b10b      	cbz	r3, 800810c <_strtod_l+0x5ec>
 8008108:	4682      	mov	sl, r0
 800810a:	468b      	mov	fp, r1
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	b1c3      	cbz	r3, 8008142 <_strtod_l+0x622>
 8008110:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008114:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008118:	2b00      	cmp	r3, #0
 800811a:	4659      	mov	r1, fp
 800811c:	dd11      	ble.n	8008142 <_strtod_l+0x622>
 800811e:	2b1f      	cmp	r3, #31
 8008120:	f340 8124 	ble.w	800836c <_strtod_l+0x84c>
 8008124:	2b34      	cmp	r3, #52	; 0x34
 8008126:	bfde      	ittt	le
 8008128:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800812c:	f04f 33ff 	movle.w	r3, #4294967295
 8008130:	fa03 f202 	lslle.w	r2, r3, r2
 8008134:	f04f 0a00 	mov.w	sl, #0
 8008138:	bfcc      	ite	gt
 800813a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800813e:	ea02 0b01 	andle.w	fp, r2, r1
 8008142:	2200      	movs	r2, #0
 8008144:	2300      	movs	r3, #0
 8008146:	4650      	mov	r0, sl
 8008148:	4659      	mov	r1, fp
 800814a:	f7f8 fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800814e:	2800      	cmp	r0, #0
 8008150:	d1a2      	bne.n	8008098 <_strtod_l+0x578>
 8008152:	9b07      	ldr	r3, [sp, #28]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	9908      	ldr	r1, [sp, #32]
 8008158:	462b      	mov	r3, r5
 800815a:	463a      	mov	r2, r7
 800815c:	4620      	mov	r0, r4
 800815e:	f002 f8fd 	bl	800a35c <__s2b>
 8008162:	9007      	str	r0, [sp, #28]
 8008164:	2800      	cmp	r0, #0
 8008166:	f43f af1f 	beq.w	8007fa8 <_strtod_l+0x488>
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	1b9e      	subs	r6, r3, r6
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	bfb4      	ite	lt
 8008174:	4633      	movlt	r3, r6
 8008176:	2300      	movge	r3, #0
 8008178:	930c      	str	r3, [sp, #48]	; 0x30
 800817a:	9b06      	ldr	r3, [sp, #24]
 800817c:	2500      	movs	r5, #0
 800817e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008182:	9312      	str	r3, [sp, #72]	; 0x48
 8008184:	462e      	mov	r6, r5
 8008186:	9b07      	ldr	r3, [sp, #28]
 8008188:	4620      	mov	r0, r4
 800818a:	6859      	ldr	r1, [r3, #4]
 800818c:	f002 f83e 	bl	800a20c <_Balloc>
 8008190:	9005      	str	r0, [sp, #20]
 8008192:	2800      	cmp	r0, #0
 8008194:	f43f af0c 	beq.w	8007fb0 <_strtod_l+0x490>
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	3202      	adds	r2, #2
 800819e:	f103 010c 	add.w	r1, r3, #12
 80081a2:	0092      	lsls	r2, r2, #2
 80081a4:	300c      	adds	r0, #12
 80081a6:	f7fe fd73 	bl	8006c90 <memcpy>
 80081aa:	ec4b ab10 	vmov	d0, sl, fp
 80081ae:	aa1a      	add	r2, sp, #104	; 0x68
 80081b0:	a919      	add	r1, sp, #100	; 0x64
 80081b2:	4620      	mov	r0, r4
 80081b4:	f002 fc18 	bl	800a9e8 <__d2b>
 80081b8:	ec4b ab18 	vmov	d8, sl, fp
 80081bc:	9018      	str	r0, [sp, #96]	; 0x60
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f aef6 	beq.w	8007fb0 <_strtod_l+0x490>
 80081c4:	2101      	movs	r1, #1
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 f962 	bl	800a490 <__i2b>
 80081cc:	4606      	mov	r6, r0
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f aeee 	beq.w	8007fb0 <_strtod_l+0x490>
 80081d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081d6:	9904      	ldr	r1, [sp, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfab      	itete	ge
 80081dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80081de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80081e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80081e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80081e6:	bfac      	ite	ge
 80081e8:	eb03 0902 	addge.w	r9, r3, r2
 80081ec:	1ad7      	sublt	r7, r2, r3
 80081ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80081f0:	eba3 0801 	sub.w	r8, r3, r1
 80081f4:	4490      	add	r8, r2
 80081f6:	4ba1      	ldr	r3, [pc, #644]	; (800847c <_strtod_l+0x95c>)
 80081f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80081fc:	4598      	cmp	r8, r3
 80081fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008202:	f280 80c7 	bge.w	8008394 <_strtod_l+0x874>
 8008206:	eba3 0308 	sub.w	r3, r3, r8
 800820a:	2b1f      	cmp	r3, #31
 800820c:	eba2 0203 	sub.w	r2, r2, r3
 8008210:	f04f 0101 	mov.w	r1, #1
 8008214:	f300 80b1 	bgt.w	800837a <_strtod_l+0x85a>
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	930d      	str	r3, [sp, #52]	; 0x34
 800821e:	2300      	movs	r3, #0
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	eb09 0802 	add.w	r8, r9, r2
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	45c1      	cmp	r9, r8
 800822a:	4417      	add	r7, r2
 800822c:	441f      	add	r7, r3
 800822e:	464b      	mov	r3, r9
 8008230:	bfa8      	it	ge
 8008232:	4643      	movge	r3, r8
 8008234:	42bb      	cmp	r3, r7
 8008236:	bfa8      	it	ge
 8008238:	463b      	movge	r3, r7
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfc2      	ittt	gt
 800823e:	eba8 0803 	subgt.w	r8, r8, r3
 8008242:	1aff      	subgt	r7, r7, r3
 8008244:	eba9 0903 	subgt.w	r9, r9, r3
 8008248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd17      	ble.n	800827e <_strtod_l+0x75e>
 800824e:	4631      	mov	r1, r6
 8008250:	461a      	mov	r2, r3
 8008252:	4620      	mov	r0, r4
 8008254:	f002 f9dc 	bl	800a610 <__pow5mult>
 8008258:	4606      	mov	r6, r0
 800825a:	2800      	cmp	r0, #0
 800825c:	f43f aea8 	beq.w	8007fb0 <_strtod_l+0x490>
 8008260:	4601      	mov	r1, r0
 8008262:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008264:	4620      	mov	r0, r4
 8008266:	f002 f929 	bl	800a4bc <__multiply>
 800826a:	900b      	str	r0, [sp, #44]	; 0x2c
 800826c:	2800      	cmp	r0, #0
 800826e:	f43f ae9f 	beq.w	8007fb0 <_strtod_l+0x490>
 8008272:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008274:	4620      	mov	r0, r4
 8008276:	f002 f809 	bl	800a28c <_Bfree>
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	9318      	str	r3, [sp, #96]	; 0x60
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	f300 808c 	bgt.w	800839e <_strtod_l+0x87e>
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	dd08      	ble.n	800829e <_strtod_l+0x77e>
 800828c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800828e:	9905      	ldr	r1, [sp, #20]
 8008290:	4620      	mov	r0, r4
 8008292:	f002 f9bd 	bl	800a610 <__pow5mult>
 8008296:	9005      	str	r0, [sp, #20]
 8008298:	2800      	cmp	r0, #0
 800829a:	f43f ae89 	beq.w	8007fb0 <_strtod_l+0x490>
 800829e:	2f00      	cmp	r7, #0
 80082a0:	dd08      	ble.n	80082b4 <_strtod_l+0x794>
 80082a2:	9905      	ldr	r1, [sp, #20]
 80082a4:	463a      	mov	r2, r7
 80082a6:	4620      	mov	r0, r4
 80082a8:	f002 fa0c 	bl	800a6c4 <__lshift>
 80082ac:	9005      	str	r0, [sp, #20]
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f ae7e 	beq.w	8007fb0 <_strtod_l+0x490>
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	dd08      	ble.n	80082cc <_strtod_l+0x7ac>
 80082ba:	4631      	mov	r1, r6
 80082bc:	464a      	mov	r2, r9
 80082be:	4620      	mov	r0, r4
 80082c0:	f002 fa00 	bl	800a6c4 <__lshift>
 80082c4:	4606      	mov	r6, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f ae72 	beq.w	8007fb0 <_strtod_l+0x490>
 80082cc:	9a05      	ldr	r2, [sp, #20]
 80082ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082d0:	4620      	mov	r0, r4
 80082d2:	f002 fa83 	bl	800a7dc <__mdiff>
 80082d6:	4605      	mov	r5, r0
 80082d8:	2800      	cmp	r0, #0
 80082da:	f43f ae69 	beq.w	8007fb0 <_strtod_l+0x490>
 80082de:	68c3      	ldr	r3, [r0, #12]
 80082e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80082e2:	2300      	movs	r3, #0
 80082e4:	60c3      	str	r3, [r0, #12]
 80082e6:	4631      	mov	r1, r6
 80082e8:	f002 fa5c 	bl	800a7a4 <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	da60      	bge.n	80083b2 <_strtod_l+0x892>
 80082f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f2:	ea53 030a 	orrs.w	r3, r3, sl
 80082f6:	f040 8082 	bne.w	80083fe <_strtod_l+0x8de>
 80082fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d17d      	bne.n	80083fe <_strtod_l+0x8de>
 8008302:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008306:	0d1b      	lsrs	r3, r3, #20
 8008308:	051b      	lsls	r3, r3, #20
 800830a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800830e:	d976      	bls.n	80083fe <_strtod_l+0x8de>
 8008310:	696b      	ldr	r3, [r5, #20]
 8008312:	b913      	cbnz	r3, 800831a <_strtod_l+0x7fa>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	2b01      	cmp	r3, #1
 8008318:	dd71      	ble.n	80083fe <_strtod_l+0x8de>
 800831a:	4629      	mov	r1, r5
 800831c:	2201      	movs	r2, #1
 800831e:	4620      	mov	r0, r4
 8008320:	f002 f9d0 	bl	800a6c4 <__lshift>
 8008324:	4631      	mov	r1, r6
 8008326:	4605      	mov	r5, r0
 8008328:	f002 fa3c 	bl	800a7a4 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	dd66      	ble.n	80083fe <_strtod_l+0x8de>
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	4a53      	ldr	r2, [pc, #332]	; (8008480 <_strtod_l+0x960>)
 8008334:	465b      	mov	r3, fp
 8008336:	2900      	cmp	r1, #0
 8008338:	f000 8081 	beq.w	800843e <_strtod_l+0x91e>
 800833c:	ea02 010b 	and.w	r1, r2, fp
 8008340:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008344:	dc7b      	bgt.n	800843e <_strtod_l+0x91e>
 8008346:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800834a:	f77f aea9 	ble.w	80080a0 <_strtod_l+0x580>
 800834e:	4b4d      	ldr	r3, [pc, #308]	; (8008484 <_strtod_l+0x964>)
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	2200      	movs	r2, #0
 8008356:	f7f8 f957 	bl	8000608 <__aeabi_dmul>
 800835a:	460b      	mov	r3, r1
 800835c:	4303      	orrs	r3, r0
 800835e:	bf08      	it	eq
 8008360:	2322      	moveq	r3, #34	; 0x22
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	bf08      	it	eq
 8008368:	6023      	streq	r3, [r4, #0]
 800836a:	e62b      	b.n	8007fc4 <_strtod_l+0x4a4>
 800836c:	f04f 32ff 	mov.w	r2, #4294967295
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	ea03 0a0a 	and.w	sl, r3, sl
 8008378:	e6e3      	b.n	8008142 <_strtod_l+0x622>
 800837a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800837e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008382:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008386:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800838a:	fa01 f308 	lsl.w	r3, r1, r8
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	910d      	str	r1, [sp, #52]	; 0x34
 8008392:	e746      	b.n	8008222 <_strtod_l+0x702>
 8008394:	2300      	movs	r3, #0
 8008396:	9308      	str	r3, [sp, #32]
 8008398:	2301      	movs	r3, #1
 800839a:	930d      	str	r3, [sp, #52]	; 0x34
 800839c:	e741      	b.n	8008222 <_strtod_l+0x702>
 800839e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083a0:	4642      	mov	r2, r8
 80083a2:	4620      	mov	r0, r4
 80083a4:	f002 f98e 	bl	800a6c4 <__lshift>
 80083a8:	9018      	str	r0, [sp, #96]	; 0x60
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f47f af6b 	bne.w	8008286 <_strtod_l+0x766>
 80083b0:	e5fe      	b.n	8007fb0 <_strtod_l+0x490>
 80083b2:	465f      	mov	r7, fp
 80083b4:	d16e      	bne.n	8008494 <_strtod_l+0x974>
 80083b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083bc:	b342      	cbz	r2, 8008410 <_strtod_l+0x8f0>
 80083be:	4a32      	ldr	r2, [pc, #200]	; (8008488 <_strtod_l+0x968>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d128      	bne.n	8008416 <_strtod_l+0x8f6>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	4651      	mov	r1, sl
 80083c8:	b1eb      	cbz	r3, 8008406 <_strtod_l+0x8e6>
 80083ca:	4b2d      	ldr	r3, [pc, #180]	; (8008480 <_strtod_l+0x960>)
 80083cc:	403b      	ands	r3, r7
 80083ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295
 80083d6:	d819      	bhi.n	800840c <_strtod_l+0x8ec>
 80083d8:	0d1b      	lsrs	r3, r3, #20
 80083da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	4299      	cmp	r1, r3
 80083e4:	d117      	bne.n	8008416 <_strtod_l+0x8f6>
 80083e6:	4b29      	ldr	r3, [pc, #164]	; (800848c <_strtod_l+0x96c>)
 80083e8:	429f      	cmp	r7, r3
 80083ea:	d102      	bne.n	80083f2 <_strtod_l+0x8d2>
 80083ec:	3101      	adds	r1, #1
 80083ee:	f43f addf 	beq.w	8007fb0 <_strtod_l+0x490>
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <_strtod_l+0x960>)
 80083f4:	403b      	ands	r3, r7
 80083f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80083fa:	f04f 0a00 	mov.w	sl, #0
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1a4      	bne.n	800834e <_strtod_l+0x82e>
 8008404:	e5de      	b.n	8007fc4 <_strtod_l+0x4a4>
 8008406:	f04f 33ff 	mov.w	r3, #4294967295
 800840a:	e7ea      	b.n	80083e2 <_strtod_l+0x8c2>
 800840c:	4613      	mov	r3, r2
 800840e:	e7e8      	b.n	80083e2 <_strtod_l+0x8c2>
 8008410:	ea53 030a 	orrs.w	r3, r3, sl
 8008414:	d08c      	beq.n	8008330 <_strtod_l+0x810>
 8008416:	9b08      	ldr	r3, [sp, #32]
 8008418:	b1db      	cbz	r3, 8008452 <_strtod_l+0x932>
 800841a:	423b      	tst	r3, r7
 800841c:	d0ef      	beq.n	80083fe <_strtod_l+0x8de>
 800841e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008420:	9a04      	ldr	r2, [sp, #16]
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	b1c3      	cbz	r3, 800845a <_strtod_l+0x93a>
 8008428:	f7ff fb5e 	bl	8007ae8 <sulp>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	ec51 0b18 	vmov	r0, r1, d8
 8008434:	f7f7 ff32 	bl	800029c <__adddf3>
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	e7df      	b.n	80083fe <_strtod_l+0x8de>
 800843e:	4013      	ands	r3, r2
 8008440:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008444:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008448:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800844c:	f04f 3aff 	mov.w	sl, #4294967295
 8008450:	e7d5      	b.n	80083fe <_strtod_l+0x8de>
 8008452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008454:	ea13 0f0a 	tst.w	r3, sl
 8008458:	e7e0      	b.n	800841c <_strtod_l+0x8fc>
 800845a:	f7ff fb45 	bl	8007ae8 <sulp>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	ec51 0b18 	vmov	r0, r1, d8
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	2200      	movs	r2, #0
 800846c:	2300      	movs	r3, #0
 800846e:	4682      	mov	sl, r0
 8008470:	468b      	mov	fp, r1
 8008472:	f7f8 fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8008476:	2800      	cmp	r0, #0
 8008478:	d0c1      	beq.n	80083fe <_strtod_l+0x8de>
 800847a:	e611      	b.n	80080a0 <_strtod_l+0x580>
 800847c:	fffffc02 	.word	0xfffffc02
 8008480:	7ff00000 	.word	0x7ff00000
 8008484:	39500000 	.word	0x39500000
 8008488:	000fffff 	.word	0x000fffff
 800848c:	7fefffff 	.word	0x7fefffff
 8008490:	0800b790 	.word	0x0800b790
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	f002 fb02 	bl	800aaa0 <__ratio>
 800849c:	ec59 8b10 	vmov	r8, r9, d0
 80084a0:	ee10 0a10 	vmov	r0, s0
 80084a4:	2200      	movs	r2, #0
 80084a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb28 	bl	8000b00 <__aeabi_dcmple>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d07a      	beq.n	80085aa <_strtod_l+0xa8a>
 80084b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04a      	beq.n	8008550 <_strtod_l+0xa30>
 80084ba:	4b95      	ldr	r3, [pc, #596]	; (8008710 <_strtod_l+0xbf0>)
 80084bc:	2200      	movs	r2, #0
 80084be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008710 <_strtod_l+0xbf0>
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	4b92      	ldr	r3, [pc, #584]	; (8008714 <_strtod_l+0xbf4>)
 80084cc:	403b      	ands	r3, r7
 80084ce:	930d      	str	r3, [sp, #52]	; 0x34
 80084d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084d2:	4b91      	ldr	r3, [pc, #580]	; (8008718 <_strtod_l+0xbf8>)
 80084d4:	429a      	cmp	r2, r3
 80084d6:	f040 80b0 	bne.w	800863a <_strtod_l+0xb1a>
 80084da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80084e2:	ec4b ab10 	vmov	d0, sl, fp
 80084e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084ea:	f002 fa01 	bl	800a8f0 <__ulp>
 80084ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084f2:	ec53 2b10 	vmov	r2, r3, d0
 80084f6:	f7f8 f887 	bl	8000608 <__aeabi_dmul>
 80084fa:	4652      	mov	r2, sl
 80084fc:	465b      	mov	r3, fp
 80084fe:	f7f7 fecd 	bl	800029c <__adddf3>
 8008502:	460b      	mov	r3, r1
 8008504:	4983      	ldr	r1, [pc, #524]	; (8008714 <_strtod_l+0xbf4>)
 8008506:	4a85      	ldr	r2, [pc, #532]	; (800871c <_strtod_l+0xbfc>)
 8008508:	4019      	ands	r1, r3
 800850a:	4291      	cmp	r1, r2
 800850c:	4682      	mov	sl, r0
 800850e:	d960      	bls.n	80085d2 <_strtod_l+0xab2>
 8008510:	ee18 3a90 	vmov	r3, s17
 8008514:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008518:	4293      	cmp	r3, r2
 800851a:	d104      	bne.n	8008526 <_strtod_l+0xa06>
 800851c:	ee18 3a10 	vmov	r3, s16
 8008520:	3301      	adds	r3, #1
 8008522:	f43f ad45 	beq.w	8007fb0 <_strtod_l+0x490>
 8008526:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008728 <_strtod_l+0xc08>
 800852a:	f04f 3aff 	mov.w	sl, #4294967295
 800852e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008530:	4620      	mov	r0, r4
 8008532:	f001 feab 	bl	800a28c <_Bfree>
 8008536:	9905      	ldr	r1, [sp, #20]
 8008538:	4620      	mov	r0, r4
 800853a:	f001 fea7 	bl	800a28c <_Bfree>
 800853e:	4631      	mov	r1, r6
 8008540:	4620      	mov	r0, r4
 8008542:	f001 fea3 	bl	800a28c <_Bfree>
 8008546:	4629      	mov	r1, r5
 8008548:	4620      	mov	r0, r4
 800854a:	f001 fe9f 	bl	800a28c <_Bfree>
 800854e:	e61a      	b.n	8008186 <_strtod_l+0x666>
 8008550:	f1ba 0f00 	cmp.w	sl, #0
 8008554:	d11b      	bne.n	800858e <_strtod_l+0xa6e>
 8008556:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800855a:	b9f3      	cbnz	r3, 800859a <_strtod_l+0xa7a>
 800855c:	4b6c      	ldr	r3, [pc, #432]	; (8008710 <_strtod_l+0xbf0>)
 800855e:	2200      	movs	r2, #0
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	f7f8 fac2 	bl	8000aec <__aeabi_dcmplt>
 8008568:	b9d0      	cbnz	r0, 80085a0 <_strtod_l+0xa80>
 800856a:	4640      	mov	r0, r8
 800856c:	4649      	mov	r1, r9
 800856e:	4b6c      	ldr	r3, [pc, #432]	; (8008720 <_strtod_l+0xc00>)
 8008570:	2200      	movs	r2, #0
 8008572:	f7f8 f849 	bl	8000608 <__aeabi_dmul>
 8008576:	4680      	mov	r8, r0
 8008578:	4689      	mov	r9, r1
 800857a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800857e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008582:	9315      	str	r3, [sp, #84]	; 0x54
 8008584:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008588:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800858c:	e79d      	b.n	80084ca <_strtod_l+0x9aa>
 800858e:	f1ba 0f01 	cmp.w	sl, #1
 8008592:	d102      	bne.n	800859a <_strtod_l+0xa7a>
 8008594:	2f00      	cmp	r7, #0
 8008596:	f43f ad83 	beq.w	80080a0 <_strtod_l+0x580>
 800859a:	4b62      	ldr	r3, [pc, #392]	; (8008724 <_strtod_l+0xc04>)
 800859c:	2200      	movs	r2, #0
 800859e:	e78e      	b.n	80084be <_strtod_l+0x99e>
 80085a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008720 <_strtod_l+0xc00>
 80085a4:	f04f 0800 	mov.w	r8, #0
 80085a8:	e7e7      	b.n	800857a <_strtod_l+0xa5a>
 80085aa:	4b5d      	ldr	r3, [pc, #372]	; (8008720 <_strtod_l+0xc00>)
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	2200      	movs	r2, #0
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b8:	4680      	mov	r8, r0
 80085ba:	4689      	mov	r9, r1
 80085bc:	b933      	cbnz	r3, 80085cc <_strtod_l+0xaac>
 80085be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085c2:	900e      	str	r0, [sp, #56]	; 0x38
 80085c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80085ca:	e7dd      	b.n	8008588 <_strtod_l+0xa68>
 80085cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80085d0:	e7f9      	b.n	80085c6 <_strtod_l+0xaa6>
 80085d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1a8      	bne.n	800852e <_strtod_l+0xa0e>
 80085dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085e2:	0d1b      	lsrs	r3, r3, #20
 80085e4:	051b      	lsls	r3, r3, #20
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d1a1      	bne.n	800852e <_strtod_l+0xa0e>
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f8 fb6b 	bl	8000cc8 <__aeabi_d2lz>
 80085f2:	f7f7 ffdb 	bl	80005ac <__aeabi_l2d>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	f7f7 fe4b 	bl	8000298 <__aeabi_dsub>
 8008602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008604:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008608:	ea43 030a 	orr.w	r3, r3, sl
 800860c:	4313      	orrs	r3, r2
 800860e:	4680      	mov	r8, r0
 8008610:	4689      	mov	r9, r1
 8008612:	d055      	beq.n	80086c0 <_strtod_l+0xba0>
 8008614:	a336      	add	r3, pc, #216	; (adr r3, 80086f0 <_strtod_l+0xbd0>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f8 fa67 	bl	8000aec <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	f47f acd0 	bne.w	8007fc4 <_strtod_l+0x4a4>
 8008624:	a334      	add	r3, pc, #208	; (adr r3, 80086f8 <_strtod_l+0xbd8>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f8 fa7b 	bl	8000b28 <__aeabi_dcmpgt>
 8008632:	2800      	cmp	r0, #0
 8008634:	f43f af7b 	beq.w	800852e <_strtod_l+0xa0e>
 8008638:	e4c4      	b.n	8007fc4 <_strtod_l+0x4a4>
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	b333      	cbz	r3, 800868c <_strtod_l+0xb6c>
 800863e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008640:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008644:	d822      	bhi.n	800868c <_strtod_l+0xb6c>
 8008646:	a32e      	add	r3, pc, #184	; (adr r3, 8008700 <_strtod_l+0xbe0>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fa56 	bl	8000b00 <__aeabi_dcmple>
 8008654:	b1a0      	cbz	r0, 8008680 <_strtod_l+0xb60>
 8008656:	4649      	mov	r1, r9
 8008658:	4640      	mov	r0, r8
 800865a:	f7f8 faad 	bl	8000bb8 <__aeabi_d2uiz>
 800865e:	2801      	cmp	r0, #1
 8008660:	bf38      	it	cc
 8008662:	2001      	movcc	r0, #1
 8008664:	f7f7 ff56 	bl	8000514 <__aeabi_ui2d>
 8008668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	bb23      	cbnz	r3, 80086ba <_strtod_l+0xb9a>
 8008670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008674:	9010      	str	r0, [sp, #64]	; 0x40
 8008676:	9311      	str	r3, [sp, #68]	; 0x44
 8008678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800867c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008684:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	9309      	str	r3, [sp, #36]	; 0x24
 800868c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008690:	eeb0 0a48 	vmov.f32	s0, s16
 8008694:	eef0 0a68 	vmov.f32	s1, s17
 8008698:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800869c:	f002 f928 	bl	800a8f0 <__ulp>
 80086a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086a4:	ec53 2b10 	vmov	r2, r3, d0
 80086a8:	f7f7 ffae 	bl	8000608 <__aeabi_dmul>
 80086ac:	ec53 2b18 	vmov	r2, r3, d8
 80086b0:	f7f7 fdf4 	bl	800029c <__adddf3>
 80086b4:	4682      	mov	sl, r0
 80086b6:	468b      	mov	fp, r1
 80086b8:	e78d      	b.n	80085d6 <_strtod_l+0xab6>
 80086ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80086be:	e7db      	b.n	8008678 <_strtod_l+0xb58>
 80086c0:	a311      	add	r3, pc, #68	; (adr r3, 8008708 <_strtod_l+0xbe8>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f7f8 fa11 	bl	8000aec <__aeabi_dcmplt>
 80086ca:	e7b2      	b.n	8008632 <_strtod_l+0xb12>
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	; 0x28
 80086d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	f7ff ba6b 	b.w	8007bb0 <_strtod_l+0x90>
 80086da:	2a65      	cmp	r2, #101	; 0x65
 80086dc:	f43f ab5f 	beq.w	8007d9e <_strtod_l+0x27e>
 80086e0:	2a45      	cmp	r2, #69	; 0x45
 80086e2:	f43f ab5c 	beq.w	8007d9e <_strtod_l+0x27e>
 80086e6:	2301      	movs	r3, #1
 80086e8:	f7ff bb94 	b.w	8007e14 <_strtod_l+0x2f4>
 80086ec:	f3af 8000 	nop.w
 80086f0:	94a03595 	.word	0x94a03595
 80086f4:	3fdfffff 	.word	0x3fdfffff
 80086f8:	35afe535 	.word	0x35afe535
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	ffc00000 	.word	0xffc00000
 8008704:	41dfffff 	.word	0x41dfffff
 8008708:	94a03595 	.word	0x94a03595
 800870c:	3fcfffff 	.word	0x3fcfffff
 8008710:	3ff00000 	.word	0x3ff00000
 8008714:	7ff00000 	.word	0x7ff00000
 8008718:	7fe00000 	.word	0x7fe00000
 800871c:	7c9fffff 	.word	0x7c9fffff
 8008720:	3fe00000 	.word	0x3fe00000
 8008724:	bff00000 	.word	0xbff00000
 8008728:	7fefffff 	.word	0x7fefffff

0800872c <_strtod_r>:
 800872c:	4b01      	ldr	r3, [pc, #4]	; (8008734 <_strtod_r+0x8>)
 800872e:	f7ff b9f7 	b.w	8007b20 <_strtod_l>
 8008732:	bf00      	nop
 8008734:	20000164 	.word	0x20000164

08008738 <_strtol_l.constprop.0>:
 8008738:	2b01      	cmp	r3, #1
 800873a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873e:	d001      	beq.n	8008744 <_strtol_l.constprop.0+0xc>
 8008740:	2b24      	cmp	r3, #36	; 0x24
 8008742:	d906      	bls.n	8008752 <_strtol_l.constprop.0+0x1a>
 8008744:	f7fe fa7a 	bl	8006c3c <__errno>
 8008748:	2316      	movs	r3, #22
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	2000      	movs	r0, #0
 800874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008752:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008838 <_strtol_l.constprop.0+0x100>
 8008756:	460d      	mov	r5, r1
 8008758:	462e      	mov	r6, r5
 800875a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800875e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008762:	f017 0708 	ands.w	r7, r7, #8
 8008766:	d1f7      	bne.n	8008758 <_strtol_l.constprop.0+0x20>
 8008768:	2c2d      	cmp	r4, #45	; 0x2d
 800876a:	d132      	bne.n	80087d2 <_strtol_l.constprop.0+0x9a>
 800876c:	782c      	ldrb	r4, [r5, #0]
 800876e:	2701      	movs	r7, #1
 8008770:	1cb5      	adds	r5, r6, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d05b      	beq.n	800882e <_strtol_l.constprop.0+0xf6>
 8008776:	2b10      	cmp	r3, #16
 8008778:	d109      	bne.n	800878e <_strtol_l.constprop.0+0x56>
 800877a:	2c30      	cmp	r4, #48	; 0x30
 800877c:	d107      	bne.n	800878e <_strtol_l.constprop.0+0x56>
 800877e:	782c      	ldrb	r4, [r5, #0]
 8008780:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008784:	2c58      	cmp	r4, #88	; 0x58
 8008786:	d14d      	bne.n	8008824 <_strtol_l.constprop.0+0xec>
 8008788:	786c      	ldrb	r4, [r5, #1]
 800878a:	2310      	movs	r3, #16
 800878c:	3502      	adds	r5, #2
 800878e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008792:	f108 38ff 	add.w	r8, r8, #4294967295
 8008796:	f04f 0c00 	mov.w	ip, #0
 800879a:	fbb8 f9f3 	udiv	r9, r8, r3
 800879e:	4666      	mov	r6, ip
 80087a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80087a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087a8:	f1be 0f09 	cmp.w	lr, #9
 80087ac:	d816      	bhi.n	80087dc <_strtol_l.constprop.0+0xa4>
 80087ae:	4674      	mov	r4, lr
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	dd24      	ble.n	80087fe <_strtol_l.constprop.0+0xc6>
 80087b4:	f1bc 0f00 	cmp.w	ip, #0
 80087b8:	db1e      	blt.n	80087f8 <_strtol_l.constprop.0+0xc0>
 80087ba:	45b1      	cmp	r9, r6
 80087bc:	d31c      	bcc.n	80087f8 <_strtol_l.constprop.0+0xc0>
 80087be:	d101      	bne.n	80087c4 <_strtol_l.constprop.0+0x8c>
 80087c0:	45a2      	cmp	sl, r4
 80087c2:	db19      	blt.n	80087f8 <_strtol_l.constprop.0+0xc0>
 80087c4:	fb06 4603 	mla	r6, r6, r3, r4
 80087c8:	f04f 0c01 	mov.w	ip, #1
 80087cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087d0:	e7e8      	b.n	80087a4 <_strtol_l.constprop.0+0x6c>
 80087d2:	2c2b      	cmp	r4, #43	; 0x2b
 80087d4:	bf04      	itt	eq
 80087d6:	782c      	ldrbeq	r4, [r5, #0]
 80087d8:	1cb5      	addeq	r5, r6, #2
 80087da:	e7ca      	b.n	8008772 <_strtol_l.constprop.0+0x3a>
 80087dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80087e0:	f1be 0f19 	cmp.w	lr, #25
 80087e4:	d801      	bhi.n	80087ea <_strtol_l.constprop.0+0xb2>
 80087e6:	3c37      	subs	r4, #55	; 0x37
 80087e8:	e7e2      	b.n	80087b0 <_strtol_l.constprop.0+0x78>
 80087ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80087ee:	f1be 0f19 	cmp.w	lr, #25
 80087f2:	d804      	bhi.n	80087fe <_strtol_l.constprop.0+0xc6>
 80087f4:	3c57      	subs	r4, #87	; 0x57
 80087f6:	e7db      	b.n	80087b0 <_strtol_l.constprop.0+0x78>
 80087f8:	f04f 3cff 	mov.w	ip, #4294967295
 80087fc:	e7e6      	b.n	80087cc <_strtol_l.constprop.0+0x94>
 80087fe:	f1bc 0f00 	cmp.w	ip, #0
 8008802:	da05      	bge.n	8008810 <_strtol_l.constprop.0+0xd8>
 8008804:	2322      	movs	r3, #34	; 0x22
 8008806:	6003      	str	r3, [r0, #0]
 8008808:	4646      	mov	r6, r8
 800880a:	b942      	cbnz	r2, 800881e <_strtol_l.constprop.0+0xe6>
 800880c:	4630      	mov	r0, r6
 800880e:	e79e      	b.n	800874e <_strtol_l.constprop.0+0x16>
 8008810:	b107      	cbz	r7, 8008814 <_strtol_l.constprop.0+0xdc>
 8008812:	4276      	negs	r6, r6
 8008814:	2a00      	cmp	r2, #0
 8008816:	d0f9      	beq.n	800880c <_strtol_l.constprop.0+0xd4>
 8008818:	f1bc 0f00 	cmp.w	ip, #0
 800881c:	d000      	beq.n	8008820 <_strtol_l.constprop.0+0xe8>
 800881e:	1e69      	subs	r1, r5, #1
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	e7f3      	b.n	800880c <_strtol_l.constprop.0+0xd4>
 8008824:	2430      	movs	r4, #48	; 0x30
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1b1      	bne.n	800878e <_strtol_l.constprop.0+0x56>
 800882a:	2308      	movs	r3, #8
 800882c:	e7af      	b.n	800878e <_strtol_l.constprop.0+0x56>
 800882e:	2c30      	cmp	r4, #48	; 0x30
 8008830:	d0a5      	beq.n	800877e <_strtol_l.constprop.0+0x46>
 8008832:	230a      	movs	r3, #10
 8008834:	e7ab      	b.n	800878e <_strtol_l.constprop.0+0x56>
 8008836:	bf00      	nop
 8008838:	0800b7b9 	.word	0x0800b7b9

0800883c <_strtol_r>:
 800883c:	f7ff bf7c 	b.w	8008738 <_strtol_l.constprop.0>

08008840 <__swbuf_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	460e      	mov	r6, r1
 8008844:	4614      	mov	r4, r2
 8008846:	4605      	mov	r5, r0
 8008848:	b118      	cbz	r0, 8008852 <__swbuf_r+0x12>
 800884a:	6983      	ldr	r3, [r0, #24]
 800884c:	b90b      	cbnz	r3, 8008852 <__swbuf_r+0x12>
 800884e:	f001 f84b 	bl	80098e8 <__sinit>
 8008852:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <__swbuf_r+0x98>)
 8008854:	429c      	cmp	r4, r3
 8008856:	d12b      	bne.n	80088b0 <__swbuf_r+0x70>
 8008858:	686c      	ldr	r4, [r5, #4]
 800885a:	69a3      	ldr	r3, [r4, #24]
 800885c:	60a3      	str	r3, [r4, #8]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	071a      	lsls	r2, r3, #28
 8008862:	d52f      	bpl.n	80088c4 <__swbuf_r+0x84>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	b36b      	cbz	r3, 80088c4 <__swbuf_r+0x84>
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	6820      	ldr	r0, [r4, #0]
 800886c:	1ac0      	subs	r0, r0, r3
 800886e:	6963      	ldr	r3, [r4, #20]
 8008870:	b2f6      	uxtb	r6, r6
 8008872:	4283      	cmp	r3, r0
 8008874:	4637      	mov	r7, r6
 8008876:	dc04      	bgt.n	8008882 <__swbuf_r+0x42>
 8008878:	4621      	mov	r1, r4
 800887a:	4628      	mov	r0, r5
 800887c:	f000 ffa0 	bl	80097c0 <_fflush_r>
 8008880:	bb30      	cbnz	r0, 80088d0 <__swbuf_r+0x90>
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	3b01      	subs	r3, #1
 8008886:	60a3      	str	r3, [r4, #8]
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	6022      	str	r2, [r4, #0]
 800888e:	701e      	strb	r6, [r3, #0]
 8008890:	6963      	ldr	r3, [r4, #20]
 8008892:	3001      	adds	r0, #1
 8008894:	4283      	cmp	r3, r0
 8008896:	d004      	beq.n	80088a2 <__swbuf_r+0x62>
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	07db      	lsls	r3, r3, #31
 800889c:	d506      	bpl.n	80088ac <__swbuf_r+0x6c>
 800889e:	2e0a      	cmp	r6, #10
 80088a0:	d104      	bne.n	80088ac <__swbuf_r+0x6c>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 ff8b 	bl	80097c0 <_fflush_r>
 80088aa:	b988      	cbnz	r0, 80088d0 <__swbuf_r+0x90>
 80088ac:	4638      	mov	r0, r7
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <__swbuf_r+0x9c>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d101      	bne.n	80088ba <__swbuf_r+0x7a>
 80088b6:	68ac      	ldr	r4, [r5, #8]
 80088b8:	e7cf      	b.n	800885a <__swbuf_r+0x1a>
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <__swbuf_r+0xa0>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	bf08      	it	eq
 80088c0:	68ec      	ldreq	r4, [r5, #12]
 80088c2:	e7ca      	b.n	800885a <__swbuf_r+0x1a>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 f80c 	bl	80088e4 <__swsetup_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0cb      	beq.n	8008868 <__swbuf_r+0x28>
 80088d0:	f04f 37ff 	mov.w	r7, #4294967295
 80088d4:	e7ea      	b.n	80088ac <__swbuf_r+0x6c>
 80088d6:	bf00      	nop
 80088d8:	0800b96c 	.word	0x0800b96c
 80088dc:	0800b98c 	.word	0x0800b98c
 80088e0:	0800b94c 	.word	0x0800b94c

080088e4 <__swsetup_r>:
 80088e4:	4b32      	ldr	r3, [pc, #200]	; (80089b0 <__swsetup_r+0xcc>)
 80088e6:	b570      	push	{r4, r5, r6, lr}
 80088e8:	681d      	ldr	r5, [r3, #0]
 80088ea:	4606      	mov	r6, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	b125      	cbz	r5, 80088fa <__swsetup_r+0x16>
 80088f0:	69ab      	ldr	r3, [r5, #24]
 80088f2:	b913      	cbnz	r3, 80088fa <__swsetup_r+0x16>
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fff7 	bl	80098e8 <__sinit>
 80088fa:	4b2e      	ldr	r3, [pc, #184]	; (80089b4 <__swsetup_r+0xd0>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	d10f      	bne.n	8008920 <__swsetup_r+0x3c>
 8008900:	686c      	ldr	r4, [r5, #4]
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008908:	0719      	lsls	r1, r3, #28
 800890a:	d42c      	bmi.n	8008966 <__swsetup_r+0x82>
 800890c:	06dd      	lsls	r5, r3, #27
 800890e:	d411      	bmi.n	8008934 <__swsetup_r+0x50>
 8008910:	2309      	movs	r3, #9
 8008912:	6033      	str	r3, [r6, #0]
 8008914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	e03e      	b.n	800899e <__swsetup_r+0xba>
 8008920:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <__swsetup_r+0xd4>)
 8008922:	429c      	cmp	r4, r3
 8008924:	d101      	bne.n	800892a <__swsetup_r+0x46>
 8008926:	68ac      	ldr	r4, [r5, #8]
 8008928:	e7eb      	b.n	8008902 <__swsetup_r+0x1e>
 800892a:	4b24      	ldr	r3, [pc, #144]	; (80089bc <__swsetup_r+0xd8>)
 800892c:	429c      	cmp	r4, r3
 800892e:	bf08      	it	eq
 8008930:	68ec      	ldreq	r4, [r5, #12]
 8008932:	e7e6      	b.n	8008902 <__swsetup_r+0x1e>
 8008934:	0758      	lsls	r0, r3, #29
 8008936:	d512      	bpl.n	800895e <__swsetup_r+0x7a>
 8008938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893a:	b141      	cbz	r1, 800894e <__swsetup_r+0x6a>
 800893c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008940:	4299      	cmp	r1, r3
 8008942:	d002      	beq.n	800894a <__swsetup_r+0x66>
 8008944:	4630      	mov	r0, r6
 8008946:	f002 f939 	bl	800abbc <_free_r>
 800894a:	2300      	movs	r3, #0
 800894c:	6363      	str	r3, [r4, #52]	; 0x34
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008954:	81a3      	strh	r3, [r4, #12]
 8008956:	2300      	movs	r3, #0
 8008958:	6063      	str	r3, [r4, #4]
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f043 0308 	orr.w	r3, r3, #8
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	b94b      	cbnz	r3, 800897e <__swsetup_r+0x9a>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d003      	beq.n	800897e <__swsetup_r+0x9a>
 8008976:	4621      	mov	r1, r4
 8008978:	4630      	mov	r0, r6
 800897a:	f001 fbed 	bl	800a158 <__smakebuf_r>
 800897e:	89a0      	ldrh	r0, [r4, #12]
 8008980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008984:	f010 0301 	ands.w	r3, r0, #1
 8008988:	d00a      	beq.n	80089a0 <__swsetup_r+0xbc>
 800898a:	2300      	movs	r3, #0
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6963      	ldr	r3, [r4, #20]
 8008990:	425b      	negs	r3, r3
 8008992:	61a3      	str	r3, [r4, #24]
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	b943      	cbnz	r3, 80089aa <__swsetup_r+0xc6>
 8008998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800899c:	d1ba      	bne.n	8008914 <__swsetup_r+0x30>
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	0781      	lsls	r1, r0, #30
 80089a2:	bf58      	it	pl
 80089a4:	6963      	ldrpl	r3, [r4, #20]
 80089a6:	60a3      	str	r3, [r4, #8]
 80089a8:	e7f4      	b.n	8008994 <__swsetup_r+0xb0>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e7f7      	b.n	800899e <__swsetup_r+0xba>
 80089ae:	bf00      	nop
 80089b0:	200000fc 	.word	0x200000fc
 80089b4:	0800b96c 	.word	0x0800b96c
 80089b8:	0800b98c 	.word	0x0800b98c
 80089bc:	0800b94c 	.word	0x0800b94c

080089c0 <quorem>:
 80089c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	6903      	ldr	r3, [r0, #16]
 80089c6:	690c      	ldr	r4, [r1, #16]
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	4607      	mov	r7, r0
 80089cc:	f2c0 8081 	blt.w	8008ad2 <quorem+0x112>
 80089d0:	3c01      	subs	r4, #1
 80089d2:	f101 0814 	add.w	r8, r1, #20
 80089d6:	f100 0514 	add.w	r5, r0, #20
 80089da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089e8:	3301      	adds	r3, #1
 80089ea:	429a      	cmp	r2, r3
 80089ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089f8:	d331      	bcc.n	8008a5e <quorem+0x9e>
 80089fa:	f04f 0e00 	mov.w	lr, #0
 80089fe:	4640      	mov	r0, r8
 8008a00:	46ac      	mov	ip, r5
 8008a02:	46f2      	mov	sl, lr
 8008a04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a08:	b293      	uxth	r3, r2
 8008a0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	ebaa 0303 	sub.w	r3, sl, r3
 8008a18:	f8dc a000 	ldr.w	sl, [ip]
 8008a1c:	0c12      	lsrs	r2, r2, #16
 8008a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a22:	fb06 e202 	mla	r2, r6, r2, lr
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	9b00      	ldr	r3, [sp, #0]
 8008a2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a38:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a3c:	4581      	cmp	r9, r0
 8008a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a42:	f84c 3b04 	str.w	r3, [ip], #4
 8008a46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a4a:	d2db      	bcs.n	8008a04 <quorem+0x44>
 8008a4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a50:	b92b      	cbnz	r3, 8008a5e <quorem+0x9e>
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	3b04      	subs	r3, #4
 8008a56:	429d      	cmp	r5, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	d32e      	bcc.n	8008aba <quorem+0xfa>
 8008a5c:	613c      	str	r4, [r7, #16]
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f001 fea0 	bl	800a7a4 <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	db24      	blt.n	8008ab2 <quorem+0xf2>
 8008a68:	3601      	adds	r6, #1
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f04f 0c00 	mov.w	ip, #0
 8008a70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a74:	f8d0 e000 	ldr.w	lr, [r0]
 8008a78:	b293      	uxth	r3, r2
 8008a7a:	ebac 0303 	sub.w	r3, ip, r3
 8008a7e:	0c12      	lsrs	r2, r2, #16
 8008a80:	fa13 f38e 	uxtah	r3, r3, lr
 8008a84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a92:	45c1      	cmp	r9, r8
 8008a94:	f840 3b04 	str.w	r3, [r0], #4
 8008a98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a9c:	d2e8      	bcs.n	8008a70 <quorem+0xb0>
 8008a9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aa6:	b922      	cbnz	r2, 8008ab2 <quorem+0xf2>
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	d30a      	bcc.n	8008ac6 <quorem+0x106>
 8008ab0:	613c      	str	r4, [r7, #16]
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	3b04      	subs	r3, #4
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d1cc      	bne.n	8008a5c <quorem+0x9c>
 8008ac2:	3c01      	subs	r4, #1
 8008ac4:	e7c7      	b.n	8008a56 <quorem+0x96>
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	d1f0      	bne.n	8008ab0 <quorem+0xf0>
 8008ace:	3c01      	subs	r4, #1
 8008ad0:	e7eb      	b.n	8008aaa <quorem+0xea>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e7ee      	b.n	8008ab4 <quorem+0xf4>
	...

08008ad8 <_dtoa_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b04 	vpush	{d8-d9}
 8008ae0:	ec57 6b10 	vmov	r6, r7, d0
 8008ae4:	b093      	sub	sp, #76	; 0x4c
 8008ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aec:	9106      	str	r1, [sp, #24]
 8008aee:	ee10 aa10 	vmov	sl, s0
 8008af2:	4604      	mov	r4, r0
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	930c      	str	r3, [sp, #48]	; 0x30
 8008af8:	46bb      	mov	fp, r7
 8008afa:	b975      	cbnz	r5, 8008b1a <_dtoa_r+0x42>
 8008afc:	2010      	movs	r0, #16
 8008afe:	f001 fb6b 	bl	800a1d8 <malloc>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6260      	str	r0, [r4, #36]	; 0x24
 8008b06:	b920      	cbnz	r0, 8008b12 <_dtoa_r+0x3a>
 8008b08:	4ba7      	ldr	r3, [pc, #668]	; (8008da8 <_dtoa_r+0x2d0>)
 8008b0a:	21ea      	movs	r1, #234	; 0xea
 8008b0c:	48a7      	ldr	r0, [pc, #668]	; (8008dac <_dtoa_r+0x2d4>)
 8008b0e:	f002 fb21 	bl	800b154 <__assert_func>
 8008b12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b16:	6005      	str	r5, [r0, #0]
 8008b18:	60c5      	str	r5, [r0, #12]
 8008b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	b151      	cbz	r1, 8008b36 <_dtoa_r+0x5e>
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	604a      	str	r2, [r1, #4]
 8008b24:	2301      	movs	r3, #1
 8008b26:	4093      	lsls	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f001 fbae 	bl	800a28c <_Bfree>
 8008b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	1e3b      	subs	r3, r7, #0
 8008b38:	bfaa      	itet	ge
 8008b3a:	2300      	movge	r3, #0
 8008b3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b40:	f8c8 3000 	strge.w	r3, [r8]
 8008b44:	4b9a      	ldr	r3, [pc, #616]	; (8008db0 <_dtoa_r+0x2d8>)
 8008b46:	bfbc      	itt	lt
 8008b48:	2201      	movlt	r2, #1
 8008b4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b4e:	ea33 030b 	bics.w	r3, r3, fp
 8008b52:	d11b      	bne.n	8008b8c <_dtoa_r+0xb4>
 8008b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b60:	4333      	orrs	r3, r6
 8008b62:	f000 8592 	beq.w	800968a <_dtoa_r+0xbb2>
 8008b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b68:	b963      	cbnz	r3, 8008b84 <_dtoa_r+0xac>
 8008b6a:	4b92      	ldr	r3, [pc, #584]	; (8008db4 <_dtoa_r+0x2dc>)
 8008b6c:	e022      	b.n	8008bb4 <_dtoa_r+0xdc>
 8008b6e:	4b92      	ldr	r3, [pc, #584]	; (8008db8 <_dtoa_r+0x2e0>)
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	3308      	adds	r3, #8
 8008b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	9801      	ldr	r0, [sp, #4]
 8008b7a:	b013      	add	sp, #76	; 0x4c
 8008b7c:	ecbd 8b04 	vpop	{d8-d9}
 8008b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b84:	4b8b      	ldr	r3, [pc, #556]	; (8008db4 <_dtoa_r+0x2dc>)
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	3303      	adds	r3, #3
 8008b8a:	e7f3      	b.n	8008b74 <_dtoa_r+0x9c>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4650      	mov	r0, sl
 8008b92:	4659      	mov	r1, fp
 8008b94:	f7f7 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b98:	ec4b ab19 	vmov	d9, sl, fp
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	b158      	cbz	r0, 8008bb8 <_dtoa_r+0xe0>
 8008ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 856b 	beq.w	8009684 <_dtoa_r+0xbac>
 8008bae:	4883      	ldr	r0, [pc, #524]	; (8008dbc <_dtoa_r+0x2e4>)
 8008bb0:	6018      	str	r0, [r3, #0]
 8008bb2:	1e43      	subs	r3, r0, #1
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	e7df      	b.n	8008b78 <_dtoa_r+0xa0>
 8008bb8:	ec4b ab10 	vmov	d0, sl, fp
 8008bbc:	aa10      	add	r2, sp, #64	; 0x40
 8008bbe:	a911      	add	r1, sp, #68	; 0x44
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f001 ff11 	bl	800a9e8 <__d2b>
 8008bc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bca:	ee08 0a10 	vmov	s16, r0
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	f000 8084 	beq.w	8008cdc <_dtoa_r+0x204>
 8008bd4:	ee19 3a90 	vmov	r3, s19
 8008bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008be0:	4656      	mov	r6, sl
 8008be2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008bee:	4b74      	ldr	r3, [pc, #464]	; (8008dc0 <_dtoa_r+0x2e8>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fb4f 	bl	8000298 <__aeabi_dsub>
 8008bfa:	a365      	add	r3, pc, #404	; (adr r3, 8008d90 <_dtoa_r+0x2b8>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fd02 	bl	8000608 <__aeabi_dmul>
 8008c04:	a364      	add	r3, pc, #400	; (adr r3, 8008d98 <_dtoa_r+0x2c0>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fb47 	bl	800029c <__adddf3>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	4628      	mov	r0, r5
 8008c12:	460f      	mov	r7, r1
 8008c14:	f7f7 fc8e 	bl	8000534 <__aeabi_i2d>
 8008c18:	a361      	add	r3, pc, #388	; (adr r3, 8008da0 <_dtoa_r+0x2c8>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fcf3 	bl	8000608 <__aeabi_dmul>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 fb37 	bl	800029c <__adddf3>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	f7f7 ff99 	bl	8000b68 <__aeabi_d2iz>
 8008c36:	2200      	movs	r2, #0
 8008c38:	9000      	str	r0, [sp, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff54 	bl	8000aec <__aeabi_dcmplt>
 8008c44:	b150      	cbz	r0, 8008c5c <_dtoa_r+0x184>
 8008c46:	9800      	ldr	r0, [sp, #0]
 8008c48:	f7f7 fc74 	bl	8000534 <__aeabi_i2d>
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	463b      	mov	r3, r7
 8008c50:	f7f7 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c54:	b910      	cbnz	r0, 8008c5c <_dtoa_r+0x184>
 8008c56:	9b00      	ldr	r3, [sp, #0]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	2b16      	cmp	r3, #22
 8008c60:	d85a      	bhi.n	8008d18 <_dtoa_r+0x240>
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	4b57      	ldr	r3, [pc, #348]	; (8008dc4 <_dtoa_r+0x2ec>)
 8008c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	ec51 0b19 	vmov	r0, r1, d9
 8008c72:	f7f7 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d050      	beq.n	8008d1c <_dtoa_r+0x244>
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	2300      	movs	r3, #0
 8008c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c86:	1b5d      	subs	r5, r3, r5
 8008c88:	1e6b      	subs	r3, r5, #1
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	bf45      	ittet	mi
 8008c8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c92:	9304      	strmi	r3, [sp, #16]
 8008c94:	2300      	movpl	r3, #0
 8008c96:	2300      	movmi	r3, #0
 8008c98:	bf4c      	ite	mi
 8008c9a:	9305      	strmi	r3, [sp, #20]
 8008c9c:	9304      	strpl	r3, [sp, #16]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	db3d      	blt.n	8008d20 <_dtoa_r+0x248>
 8008ca4:	9b05      	ldr	r3, [sp, #20]
 8008ca6:	9a00      	ldr	r2, [sp, #0]
 8008ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8008caa:	4413      	add	r3, r2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	f200 8089 	bhi.w	8008dcc <_dtoa_r+0x2f4>
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	bfc4      	itt	gt
 8008cbe:	3b04      	subgt	r3, #4
 8008cc0:	9306      	strgt	r3, [sp, #24]
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cc8:	bfcc      	ite	gt
 8008cca:	2500      	movgt	r5, #0
 8008ccc:	2501      	movle	r5, #1
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	f200 8087 	bhi.w	8008de2 <_dtoa_r+0x30a>
 8008cd4:	e8df f003 	tbb	[pc, r3]
 8008cd8:	59383a2d 	.word	0x59383a2d
 8008cdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ce0:	441d      	add	r5, r3
 8008ce2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	bfc1      	itttt	gt
 8008cea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008cf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cfa:	bfda      	itte	le
 8008cfc:	f1c3 0320 	rsble	r3, r3, #32
 8008d00:	fa06 f003 	lslle.w	r0, r6, r3
 8008d04:	4318      	orrgt	r0, r3
 8008d06:	f7f7 fc05 	bl	8000514 <__aeabi_ui2d>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d12:	3d01      	subs	r5, #1
 8008d14:	930e      	str	r3, [sp, #56]	; 0x38
 8008d16:	e76a      	b.n	8008bee <_dtoa_r+0x116>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e7b2      	b.n	8008c82 <_dtoa_r+0x1aa>
 8008d1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d1e:	e7b1      	b.n	8008c84 <_dtoa_r+0x1ac>
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	9a00      	ldr	r2, [sp, #0]
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	4253      	negs	r3, r2
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d30:	e7bf      	b.n	8008cb2 <_dtoa_r+0x1da>
 8008d32:	2300      	movs	r3, #0
 8008d34:	9308      	str	r3, [sp, #32]
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dc55      	bgt.n	8008de8 <_dtoa_r+0x310>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d42:	461a      	mov	r2, r3
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	e00c      	b.n	8008d62 <_dtoa_r+0x28a>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7f3      	b.n	8008d34 <_dtoa_r+0x25c>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d50:	9308      	str	r3, [sp, #32]
 8008d52:	9b00      	ldr	r3, [sp, #0]
 8008d54:	4413      	add	r3, r2
 8008d56:	9302      	str	r3, [sp, #8]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	bfb8      	it	lt
 8008d60:	2301      	movlt	r3, #1
 8008d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d64:	2200      	movs	r2, #0
 8008d66:	6042      	str	r2, [r0, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	f102 0614 	add.w	r6, r2, #20
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	6841      	ldr	r1, [r0, #4]
 8008d72:	d93d      	bls.n	8008df0 <_dtoa_r+0x318>
 8008d74:	4620      	mov	r0, r4
 8008d76:	f001 fa49 	bl	800a20c <_Balloc>
 8008d7a:	9001      	str	r0, [sp, #4]
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d13b      	bne.n	8008df8 <_dtoa_r+0x320>
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <_dtoa_r+0x2f0>)
 8008d82:	4602      	mov	r2, r0
 8008d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d88:	e6c0      	b.n	8008b0c <_dtoa_r+0x34>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7df      	b.n	8008d4e <_dtoa_r+0x276>
 8008d8e:	bf00      	nop
 8008d90:	636f4361 	.word	0x636f4361
 8008d94:	3fd287a7 	.word	0x3fd287a7
 8008d98:	8b60c8b3 	.word	0x8b60c8b3
 8008d9c:	3fc68a28 	.word	0x3fc68a28
 8008da0:	509f79fb 	.word	0x509f79fb
 8008da4:	3fd34413 	.word	0x3fd34413
 8008da8:	0800b8c6 	.word	0x0800b8c6
 8008dac:	0800b8dd 	.word	0x0800b8dd
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	0800b8c2 	.word	0x0800b8c2
 8008db8:	0800b8b9 	.word	0x0800b8b9
 8008dbc:	0800b73d 	.word	0x0800b73d
 8008dc0:	3ff80000 	.word	0x3ff80000
 8008dc4:	0800bab0 	.word	0x0800bab0
 8008dc8:	0800b938 	.word	0x0800b938
 8008dcc:	2501      	movs	r5, #1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	9508      	str	r5, [sp, #32]
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2312      	movs	r3, #18
 8008de0:	e7b0      	b.n	8008d44 <_dtoa_r+0x26c>
 8008de2:	2301      	movs	r3, #1
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	e7f5      	b.n	8008dd4 <_dtoa_r+0x2fc>
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dee:	e7b8      	b.n	8008d62 <_dtoa_r+0x28a>
 8008df0:	3101      	adds	r1, #1
 8008df2:	6041      	str	r1, [r0, #4]
 8008df4:	0052      	lsls	r2, r2, #1
 8008df6:	e7b8      	b.n	8008d6a <_dtoa_r+0x292>
 8008df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfa:	9a01      	ldr	r2, [sp, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b0e      	cmp	r3, #14
 8008e02:	f200 809d 	bhi.w	8008f40 <_dtoa_r+0x468>
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	f000 809a 	beq.w	8008f40 <_dtoa_r+0x468>
 8008e0c:	9b00      	ldr	r3, [sp, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dd32      	ble.n	8008e78 <_dtoa_r+0x3a0>
 8008e12:	4ab7      	ldr	r2, [pc, #732]	; (80090f0 <_dtoa_r+0x618>)
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e20:	9b00      	ldr	r3, [sp, #0]
 8008e22:	05d8      	lsls	r0, r3, #23
 8008e24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e28:	d516      	bpl.n	8008e58 <_dtoa_r+0x380>
 8008e2a:	4bb2      	ldr	r3, [pc, #712]	; (80090f4 <_dtoa_r+0x61c>)
 8008e2c:	ec51 0b19 	vmov	r0, r1, d9
 8008e30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e34:	f7f7 fd12 	bl	800085c <__aeabi_ddiv>
 8008e38:	f007 070f 	and.w	r7, r7, #15
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	468b      	mov	fp, r1
 8008e40:	2503      	movs	r5, #3
 8008e42:	4eac      	ldr	r6, [pc, #688]	; (80090f4 <_dtoa_r+0x61c>)
 8008e44:	b957      	cbnz	r7, 8008e5c <_dtoa_r+0x384>
 8008e46:	4642      	mov	r2, r8
 8008e48:	464b      	mov	r3, r9
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fd05 	bl	800085c <__aeabi_ddiv>
 8008e52:	4682      	mov	sl, r0
 8008e54:	468b      	mov	fp, r1
 8008e56:	e028      	b.n	8008eaa <_dtoa_r+0x3d2>
 8008e58:	2502      	movs	r5, #2
 8008e5a:	e7f2      	b.n	8008e42 <_dtoa_r+0x36a>
 8008e5c:	07f9      	lsls	r1, r7, #31
 8008e5e:	d508      	bpl.n	8008e72 <_dtoa_r+0x39a>
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e68:	f7f7 fbce 	bl	8000608 <__aeabi_dmul>
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	107f      	asrs	r7, r7, #1
 8008e74:	3608      	adds	r6, #8
 8008e76:	e7e5      	b.n	8008e44 <_dtoa_r+0x36c>
 8008e78:	f000 809b 	beq.w	8008fb2 <_dtoa_r+0x4da>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	4f9d      	ldr	r7, [pc, #628]	; (80090f4 <_dtoa_r+0x61c>)
 8008e80:	425e      	negs	r6, r3
 8008e82:	4b9b      	ldr	r3, [pc, #620]	; (80090f0 <_dtoa_r+0x618>)
 8008e84:	f006 020f 	and.w	r2, r6, #15
 8008e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	ec51 0b19 	vmov	r0, r1, d9
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	1136      	asrs	r6, r6, #4
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2502      	movs	r5, #2
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d17a      	bne.n	8008f9c <_dtoa_r+0x4c4>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1d3      	bne.n	8008e52 <_dtoa_r+0x37a>
 8008eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8082 	beq.w	8008fb6 <_dtoa_r+0x4de>
 8008eb2:	4b91      	ldr	r3, [pc, #580]	; (80090f8 <_dtoa_r+0x620>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	4659      	mov	r1, fp
 8008eba:	f7f7 fe17 	bl	8000aec <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d079      	beq.n	8008fb6 <_dtoa_r+0x4de>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d076      	beq.n	8008fb6 <_dtoa_r+0x4de>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd36      	ble.n	8008f3c <_dtoa_r+0x464>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	1e5f      	subs	r7, r3, #1
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4b88      	ldr	r3, [pc, #544]	; (80090fc <_dtoa_r+0x624>)
 8008eda:	f7f7 fb95 	bl	8000608 <__aeabi_dmul>
 8008ede:	9e02      	ldr	r6, [sp, #8]
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7f7 fb24 	bl	8000534 <__aeabi_i2d>
 8008eec:	4652      	mov	r2, sl
 8008eee:	465b      	mov	r3, fp
 8008ef0:	f7f7 fb8a 	bl	8000608 <__aeabi_dmul>
 8008ef4:	4b82      	ldr	r3, [pc, #520]	; (8009100 <_dtoa_r+0x628>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f7f7 f9d0 	bl	800029c <__adddf3>
 8008efc:	46d0      	mov	r8, sl
 8008efe:	46d9      	mov	r9, fp
 8008f00:	4682      	mov	sl, r0
 8008f02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	d158      	bne.n	8008fbc <_dtoa_r+0x4e4>
 8008f0a:	4b7e      	ldr	r3, [pc, #504]	; (8009104 <_dtoa_r+0x62c>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 f9c1 	bl	8000298 <__aeabi_dsub>
 8008f16:	4652      	mov	r2, sl
 8008f18:	465b      	mov	r3, fp
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	f7f7 fe03 	bl	8000b28 <__aeabi_dcmpgt>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f040 8295 	bne.w	8009452 <_dtoa_r+0x97a>
 8008f28:	4652      	mov	r2, sl
 8008f2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fddb 	bl	8000aec <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f040 8289 	bne.w	800944e <_dtoa_r+0x976>
 8008f3c:	ec5b ab19 	vmov	sl, fp, d9
 8008f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f2c0 8148 	blt.w	80091d8 <_dtoa_r+0x700>
 8008f48:	9a00      	ldr	r2, [sp, #0]
 8008f4a:	2a0e      	cmp	r2, #14
 8008f4c:	f300 8144 	bgt.w	80091d8 <_dtoa_r+0x700>
 8008f50:	4b67      	ldr	r3, [pc, #412]	; (80090f0 <_dtoa_r+0x618>)
 8008f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f280 80d5 	bge.w	800910c <_dtoa_r+0x634>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f300 80d1 	bgt.w	800910c <_dtoa_r+0x634>
 8008f6a:	f040 826f 	bne.w	800944c <_dtoa_r+0x974>
 8008f6e:	4b65      	ldr	r3, [pc, #404]	; (8009104 <_dtoa_r+0x62c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 fb47 	bl	8000608 <__aeabi_dmul>
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	f7f7 fdc9 	bl	8000b14 <__aeabi_dcmpge>
 8008f82:	9e03      	ldr	r6, [sp, #12]
 8008f84:	4637      	mov	r7, r6
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f040 8245 	bne.w	8009416 <_dtoa_r+0x93e>
 8008f8c:	9d01      	ldr	r5, [sp, #4]
 8008f8e:	2331      	movs	r3, #49	; 0x31
 8008f90:	f805 3b01 	strb.w	r3, [r5], #1
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	e240      	b.n	800941e <_dtoa_r+0x946>
 8008f9c:	07f2      	lsls	r2, r6, #31
 8008f9e:	d505      	bpl.n	8008fac <_dtoa_r+0x4d4>
 8008fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa4:	f7f7 fb30 	bl	8000608 <__aeabi_dmul>
 8008fa8:	3501      	adds	r5, #1
 8008faa:	2301      	movs	r3, #1
 8008fac:	1076      	asrs	r6, r6, #1
 8008fae:	3708      	adds	r7, #8
 8008fb0:	e777      	b.n	8008ea2 <_dtoa_r+0x3ca>
 8008fb2:	2502      	movs	r5, #2
 8008fb4:	e779      	b.n	8008eaa <_dtoa_r+0x3d2>
 8008fb6:	9f00      	ldr	r7, [sp, #0]
 8008fb8:	9e03      	ldr	r6, [sp, #12]
 8008fba:	e794      	b.n	8008ee6 <_dtoa_r+0x40e>
 8008fbc:	9901      	ldr	r1, [sp, #4]
 8008fbe:	4b4c      	ldr	r3, [pc, #304]	; (80090f0 <_dtoa_r+0x618>)
 8008fc0:	4431      	add	r1, r6
 8008fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8008fc4:	9908      	ldr	r1, [sp, #32]
 8008fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d043      	beq.n	800905a <_dtoa_r+0x582>
 8008fd2:	494d      	ldr	r1, [pc, #308]	; (8009108 <_dtoa_r+0x630>)
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f7 fc41 	bl	800085c <__aeabi_ddiv>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 f95b 	bl	8000298 <__aeabi_dsub>
 8008fe2:	9d01      	ldr	r5, [sp, #4]
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	468b      	mov	fp, r1
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7f7 fdbc 	bl	8000b68 <__aeabi_d2iz>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	f7f7 fa9f 	bl	8000534 <__aeabi_i2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 f94b 	bl	8000298 <__aeabi_dsub>
 8009002:	3630      	adds	r6, #48	; 0x30
 8009004:	f805 6b01 	strb.w	r6, [r5], #1
 8009008:	4652      	mov	r2, sl
 800900a:	465b      	mov	r3, fp
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	f7f7 fd6c 	bl	8000aec <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d163      	bne.n	80090e0 <_dtoa_r+0x608>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	4936      	ldr	r1, [pc, #216]	; (80090f8 <_dtoa_r+0x620>)
 800901e:	2000      	movs	r0, #0
 8009020:	f7f7 f93a 	bl	8000298 <__aeabi_dsub>
 8009024:	4652      	mov	r2, sl
 8009026:	465b      	mov	r3, fp
 8009028:	f7f7 fd60 	bl	8000aec <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 80b5 	bne.w	800919c <_dtoa_r+0x6c4>
 8009032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009034:	429d      	cmp	r5, r3
 8009036:	d081      	beq.n	8008f3c <_dtoa_r+0x464>
 8009038:	4b30      	ldr	r3, [pc, #192]	; (80090fc <_dtoa_r+0x624>)
 800903a:	2200      	movs	r2, #0
 800903c:	4650      	mov	r0, sl
 800903e:	4659      	mov	r1, fp
 8009040:	f7f7 fae2 	bl	8000608 <__aeabi_dmul>
 8009044:	4b2d      	ldr	r3, [pc, #180]	; (80090fc <_dtoa_r+0x624>)
 8009046:	4682      	mov	sl, r0
 8009048:	468b      	mov	fp, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	2200      	movs	r2, #0
 8009050:	f7f7 fada 	bl	8000608 <__aeabi_dmul>
 8009054:	4680      	mov	r8, r0
 8009056:	4689      	mov	r9, r1
 8009058:	e7c6      	b.n	8008fe8 <_dtoa_r+0x510>
 800905a:	4650      	mov	r0, sl
 800905c:	4659      	mov	r1, fp
 800905e:	f7f7 fad3 	bl	8000608 <__aeabi_dmul>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	9d01      	ldr	r5, [sp, #4]
 8009066:	930f      	str	r3, [sp, #60]	; 0x3c
 8009068:	4682      	mov	sl, r0
 800906a:	468b      	mov	fp, r1
 800906c:	4649      	mov	r1, r9
 800906e:	4640      	mov	r0, r8
 8009070:	f7f7 fd7a 	bl	8000b68 <__aeabi_d2iz>
 8009074:	4606      	mov	r6, r0
 8009076:	f7f7 fa5d 	bl	8000534 <__aeabi_i2d>
 800907a:	3630      	adds	r6, #48	; 0x30
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 f908 	bl	8000298 <__aeabi_dsub>
 8009088:	f805 6b01 	strb.w	r6, [r5], #1
 800908c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908e:	429d      	cmp	r5, r3
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	d124      	bne.n	80090e4 <_dtoa_r+0x60c>
 800909a:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <_dtoa_r+0x630>)
 800909c:	4650      	mov	r0, sl
 800909e:	4659      	mov	r1, fp
 80090a0:	f7f7 f8fc 	bl	800029c <__adddf3>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d173      	bne.n	800919c <_dtoa_r+0x6c4>
 80090b4:	4652      	mov	r2, sl
 80090b6:	465b      	mov	r3, fp
 80090b8:	4913      	ldr	r1, [pc, #76]	; (8009108 <_dtoa_r+0x630>)
 80090ba:	2000      	movs	r0, #0
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f7f7 fd10 	bl	8000aec <__aeabi_dcmplt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f af35 	beq.w	8008f3c <_dtoa_r+0x464>
 80090d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090d4:	1e6b      	subs	r3, r5, #1
 80090d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d0f8      	beq.n	80090d2 <_dtoa_r+0x5fa>
 80090e0:	9700      	str	r7, [sp, #0]
 80090e2:	e049      	b.n	8009178 <_dtoa_r+0x6a0>
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <_dtoa_r+0x624>)
 80090e6:	f7f7 fa8f 	bl	8000608 <__aeabi_dmul>
 80090ea:	4680      	mov	r8, r0
 80090ec:	4689      	mov	r9, r1
 80090ee:	e7bd      	b.n	800906c <_dtoa_r+0x594>
 80090f0:	0800bab0 	.word	0x0800bab0
 80090f4:	0800ba88 	.word	0x0800ba88
 80090f8:	3ff00000 	.word	0x3ff00000
 80090fc:	40240000 	.word	0x40240000
 8009100:	401c0000 	.word	0x401c0000
 8009104:	40140000 	.word	0x40140000
 8009108:	3fe00000 	.word	0x3fe00000
 800910c:	9d01      	ldr	r5, [sp, #4]
 800910e:	4656      	mov	r6, sl
 8009110:	465f      	mov	r7, fp
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 fb9f 	bl	800085c <__aeabi_ddiv>
 800911e:	f7f7 fd23 	bl	8000b68 <__aeabi_d2iz>
 8009122:	4682      	mov	sl, r0
 8009124:	f7f7 fa06 	bl	8000534 <__aeabi_i2d>
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800913c:	f7f7 f8ac 	bl	8000298 <__aeabi_dsub>
 8009140:	f805 6b01 	strb.w	r6, [r5], #1
 8009144:	9e01      	ldr	r6, [sp, #4]
 8009146:	9f03      	ldr	r7, [sp, #12]
 8009148:	1bae      	subs	r6, r5, r6
 800914a:	42b7      	cmp	r7, r6
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	d135      	bne.n	80091be <_dtoa_r+0x6e6>
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	4642      	mov	r2, r8
 8009158:	464b      	mov	r3, r9
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	f7f7 fce3 	bl	8000b28 <__aeabi_dcmpgt>
 8009162:	b9d0      	cbnz	r0, 800919a <_dtoa_r+0x6c2>
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009170:	b110      	cbz	r0, 8009178 <_dtoa_r+0x6a0>
 8009172:	f01a 0f01 	tst.w	sl, #1
 8009176:	d110      	bne.n	800919a <_dtoa_r+0x6c2>
 8009178:	4620      	mov	r0, r4
 800917a:	ee18 1a10 	vmov	r1, s16
 800917e:	f001 f885 	bl	800a28c <_Bfree>
 8009182:	2300      	movs	r3, #0
 8009184:	9800      	ldr	r0, [sp, #0]
 8009186:	702b      	strb	r3, [r5, #0]
 8009188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800918a:	3001      	adds	r0, #1
 800918c:	6018      	str	r0, [r3, #0]
 800918e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009190:	2b00      	cmp	r3, #0
 8009192:	f43f acf1 	beq.w	8008b78 <_dtoa_r+0xa0>
 8009196:	601d      	str	r5, [r3, #0]
 8009198:	e4ee      	b.n	8008b78 <_dtoa_r+0xa0>
 800919a:	9f00      	ldr	r7, [sp, #0]
 800919c:	462b      	mov	r3, r5
 800919e:	461d      	mov	r5, r3
 80091a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a4:	2a39      	cmp	r2, #57	; 0x39
 80091a6:	d106      	bne.n	80091b6 <_dtoa_r+0x6de>
 80091a8:	9a01      	ldr	r2, [sp, #4]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d1f7      	bne.n	800919e <_dtoa_r+0x6c6>
 80091ae:	9901      	ldr	r1, [sp, #4]
 80091b0:	2230      	movs	r2, #48	; 0x30
 80091b2:	3701      	adds	r7, #1
 80091b4:	700a      	strb	r2, [r1, #0]
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	3201      	adds	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e790      	b.n	80090e0 <_dtoa_r+0x608>
 80091be:	4ba6      	ldr	r3, [pc, #664]	; (8009458 <_dtoa_r+0x980>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 fa21 	bl	8000608 <__aeabi_dmul>
 80091c6:	2200      	movs	r2, #0
 80091c8:	2300      	movs	r3, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	f7f7 fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d09d      	beq.n	8009112 <_dtoa_r+0x63a>
 80091d6:	e7cf      	b.n	8009178 <_dtoa_r+0x6a0>
 80091d8:	9a08      	ldr	r2, [sp, #32]
 80091da:	2a00      	cmp	r2, #0
 80091dc:	f000 80d7 	beq.w	800938e <_dtoa_r+0x8b6>
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	2a01      	cmp	r2, #1
 80091e4:	f300 80ba 	bgt.w	800935c <_dtoa_r+0x884>
 80091e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	f000 80b2 	beq.w	8009354 <_dtoa_r+0x87c>
 80091f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091f4:	9e07      	ldr	r6, [sp, #28]
 80091f6:	9d04      	ldr	r5, [sp, #16]
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	441a      	add	r2, r3
 80091fc:	9204      	str	r2, [sp, #16]
 80091fe:	9a05      	ldr	r2, [sp, #20]
 8009200:	2101      	movs	r1, #1
 8009202:	441a      	add	r2, r3
 8009204:	4620      	mov	r0, r4
 8009206:	9205      	str	r2, [sp, #20]
 8009208:	f001 f942 	bl	800a490 <__i2b>
 800920c:	4607      	mov	r7, r0
 800920e:	2d00      	cmp	r5, #0
 8009210:	dd0c      	ble.n	800922c <_dtoa_r+0x754>
 8009212:	9b05      	ldr	r3, [sp, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd09      	ble.n	800922c <_dtoa_r+0x754>
 8009218:	42ab      	cmp	r3, r5
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	bfa8      	it	ge
 800921e:	462b      	movge	r3, r5
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	9204      	str	r2, [sp, #16]
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	1aed      	subs	r5, r5, r3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	b31b      	cbz	r3, 8009278 <_dtoa_r+0x7a0>
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 80af 	beq.w	8009396 <_dtoa_r+0x8be>
 8009238:	2e00      	cmp	r6, #0
 800923a:	dd13      	ble.n	8009264 <_dtoa_r+0x78c>
 800923c:	4639      	mov	r1, r7
 800923e:	4632      	mov	r2, r6
 8009240:	4620      	mov	r0, r4
 8009242:	f001 f9e5 	bl	800a610 <__pow5mult>
 8009246:	ee18 2a10 	vmov	r2, s16
 800924a:	4601      	mov	r1, r0
 800924c:	4607      	mov	r7, r0
 800924e:	4620      	mov	r0, r4
 8009250:	f001 f934 	bl	800a4bc <__multiply>
 8009254:	ee18 1a10 	vmov	r1, s16
 8009258:	4680      	mov	r8, r0
 800925a:	4620      	mov	r0, r4
 800925c:	f001 f816 	bl	800a28c <_Bfree>
 8009260:	ee08 8a10 	vmov	s16, r8
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	1b9a      	subs	r2, r3, r6
 8009268:	d006      	beq.n	8009278 <_dtoa_r+0x7a0>
 800926a:	ee18 1a10 	vmov	r1, s16
 800926e:	4620      	mov	r0, r4
 8009270:	f001 f9ce 	bl	800a610 <__pow5mult>
 8009274:	ee08 0a10 	vmov	s16, r0
 8009278:	2101      	movs	r1, #1
 800927a:	4620      	mov	r0, r4
 800927c:	f001 f908 	bl	800a490 <__i2b>
 8009280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	4606      	mov	r6, r0
 8009286:	f340 8088 	ble.w	800939a <_dtoa_r+0x8c2>
 800928a:	461a      	mov	r2, r3
 800928c:	4601      	mov	r1, r0
 800928e:	4620      	mov	r0, r4
 8009290:	f001 f9be 	bl	800a610 <__pow5mult>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	2b01      	cmp	r3, #1
 8009298:	4606      	mov	r6, r0
 800929a:	f340 8081 	ble.w	80093a0 <_dtoa_r+0x8c8>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	6933      	ldr	r3, [r6, #16]
 80092a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092a8:	6918      	ldr	r0, [r3, #16]
 80092aa:	f001 f8a1 	bl	800a3f0 <__hi0bits>
 80092ae:	f1c0 0020 	rsb	r0, r0, #32
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	4418      	add	r0, r3
 80092b6:	f010 001f 	ands.w	r0, r0, #31
 80092ba:	f000 8092 	beq.w	80093e2 <_dtoa_r+0x90a>
 80092be:	f1c0 0320 	rsb	r3, r0, #32
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	f340 808a 	ble.w	80093dc <_dtoa_r+0x904>
 80092c8:	f1c0 001c 	rsb	r0, r0, #28
 80092cc:	9b04      	ldr	r3, [sp, #16]
 80092ce:	4403      	add	r3, r0
 80092d0:	9304      	str	r3, [sp, #16]
 80092d2:	9b05      	ldr	r3, [sp, #20]
 80092d4:	4403      	add	r3, r0
 80092d6:	4405      	add	r5, r0
 80092d8:	9305      	str	r3, [sp, #20]
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd07      	ble.n	80092f0 <_dtoa_r+0x818>
 80092e0:	ee18 1a10 	vmov	r1, s16
 80092e4:	461a      	mov	r2, r3
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 f9ec 	bl	800a6c4 <__lshift>
 80092ec:	ee08 0a10 	vmov	s16, r0
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd05      	ble.n	8009302 <_dtoa_r+0x82a>
 80092f6:	4631      	mov	r1, r6
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f001 f9e2 	bl	800a6c4 <__lshift>
 8009300:	4606      	mov	r6, r0
 8009302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d06e      	beq.n	80093e6 <_dtoa_r+0x90e>
 8009308:	ee18 0a10 	vmov	r0, s16
 800930c:	4631      	mov	r1, r6
 800930e:	f001 fa49 	bl	800a7a4 <__mcmp>
 8009312:	2800      	cmp	r0, #0
 8009314:	da67      	bge.n	80093e6 <_dtoa_r+0x90e>
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	3b01      	subs	r3, #1
 800931a:	ee18 1a10 	vmov	r1, s16
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	220a      	movs	r2, #10
 8009322:	2300      	movs	r3, #0
 8009324:	4620      	mov	r0, r4
 8009326:	f000 ffd3 	bl	800a2d0 <__multadd>
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	ee08 0a10 	vmov	s16, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81b1 	beq.w	8009698 <_dtoa_r+0xbc0>
 8009336:	2300      	movs	r3, #0
 8009338:	4639      	mov	r1, r7
 800933a:	220a      	movs	r2, #10
 800933c:	4620      	mov	r0, r4
 800933e:	f000 ffc7 	bl	800a2d0 <__multadd>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	4607      	mov	r7, r0
 8009348:	f300 808e 	bgt.w	8009468 <_dtoa_r+0x990>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	2b02      	cmp	r3, #2
 8009350:	dc51      	bgt.n	80093f6 <_dtoa_r+0x91e>
 8009352:	e089      	b.n	8009468 <_dtoa_r+0x990>
 8009354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800935a:	e74b      	b.n	80091f4 <_dtoa_r+0x71c>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	1e5e      	subs	r6, r3, #1
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	42b3      	cmp	r3, r6
 8009364:	bfbf      	itttt	lt
 8009366:	9b07      	ldrlt	r3, [sp, #28]
 8009368:	9607      	strlt	r6, [sp, #28]
 800936a:	1af2      	sublt	r2, r6, r3
 800936c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800936e:	bfb6      	itet	lt
 8009370:	189b      	addlt	r3, r3, r2
 8009372:	1b9e      	subge	r6, r3, r6
 8009374:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	bfb8      	it	lt
 800937a:	2600      	movlt	r6, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfb7      	itett	lt
 8009380:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009384:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009388:	1a9d      	sublt	r5, r3, r2
 800938a:	2300      	movlt	r3, #0
 800938c:	e734      	b.n	80091f8 <_dtoa_r+0x720>
 800938e:	9e07      	ldr	r6, [sp, #28]
 8009390:	9d04      	ldr	r5, [sp, #16]
 8009392:	9f08      	ldr	r7, [sp, #32]
 8009394:	e73b      	b.n	800920e <_dtoa_r+0x736>
 8009396:	9a07      	ldr	r2, [sp, #28]
 8009398:	e767      	b.n	800926a <_dtoa_r+0x792>
 800939a:	9b06      	ldr	r3, [sp, #24]
 800939c:	2b01      	cmp	r3, #1
 800939e:	dc18      	bgt.n	80093d2 <_dtoa_r+0x8fa>
 80093a0:	f1ba 0f00 	cmp.w	sl, #0
 80093a4:	d115      	bne.n	80093d2 <_dtoa_r+0x8fa>
 80093a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093aa:	b993      	cbnz	r3, 80093d2 <_dtoa_r+0x8fa>
 80093ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	051b      	lsls	r3, r3, #20
 80093b4:	b183      	cbz	r3, 80093d8 <_dtoa_r+0x900>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	3301      	adds	r3, #1
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	f04f 0801 	mov.w	r8, #1
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af6a 	bne.w	80092a2 <_dtoa_r+0x7ca>
 80093ce:	2001      	movs	r0, #1
 80093d0:	e76f      	b.n	80092b2 <_dtoa_r+0x7da>
 80093d2:	f04f 0800 	mov.w	r8, #0
 80093d6:	e7f6      	b.n	80093c6 <_dtoa_r+0x8ee>
 80093d8:	4698      	mov	r8, r3
 80093da:	e7f4      	b.n	80093c6 <_dtoa_r+0x8ee>
 80093dc:	f43f af7d 	beq.w	80092da <_dtoa_r+0x802>
 80093e0:	4618      	mov	r0, r3
 80093e2:	301c      	adds	r0, #28
 80093e4:	e772      	b.n	80092cc <_dtoa_r+0x7f4>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc37      	bgt.n	800945c <_dtoa_r+0x984>
 80093ec:	9b06      	ldr	r3, [sp, #24]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	dd34      	ble.n	800945c <_dtoa_r+0x984>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	b96b      	cbnz	r3, 8009416 <_dtoa_r+0x93e>
 80093fa:	4631      	mov	r1, r6
 80093fc:	2205      	movs	r2, #5
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 ff66 	bl	800a2d0 <__multadd>
 8009404:	4601      	mov	r1, r0
 8009406:	4606      	mov	r6, r0
 8009408:	ee18 0a10 	vmov	r0, s16
 800940c:	f001 f9ca 	bl	800a7a4 <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	f73f adbb 	bgt.w	8008f8c <_dtoa_r+0x4b4>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	9d01      	ldr	r5, [sp, #4]
 800941a:	43db      	mvns	r3, r3
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	f04f 0800 	mov.w	r8, #0
 8009422:	4631      	mov	r1, r6
 8009424:	4620      	mov	r0, r4
 8009426:	f000 ff31 	bl	800a28c <_Bfree>
 800942a:	2f00      	cmp	r7, #0
 800942c:	f43f aea4 	beq.w	8009178 <_dtoa_r+0x6a0>
 8009430:	f1b8 0f00 	cmp.w	r8, #0
 8009434:	d005      	beq.n	8009442 <_dtoa_r+0x96a>
 8009436:	45b8      	cmp	r8, r7
 8009438:	d003      	beq.n	8009442 <_dtoa_r+0x96a>
 800943a:	4641      	mov	r1, r8
 800943c:	4620      	mov	r0, r4
 800943e:	f000 ff25 	bl	800a28c <_Bfree>
 8009442:	4639      	mov	r1, r7
 8009444:	4620      	mov	r0, r4
 8009446:	f000 ff21 	bl	800a28c <_Bfree>
 800944a:	e695      	b.n	8009178 <_dtoa_r+0x6a0>
 800944c:	2600      	movs	r6, #0
 800944e:	4637      	mov	r7, r6
 8009450:	e7e1      	b.n	8009416 <_dtoa_r+0x93e>
 8009452:	9700      	str	r7, [sp, #0]
 8009454:	4637      	mov	r7, r6
 8009456:	e599      	b.n	8008f8c <_dtoa_r+0x4b4>
 8009458:	40240000 	.word	0x40240000
 800945c:	9b08      	ldr	r3, [sp, #32]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80ca 	beq.w	80095f8 <_dtoa_r+0xb20>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	9302      	str	r3, [sp, #8]
 8009468:	2d00      	cmp	r5, #0
 800946a:	dd05      	ble.n	8009478 <_dtoa_r+0x9a0>
 800946c:	4639      	mov	r1, r7
 800946e:	462a      	mov	r2, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f001 f927 	bl	800a6c4 <__lshift>
 8009476:	4607      	mov	r7, r0
 8009478:	f1b8 0f00 	cmp.w	r8, #0
 800947c:	d05b      	beq.n	8009536 <_dtoa_r+0xa5e>
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fec3 	bl	800a20c <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b928      	cbnz	r0, 8009496 <_dtoa_r+0x9be>
 800948a:	4b87      	ldr	r3, [pc, #540]	; (80096a8 <_dtoa_r+0xbd0>)
 800948c:	4602      	mov	r2, r0
 800948e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009492:	f7ff bb3b 	b.w	8008b0c <_dtoa_r+0x34>
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	f107 010c 	add.w	r1, r7, #12
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7fd fbf5 	bl	8006c90 <memcpy>
 80094a6:	2201      	movs	r2, #1
 80094a8:	4629      	mov	r1, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	f001 f90a 	bl	800a6c4 <__lshift>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	f103 0901 	add.w	r9, r3, #1
 80094b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	f00a 0301 	and.w	r3, sl, #1
 80094c2:	46b8      	mov	r8, r7
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	4607      	mov	r7, r0
 80094c8:	4631      	mov	r1, r6
 80094ca:	ee18 0a10 	vmov	r0, s16
 80094ce:	f7ff fa77 	bl	80089c0 <quorem>
 80094d2:	4641      	mov	r1, r8
 80094d4:	9002      	str	r0, [sp, #8]
 80094d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094da:	ee18 0a10 	vmov	r0, s16
 80094de:	f001 f961 	bl	800a7a4 <__mcmp>
 80094e2:	463a      	mov	r2, r7
 80094e4:	9003      	str	r0, [sp, #12]
 80094e6:	4631      	mov	r1, r6
 80094e8:	4620      	mov	r0, r4
 80094ea:	f001 f977 	bl	800a7dc <__mdiff>
 80094ee:	68c2      	ldr	r2, [r0, #12]
 80094f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80094f4:	4605      	mov	r5, r0
 80094f6:	bb02      	cbnz	r2, 800953a <_dtoa_r+0xa62>
 80094f8:	4601      	mov	r1, r0
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f001 f951 	bl	800a7a4 <__mcmp>
 8009502:	4602      	mov	r2, r0
 8009504:	4629      	mov	r1, r5
 8009506:	4620      	mov	r0, r4
 8009508:	9207      	str	r2, [sp, #28]
 800950a:	f000 febf 	bl	800a28c <_Bfree>
 800950e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009512:	ea43 0102 	orr.w	r1, r3, r2
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	430b      	orrs	r3, r1
 800951a:	464d      	mov	r5, r9
 800951c:	d10f      	bne.n	800953e <_dtoa_r+0xa66>
 800951e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009522:	d02a      	beq.n	800957a <_dtoa_r+0xaa2>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd02      	ble.n	8009530 <_dtoa_r+0xa58>
 800952a:	9b02      	ldr	r3, [sp, #8]
 800952c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009530:	f88b a000 	strb.w	sl, [fp]
 8009534:	e775      	b.n	8009422 <_dtoa_r+0x94a>
 8009536:	4638      	mov	r0, r7
 8009538:	e7ba      	b.n	80094b0 <_dtoa_r+0x9d8>
 800953a:	2201      	movs	r2, #1
 800953c:	e7e2      	b.n	8009504 <_dtoa_r+0xa2c>
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	db04      	blt.n	800954e <_dtoa_r+0xa76>
 8009544:	9906      	ldr	r1, [sp, #24]
 8009546:	430b      	orrs	r3, r1
 8009548:	9904      	ldr	r1, [sp, #16]
 800954a:	430b      	orrs	r3, r1
 800954c:	d122      	bne.n	8009594 <_dtoa_r+0xabc>
 800954e:	2a00      	cmp	r2, #0
 8009550:	ddee      	ble.n	8009530 <_dtoa_r+0xa58>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	2201      	movs	r2, #1
 8009558:	4620      	mov	r0, r4
 800955a:	f001 f8b3 	bl	800a6c4 <__lshift>
 800955e:	4631      	mov	r1, r6
 8009560:	ee08 0a10 	vmov	s16, r0
 8009564:	f001 f91e 	bl	800a7a4 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dc03      	bgt.n	8009574 <_dtoa_r+0xa9c>
 800956c:	d1e0      	bne.n	8009530 <_dtoa_r+0xa58>
 800956e:	f01a 0f01 	tst.w	sl, #1
 8009572:	d0dd      	beq.n	8009530 <_dtoa_r+0xa58>
 8009574:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009578:	d1d7      	bne.n	800952a <_dtoa_r+0xa52>
 800957a:	2339      	movs	r3, #57	; 0x39
 800957c:	f88b 3000 	strb.w	r3, [fp]
 8009580:	462b      	mov	r3, r5
 8009582:	461d      	mov	r5, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800958a:	2a39      	cmp	r2, #57	; 0x39
 800958c:	d071      	beq.n	8009672 <_dtoa_r+0xb9a>
 800958e:	3201      	adds	r2, #1
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e746      	b.n	8009422 <_dtoa_r+0x94a>
 8009594:	2a00      	cmp	r2, #0
 8009596:	dd07      	ble.n	80095a8 <_dtoa_r+0xad0>
 8009598:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800959c:	d0ed      	beq.n	800957a <_dtoa_r+0xaa2>
 800959e:	f10a 0301 	add.w	r3, sl, #1
 80095a2:	f88b 3000 	strb.w	r3, [fp]
 80095a6:	e73c      	b.n	8009422 <_dtoa_r+0x94a>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095ae:	4599      	cmp	r9, r3
 80095b0:	d047      	beq.n	8009642 <_dtoa_r+0xb6a>
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fe88 	bl	800a2d0 <__multadd>
 80095c0:	45b8      	cmp	r8, r7
 80095c2:	ee08 0a10 	vmov	s16, r0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	f04f 020a 	mov.w	r2, #10
 80095ce:	4641      	mov	r1, r8
 80095d0:	4620      	mov	r0, r4
 80095d2:	d106      	bne.n	80095e2 <_dtoa_r+0xb0a>
 80095d4:	f000 fe7c 	bl	800a2d0 <__multadd>
 80095d8:	4680      	mov	r8, r0
 80095da:	4607      	mov	r7, r0
 80095dc:	f109 0901 	add.w	r9, r9, #1
 80095e0:	e772      	b.n	80094c8 <_dtoa_r+0x9f0>
 80095e2:	f000 fe75 	bl	800a2d0 <__multadd>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4680      	mov	r8, r0
 80095ea:	2300      	movs	r3, #0
 80095ec:	220a      	movs	r2, #10
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fe6e 	bl	800a2d0 <__multadd>
 80095f4:	4607      	mov	r7, r0
 80095f6:	e7f1      	b.n	80095dc <_dtoa_r+0xb04>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	9d01      	ldr	r5, [sp, #4]
 80095fe:	ee18 0a10 	vmov	r0, s16
 8009602:	4631      	mov	r1, r6
 8009604:	f7ff f9dc 	bl	80089c0 <quorem>
 8009608:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	f805 ab01 	strb.w	sl, [r5], #1
 8009612:	1aea      	subs	r2, r5, r3
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	4293      	cmp	r3, r2
 8009618:	dd09      	ble.n	800962e <_dtoa_r+0xb56>
 800961a:	ee18 1a10 	vmov	r1, s16
 800961e:	2300      	movs	r3, #0
 8009620:	220a      	movs	r2, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fe54 	bl	800a2d0 <__multadd>
 8009628:	ee08 0a10 	vmov	s16, r0
 800962c:	e7e7      	b.n	80095fe <_dtoa_r+0xb26>
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	bfc8      	it	gt
 8009634:	461d      	movgt	r5, r3
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	bfd8      	it	le
 800963a:	2501      	movle	r5, #1
 800963c:	441d      	add	r5, r3
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	ee18 1a10 	vmov	r1, s16
 8009646:	2201      	movs	r2, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f001 f83b 	bl	800a6c4 <__lshift>
 800964e:	4631      	mov	r1, r6
 8009650:	ee08 0a10 	vmov	s16, r0
 8009654:	f001 f8a6 	bl	800a7a4 <__mcmp>
 8009658:	2800      	cmp	r0, #0
 800965a:	dc91      	bgt.n	8009580 <_dtoa_r+0xaa8>
 800965c:	d102      	bne.n	8009664 <_dtoa_r+0xb8c>
 800965e:	f01a 0f01 	tst.w	sl, #1
 8009662:	d18d      	bne.n	8009580 <_dtoa_r+0xaa8>
 8009664:	462b      	mov	r3, r5
 8009666:	461d      	mov	r5, r3
 8009668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966c:	2a30      	cmp	r2, #48	; 0x30
 800966e:	d0fa      	beq.n	8009666 <_dtoa_r+0xb8e>
 8009670:	e6d7      	b.n	8009422 <_dtoa_r+0x94a>
 8009672:	9a01      	ldr	r2, [sp, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d184      	bne.n	8009582 <_dtoa_r+0xaaa>
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	2331      	movs	r3, #49	; 0x31
 8009680:	7013      	strb	r3, [r2, #0]
 8009682:	e6ce      	b.n	8009422 <_dtoa_r+0x94a>
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <_dtoa_r+0xbd4>)
 8009686:	f7ff ba95 	b.w	8008bb4 <_dtoa_r+0xdc>
 800968a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f aa6e 	bne.w	8008b6e <_dtoa_r+0x96>
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <_dtoa_r+0xbd8>)
 8009694:	f7ff ba8e 	b.w	8008bb4 <_dtoa_r+0xdc>
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dcae      	bgt.n	80095fc <_dtoa_r+0xb24>
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f73f aea8 	bgt.w	80093f6 <_dtoa_r+0x91e>
 80096a6:	e7a9      	b.n	80095fc <_dtoa_r+0xb24>
 80096a8:	0800b938 	.word	0x0800b938
 80096ac:	0800b73c 	.word	0x0800b73c
 80096b0:	0800b8b9 	.word	0x0800b8b9

080096b4 <__sflush_r>:
 80096b4:	898a      	ldrh	r2, [r1, #12]
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	4605      	mov	r5, r0
 80096bc:	0710      	lsls	r0, r2, #28
 80096be:	460c      	mov	r4, r1
 80096c0:	d458      	bmi.n	8009774 <__sflush_r+0xc0>
 80096c2:	684b      	ldr	r3, [r1, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc05      	bgt.n	80096d4 <__sflush_r+0x20>
 80096c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dc02      	bgt.n	80096d4 <__sflush_r+0x20>
 80096ce:	2000      	movs	r0, #0
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d0f9      	beq.n	80096ce <__sflush_r+0x1a>
 80096da:	2300      	movs	r3, #0
 80096dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096e0:	682f      	ldr	r7, [r5, #0]
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	d032      	beq.n	800974c <__sflush_r+0x98>
 80096e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	075a      	lsls	r2, r3, #29
 80096ec:	d505      	bpl.n	80096fa <__sflush_r+0x46>
 80096ee:	6863      	ldr	r3, [r4, #4]
 80096f0:	1ac0      	subs	r0, r0, r3
 80096f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096f4:	b10b      	cbz	r3, 80096fa <__sflush_r+0x46>
 80096f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096f8:	1ac0      	subs	r0, r0, r3
 80096fa:	2300      	movs	r3, #0
 80096fc:	4602      	mov	r2, r0
 80096fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009700:	6a21      	ldr	r1, [r4, #32]
 8009702:	4628      	mov	r0, r5
 8009704:	47b0      	blx	r6
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	d106      	bne.n	800971a <__sflush_r+0x66>
 800970c:	6829      	ldr	r1, [r5, #0]
 800970e:	291d      	cmp	r1, #29
 8009710:	d82c      	bhi.n	800976c <__sflush_r+0xb8>
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <__sflush_r+0x108>)
 8009714:	40ca      	lsrs	r2, r1
 8009716:	07d6      	lsls	r6, r2, #31
 8009718:	d528      	bpl.n	800976c <__sflush_r+0xb8>
 800971a:	2200      	movs	r2, #0
 800971c:	6062      	str	r2, [r4, #4]
 800971e:	04d9      	lsls	r1, r3, #19
 8009720:	6922      	ldr	r2, [r4, #16]
 8009722:	6022      	str	r2, [r4, #0]
 8009724:	d504      	bpl.n	8009730 <__sflush_r+0x7c>
 8009726:	1c42      	adds	r2, r0, #1
 8009728:	d101      	bne.n	800972e <__sflush_r+0x7a>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	b903      	cbnz	r3, 8009730 <__sflush_r+0x7c>
 800972e:	6560      	str	r0, [r4, #84]	; 0x54
 8009730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009732:	602f      	str	r7, [r5, #0]
 8009734:	2900      	cmp	r1, #0
 8009736:	d0ca      	beq.n	80096ce <__sflush_r+0x1a>
 8009738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973c:	4299      	cmp	r1, r3
 800973e:	d002      	beq.n	8009746 <__sflush_r+0x92>
 8009740:	4628      	mov	r0, r5
 8009742:	f001 fa3b 	bl	800abbc <_free_r>
 8009746:	2000      	movs	r0, #0
 8009748:	6360      	str	r0, [r4, #52]	; 0x34
 800974a:	e7c1      	b.n	80096d0 <__sflush_r+0x1c>
 800974c:	6a21      	ldr	r1, [r4, #32]
 800974e:	2301      	movs	r3, #1
 8009750:	4628      	mov	r0, r5
 8009752:	47b0      	blx	r6
 8009754:	1c41      	adds	r1, r0, #1
 8009756:	d1c7      	bne.n	80096e8 <__sflush_r+0x34>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c4      	beq.n	80096e8 <__sflush_r+0x34>
 800975e:	2b1d      	cmp	r3, #29
 8009760:	d001      	beq.n	8009766 <__sflush_r+0xb2>
 8009762:	2b16      	cmp	r3, #22
 8009764:	d101      	bne.n	800976a <__sflush_r+0xb6>
 8009766:	602f      	str	r7, [r5, #0]
 8009768:	e7b1      	b.n	80096ce <__sflush_r+0x1a>
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	e7ad      	b.n	80096d0 <__sflush_r+0x1c>
 8009774:	690f      	ldr	r7, [r1, #16]
 8009776:	2f00      	cmp	r7, #0
 8009778:	d0a9      	beq.n	80096ce <__sflush_r+0x1a>
 800977a:	0793      	lsls	r3, r2, #30
 800977c:	680e      	ldr	r6, [r1, #0]
 800977e:	bf08      	it	eq
 8009780:	694b      	ldreq	r3, [r1, #20]
 8009782:	600f      	str	r7, [r1, #0]
 8009784:	bf18      	it	ne
 8009786:	2300      	movne	r3, #0
 8009788:	eba6 0807 	sub.w	r8, r6, r7
 800978c:	608b      	str	r3, [r1, #8]
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	dd9c      	ble.n	80096ce <__sflush_r+0x1a>
 8009794:	6a21      	ldr	r1, [r4, #32]
 8009796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009798:	4643      	mov	r3, r8
 800979a:	463a      	mov	r2, r7
 800979c:	4628      	mov	r0, r5
 800979e:	47b0      	blx	r6
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dc06      	bgt.n	80097b2 <__sflush_r+0xfe>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	e78e      	b.n	80096d0 <__sflush_r+0x1c>
 80097b2:	4407      	add	r7, r0
 80097b4:	eba8 0800 	sub.w	r8, r8, r0
 80097b8:	e7e9      	b.n	800978e <__sflush_r+0xda>
 80097ba:	bf00      	nop
 80097bc:	20400001 	.word	0x20400001

080097c0 <_fflush_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	690b      	ldr	r3, [r1, #16]
 80097c4:	4605      	mov	r5, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	b913      	cbnz	r3, 80097d0 <_fflush_r+0x10>
 80097ca:	2500      	movs	r5, #0
 80097cc:	4628      	mov	r0, r5
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	b118      	cbz	r0, 80097da <_fflush_r+0x1a>
 80097d2:	6983      	ldr	r3, [r0, #24]
 80097d4:	b90b      	cbnz	r3, 80097da <_fflush_r+0x1a>
 80097d6:	f000 f887 	bl	80098e8 <__sinit>
 80097da:	4b14      	ldr	r3, [pc, #80]	; (800982c <_fflush_r+0x6c>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	d11b      	bne.n	8009818 <_fflush_r+0x58>
 80097e0:	686c      	ldr	r4, [r5, #4]
 80097e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0ef      	beq.n	80097ca <_fflush_r+0xa>
 80097ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097ec:	07d0      	lsls	r0, r2, #31
 80097ee:	d404      	bmi.n	80097fa <_fflush_r+0x3a>
 80097f0:	0599      	lsls	r1, r3, #22
 80097f2:	d402      	bmi.n	80097fa <_fflush_r+0x3a>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 fc88 	bl	800a10a <__retarget_lock_acquire_recursive>
 80097fa:	4628      	mov	r0, r5
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7ff ff59 	bl	80096b4 <__sflush_r>
 8009802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009804:	07da      	lsls	r2, r3, #31
 8009806:	4605      	mov	r5, r0
 8009808:	d4e0      	bmi.n	80097cc <_fflush_r+0xc>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	059b      	lsls	r3, r3, #22
 800980e:	d4dd      	bmi.n	80097cc <_fflush_r+0xc>
 8009810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009812:	f000 fc7b 	bl	800a10c <__retarget_lock_release_recursive>
 8009816:	e7d9      	b.n	80097cc <_fflush_r+0xc>
 8009818:	4b05      	ldr	r3, [pc, #20]	; (8009830 <_fflush_r+0x70>)
 800981a:	429c      	cmp	r4, r3
 800981c:	d101      	bne.n	8009822 <_fflush_r+0x62>
 800981e:	68ac      	ldr	r4, [r5, #8]
 8009820:	e7df      	b.n	80097e2 <_fflush_r+0x22>
 8009822:	4b04      	ldr	r3, [pc, #16]	; (8009834 <_fflush_r+0x74>)
 8009824:	429c      	cmp	r4, r3
 8009826:	bf08      	it	eq
 8009828:	68ec      	ldreq	r4, [r5, #12]
 800982a:	e7da      	b.n	80097e2 <_fflush_r+0x22>
 800982c:	0800b96c 	.word	0x0800b96c
 8009830:	0800b98c 	.word	0x0800b98c
 8009834:	0800b94c 	.word	0x0800b94c

08009838 <std>:
 8009838:	2300      	movs	r3, #0
 800983a:	b510      	push	{r4, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	e9c0 3300 	strd	r3, r3, [r0]
 8009842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009846:	6083      	str	r3, [r0, #8]
 8009848:	8181      	strh	r1, [r0, #12]
 800984a:	6643      	str	r3, [r0, #100]	; 0x64
 800984c:	81c2      	strh	r2, [r0, #14]
 800984e:	6183      	str	r3, [r0, #24]
 8009850:	4619      	mov	r1, r3
 8009852:	2208      	movs	r2, #8
 8009854:	305c      	adds	r0, #92	; 0x5c
 8009856:	f7fd fa29 	bl	8006cac <memset>
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <std+0x38>)
 800985c:	6263      	str	r3, [r4, #36]	; 0x24
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <std+0x3c>)
 8009860:	62a3      	str	r3, [r4, #40]	; 0x28
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x40>)
 8009864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <std+0x44>)
 8009868:	6224      	str	r4, [r4, #32]
 800986a:	6323      	str	r3, [r4, #48]	; 0x30
 800986c:	bd10      	pop	{r4, pc}
 800986e:	bf00      	nop
 8009870:	0800b069 	.word	0x0800b069
 8009874:	0800b08b 	.word	0x0800b08b
 8009878:	0800b0c3 	.word	0x0800b0c3
 800987c:	0800b0e7 	.word	0x0800b0e7

08009880 <_cleanup_r>:
 8009880:	4901      	ldr	r1, [pc, #4]	; (8009888 <_cleanup_r+0x8>)
 8009882:	f000 b8af 	b.w	80099e4 <_fwalk_reent>
 8009886:	bf00      	nop
 8009888:	080097c1 	.word	0x080097c1

0800988c <__sfmoreglue>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	2268      	movs	r2, #104	; 0x68
 8009890:	1e4d      	subs	r5, r1, #1
 8009892:	4355      	muls	r5, r2
 8009894:	460e      	mov	r6, r1
 8009896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800989a:	f001 f9fb 	bl	800ac94 <_malloc_r>
 800989e:	4604      	mov	r4, r0
 80098a0:	b140      	cbz	r0, 80098b4 <__sfmoreglue+0x28>
 80098a2:	2100      	movs	r1, #0
 80098a4:	e9c0 1600 	strd	r1, r6, [r0]
 80098a8:	300c      	adds	r0, #12
 80098aa:	60a0      	str	r0, [r4, #8]
 80098ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098b0:	f7fd f9fc 	bl	8006cac <memset>
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd70      	pop	{r4, r5, r6, pc}

080098b8 <__sfp_lock_acquire>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sfp_lock_acquire+0x8>)
 80098ba:	f000 bc26 	b.w	800a10a <__retarget_lock_acquire_recursive>
 80098be:	bf00      	nop
 80098c0:	200045cf 	.word	0x200045cf

080098c4 <__sfp_lock_release>:
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <__sfp_lock_release+0x8>)
 80098c6:	f000 bc21 	b.w	800a10c <__retarget_lock_release_recursive>
 80098ca:	bf00      	nop
 80098cc:	200045cf 	.word	0x200045cf

080098d0 <__sinit_lock_acquire>:
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <__sinit_lock_acquire+0x8>)
 80098d2:	f000 bc1a 	b.w	800a10a <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	200045d0 	.word	0x200045d0

080098dc <__sinit_lock_release>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__sinit_lock_release+0x8>)
 80098de:	f000 bc15 	b.w	800a10c <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	200045d0 	.word	0x200045d0

080098e8 <__sinit>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7ff fff0 	bl	80098d0 <__sinit_lock_acquire>
 80098f0:	69a3      	ldr	r3, [r4, #24]
 80098f2:	b11b      	cbz	r3, 80098fc <__sinit+0x14>
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	f7ff bff0 	b.w	80098dc <__sinit_lock_release>
 80098fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009900:	6523      	str	r3, [r4, #80]	; 0x50
 8009902:	4b13      	ldr	r3, [pc, #76]	; (8009950 <__sinit+0x68>)
 8009904:	4a13      	ldr	r2, [pc, #76]	; (8009954 <__sinit+0x6c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	62a2      	str	r2, [r4, #40]	; 0x28
 800990a:	42a3      	cmp	r3, r4
 800990c:	bf04      	itt	eq
 800990e:	2301      	moveq	r3, #1
 8009910:	61a3      	streq	r3, [r4, #24]
 8009912:	4620      	mov	r0, r4
 8009914:	f000 f820 	bl	8009958 <__sfp>
 8009918:	6060      	str	r0, [r4, #4]
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f81c 	bl	8009958 <__sfp>
 8009920:	60a0      	str	r0, [r4, #8]
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f818 	bl	8009958 <__sfp>
 8009928:	2200      	movs	r2, #0
 800992a:	60e0      	str	r0, [r4, #12]
 800992c:	2104      	movs	r1, #4
 800992e:	6860      	ldr	r0, [r4, #4]
 8009930:	f7ff ff82 	bl	8009838 <std>
 8009934:	68a0      	ldr	r0, [r4, #8]
 8009936:	2201      	movs	r2, #1
 8009938:	2109      	movs	r1, #9
 800993a:	f7ff ff7d 	bl	8009838 <std>
 800993e:	68e0      	ldr	r0, [r4, #12]
 8009940:	2202      	movs	r2, #2
 8009942:	2112      	movs	r1, #18
 8009944:	f7ff ff78 	bl	8009838 <std>
 8009948:	2301      	movs	r3, #1
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	e7d2      	b.n	80098f4 <__sinit+0xc>
 800994e:	bf00      	nop
 8009950:	0800b728 	.word	0x0800b728
 8009954:	08009881 	.word	0x08009881

08009958 <__sfp>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	4607      	mov	r7, r0
 800995c:	f7ff ffac 	bl	80098b8 <__sfp_lock_acquire>
 8009960:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <__sfp+0x84>)
 8009962:	681e      	ldr	r6, [r3, #0]
 8009964:	69b3      	ldr	r3, [r6, #24]
 8009966:	b913      	cbnz	r3, 800996e <__sfp+0x16>
 8009968:	4630      	mov	r0, r6
 800996a:	f7ff ffbd 	bl	80098e8 <__sinit>
 800996e:	3648      	adds	r6, #72	; 0x48
 8009970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009974:	3b01      	subs	r3, #1
 8009976:	d503      	bpl.n	8009980 <__sfp+0x28>
 8009978:	6833      	ldr	r3, [r6, #0]
 800997a:	b30b      	cbz	r3, 80099c0 <__sfp+0x68>
 800997c:	6836      	ldr	r6, [r6, #0]
 800997e:	e7f7      	b.n	8009970 <__sfp+0x18>
 8009980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009984:	b9d5      	cbnz	r5, 80099bc <__sfp+0x64>
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <__sfp+0x88>)
 8009988:	60e3      	str	r3, [r4, #12]
 800998a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800998e:	6665      	str	r5, [r4, #100]	; 0x64
 8009990:	f000 fbba 	bl	800a108 <__retarget_lock_init_recursive>
 8009994:	f7ff ff96 	bl	80098c4 <__sfp_lock_release>
 8009998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800999c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	61a5      	str	r5, [r4, #24]
 80099a4:	2208      	movs	r2, #8
 80099a6:	4629      	mov	r1, r5
 80099a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099ac:	f7fd f97e 	bl	8006cac <memset>
 80099b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099b8:	4620      	mov	r0, r4
 80099ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099bc:	3468      	adds	r4, #104	; 0x68
 80099be:	e7d9      	b.n	8009974 <__sfp+0x1c>
 80099c0:	2104      	movs	r1, #4
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7ff ff62 	bl	800988c <__sfmoreglue>
 80099c8:	4604      	mov	r4, r0
 80099ca:	6030      	str	r0, [r6, #0]
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1d5      	bne.n	800997c <__sfp+0x24>
 80099d0:	f7ff ff78 	bl	80098c4 <__sfp_lock_release>
 80099d4:	230c      	movs	r3, #12
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	e7ee      	b.n	80099b8 <__sfp+0x60>
 80099da:	bf00      	nop
 80099dc:	0800b728 	.word	0x0800b728
 80099e0:	ffff0001 	.word	0xffff0001

080099e4 <_fwalk_reent>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4606      	mov	r6, r0
 80099ea:	4688      	mov	r8, r1
 80099ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099f0:	2700      	movs	r7, #0
 80099f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f6:	f1b9 0901 	subs.w	r9, r9, #1
 80099fa:	d505      	bpl.n	8009a08 <_fwalk_reent+0x24>
 80099fc:	6824      	ldr	r4, [r4, #0]
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d1f7      	bne.n	80099f2 <_fwalk_reent+0xe>
 8009a02:	4638      	mov	r0, r7
 8009a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a08:	89ab      	ldrh	r3, [r5, #12]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d907      	bls.n	8009a1e <_fwalk_reent+0x3a>
 8009a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a12:	3301      	adds	r3, #1
 8009a14:	d003      	beq.n	8009a1e <_fwalk_reent+0x3a>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	47c0      	blx	r8
 8009a1c:	4307      	orrs	r7, r0
 8009a1e:	3568      	adds	r5, #104	; 0x68
 8009a20:	e7e9      	b.n	80099f6 <_fwalk_reent+0x12>

08009a22 <rshift>:
 8009a22:	6903      	ldr	r3, [r0, #16]
 8009a24:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a30:	f100 0414 	add.w	r4, r0, #20
 8009a34:	dd45      	ble.n	8009ac2 <rshift+0xa0>
 8009a36:	f011 011f 	ands.w	r1, r1, #31
 8009a3a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a3e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a42:	d10c      	bne.n	8009a5e <rshift+0x3c>
 8009a44:	f100 0710 	add.w	r7, r0, #16
 8009a48:	4629      	mov	r1, r5
 8009a4a:	42b1      	cmp	r1, r6
 8009a4c:	d334      	bcc.n	8009ab8 <rshift+0x96>
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	1eea      	subs	r2, r5, #3
 8009a54:	4296      	cmp	r6, r2
 8009a56:	bf38      	it	cc
 8009a58:	2300      	movcc	r3, #0
 8009a5a:	4423      	add	r3, r4
 8009a5c:	e015      	b.n	8009a8a <rshift+0x68>
 8009a5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a62:	f1c1 0820 	rsb	r8, r1, #32
 8009a66:	40cf      	lsrs	r7, r1
 8009a68:	f105 0e04 	add.w	lr, r5, #4
 8009a6c:	46a1      	mov	r9, r4
 8009a6e:	4576      	cmp	r6, lr
 8009a70:	46f4      	mov	ip, lr
 8009a72:	d815      	bhi.n	8009aa0 <rshift+0x7e>
 8009a74:	1a9a      	subs	r2, r3, r2
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	3a04      	subs	r2, #4
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	42ae      	cmp	r6, r5
 8009a7e:	bf38      	it	cc
 8009a80:	2200      	movcc	r2, #0
 8009a82:	18a3      	adds	r3, r4, r2
 8009a84:	50a7      	str	r7, [r4, r2]
 8009a86:	b107      	cbz	r7, 8009a8a <rshift+0x68>
 8009a88:	3304      	adds	r3, #4
 8009a8a:	1b1a      	subs	r2, r3, r4
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a92:	bf08      	it	eq
 8009a94:	2300      	moveq	r3, #0
 8009a96:	6102      	str	r2, [r0, #16]
 8009a98:	bf08      	it	eq
 8009a9a:	6143      	streq	r3, [r0, #20]
 8009a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa0:	f8dc c000 	ldr.w	ip, [ip]
 8009aa4:	fa0c fc08 	lsl.w	ip, ip, r8
 8009aa8:	ea4c 0707 	orr.w	r7, ip, r7
 8009aac:	f849 7b04 	str.w	r7, [r9], #4
 8009ab0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ab4:	40cf      	lsrs	r7, r1
 8009ab6:	e7da      	b.n	8009a6e <rshift+0x4c>
 8009ab8:	f851 cb04 	ldr.w	ip, [r1], #4
 8009abc:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ac0:	e7c3      	b.n	8009a4a <rshift+0x28>
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	e7e1      	b.n	8009a8a <rshift+0x68>

08009ac6 <__hexdig_fun>:
 8009ac6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009aca:	2b09      	cmp	r3, #9
 8009acc:	d802      	bhi.n	8009ad4 <__hexdig_fun+0xe>
 8009ace:	3820      	subs	r0, #32
 8009ad0:	b2c0      	uxtb	r0, r0
 8009ad2:	4770      	bx	lr
 8009ad4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d801      	bhi.n	8009ae0 <__hexdig_fun+0x1a>
 8009adc:	3847      	subs	r0, #71	; 0x47
 8009ade:	e7f7      	b.n	8009ad0 <__hexdig_fun+0xa>
 8009ae0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d801      	bhi.n	8009aec <__hexdig_fun+0x26>
 8009ae8:	3827      	subs	r0, #39	; 0x27
 8009aea:	e7f1      	b.n	8009ad0 <__hexdig_fun+0xa>
 8009aec:	2000      	movs	r0, #0
 8009aee:	4770      	bx	lr

08009af0 <__gethex>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	ed2d 8b02 	vpush	{d8}
 8009af8:	b089      	sub	sp, #36	; 0x24
 8009afa:	ee08 0a10 	vmov	s16, r0
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	4bb4      	ldr	r3, [pc, #720]	; (8009dd4 <__gethex+0x2e4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	4618      	mov	r0, r3
 8009b08:	468b      	mov	fp, r1
 8009b0a:	4690      	mov	r8, r2
 8009b0c:	f7f6 fb68 	bl	80001e0 <strlen>
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	f8db 2000 	ldr.w	r2, [fp]
 8009b16:	4403      	add	r3, r0
 8009b18:	4682      	mov	sl, r0
 8009b1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	1c93      	adds	r3, r2, #2
 8009b22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b2a:	32fe      	adds	r2, #254	; 0xfe
 8009b2c:	18d1      	adds	r1, r2, r3
 8009b2e:	461f      	mov	r7, r3
 8009b30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b34:	9100      	str	r1, [sp, #0]
 8009b36:	2830      	cmp	r0, #48	; 0x30
 8009b38:	d0f8      	beq.n	8009b2c <__gethex+0x3c>
 8009b3a:	f7ff ffc4 	bl	8009ac6 <__hexdig_fun>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d13a      	bne.n	8009bba <__gethex+0xca>
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	4652      	mov	r2, sl
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f001 fad0 	bl	800b0ee <strncmp>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d168      	bne.n	8009c26 <__gethex+0x136>
 8009b54:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b58:	eb07 060a 	add.w	r6, r7, sl
 8009b5c:	f7ff ffb3 	bl	8009ac6 <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d062      	beq.n	8009c2a <__gethex+0x13a>
 8009b64:	4633      	mov	r3, r6
 8009b66:	7818      	ldrb	r0, [r3, #0]
 8009b68:	2830      	cmp	r0, #48	; 0x30
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	f103 0301 	add.w	r3, r3, #1
 8009b70:	d0f9      	beq.n	8009b66 <__gethex+0x76>
 8009b72:	f7ff ffa8 	bl	8009ac6 <__hexdig_fun>
 8009b76:	2301      	movs	r3, #1
 8009b78:	fab0 f480 	clz	r4, r0
 8009b7c:	0964      	lsrs	r4, r4, #5
 8009b7e:	4635      	mov	r5, r6
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	463a      	mov	r2, r7
 8009b84:	4616      	mov	r6, r2
 8009b86:	3201      	adds	r2, #1
 8009b88:	7830      	ldrb	r0, [r6, #0]
 8009b8a:	f7ff ff9c 	bl	8009ac6 <__hexdig_fun>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1f8      	bne.n	8009b84 <__gethex+0x94>
 8009b92:	9901      	ldr	r1, [sp, #4]
 8009b94:	4652      	mov	r2, sl
 8009b96:	4630      	mov	r0, r6
 8009b98:	f001 faa9 	bl	800b0ee <strncmp>
 8009b9c:	b980      	cbnz	r0, 8009bc0 <__gethex+0xd0>
 8009b9e:	b94d      	cbnz	r5, 8009bb4 <__gethex+0xc4>
 8009ba0:	eb06 050a 	add.w	r5, r6, sl
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	4616      	mov	r6, r2
 8009ba8:	3201      	adds	r2, #1
 8009baa:	7830      	ldrb	r0, [r6, #0]
 8009bac:	f7ff ff8b 	bl	8009ac6 <__hexdig_fun>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d1f8      	bne.n	8009ba6 <__gethex+0xb6>
 8009bb4:	1bad      	subs	r5, r5, r6
 8009bb6:	00ad      	lsls	r5, r5, #2
 8009bb8:	e004      	b.n	8009bc4 <__gethex+0xd4>
 8009bba:	2400      	movs	r4, #0
 8009bbc:	4625      	mov	r5, r4
 8009bbe:	e7e0      	b.n	8009b82 <__gethex+0x92>
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	d1f7      	bne.n	8009bb4 <__gethex+0xc4>
 8009bc4:	7833      	ldrb	r3, [r6, #0]
 8009bc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bca:	2b50      	cmp	r3, #80	; 0x50
 8009bcc:	d13b      	bne.n	8009c46 <__gethex+0x156>
 8009bce:	7873      	ldrb	r3, [r6, #1]
 8009bd0:	2b2b      	cmp	r3, #43	; 0x2b
 8009bd2:	d02c      	beq.n	8009c2e <__gethex+0x13e>
 8009bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8009bd6:	d02e      	beq.n	8009c36 <__gethex+0x146>
 8009bd8:	1c71      	adds	r1, r6, #1
 8009bda:	f04f 0900 	mov.w	r9, #0
 8009bde:	7808      	ldrb	r0, [r1, #0]
 8009be0:	f7ff ff71 	bl	8009ac6 <__hexdig_fun>
 8009be4:	1e43      	subs	r3, r0, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b18      	cmp	r3, #24
 8009bea:	d82c      	bhi.n	8009c46 <__gethex+0x156>
 8009bec:	f1a0 0210 	sub.w	r2, r0, #16
 8009bf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bf4:	f7ff ff67 	bl	8009ac6 <__hexdig_fun>
 8009bf8:	1e43      	subs	r3, r0, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b18      	cmp	r3, #24
 8009bfe:	d91d      	bls.n	8009c3c <__gethex+0x14c>
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	d000      	beq.n	8009c08 <__gethex+0x118>
 8009c06:	4252      	negs	r2, r2
 8009c08:	4415      	add	r5, r2
 8009c0a:	f8cb 1000 	str.w	r1, [fp]
 8009c0e:	b1e4      	cbz	r4, 8009c4a <__gethex+0x15a>
 8009c10:	9b00      	ldr	r3, [sp, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bf14      	ite	ne
 8009c16:	2700      	movne	r7, #0
 8009c18:	2706      	moveq	r7, #6
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	b009      	add	sp, #36	; 0x24
 8009c1e:	ecbd 8b02 	vpop	{d8}
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	463e      	mov	r6, r7
 8009c28:	4625      	mov	r5, r4
 8009c2a:	2401      	movs	r4, #1
 8009c2c:	e7ca      	b.n	8009bc4 <__gethex+0xd4>
 8009c2e:	f04f 0900 	mov.w	r9, #0
 8009c32:	1cb1      	adds	r1, r6, #2
 8009c34:	e7d3      	b.n	8009bde <__gethex+0xee>
 8009c36:	f04f 0901 	mov.w	r9, #1
 8009c3a:	e7fa      	b.n	8009c32 <__gethex+0x142>
 8009c3c:	230a      	movs	r3, #10
 8009c3e:	fb03 0202 	mla	r2, r3, r2, r0
 8009c42:	3a10      	subs	r2, #16
 8009c44:	e7d4      	b.n	8009bf0 <__gethex+0x100>
 8009c46:	4631      	mov	r1, r6
 8009c48:	e7df      	b.n	8009c0a <__gethex+0x11a>
 8009c4a:	1bf3      	subs	r3, r6, r7
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	4621      	mov	r1, r4
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	dc0b      	bgt.n	8009c6c <__gethex+0x17c>
 8009c54:	ee18 0a10 	vmov	r0, s16
 8009c58:	f000 fad8 	bl	800a20c <_Balloc>
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	b940      	cbnz	r0, 8009c72 <__gethex+0x182>
 8009c60:	4b5d      	ldr	r3, [pc, #372]	; (8009dd8 <__gethex+0x2e8>)
 8009c62:	4602      	mov	r2, r0
 8009c64:	21de      	movs	r1, #222	; 0xde
 8009c66:	485d      	ldr	r0, [pc, #372]	; (8009ddc <__gethex+0x2ec>)
 8009c68:	f001 fa74 	bl	800b154 <__assert_func>
 8009c6c:	3101      	adds	r1, #1
 8009c6e:	105b      	asrs	r3, r3, #1
 8009c70:	e7ee      	b.n	8009c50 <__gethex+0x160>
 8009c72:	f100 0914 	add.w	r9, r0, #20
 8009c76:	f04f 0b00 	mov.w	fp, #0
 8009c7a:	f1ca 0301 	rsb	r3, sl, #1
 8009c7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c82:	f8cd b000 	str.w	fp, [sp]
 8009c86:	9306      	str	r3, [sp, #24]
 8009c88:	42b7      	cmp	r7, r6
 8009c8a:	d340      	bcc.n	8009d0e <__gethex+0x21e>
 8009c8c:	9802      	ldr	r0, [sp, #8]
 8009c8e:	9b00      	ldr	r3, [sp, #0]
 8009c90:	f840 3b04 	str.w	r3, [r0], #4
 8009c94:	eba0 0009 	sub.w	r0, r0, r9
 8009c98:	1080      	asrs	r0, r0, #2
 8009c9a:	0146      	lsls	r6, r0, #5
 8009c9c:	6120      	str	r0, [r4, #16]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fba6 	bl	800a3f0 <__hi0bits>
 8009ca4:	1a30      	subs	r0, r6, r0
 8009ca6:	f8d8 6000 	ldr.w	r6, [r8]
 8009caa:	42b0      	cmp	r0, r6
 8009cac:	dd63      	ble.n	8009d76 <__gethex+0x286>
 8009cae:	1b87      	subs	r7, r0, r6
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 ff4a 	bl	800ab4c <__any_on>
 8009cb8:	4682      	mov	sl, r0
 8009cba:	b1a8      	cbz	r0, 8009ce8 <__gethex+0x1f8>
 8009cbc:	1e7b      	subs	r3, r7, #1
 8009cbe:	1159      	asrs	r1, r3, #5
 8009cc0:	f003 021f 	and.w	r2, r3, #31
 8009cc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cc8:	f04f 0a01 	mov.w	sl, #1
 8009ccc:	fa0a f202 	lsl.w	r2, sl, r2
 8009cd0:	420a      	tst	r2, r1
 8009cd2:	d009      	beq.n	8009ce8 <__gethex+0x1f8>
 8009cd4:	4553      	cmp	r3, sl
 8009cd6:	dd05      	ble.n	8009ce4 <__gethex+0x1f4>
 8009cd8:	1eb9      	subs	r1, r7, #2
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 ff36 	bl	800ab4c <__any_on>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d145      	bne.n	8009d70 <__gethex+0x280>
 8009ce4:	f04f 0a02 	mov.w	sl, #2
 8009ce8:	4639      	mov	r1, r7
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff fe99 	bl	8009a22 <rshift>
 8009cf0:	443d      	add	r5, r7
 8009cf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cf6:	42ab      	cmp	r3, r5
 8009cf8:	da4c      	bge.n	8009d94 <__gethex+0x2a4>
 8009cfa:	ee18 0a10 	vmov	r0, s16
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f000 fac4 	bl	800a28c <_Bfree>
 8009d04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d06:	2300      	movs	r3, #0
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	27a3      	movs	r7, #163	; 0xa3
 8009d0c:	e785      	b.n	8009c1a <__gethex+0x12a>
 8009d0e:	1e73      	subs	r3, r6, #1
 8009d10:	9a05      	ldr	r2, [sp, #20]
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d019      	beq.n	8009d50 <__gethex+0x260>
 8009d1c:	f1bb 0f20 	cmp.w	fp, #32
 8009d20:	d107      	bne.n	8009d32 <__gethex+0x242>
 8009d22:	9b02      	ldr	r3, [sp, #8]
 8009d24:	9a00      	ldr	r2, [sp, #0]
 8009d26:	f843 2b04 	str.w	r2, [r3], #4
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	469b      	mov	fp, r3
 8009d32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d36:	f7ff fec6 	bl	8009ac6 <__hexdig_fun>
 8009d3a:	9b00      	ldr	r3, [sp, #0]
 8009d3c:	f000 000f 	and.w	r0, r0, #15
 8009d40:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d44:	4303      	orrs	r3, r0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	f10b 0b04 	add.w	fp, fp, #4
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	e00d      	b.n	8009d6c <__gethex+0x27c>
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	9a06      	ldr	r2, [sp, #24]
 8009d54:	4413      	add	r3, r2
 8009d56:	42bb      	cmp	r3, r7
 8009d58:	d3e0      	bcc.n	8009d1c <__gethex+0x22c>
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	9901      	ldr	r1, [sp, #4]
 8009d5e:	9307      	str	r3, [sp, #28]
 8009d60:	4652      	mov	r2, sl
 8009d62:	f001 f9c4 	bl	800b0ee <strncmp>
 8009d66:	9b07      	ldr	r3, [sp, #28]
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1d7      	bne.n	8009d1c <__gethex+0x22c>
 8009d6c:	461e      	mov	r6, r3
 8009d6e:	e78b      	b.n	8009c88 <__gethex+0x198>
 8009d70:	f04f 0a03 	mov.w	sl, #3
 8009d74:	e7b8      	b.n	8009ce8 <__gethex+0x1f8>
 8009d76:	da0a      	bge.n	8009d8e <__gethex+0x29e>
 8009d78:	1a37      	subs	r7, r6, r0
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	ee18 0a10 	vmov	r0, s16
 8009d80:	463a      	mov	r2, r7
 8009d82:	f000 fc9f 	bl	800a6c4 <__lshift>
 8009d86:	1bed      	subs	r5, r5, r7
 8009d88:	4604      	mov	r4, r0
 8009d8a:	f100 0914 	add.w	r9, r0, #20
 8009d8e:	f04f 0a00 	mov.w	sl, #0
 8009d92:	e7ae      	b.n	8009cf2 <__gethex+0x202>
 8009d94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d98:	42a8      	cmp	r0, r5
 8009d9a:	dd72      	ble.n	8009e82 <__gethex+0x392>
 8009d9c:	1b45      	subs	r5, r0, r5
 8009d9e:	42ae      	cmp	r6, r5
 8009da0:	dc36      	bgt.n	8009e10 <__gethex+0x320>
 8009da2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d02a      	beq.n	8009e00 <__gethex+0x310>
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d02c      	beq.n	8009e08 <__gethex+0x318>
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d11c      	bne.n	8009dec <__gethex+0x2fc>
 8009db2:	42ae      	cmp	r6, r5
 8009db4:	d11a      	bne.n	8009dec <__gethex+0x2fc>
 8009db6:	2e01      	cmp	r6, #1
 8009db8:	d112      	bne.n	8009de0 <__gethex+0x2f0>
 8009dba:	9a04      	ldr	r2, [sp, #16]
 8009dbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	6123      	str	r3, [r4, #16]
 8009dc6:	f8c9 3000 	str.w	r3, [r9]
 8009dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dcc:	2762      	movs	r7, #98	; 0x62
 8009dce:	601c      	str	r4, [r3, #0]
 8009dd0:	e723      	b.n	8009c1a <__gethex+0x12a>
 8009dd2:	bf00      	nop
 8009dd4:	0800ba14 	.word	0x0800ba14
 8009dd8:	0800b938 	.word	0x0800b938
 8009ddc:	0800b9ac 	.word	0x0800b9ac
 8009de0:	1e71      	subs	r1, r6, #1
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 feb2 	bl	800ab4c <__any_on>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1e6      	bne.n	8009dba <__gethex+0x2ca>
 8009dec:	ee18 0a10 	vmov	r0, s16
 8009df0:	4621      	mov	r1, r4
 8009df2:	f000 fa4b 	bl	800a28c <_Bfree>
 8009df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	2750      	movs	r7, #80	; 0x50
 8009dfe:	e70c      	b.n	8009c1a <__gethex+0x12a>
 8009e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1f2      	bne.n	8009dec <__gethex+0x2fc>
 8009e06:	e7d8      	b.n	8009dba <__gethex+0x2ca>
 8009e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1d5      	bne.n	8009dba <__gethex+0x2ca>
 8009e0e:	e7ed      	b.n	8009dec <__gethex+0x2fc>
 8009e10:	1e6f      	subs	r7, r5, #1
 8009e12:	f1ba 0f00 	cmp.w	sl, #0
 8009e16:	d131      	bne.n	8009e7c <__gethex+0x38c>
 8009e18:	b127      	cbz	r7, 8009e24 <__gethex+0x334>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fe95 	bl	800ab4c <__any_on>
 8009e22:	4682      	mov	sl, r0
 8009e24:	117b      	asrs	r3, r7, #5
 8009e26:	2101      	movs	r1, #1
 8009e28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e2c:	f007 071f 	and.w	r7, r7, #31
 8009e30:	fa01 f707 	lsl.w	r7, r1, r7
 8009e34:	421f      	tst	r7, r3
 8009e36:	4629      	mov	r1, r5
 8009e38:	4620      	mov	r0, r4
 8009e3a:	bf18      	it	ne
 8009e3c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e40:	1b76      	subs	r6, r6, r5
 8009e42:	f7ff fdee 	bl	8009a22 <rshift>
 8009e46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e4a:	2702      	movs	r7, #2
 8009e4c:	f1ba 0f00 	cmp.w	sl, #0
 8009e50:	d048      	beq.n	8009ee4 <__gethex+0x3f4>
 8009e52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d015      	beq.n	8009e86 <__gethex+0x396>
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d017      	beq.n	8009e8e <__gethex+0x39e>
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d109      	bne.n	8009e76 <__gethex+0x386>
 8009e62:	f01a 0f02 	tst.w	sl, #2
 8009e66:	d006      	beq.n	8009e76 <__gethex+0x386>
 8009e68:	f8d9 0000 	ldr.w	r0, [r9]
 8009e6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e70:	f01a 0f01 	tst.w	sl, #1
 8009e74:	d10e      	bne.n	8009e94 <__gethex+0x3a4>
 8009e76:	f047 0710 	orr.w	r7, r7, #16
 8009e7a:	e033      	b.n	8009ee4 <__gethex+0x3f4>
 8009e7c:	f04f 0a01 	mov.w	sl, #1
 8009e80:	e7d0      	b.n	8009e24 <__gethex+0x334>
 8009e82:	2701      	movs	r7, #1
 8009e84:	e7e2      	b.n	8009e4c <__gethex+0x35c>
 8009e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e88:	f1c3 0301 	rsb	r3, r3, #1
 8009e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8009e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0f0      	beq.n	8009e76 <__gethex+0x386>
 8009e94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e98:	f104 0314 	add.w	r3, r4, #20
 8009e9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ea0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ea4:	f04f 0c00 	mov.w	ip, #0
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009eb2:	d01c      	beq.n	8009eee <__gethex+0x3fe>
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	6002      	str	r2, [r0, #0]
 8009eb8:	2f02      	cmp	r7, #2
 8009eba:	f104 0314 	add.w	r3, r4, #20
 8009ebe:	d13f      	bne.n	8009f40 <__gethex+0x450>
 8009ec0:	f8d8 2000 	ldr.w	r2, [r8]
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	42b2      	cmp	r2, r6
 8009ec8:	d10a      	bne.n	8009ee0 <__gethex+0x3f0>
 8009eca:	1171      	asrs	r1, r6, #5
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ed2:	f006 061f 	and.w	r6, r6, #31
 8009ed6:	fa02 f606 	lsl.w	r6, r2, r6
 8009eda:	421e      	tst	r6, r3
 8009edc:	bf18      	it	ne
 8009ede:	4617      	movne	r7, r2
 8009ee0:	f047 0720 	orr.w	r7, r7, #32
 8009ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ee6:	601c      	str	r4, [r3, #0]
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	601d      	str	r5, [r3, #0]
 8009eec:	e695      	b.n	8009c1a <__gethex+0x12a>
 8009eee:	4299      	cmp	r1, r3
 8009ef0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ef4:	d8d8      	bhi.n	8009ea8 <__gethex+0x3b8>
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	459b      	cmp	fp, r3
 8009efa:	db19      	blt.n	8009f30 <__gethex+0x440>
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	ee18 0a10 	vmov	r0, s16
 8009f02:	3101      	adds	r1, #1
 8009f04:	f000 f982 	bl	800a20c <_Balloc>
 8009f08:	4681      	mov	r9, r0
 8009f0a:	b918      	cbnz	r0, 8009f14 <__gethex+0x424>
 8009f0c:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <__gethex+0x488>)
 8009f0e:	4602      	mov	r2, r0
 8009f10:	2184      	movs	r1, #132	; 0x84
 8009f12:	e6a8      	b.n	8009c66 <__gethex+0x176>
 8009f14:	6922      	ldr	r2, [r4, #16]
 8009f16:	3202      	adds	r2, #2
 8009f18:	f104 010c 	add.w	r1, r4, #12
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	300c      	adds	r0, #12
 8009f20:	f7fc feb6 	bl	8006c90 <memcpy>
 8009f24:	4621      	mov	r1, r4
 8009f26:	ee18 0a10 	vmov	r0, s16
 8009f2a:	f000 f9af 	bl	800a28c <_Bfree>
 8009f2e:	464c      	mov	r4, r9
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f38:	6122      	str	r2, [r4, #16]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	615a      	str	r2, [r3, #20]
 8009f3e:	e7bb      	b.n	8009eb8 <__gethex+0x3c8>
 8009f40:	6922      	ldr	r2, [r4, #16]
 8009f42:	455a      	cmp	r2, fp
 8009f44:	dd0b      	ble.n	8009f5e <__gethex+0x46e>
 8009f46:	2101      	movs	r1, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff fd6a 	bl	8009a22 <rshift>
 8009f4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f52:	3501      	adds	r5, #1
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	f6ff aed0 	blt.w	8009cfa <__gethex+0x20a>
 8009f5a:	2701      	movs	r7, #1
 8009f5c:	e7c0      	b.n	8009ee0 <__gethex+0x3f0>
 8009f5e:	f016 061f 	ands.w	r6, r6, #31
 8009f62:	d0fa      	beq.n	8009f5a <__gethex+0x46a>
 8009f64:	4453      	add	r3, sl
 8009f66:	f1c6 0620 	rsb	r6, r6, #32
 8009f6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f6e:	f000 fa3f 	bl	800a3f0 <__hi0bits>
 8009f72:	42b0      	cmp	r0, r6
 8009f74:	dbe7      	blt.n	8009f46 <__gethex+0x456>
 8009f76:	e7f0      	b.n	8009f5a <__gethex+0x46a>
 8009f78:	0800b938 	.word	0x0800b938

08009f7c <L_shift>:
 8009f7c:	f1c2 0208 	rsb	r2, r2, #8
 8009f80:	0092      	lsls	r2, r2, #2
 8009f82:	b570      	push	{r4, r5, r6, lr}
 8009f84:	f1c2 0620 	rsb	r6, r2, #32
 8009f88:	6843      	ldr	r3, [r0, #4]
 8009f8a:	6804      	ldr	r4, [r0, #0]
 8009f8c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f90:	432c      	orrs	r4, r5
 8009f92:	40d3      	lsrs	r3, r2
 8009f94:	6004      	str	r4, [r0, #0]
 8009f96:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f9a:	4288      	cmp	r0, r1
 8009f9c:	d3f4      	bcc.n	8009f88 <L_shift+0xc>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}

08009fa0 <__match>:
 8009fa0:	b530      	push	{r4, r5, lr}
 8009fa2:	6803      	ldr	r3, [r0, #0]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009faa:	b914      	cbnz	r4, 8009fb2 <__match+0x12>
 8009fac:	6003      	str	r3, [r0, #0]
 8009fae:	2001      	movs	r0, #1
 8009fb0:	bd30      	pop	{r4, r5, pc}
 8009fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fba:	2d19      	cmp	r5, #25
 8009fbc:	bf98      	it	ls
 8009fbe:	3220      	addls	r2, #32
 8009fc0:	42a2      	cmp	r2, r4
 8009fc2:	d0f0      	beq.n	8009fa6 <__match+0x6>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e7f3      	b.n	8009fb0 <__match+0x10>

08009fc8 <__hexnan>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	680b      	ldr	r3, [r1, #0]
 8009fce:	115e      	asrs	r6, r3, #5
 8009fd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fd4:	f013 031f 	ands.w	r3, r3, #31
 8009fd8:	b087      	sub	sp, #28
 8009fda:	bf18      	it	ne
 8009fdc:	3604      	addne	r6, #4
 8009fde:	2500      	movs	r5, #0
 8009fe0:	1f37      	subs	r7, r6, #4
 8009fe2:	4690      	mov	r8, r2
 8009fe4:	6802      	ldr	r2, [r0, #0]
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	4682      	mov	sl, r0
 8009fea:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fee:	46b9      	mov	r9, r7
 8009ff0:	463c      	mov	r4, r7
 8009ff2:	9502      	str	r5, [sp, #8]
 8009ff4:	46ab      	mov	fp, r5
 8009ff6:	7851      	ldrb	r1, [r2, #1]
 8009ff8:	1c53      	adds	r3, r2, #1
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	b341      	cbz	r1, 800a050 <__hexnan+0x88>
 8009ffe:	4608      	mov	r0, r1
 800a000:	9205      	str	r2, [sp, #20]
 800a002:	9104      	str	r1, [sp, #16]
 800a004:	f7ff fd5f 	bl	8009ac6 <__hexdig_fun>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d14f      	bne.n	800a0ac <__hexnan+0xe4>
 800a00c:	9904      	ldr	r1, [sp, #16]
 800a00e:	9a05      	ldr	r2, [sp, #20]
 800a010:	2920      	cmp	r1, #32
 800a012:	d818      	bhi.n	800a046 <__hexnan+0x7e>
 800a014:	9b02      	ldr	r3, [sp, #8]
 800a016:	459b      	cmp	fp, r3
 800a018:	dd13      	ble.n	800a042 <__hexnan+0x7a>
 800a01a:	454c      	cmp	r4, r9
 800a01c:	d206      	bcs.n	800a02c <__hexnan+0x64>
 800a01e:	2d07      	cmp	r5, #7
 800a020:	dc04      	bgt.n	800a02c <__hexnan+0x64>
 800a022:	462a      	mov	r2, r5
 800a024:	4649      	mov	r1, r9
 800a026:	4620      	mov	r0, r4
 800a028:	f7ff ffa8 	bl	8009f7c <L_shift>
 800a02c:	4544      	cmp	r4, r8
 800a02e:	d950      	bls.n	800a0d2 <__hexnan+0x10a>
 800a030:	2300      	movs	r3, #0
 800a032:	f1a4 0904 	sub.w	r9, r4, #4
 800a036:	f844 3c04 	str.w	r3, [r4, #-4]
 800a03a:	f8cd b008 	str.w	fp, [sp, #8]
 800a03e:	464c      	mov	r4, r9
 800a040:	461d      	mov	r5, r3
 800a042:	9a03      	ldr	r2, [sp, #12]
 800a044:	e7d7      	b.n	8009ff6 <__hexnan+0x2e>
 800a046:	2929      	cmp	r1, #41	; 0x29
 800a048:	d156      	bne.n	800a0f8 <__hexnan+0x130>
 800a04a:	3202      	adds	r2, #2
 800a04c:	f8ca 2000 	str.w	r2, [sl]
 800a050:	f1bb 0f00 	cmp.w	fp, #0
 800a054:	d050      	beq.n	800a0f8 <__hexnan+0x130>
 800a056:	454c      	cmp	r4, r9
 800a058:	d206      	bcs.n	800a068 <__hexnan+0xa0>
 800a05a:	2d07      	cmp	r5, #7
 800a05c:	dc04      	bgt.n	800a068 <__hexnan+0xa0>
 800a05e:	462a      	mov	r2, r5
 800a060:	4649      	mov	r1, r9
 800a062:	4620      	mov	r0, r4
 800a064:	f7ff ff8a 	bl	8009f7c <L_shift>
 800a068:	4544      	cmp	r4, r8
 800a06a:	d934      	bls.n	800a0d6 <__hexnan+0x10e>
 800a06c:	f1a8 0204 	sub.w	r2, r8, #4
 800a070:	4623      	mov	r3, r4
 800a072:	f853 1b04 	ldr.w	r1, [r3], #4
 800a076:	f842 1f04 	str.w	r1, [r2, #4]!
 800a07a:	429f      	cmp	r7, r3
 800a07c:	d2f9      	bcs.n	800a072 <__hexnan+0xaa>
 800a07e:	1b3b      	subs	r3, r7, r4
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	3304      	adds	r3, #4
 800a086:	3401      	adds	r4, #1
 800a088:	3e03      	subs	r6, #3
 800a08a:	42b4      	cmp	r4, r6
 800a08c:	bf88      	it	hi
 800a08e:	2304      	movhi	r3, #4
 800a090:	4443      	add	r3, r8
 800a092:	2200      	movs	r2, #0
 800a094:	f843 2b04 	str.w	r2, [r3], #4
 800a098:	429f      	cmp	r7, r3
 800a09a:	d2fb      	bcs.n	800a094 <__hexnan+0xcc>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	b91b      	cbnz	r3, 800a0a8 <__hexnan+0xe0>
 800a0a0:	4547      	cmp	r7, r8
 800a0a2:	d127      	bne.n	800a0f4 <__hexnan+0x12c>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	2005      	movs	r0, #5
 800a0aa:	e026      	b.n	800a0fa <__hexnan+0x132>
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	2d08      	cmp	r5, #8
 800a0b0:	f10b 0b01 	add.w	fp, fp, #1
 800a0b4:	dd06      	ble.n	800a0c4 <__hexnan+0xfc>
 800a0b6:	4544      	cmp	r4, r8
 800a0b8:	d9c3      	bls.n	800a042 <__hexnan+0x7a>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0c0:	2501      	movs	r5, #1
 800a0c2:	3c04      	subs	r4, #4
 800a0c4:	6822      	ldr	r2, [r4, #0]
 800a0c6:	f000 000f 	and.w	r0, r0, #15
 800a0ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a0ce:	6022      	str	r2, [r4, #0]
 800a0d0:	e7b7      	b.n	800a042 <__hexnan+0x7a>
 800a0d2:	2508      	movs	r5, #8
 800a0d4:	e7b5      	b.n	800a042 <__hexnan+0x7a>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0df      	beq.n	800a09c <__hexnan+0xd4>
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	f1c3 0320 	rsb	r3, r3, #32
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0ec:	401a      	ands	r2, r3
 800a0ee:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0f2:	e7d3      	b.n	800a09c <__hexnan+0xd4>
 800a0f4:	3f04      	subs	r7, #4
 800a0f6:	e7d1      	b.n	800a09c <__hexnan+0xd4>
 800a0f8:	2004      	movs	r0, #4
 800a0fa:	b007      	add	sp, #28
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a100 <_localeconv_r>:
 800a100:	4800      	ldr	r0, [pc, #0]	; (800a104 <_localeconv_r+0x4>)
 800a102:	4770      	bx	lr
 800a104:	20000254 	.word	0x20000254

0800a108 <__retarget_lock_init_recursive>:
 800a108:	4770      	bx	lr

0800a10a <__retarget_lock_acquire_recursive>:
 800a10a:	4770      	bx	lr

0800a10c <__retarget_lock_release_recursive>:
 800a10c:	4770      	bx	lr

0800a10e <__swhatbuf_r>:
 800a10e:	b570      	push	{r4, r5, r6, lr}
 800a110:	460e      	mov	r6, r1
 800a112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a116:	2900      	cmp	r1, #0
 800a118:	b096      	sub	sp, #88	; 0x58
 800a11a:	4614      	mov	r4, r2
 800a11c:	461d      	mov	r5, r3
 800a11e:	da08      	bge.n	800a132 <__swhatbuf_r+0x24>
 800a120:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	602a      	str	r2, [r5, #0]
 800a128:	061a      	lsls	r2, r3, #24
 800a12a:	d410      	bmi.n	800a14e <__swhatbuf_r+0x40>
 800a12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a130:	e00e      	b.n	800a150 <__swhatbuf_r+0x42>
 800a132:	466a      	mov	r2, sp
 800a134:	f001 f84e 	bl	800b1d4 <_fstat_r>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dbf1      	blt.n	800a120 <__swhatbuf_r+0x12>
 800a13c:	9a01      	ldr	r2, [sp, #4]
 800a13e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a146:	425a      	negs	r2, r3
 800a148:	415a      	adcs	r2, r3
 800a14a:	602a      	str	r2, [r5, #0]
 800a14c:	e7ee      	b.n	800a12c <__swhatbuf_r+0x1e>
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	2000      	movs	r0, #0
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	b016      	add	sp, #88	; 0x58
 800a156:	bd70      	pop	{r4, r5, r6, pc}

0800a158 <__smakebuf_r>:
 800a158:	898b      	ldrh	r3, [r1, #12]
 800a15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a15c:	079d      	lsls	r5, r3, #30
 800a15e:	4606      	mov	r6, r0
 800a160:	460c      	mov	r4, r1
 800a162:	d507      	bpl.n	800a174 <__smakebuf_r+0x1c>
 800a164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	6123      	str	r3, [r4, #16]
 800a16c:	2301      	movs	r3, #1
 800a16e:	6163      	str	r3, [r4, #20]
 800a170:	b002      	add	sp, #8
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	ab01      	add	r3, sp, #4
 800a176:	466a      	mov	r2, sp
 800a178:	f7ff ffc9 	bl	800a10e <__swhatbuf_r>
 800a17c:	9900      	ldr	r1, [sp, #0]
 800a17e:	4605      	mov	r5, r0
 800a180:	4630      	mov	r0, r6
 800a182:	f000 fd87 	bl	800ac94 <_malloc_r>
 800a186:	b948      	cbnz	r0, 800a19c <__smakebuf_r+0x44>
 800a188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18c:	059a      	lsls	r2, r3, #22
 800a18e:	d4ef      	bmi.n	800a170 <__smakebuf_r+0x18>
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	f043 0302 	orr.w	r3, r3, #2
 800a198:	81a3      	strh	r3, [r4, #12]
 800a19a:	e7e3      	b.n	800a164 <__smakebuf_r+0xc>
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <__smakebuf_r+0x7c>)
 800a19e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	6020      	str	r0, [r4, #0]
 800a1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	6163      	str	r3, [r4, #20]
 800a1ae:	9b01      	ldr	r3, [sp, #4]
 800a1b0:	6120      	str	r0, [r4, #16]
 800a1b2:	b15b      	cbz	r3, 800a1cc <__smakebuf_r+0x74>
 800a1b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f001 f81d 	bl	800b1f8 <_isatty_r>
 800a1be:	b128      	cbz	r0, 800a1cc <__smakebuf_r+0x74>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f023 0303 	bic.w	r3, r3, #3
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	89a0      	ldrh	r0, [r4, #12]
 800a1ce:	4305      	orrs	r5, r0
 800a1d0:	81a5      	strh	r5, [r4, #12]
 800a1d2:	e7cd      	b.n	800a170 <__smakebuf_r+0x18>
 800a1d4:	08009881 	.word	0x08009881

0800a1d8 <malloc>:
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <malloc+0xc>)
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f000 bd59 	b.w	800ac94 <_malloc_r>
 800a1e2:	bf00      	nop
 800a1e4:	200000fc 	.word	0x200000fc

0800a1e8 <__ascii_mbtowc>:
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	b901      	cbnz	r1, 800a1ee <__ascii_mbtowc+0x6>
 800a1ec:	a901      	add	r1, sp, #4
 800a1ee:	b142      	cbz	r2, 800a202 <__ascii_mbtowc+0x1a>
 800a1f0:	b14b      	cbz	r3, 800a206 <__ascii_mbtowc+0x1e>
 800a1f2:	7813      	ldrb	r3, [r2, #0]
 800a1f4:	600b      	str	r3, [r1, #0]
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	1e10      	subs	r0, r2, #0
 800a1fa:	bf18      	it	ne
 800a1fc:	2001      	movne	r0, #1
 800a1fe:	b002      	add	sp, #8
 800a200:	4770      	bx	lr
 800a202:	4610      	mov	r0, r2
 800a204:	e7fb      	b.n	800a1fe <__ascii_mbtowc+0x16>
 800a206:	f06f 0001 	mvn.w	r0, #1
 800a20a:	e7f8      	b.n	800a1fe <__ascii_mbtowc+0x16>

0800a20c <_Balloc>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	b976      	cbnz	r6, 800a234 <_Balloc+0x28>
 800a216:	2010      	movs	r0, #16
 800a218:	f7ff ffde 	bl	800a1d8 <malloc>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6260      	str	r0, [r4, #36]	; 0x24
 800a220:	b920      	cbnz	r0, 800a22c <_Balloc+0x20>
 800a222:	4b18      	ldr	r3, [pc, #96]	; (800a284 <_Balloc+0x78>)
 800a224:	4818      	ldr	r0, [pc, #96]	; (800a288 <_Balloc+0x7c>)
 800a226:	2166      	movs	r1, #102	; 0x66
 800a228:	f000 ff94 	bl	800b154 <__assert_func>
 800a22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a230:	6006      	str	r6, [r0, #0]
 800a232:	60c6      	str	r6, [r0, #12]
 800a234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a236:	68f3      	ldr	r3, [r6, #12]
 800a238:	b183      	cbz	r3, 800a25c <_Balloc+0x50>
 800a23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a242:	b9b8      	cbnz	r0, 800a274 <_Balloc+0x68>
 800a244:	2101      	movs	r1, #1
 800a246:	fa01 f605 	lsl.w	r6, r1, r5
 800a24a:	1d72      	adds	r2, r6, #5
 800a24c:	0092      	lsls	r2, r2, #2
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 fc9d 	bl	800ab8e <_calloc_r>
 800a254:	b160      	cbz	r0, 800a270 <_Balloc+0x64>
 800a256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a25a:	e00e      	b.n	800a27a <_Balloc+0x6e>
 800a25c:	2221      	movs	r2, #33	; 0x21
 800a25e:	2104      	movs	r1, #4
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fc94 	bl	800ab8e <_calloc_r>
 800a266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a268:	60f0      	str	r0, [r6, #12]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e4      	bne.n	800a23a <_Balloc+0x2e>
 800a270:	2000      	movs	r0, #0
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	6802      	ldr	r2, [r0, #0]
 800a276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a27a:	2300      	movs	r3, #0
 800a27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a280:	e7f7      	b.n	800a272 <_Balloc+0x66>
 800a282:	bf00      	nop
 800a284:	0800b8c6 	.word	0x0800b8c6
 800a288:	0800ba28 	.word	0x0800ba28

0800a28c <_Bfree>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b976      	cbnz	r6, 800a2b4 <_Bfree+0x28>
 800a296:	2010      	movs	r0, #16
 800a298:	f7ff ff9e 	bl	800a1d8 <malloc>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6268      	str	r0, [r5, #36]	; 0x24
 800a2a0:	b920      	cbnz	r0, 800a2ac <_Bfree+0x20>
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <_Bfree+0x3c>)
 800a2a4:	4809      	ldr	r0, [pc, #36]	; (800a2cc <_Bfree+0x40>)
 800a2a6:	218a      	movs	r1, #138	; 0x8a
 800a2a8:	f000 ff54 	bl	800b154 <__assert_func>
 800a2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b0:	6006      	str	r6, [r0, #0]
 800a2b2:	60c6      	str	r6, [r0, #12]
 800a2b4:	b13c      	cbz	r4, 800a2c6 <_Bfree+0x3a>
 800a2b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2b8:	6862      	ldr	r2, [r4, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2c0:	6021      	str	r1, [r4, #0]
 800a2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	0800b8c6 	.word	0x0800b8c6
 800a2cc:	0800ba28 	.word	0x0800ba28

0800a2d0 <__multadd>:
 800a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	690d      	ldr	r5, [r1, #16]
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	460c      	mov	r4, r1
 800a2da:	461e      	mov	r6, r3
 800a2dc:	f101 0c14 	add.w	ip, r1, #20
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2e6:	b299      	uxth	r1, r3
 800a2e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a2ec:	0c1e      	lsrs	r6, r3, #16
 800a2ee:	0c0b      	lsrs	r3, r1, #16
 800a2f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2f4:	b289      	uxth	r1, r1
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2fc:	4285      	cmp	r5, r0
 800a2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a306:	dcec      	bgt.n	800a2e2 <__multadd+0x12>
 800a308:	b30e      	cbz	r6, 800a34e <__multadd+0x7e>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc19      	bgt.n	800a344 <__multadd+0x74>
 800a310:	6861      	ldr	r1, [r4, #4]
 800a312:	4638      	mov	r0, r7
 800a314:	3101      	adds	r1, #1
 800a316:	f7ff ff79 	bl	800a20c <_Balloc>
 800a31a:	4680      	mov	r8, r0
 800a31c:	b928      	cbnz	r0, 800a32a <__multadd+0x5a>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <__multadd+0x84>)
 800a322:	480d      	ldr	r0, [pc, #52]	; (800a358 <__multadd+0x88>)
 800a324:	21b5      	movs	r1, #181	; 0xb5
 800a326:	f000 ff15 	bl	800b154 <__assert_func>
 800a32a:	6922      	ldr	r2, [r4, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	f104 010c 	add.w	r1, r4, #12
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	300c      	adds	r0, #12
 800a336:	f7fc fcab 	bl	8006c90 <memcpy>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4638      	mov	r0, r7
 800a33e:	f7ff ffa5 	bl	800a28c <_Bfree>
 800a342:	4644      	mov	r4, r8
 800a344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a348:	3501      	adds	r5, #1
 800a34a:	615e      	str	r6, [r3, #20]
 800a34c:	6125      	str	r5, [r4, #16]
 800a34e:	4620      	mov	r0, r4
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	0800b938 	.word	0x0800b938
 800a358:	0800ba28 	.word	0x0800ba28

0800a35c <__s2b>:
 800a35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	4615      	mov	r5, r2
 800a364:	461f      	mov	r7, r3
 800a366:	2209      	movs	r2, #9
 800a368:	3308      	adds	r3, #8
 800a36a:	4606      	mov	r6, r0
 800a36c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a370:	2100      	movs	r1, #0
 800a372:	2201      	movs	r2, #1
 800a374:	429a      	cmp	r2, r3
 800a376:	db09      	blt.n	800a38c <__s2b+0x30>
 800a378:	4630      	mov	r0, r6
 800a37a:	f7ff ff47 	bl	800a20c <_Balloc>
 800a37e:	b940      	cbnz	r0, 800a392 <__s2b+0x36>
 800a380:	4602      	mov	r2, r0
 800a382:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <__s2b+0x8c>)
 800a384:	4819      	ldr	r0, [pc, #100]	; (800a3ec <__s2b+0x90>)
 800a386:	21ce      	movs	r1, #206	; 0xce
 800a388:	f000 fee4 	bl	800b154 <__assert_func>
 800a38c:	0052      	lsls	r2, r2, #1
 800a38e:	3101      	adds	r1, #1
 800a390:	e7f0      	b.n	800a374 <__s2b+0x18>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	6143      	str	r3, [r0, #20]
 800a396:	2d09      	cmp	r5, #9
 800a398:	f04f 0301 	mov.w	r3, #1
 800a39c:	6103      	str	r3, [r0, #16]
 800a39e:	dd16      	ble.n	800a3ce <__s2b+0x72>
 800a3a0:	f104 0909 	add.w	r9, r4, #9
 800a3a4:	46c8      	mov	r8, r9
 800a3a6:	442c      	add	r4, r5
 800a3a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	3b30      	subs	r3, #48	; 0x30
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff8c 	bl	800a2d0 <__multadd>
 800a3b8:	45a0      	cmp	r8, r4
 800a3ba:	d1f5      	bne.n	800a3a8 <__s2b+0x4c>
 800a3bc:	f1a5 0408 	sub.w	r4, r5, #8
 800a3c0:	444c      	add	r4, r9
 800a3c2:	1b2d      	subs	r5, r5, r4
 800a3c4:	1963      	adds	r3, r4, r5
 800a3c6:	42bb      	cmp	r3, r7
 800a3c8:	db04      	blt.n	800a3d4 <__s2b+0x78>
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	340a      	adds	r4, #10
 800a3d0:	2509      	movs	r5, #9
 800a3d2:	e7f6      	b.n	800a3c2 <__s2b+0x66>
 800a3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3d8:	4601      	mov	r1, r0
 800a3da:	3b30      	subs	r3, #48	; 0x30
 800a3dc:	220a      	movs	r2, #10
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7ff ff76 	bl	800a2d0 <__multadd>
 800a3e4:	e7ee      	b.n	800a3c4 <__s2b+0x68>
 800a3e6:	bf00      	nop
 800a3e8:	0800b938 	.word	0x0800b938
 800a3ec:	0800ba28 	.word	0x0800ba28

0800a3f0 <__hi0bits>:
 800a3f0:	0c03      	lsrs	r3, r0, #16
 800a3f2:	041b      	lsls	r3, r3, #16
 800a3f4:	b9d3      	cbnz	r3, 800a42c <__hi0bits+0x3c>
 800a3f6:	0400      	lsls	r0, r0, #16
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3fe:	bf04      	itt	eq
 800a400:	0200      	lsleq	r0, r0, #8
 800a402:	3308      	addeq	r3, #8
 800a404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a408:	bf04      	itt	eq
 800a40a:	0100      	lsleq	r0, r0, #4
 800a40c:	3304      	addeq	r3, #4
 800a40e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a412:	bf04      	itt	eq
 800a414:	0080      	lsleq	r0, r0, #2
 800a416:	3302      	addeq	r3, #2
 800a418:	2800      	cmp	r0, #0
 800a41a:	db05      	blt.n	800a428 <__hi0bits+0x38>
 800a41c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a420:	f103 0301 	add.w	r3, r3, #1
 800a424:	bf08      	it	eq
 800a426:	2320      	moveq	r3, #32
 800a428:	4618      	mov	r0, r3
 800a42a:	4770      	bx	lr
 800a42c:	2300      	movs	r3, #0
 800a42e:	e7e4      	b.n	800a3fa <__hi0bits+0xa>

0800a430 <__lo0bits>:
 800a430:	6803      	ldr	r3, [r0, #0]
 800a432:	f013 0207 	ands.w	r2, r3, #7
 800a436:	4601      	mov	r1, r0
 800a438:	d00b      	beq.n	800a452 <__lo0bits+0x22>
 800a43a:	07da      	lsls	r2, r3, #31
 800a43c:	d423      	bmi.n	800a486 <__lo0bits+0x56>
 800a43e:	0798      	lsls	r0, r3, #30
 800a440:	bf49      	itett	mi
 800a442:	085b      	lsrmi	r3, r3, #1
 800a444:	089b      	lsrpl	r3, r3, #2
 800a446:	2001      	movmi	r0, #1
 800a448:	600b      	strmi	r3, [r1, #0]
 800a44a:	bf5c      	itt	pl
 800a44c:	600b      	strpl	r3, [r1, #0]
 800a44e:	2002      	movpl	r0, #2
 800a450:	4770      	bx	lr
 800a452:	b298      	uxth	r0, r3
 800a454:	b9a8      	cbnz	r0, 800a482 <__lo0bits+0x52>
 800a456:	0c1b      	lsrs	r3, r3, #16
 800a458:	2010      	movs	r0, #16
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	b90a      	cbnz	r2, 800a462 <__lo0bits+0x32>
 800a45e:	3008      	adds	r0, #8
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	071a      	lsls	r2, r3, #28
 800a464:	bf04      	itt	eq
 800a466:	091b      	lsreq	r3, r3, #4
 800a468:	3004      	addeq	r0, #4
 800a46a:	079a      	lsls	r2, r3, #30
 800a46c:	bf04      	itt	eq
 800a46e:	089b      	lsreq	r3, r3, #2
 800a470:	3002      	addeq	r0, #2
 800a472:	07da      	lsls	r2, r3, #31
 800a474:	d403      	bmi.n	800a47e <__lo0bits+0x4e>
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	f100 0001 	add.w	r0, r0, #1
 800a47c:	d005      	beq.n	800a48a <__lo0bits+0x5a>
 800a47e:	600b      	str	r3, [r1, #0]
 800a480:	4770      	bx	lr
 800a482:	4610      	mov	r0, r2
 800a484:	e7e9      	b.n	800a45a <__lo0bits+0x2a>
 800a486:	2000      	movs	r0, #0
 800a488:	4770      	bx	lr
 800a48a:	2020      	movs	r0, #32
 800a48c:	4770      	bx	lr
	...

0800a490 <__i2b>:
 800a490:	b510      	push	{r4, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	2101      	movs	r1, #1
 800a496:	f7ff feb9 	bl	800a20c <_Balloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	b928      	cbnz	r0, 800a4aa <__i2b+0x1a>
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <__i2b+0x24>)
 800a4a0:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <__i2b+0x28>)
 800a4a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4a6:	f000 fe55 	bl	800b154 <__assert_func>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	6144      	str	r4, [r0, #20]
 800a4ae:	6103      	str	r3, [r0, #16]
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800b938 	.word	0x0800b938
 800a4b8:	0800ba28 	.word	0x0800ba28

0800a4bc <__multiply>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	4691      	mov	r9, r2
 800a4c2:	690a      	ldr	r2, [r1, #16]
 800a4c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	bfb8      	it	lt
 800a4cc:	460b      	movlt	r3, r1
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	bfbc      	itt	lt
 800a4d2:	464c      	movlt	r4, r9
 800a4d4:	4699      	movlt	r9, r3
 800a4d6:	6927      	ldr	r7, [r4, #16]
 800a4d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4dc:	68a3      	ldr	r3, [r4, #8]
 800a4de:	6861      	ldr	r1, [r4, #4]
 800a4e0:	eb07 060a 	add.w	r6, r7, sl
 800a4e4:	42b3      	cmp	r3, r6
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	bfb8      	it	lt
 800a4ea:	3101      	addlt	r1, #1
 800a4ec:	f7ff fe8e 	bl	800a20c <_Balloc>
 800a4f0:	b930      	cbnz	r0, 800a500 <__multiply+0x44>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b44      	ldr	r3, [pc, #272]	; (800a608 <__multiply+0x14c>)
 800a4f6:	4845      	ldr	r0, [pc, #276]	; (800a60c <__multiply+0x150>)
 800a4f8:	f240 115d 	movw	r1, #349	; 0x15d
 800a4fc:	f000 fe2a 	bl	800b154 <__assert_func>
 800a500:	f100 0514 	add.w	r5, r0, #20
 800a504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a508:	462b      	mov	r3, r5
 800a50a:	2200      	movs	r2, #0
 800a50c:	4543      	cmp	r3, r8
 800a50e:	d321      	bcc.n	800a554 <__multiply+0x98>
 800a510:	f104 0314 	add.w	r3, r4, #20
 800a514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a518:	f109 0314 	add.w	r3, r9, #20
 800a51c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a520:	9202      	str	r2, [sp, #8]
 800a522:	1b3a      	subs	r2, r7, r4
 800a524:	3a15      	subs	r2, #21
 800a526:	f022 0203 	bic.w	r2, r2, #3
 800a52a:	3204      	adds	r2, #4
 800a52c:	f104 0115 	add.w	r1, r4, #21
 800a530:	428f      	cmp	r7, r1
 800a532:	bf38      	it	cc
 800a534:	2204      	movcc	r2, #4
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	9a02      	ldr	r2, [sp, #8]
 800a53a:	9303      	str	r3, [sp, #12]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d80c      	bhi.n	800a55a <__multiply+0x9e>
 800a540:	2e00      	cmp	r6, #0
 800a542:	dd03      	ble.n	800a54c <__multiply+0x90>
 800a544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d05a      	beq.n	800a602 <__multiply+0x146>
 800a54c:	6106      	str	r6, [r0, #16]
 800a54e:	b005      	add	sp, #20
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	f843 2b04 	str.w	r2, [r3], #4
 800a558:	e7d8      	b.n	800a50c <__multiply+0x50>
 800a55a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a55e:	f1ba 0f00 	cmp.w	sl, #0
 800a562:	d024      	beq.n	800a5ae <__multiply+0xf2>
 800a564:	f104 0e14 	add.w	lr, r4, #20
 800a568:	46a9      	mov	r9, r5
 800a56a:	f04f 0c00 	mov.w	ip, #0
 800a56e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a572:	f8d9 1000 	ldr.w	r1, [r9]
 800a576:	fa1f fb82 	uxth.w	fp, r2
 800a57a:	b289      	uxth	r1, r1
 800a57c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a584:	f8d9 2000 	ldr.w	r2, [r9]
 800a588:	4461      	add	r1, ip
 800a58a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a58e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a596:	b289      	uxth	r1, r1
 800a598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a59c:	4577      	cmp	r7, lr
 800a59e:	f849 1b04 	str.w	r1, [r9], #4
 800a5a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5a6:	d8e2      	bhi.n	800a56e <__multiply+0xb2>
 800a5a8:	9a01      	ldr	r2, [sp, #4]
 800a5aa:	f845 c002 	str.w	ip, [r5, r2]
 800a5ae:	9a03      	ldr	r2, [sp, #12]
 800a5b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	d020      	beq.n	800a5fe <__multiply+0x142>
 800a5bc:	6829      	ldr	r1, [r5, #0]
 800a5be:	f104 0c14 	add.w	ip, r4, #20
 800a5c2:	46ae      	mov	lr, r5
 800a5c4:	f04f 0a00 	mov.w	sl, #0
 800a5c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a5cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a5d4:	4492      	add	sl, r2
 800a5d6:	b289      	uxth	r1, r1
 800a5d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a5e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a5e8:	0c12      	lsrs	r2, r2, #16
 800a5ea:	fb09 1102 	mla	r1, r9, r2, r1
 800a5ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5f2:	4567      	cmp	r7, ip
 800a5f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5f8:	d8e6      	bhi.n	800a5c8 <__multiply+0x10c>
 800a5fa:	9a01      	ldr	r2, [sp, #4]
 800a5fc:	50a9      	str	r1, [r5, r2]
 800a5fe:	3504      	adds	r5, #4
 800a600:	e79a      	b.n	800a538 <__multiply+0x7c>
 800a602:	3e01      	subs	r6, #1
 800a604:	e79c      	b.n	800a540 <__multiply+0x84>
 800a606:	bf00      	nop
 800a608:	0800b938 	.word	0x0800b938
 800a60c:	0800ba28 	.word	0x0800ba28

0800a610 <__pow5mult>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	4615      	mov	r5, r2
 800a616:	f012 0203 	ands.w	r2, r2, #3
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	d007      	beq.n	800a630 <__pow5mult+0x20>
 800a620:	4c25      	ldr	r4, [pc, #148]	; (800a6b8 <__pow5mult+0xa8>)
 800a622:	3a01      	subs	r2, #1
 800a624:	2300      	movs	r3, #0
 800a626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a62a:	f7ff fe51 	bl	800a2d0 <__multadd>
 800a62e:	4607      	mov	r7, r0
 800a630:	10ad      	asrs	r5, r5, #2
 800a632:	d03d      	beq.n	800a6b0 <__pow5mult+0xa0>
 800a634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a636:	b97c      	cbnz	r4, 800a658 <__pow5mult+0x48>
 800a638:	2010      	movs	r0, #16
 800a63a:	f7ff fdcd 	bl	800a1d8 <malloc>
 800a63e:	4602      	mov	r2, r0
 800a640:	6270      	str	r0, [r6, #36]	; 0x24
 800a642:	b928      	cbnz	r0, 800a650 <__pow5mult+0x40>
 800a644:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <__pow5mult+0xac>)
 800a646:	481e      	ldr	r0, [pc, #120]	; (800a6c0 <__pow5mult+0xb0>)
 800a648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a64c:	f000 fd82 	bl	800b154 <__assert_func>
 800a650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a654:	6004      	str	r4, [r0, #0]
 800a656:	60c4      	str	r4, [r0, #12]
 800a658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a65c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a660:	b94c      	cbnz	r4, 800a676 <__pow5mult+0x66>
 800a662:	f240 2171 	movw	r1, #625	; 0x271
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ff12 	bl	800a490 <__i2b>
 800a66c:	2300      	movs	r3, #0
 800a66e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a672:	4604      	mov	r4, r0
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	f04f 0900 	mov.w	r9, #0
 800a67a:	07eb      	lsls	r3, r5, #31
 800a67c:	d50a      	bpl.n	800a694 <__pow5mult+0x84>
 800a67e:	4639      	mov	r1, r7
 800a680:	4622      	mov	r2, r4
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff ff1a 	bl	800a4bc <__multiply>
 800a688:	4639      	mov	r1, r7
 800a68a:	4680      	mov	r8, r0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff fdfd 	bl	800a28c <_Bfree>
 800a692:	4647      	mov	r7, r8
 800a694:	106d      	asrs	r5, r5, #1
 800a696:	d00b      	beq.n	800a6b0 <__pow5mult+0xa0>
 800a698:	6820      	ldr	r0, [r4, #0]
 800a69a:	b938      	cbnz	r0, 800a6ac <__pow5mult+0x9c>
 800a69c:	4622      	mov	r2, r4
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff ff0b 	bl	800a4bc <__multiply>
 800a6a6:	6020      	str	r0, [r4, #0]
 800a6a8:	f8c0 9000 	str.w	r9, [r0]
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	e7e4      	b.n	800a67a <__pow5mult+0x6a>
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0800bb78 	.word	0x0800bb78
 800a6bc:	0800b8c6 	.word	0x0800b8c6
 800a6c0:	0800ba28 	.word	0x0800ba28

0800a6c4 <__lshift>:
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	6849      	ldr	r1, [r1, #4]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6d2:	68a3      	ldr	r3, [r4, #8]
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	4691      	mov	r9, r2
 800a6d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6dc:	f108 0601 	add.w	r6, r8, #1
 800a6e0:	42b3      	cmp	r3, r6
 800a6e2:	db0b      	blt.n	800a6fc <__lshift+0x38>
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff fd91 	bl	800a20c <_Balloc>
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	b948      	cbnz	r0, 800a702 <__lshift+0x3e>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	4b2a      	ldr	r3, [pc, #168]	; (800a79c <__lshift+0xd8>)
 800a6f2:	482b      	ldr	r0, [pc, #172]	; (800a7a0 <__lshift+0xdc>)
 800a6f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6f8:	f000 fd2c 	bl	800b154 <__assert_func>
 800a6fc:	3101      	adds	r1, #1
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	e7ee      	b.n	800a6e0 <__lshift+0x1c>
 800a702:	2300      	movs	r3, #0
 800a704:	f100 0114 	add.w	r1, r0, #20
 800a708:	f100 0210 	add.w	r2, r0, #16
 800a70c:	4618      	mov	r0, r3
 800a70e:	4553      	cmp	r3, sl
 800a710:	db37      	blt.n	800a782 <__lshift+0xbe>
 800a712:	6920      	ldr	r0, [r4, #16]
 800a714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a718:	f104 0314 	add.w	r3, r4, #20
 800a71c:	f019 091f 	ands.w	r9, r9, #31
 800a720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a728:	d02f      	beq.n	800a78a <__lshift+0xc6>
 800a72a:	f1c9 0e20 	rsb	lr, r9, #32
 800a72e:	468a      	mov	sl, r1
 800a730:	f04f 0c00 	mov.w	ip, #0
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	fa02 f209 	lsl.w	r2, r2, r9
 800a73a:	ea42 020c 	orr.w	r2, r2, ip
 800a73e:	f84a 2b04 	str.w	r2, [sl], #4
 800a742:	f853 2b04 	ldr.w	r2, [r3], #4
 800a746:	4298      	cmp	r0, r3
 800a748:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a74c:	d8f2      	bhi.n	800a734 <__lshift+0x70>
 800a74e:	1b03      	subs	r3, r0, r4
 800a750:	3b15      	subs	r3, #21
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	3304      	adds	r3, #4
 800a758:	f104 0215 	add.w	r2, r4, #21
 800a75c:	4290      	cmp	r0, r2
 800a75e:	bf38      	it	cc
 800a760:	2304      	movcc	r3, #4
 800a762:	f841 c003 	str.w	ip, [r1, r3]
 800a766:	f1bc 0f00 	cmp.w	ip, #0
 800a76a:	d001      	beq.n	800a770 <__lshift+0xac>
 800a76c:	f108 0602 	add.w	r6, r8, #2
 800a770:	3e01      	subs	r6, #1
 800a772:	4638      	mov	r0, r7
 800a774:	612e      	str	r6, [r5, #16]
 800a776:	4621      	mov	r1, r4
 800a778:	f7ff fd88 	bl	800a28c <_Bfree>
 800a77c:	4628      	mov	r0, r5
 800a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a782:	f842 0f04 	str.w	r0, [r2, #4]!
 800a786:	3301      	adds	r3, #1
 800a788:	e7c1      	b.n	800a70e <__lshift+0x4a>
 800a78a:	3904      	subs	r1, #4
 800a78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a790:	f841 2f04 	str.w	r2, [r1, #4]!
 800a794:	4298      	cmp	r0, r3
 800a796:	d8f9      	bhi.n	800a78c <__lshift+0xc8>
 800a798:	e7ea      	b.n	800a770 <__lshift+0xac>
 800a79a:	bf00      	nop
 800a79c:	0800b938 	.word	0x0800b938
 800a7a0:	0800ba28 	.word	0x0800ba28

0800a7a4 <__mcmp>:
 800a7a4:	b530      	push	{r4, r5, lr}
 800a7a6:	6902      	ldr	r2, [r0, #16]
 800a7a8:	690c      	ldr	r4, [r1, #16]
 800a7aa:	1b12      	subs	r2, r2, r4
 800a7ac:	d10e      	bne.n	800a7cc <__mcmp+0x28>
 800a7ae:	f100 0314 	add.w	r3, r0, #20
 800a7b2:	3114      	adds	r1, #20
 800a7b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7c4:	42a5      	cmp	r5, r4
 800a7c6:	d003      	beq.n	800a7d0 <__mcmp+0x2c>
 800a7c8:	d305      	bcc.n	800a7d6 <__mcmp+0x32>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	bd30      	pop	{r4, r5, pc}
 800a7d0:	4283      	cmp	r3, r0
 800a7d2:	d3f3      	bcc.n	800a7bc <__mcmp+0x18>
 800a7d4:	e7fa      	b.n	800a7cc <__mcmp+0x28>
 800a7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7da:	e7f7      	b.n	800a7cc <__mcmp+0x28>

0800a7dc <__mdiff>:
 800a7dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	4690      	mov	r8, r2
 800a7ea:	f7ff ffdb 	bl	800a7a4 <__mcmp>
 800a7ee:	1e05      	subs	r5, r0, #0
 800a7f0:	d110      	bne.n	800a814 <__mdiff+0x38>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff fd09 	bl	800a20c <_Balloc>
 800a7fa:	b930      	cbnz	r0, 800a80a <__mdiff+0x2e>
 800a7fc:	4b3a      	ldr	r3, [pc, #232]	; (800a8e8 <__mdiff+0x10c>)
 800a7fe:	4602      	mov	r2, r0
 800a800:	f240 2132 	movw	r1, #562	; 0x232
 800a804:	4839      	ldr	r0, [pc, #228]	; (800a8ec <__mdiff+0x110>)
 800a806:	f000 fca5 	bl	800b154 <__assert_func>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a814:	bfa4      	itt	ge
 800a816:	4643      	movge	r3, r8
 800a818:	46a0      	movge	r8, r4
 800a81a:	4630      	mov	r0, r6
 800a81c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a820:	bfa6      	itte	ge
 800a822:	461c      	movge	r4, r3
 800a824:	2500      	movge	r5, #0
 800a826:	2501      	movlt	r5, #1
 800a828:	f7ff fcf0 	bl	800a20c <_Balloc>
 800a82c:	b920      	cbnz	r0, 800a838 <__mdiff+0x5c>
 800a82e:	4b2e      	ldr	r3, [pc, #184]	; (800a8e8 <__mdiff+0x10c>)
 800a830:	4602      	mov	r2, r0
 800a832:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a836:	e7e5      	b.n	800a804 <__mdiff+0x28>
 800a838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a83c:	6926      	ldr	r6, [r4, #16]
 800a83e:	60c5      	str	r5, [r0, #12]
 800a840:	f104 0914 	add.w	r9, r4, #20
 800a844:	f108 0514 	add.w	r5, r8, #20
 800a848:	f100 0e14 	add.w	lr, r0, #20
 800a84c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a854:	f108 0210 	add.w	r2, r8, #16
 800a858:	46f2      	mov	sl, lr
 800a85a:	2100      	movs	r1, #0
 800a85c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a864:	fa1f f883 	uxth.w	r8, r3
 800a868:	fa11 f18b 	uxtah	r1, r1, fp
 800a86c:	0c1b      	lsrs	r3, r3, #16
 800a86e:	eba1 0808 	sub.w	r8, r1, r8
 800a872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a87a:	fa1f f888 	uxth.w	r8, r8
 800a87e:	1419      	asrs	r1, r3, #16
 800a880:	454e      	cmp	r6, r9
 800a882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a886:	f84a 3b04 	str.w	r3, [sl], #4
 800a88a:	d8e7      	bhi.n	800a85c <__mdiff+0x80>
 800a88c:	1b33      	subs	r3, r6, r4
 800a88e:	3b15      	subs	r3, #21
 800a890:	f023 0303 	bic.w	r3, r3, #3
 800a894:	3304      	adds	r3, #4
 800a896:	3415      	adds	r4, #21
 800a898:	42a6      	cmp	r6, r4
 800a89a:	bf38      	it	cc
 800a89c:	2304      	movcc	r3, #4
 800a89e:	441d      	add	r5, r3
 800a8a0:	4473      	add	r3, lr
 800a8a2:	469e      	mov	lr, r3
 800a8a4:	462e      	mov	r6, r5
 800a8a6:	4566      	cmp	r6, ip
 800a8a8:	d30e      	bcc.n	800a8c8 <__mdiff+0xec>
 800a8aa:	f10c 0203 	add.w	r2, ip, #3
 800a8ae:	1b52      	subs	r2, r2, r5
 800a8b0:	f022 0203 	bic.w	r2, r2, #3
 800a8b4:	3d03      	subs	r5, #3
 800a8b6:	45ac      	cmp	ip, r5
 800a8b8:	bf38      	it	cc
 800a8ba:	2200      	movcc	r2, #0
 800a8bc:	441a      	add	r2, r3
 800a8be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8c2:	b17b      	cbz	r3, 800a8e4 <__mdiff+0x108>
 800a8c4:	6107      	str	r7, [r0, #16]
 800a8c6:	e7a3      	b.n	800a810 <__mdiff+0x34>
 800a8c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8cc:	fa11 f288 	uxtah	r2, r1, r8
 800a8d0:	1414      	asrs	r4, r2, #16
 800a8d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8d6:	b292      	uxth	r2, r2
 800a8d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a8e0:	1421      	asrs	r1, r4, #16
 800a8e2:	e7e0      	b.n	800a8a6 <__mdiff+0xca>
 800a8e4:	3f01      	subs	r7, #1
 800a8e6:	e7ea      	b.n	800a8be <__mdiff+0xe2>
 800a8e8:	0800b938 	.word	0x0800b938
 800a8ec:	0800ba28 	.word	0x0800ba28

0800a8f0 <__ulp>:
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	ed8d 0b00 	vstr	d0, [sp]
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	4912      	ldr	r1, [pc, #72]	; (800a944 <__ulp+0x54>)
 800a8fa:	4019      	ands	r1, r3
 800a8fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a900:	2900      	cmp	r1, #0
 800a902:	dd05      	ble.n	800a910 <__ulp+0x20>
 800a904:	2200      	movs	r2, #0
 800a906:	460b      	mov	r3, r1
 800a908:	ec43 2b10 	vmov	d0, r2, r3
 800a90c:	b002      	add	sp, #8
 800a90e:	4770      	bx	lr
 800a910:	4249      	negs	r1, r1
 800a912:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a916:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a91a:	f04f 0200 	mov.w	r2, #0
 800a91e:	f04f 0300 	mov.w	r3, #0
 800a922:	da04      	bge.n	800a92e <__ulp+0x3e>
 800a924:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a928:	fa41 f300 	asr.w	r3, r1, r0
 800a92c:	e7ec      	b.n	800a908 <__ulp+0x18>
 800a92e:	f1a0 0114 	sub.w	r1, r0, #20
 800a932:	291e      	cmp	r1, #30
 800a934:	bfda      	itte	le
 800a936:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a93a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a93e:	2101      	movgt	r1, #1
 800a940:	460a      	mov	r2, r1
 800a942:	e7e1      	b.n	800a908 <__ulp+0x18>
 800a944:	7ff00000 	.word	0x7ff00000

0800a948 <__b2d>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	6905      	ldr	r5, [r0, #16]
 800a94c:	f100 0714 	add.w	r7, r0, #20
 800a950:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a954:	1f2e      	subs	r6, r5, #4
 800a956:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff fd48 	bl	800a3f0 <__hi0bits>
 800a960:	f1c0 0320 	rsb	r3, r0, #32
 800a964:	280a      	cmp	r0, #10
 800a966:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a9e4 <__b2d+0x9c>
 800a96a:	600b      	str	r3, [r1, #0]
 800a96c:	dc14      	bgt.n	800a998 <__b2d+0x50>
 800a96e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a972:	fa24 f10e 	lsr.w	r1, r4, lr
 800a976:	42b7      	cmp	r7, r6
 800a978:	ea41 030c 	orr.w	r3, r1, ip
 800a97c:	bf34      	ite	cc
 800a97e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a982:	2100      	movcs	r1, #0
 800a984:	3015      	adds	r0, #21
 800a986:	fa04 f000 	lsl.w	r0, r4, r0
 800a98a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a98e:	ea40 0201 	orr.w	r2, r0, r1
 800a992:	ec43 2b10 	vmov	d0, r2, r3
 800a996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a998:	42b7      	cmp	r7, r6
 800a99a:	bf3a      	itte	cc
 800a99c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9a4:	2100      	movcs	r1, #0
 800a9a6:	380b      	subs	r0, #11
 800a9a8:	d017      	beq.n	800a9da <__b2d+0x92>
 800a9aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a9ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a9b2:	42be      	cmp	r6, r7
 800a9b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a9b8:	ea45 0504 	orr.w	r5, r5, r4
 800a9bc:	bf8c      	ite	hi
 800a9be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a9c2:	2400      	movls	r4, #0
 800a9c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a9c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a9cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9d4:	ea40 0204 	orr.w	r2, r0, r4
 800a9d8:	e7db      	b.n	800a992 <__b2d+0x4a>
 800a9da:	ea44 030c 	orr.w	r3, r4, ip
 800a9de:	460a      	mov	r2, r1
 800a9e0:	e7d7      	b.n	800a992 <__b2d+0x4a>
 800a9e2:	bf00      	nop
 800a9e4:	3ff00000 	.word	0x3ff00000

0800a9e8 <__d2b>:
 800a9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	ec57 6b10 	vmov	r6, r7, d0
 800a9f4:	4690      	mov	r8, r2
 800a9f6:	f7ff fc09 	bl	800a20c <_Balloc>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	b930      	cbnz	r0, 800aa0c <__d2b+0x24>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b25      	ldr	r3, [pc, #148]	; (800aa98 <__d2b+0xb0>)
 800aa02:	4826      	ldr	r0, [pc, #152]	; (800aa9c <__d2b+0xb4>)
 800aa04:	f240 310a 	movw	r1, #778	; 0x30a
 800aa08:	f000 fba4 	bl	800b154 <__assert_func>
 800aa0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa14:	bb35      	cbnz	r5, 800aa64 <__d2b+0x7c>
 800aa16:	2e00      	cmp	r6, #0
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	d028      	beq.n	800aa6e <__d2b+0x86>
 800aa1c:	4668      	mov	r0, sp
 800aa1e:	9600      	str	r6, [sp, #0]
 800aa20:	f7ff fd06 	bl	800a430 <__lo0bits>
 800aa24:	9900      	ldr	r1, [sp, #0]
 800aa26:	b300      	cbz	r0, 800aa6a <__d2b+0x82>
 800aa28:	9a01      	ldr	r2, [sp, #4]
 800aa2a:	f1c0 0320 	rsb	r3, r0, #32
 800aa2e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa32:	430b      	orrs	r3, r1
 800aa34:	40c2      	lsrs	r2, r0
 800aa36:	6163      	str	r3, [r4, #20]
 800aa38:	9201      	str	r2, [sp, #4]
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	61a3      	str	r3, [r4, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bf14      	ite	ne
 800aa42:	2202      	movne	r2, #2
 800aa44:	2201      	moveq	r2, #1
 800aa46:	6122      	str	r2, [r4, #16]
 800aa48:	b1d5      	cbz	r5, 800aa80 <__d2b+0x98>
 800aa4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa4e:	4405      	add	r5, r0
 800aa50:	f8c9 5000 	str.w	r5, [r9]
 800aa54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa58:	f8c8 0000 	str.w	r0, [r8]
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	b003      	add	sp, #12
 800aa60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa68:	e7d5      	b.n	800aa16 <__d2b+0x2e>
 800aa6a:	6161      	str	r1, [r4, #20]
 800aa6c:	e7e5      	b.n	800aa3a <__d2b+0x52>
 800aa6e:	a801      	add	r0, sp, #4
 800aa70:	f7ff fcde 	bl	800a430 <__lo0bits>
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	6163      	str	r3, [r4, #20]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	6122      	str	r2, [r4, #16]
 800aa7c:	3020      	adds	r0, #32
 800aa7e:	e7e3      	b.n	800aa48 <__d2b+0x60>
 800aa80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa88:	f8c9 0000 	str.w	r0, [r9]
 800aa8c:	6918      	ldr	r0, [r3, #16]
 800aa8e:	f7ff fcaf 	bl	800a3f0 <__hi0bits>
 800aa92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa96:	e7df      	b.n	800aa58 <__d2b+0x70>
 800aa98:	0800b938 	.word	0x0800b938
 800aa9c:	0800ba28 	.word	0x0800ba28

0800aaa0 <__ratio>:
 800aaa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	4688      	mov	r8, r1
 800aaa6:	4669      	mov	r1, sp
 800aaa8:	4681      	mov	r9, r0
 800aaaa:	f7ff ff4d 	bl	800a948 <__b2d>
 800aaae:	a901      	add	r1, sp, #4
 800aab0:	4640      	mov	r0, r8
 800aab2:	ec55 4b10 	vmov	r4, r5, d0
 800aab6:	f7ff ff47 	bl	800a948 <__b2d>
 800aaba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aabe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aac2:	eba3 0c02 	sub.w	ip, r3, r2
 800aac6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aad0:	ec51 0b10 	vmov	r0, r1, d0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfd6      	itet	le
 800aad8:	460a      	movle	r2, r1
 800aada:	462a      	movgt	r2, r5
 800aadc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aae0:	468b      	mov	fp, r1
 800aae2:	462f      	mov	r7, r5
 800aae4:	bfd4      	ite	le
 800aae6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aaea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aaee:	4620      	mov	r0, r4
 800aaf0:	ee10 2a10 	vmov	r2, s0
 800aaf4:	465b      	mov	r3, fp
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	f7f5 feb0 	bl	800085c <__aeabi_ddiv>
 800aafc:	ec41 0b10 	vmov	d0, r0, r1
 800ab00:	b003      	add	sp, #12
 800ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab06 <__copybits>:
 800ab06:	3901      	subs	r1, #1
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	1149      	asrs	r1, r1, #5
 800ab0c:	6914      	ldr	r4, [r2, #16]
 800ab0e:	3101      	adds	r1, #1
 800ab10:	f102 0314 	add.w	r3, r2, #20
 800ab14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab1c:	1f05      	subs	r5, r0, #4
 800ab1e:	42a3      	cmp	r3, r4
 800ab20:	d30c      	bcc.n	800ab3c <__copybits+0x36>
 800ab22:	1aa3      	subs	r3, r4, r2
 800ab24:	3b11      	subs	r3, #17
 800ab26:	f023 0303 	bic.w	r3, r3, #3
 800ab2a:	3211      	adds	r2, #17
 800ab2c:	42a2      	cmp	r2, r4
 800ab2e:	bf88      	it	hi
 800ab30:	2300      	movhi	r3, #0
 800ab32:	4418      	add	r0, r3
 800ab34:	2300      	movs	r3, #0
 800ab36:	4288      	cmp	r0, r1
 800ab38:	d305      	bcc.n	800ab46 <__copybits+0x40>
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab40:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab44:	e7eb      	b.n	800ab1e <__copybits+0x18>
 800ab46:	f840 3b04 	str.w	r3, [r0], #4
 800ab4a:	e7f4      	b.n	800ab36 <__copybits+0x30>

0800ab4c <__any_on>:
 800ab4c:	f100 0214 	add.w	r2, r0, #20
 800ab50:	6900      	ldr	r0, [r0, #16]
 800ab52:	114b      	asrs	r3, r1, #5
 800ab54:	4298      	cmp	r0, r3
 800ab56:	b510      	push	{r4, lr}
 800ab58:	db11      	blt.n	800ab7e <__any_on+0x32>
 800ab5a:	dd0a      	ble.n	800ab72 <__any_on+0x26>
 800ab5c:	f011 011f 	ands.w	r1, r1, #31
 800ab60:	d007      	beq.n	800ab72 <__any_on+0x26>
 800ab62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab66:	fa24 f001 	lsr.w	r0, r4, r1
 800ab6a:	fa00 f101 	lsl.w	r1, r0, r1
 800ab6e:	428c      	cmp	r4, r1
 800ab70:	d10b      	bne.n	800ab8a <__any_on+0x3e>
 800ab72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d803      	bhi.n	800ab82 <__any_on+0x36>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	bd10      	pop	{r4, pc}
 800ab7e:	4603      	mov	r3, r0
 800ab80:	e7f7      	b.n	800ab72 <__any_on+0x26>
 800ab82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab86:	2900      	cmp	r1, #0
 800ab88:	d0f5      	beq.n	800ab76 <__any_on+0x2a>
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	e7f6      	b.n	800ab7c <__any_on+0x30>

0800ab8e <_calloc_r>:
 800ab8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab90:	fba1 2402 	umull	r2, r4, r1, r2
 800ab94:	b94c      	cbnz	r4, 800abaa <_calloc_r+0x1c>
 800ab96:	4611      	mov	r1, r2
 800ab98:	9201      	str	r2, [sp, #4]
 800ab9a:	f000 f87b 	bl	800ac94 <_malloc_r>
 800ab9e:	9a01      	ldr	r2, [sp, #4]
 800aba0:	4605      	mov	r5, r0
 800aba2:	b930      	cbnz	r0, 800abb2 <_calloc_r+0x24>
 800aba4:	4628      	mov	r0, r5
 800aba6:	b003      	add	sp, #12
 800aba8:	bd30      	pop	{r4, r5, pc}
 800abaa:	220c      	movs	r2, #12
 800abac:	6002      	str	r2, [r0, #0]
 800abae:	2500      	movs	r5, #0
 800abb0:	e7f8      	b.n	800aba4 <_calloc_r+0x16>
 800abb2:	4621      	mov	r1, r4
 800abb4:	f7fc f87a 	bl	8006cac <memset>
 800abb8:	e7f4      	b.n	800aba4 <_calloc_r+0x16>
	...

0800abbc <_free_r>:
 800abbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abbe:	2900      	cmp	r1, #0
 800abc0:	d044      	beq.n	800ac4c <_free_r+0x90>
 800abc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc6:	9001      	str	r0, [sp, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f1a1 0404 	sub.w	r4, r1, #4
 800abce:	bfb8      	it	lt
 800abd0:	18e4      	addlt	r4, r4, r3
 800abd2:	f000 fb4d 	bl	800b270 <__malloc_lock>
 800abd6:	4a1e      	ldr	r2, [pc, #120]	; (800ac50 <_free_r+0x94>)
 800abd8:	9801      	ldr	r0, [sp, #4]
 800abda:	6813      	ldr	r3, [r2, #0]
 800abdc:	b933      	cbnz	r3, 800abec <_free_r+0x30>
 800abde:	6063      	str	r3, [r4, #4]
 800abe0:	6014      	str	r4, [r2, #0]
 800abe2:	b003      	add	sp, #12
 800abe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abe8:	f000 bb48 	b.w	800b27c <__malloc_unlock>
 800abec:	42a3      	cmp	r3, r4
 800abee:	d908      	bls.n	800ac02 <_free_r+0x46>
 800abf0:	6825      	ldr	r5, [r4, #0]
 800abf2:	1961      	adds	r1, r4, r5
 800abf4:	428b      	cmp	r3, r1
 800abf6:	bf01      	itttt	eq
 800abf8:	6819      	ldreq	r1, [r3, #0]
 800abfa:	685b      	ldreq	r3, [r3, #4]
 800abfc:	1949      	addeq	r1, r1, r5
 800abfe:	6021      	streq	r1, [r4, #0]
 800ac00:	e7ed      	b.n	800abde <_free_r+0x22>
 800ac02:	461a      	mov	r2, r3
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	b10b      	cbz	r3, 800ac0c <_free_r+0x50>
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	d9fa      	bls.n	800ac02 <_free_r+0x46>
 800ac0c:	6811      	ldr	r1, [r2, #0]
 800ac0e:	1855      	adds	r5, r2, r1
 800ac10:	42a5      	cmp	r5, r4
 800ac12:	d10b      	bne.n	800ac2c <_free_r+0x70>
 800ac14:	6824      	ldr	r4, [r4, #0]
 800ac16:	4421      	add	r1, r4
 800ac18:	1854      	adds	r4, r2, r1
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	6011      	str	r1, [r2, #0]
 800ac1e:	d1e0      	bne.n	800abe2 <_free_r+0x26>
 800ac20:	681c      	ldr	r4, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	6053      	str	r3, [r2, #4]
 800ac26:	4421      	add	r1, r4
 800ac28:	6011      	str	r1, [r2, #0]
 800ac2a:	e7da      	b.n	800abe2 <_free_r+0x26>
 800ac2c:	d902      	bls.n	800ac34 <_free_r+0x78>
 800ac2e:	230c      	movs	r3, #12
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	e7d6      	b.n	800abe2 <_free_r+0x26>
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	1961      	adds	r1, r4, r5
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	bf04      	itt	eq
 800ac3c:	6819      	ldreq	r1, [r3, #0]
 800ac3e:	685b      	ldreq	r3, [r3, #4]
 800ac40:	6063      	str	r3, [r4, #4]
 800ac42:	bf04      	itt	eq
 800ac44:	1949      	addeq	r1, r1, r5
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	6054      	str	r4, [r2, #4]
 800ac4a:	e7ca      	b.n	800abe2 <_free_r+0x26>
 800ac4c:	b003      	add	sp, #12
 800ac4e:	bd30      	pop	{r4, r5, pc}
 800ac50:	200045d4 	.word	0x200045d4

0800ac54 <sbrk_aligned>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	4e0e      	ldr	r6, [pc, #56]	; (800ac90 <sbrk_aligned+0x3c>)
 800ac58:	460c      	mov	r4, r1
 800ac5a:	6831      	ldr	r1, [r6, #0]
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	b911      	cbnz	r1, 800ac66 <sbrk_aligned+0x12>
 800ac60:	f000 f9f2 	bl	800b048 <_sbrk_r>
 800ac64:	6030      	str	r0, [r6, #0]
 800ac66:	4621      	mov	r1, r4
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f000 f9ed 	bl	800b048 <_sbrk_r>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d00a      	beq.n	800ac88 <sbrk_aligned+0x34>
 800ac72:	1cc4      	adds	r4, r0, #3
 800ac74:	f024 0403 	bic.w	r4, r4, #3
 800ac78:	42a0      	cmp	r0, r4
 800ac7a:	d007      	beq.n	800ac8c <sbrk_aligned+0x38>
 800ac7c:	1a21      	subs	r1, r4, r0
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f000 f9e2 	bl	800b048 <_sbrk_r>
 800ac84:	3001      	adds	r0, #1
 800ac86:	d101      	bne.n	800ac8c <sbrk_aligned+0x38>
 800ac88:	f04f 34ff 	mov.w	r4, #4294967295
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	200045d8 	.word	0x200045d8

0800ac94 <_malloc_r>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	1ccd      	adds	r5, r1, #3
 800ac9a:	f025 0503 	bic.w	r5, r5, #3
 800ac9e:	3508      	adds	r5, #8
 800aca0:	2d0c      	cmp	r5, #12
 800aca2:	bf38      	it	cc
 800aca4:	250c      	movcc	r5, #12
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	4607      	mov	r7, r0
 800acaa:	db01      	blt.n	800acb0 <_malloc_r+0x1c>
 800acac:	42a9      	cmp	r1, r5
 800acae:	d905      	bls.n	800acbc <_malloc_r+0x28>
 800acb0:	230c      	movs	r3, #12
 800acb2:	603b      	str	r3, [r7, #0]
 800acb4:	2600      	movs	r6, #0
 800acb6:	4630      	mov	r0, r6
 800acb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acbc:	4e2e      	ldr	r6, [pc, #184]	; (800ad78 <_malloc_r+0xe4>)
 800acbe:	f000 fad7 	bl	800b270 <__malloc_lock>
 800acc2:	6833      	ldr	r3, [r6, #0]
 800acc4:	461c      	mov	r4, r3
 800acc6:	bb34      	cbnz	r4, 800ad16 <_malloc_r+0x82>
 800acc8:	4629      	mov	r1, r5
 800acca:	4638      	mov	r0, r7
 800accc:	f7ff ffc2 	bl	800ac54 <sbrk_aligned>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	4604      	mov	r4, r0
 800acd4:	d14d      	bne.n	800ad72 <_malloc_r+0xde>
 800acd6:	6834      	ldr	r4, [r6, #0]
 800acd8:	4626      	mov	r6, r4
 800acda:	2e00      	cmp	r6, #0
 800acdc:	d140      	bne.n	800ad60 <_malloc_r+0xcc>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	4631      	mov	r1, r6
 800ace2:	4638      	mov	r0, r7
 800ace4:	eb04 0803 	add.w	r8, r4, r3
 800ace8:	f000 f9ae 	bl	800b048 <_sbrk_r>
 800acec:	4580      	cmp	r8, r0
 800acee:	d13a      	bne.n	800ad66 <_malloc_r+0xd2>
 800acf0:	6821      	ldr	r1, [r4, #0]
 800acf2:	3503      	adds	r5, #3
 800acf4:	1a6d      	subs	r5, r5, r1
 800acf6:	f025 0503 	bic.w	r5, r5, #3
 800acfa:	3508      	adds	r5, #8
 800acfc:	2d0c      	cmp	r5, #12
 800acfe:	bf38      	it	cc
 800ad00:	250c      	movcc	r5, #12
 800ad02:	4629      	mov	r1, r5
 800ad04:	4638      	mov	r0, r7
 800ad06:	f7ff ffa5 	bl	800ac54 <sbrk_aligned>
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d02b      	beq.n	800ad66 <_malloc_r+0xd2>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	442b      	add	r3, r5
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	e00e      	b.n	800ad34 <_malloc_r+0xa0>
 800ad16:	6822      	ldr	r2, [r4, #0]
 800ad18:	1b52      	subs	r2, r2, r5
 800ad1a:	d41e      	bmi.n	800ad5a <_malloc_r+0xc6>
 800ad1c:	2a0b      	cmp	r2, #11
 800ad1e:	d916      	bls.n	800ad4e <_malloc_r+0xba>
 800ad20:	1961      	adds	r1, r4, r5
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	6025      	str	r5, [r4, #0]
 800ad26:	bf18      	it	ne
 800ad28:	6059      	strne	r1, [r3, #4]
 800ad2a:	6863      	ldr	r3, [r4, #4]
 800ad2c:	bf08      	it	eq
 800ad2e:	6031      	streq	r1, [r6, #0]
 800ad30:	5162      	str	r2, [r4, r5]
 800ad32:	604b      	str	r3, [r1, #4]
 800ad34:	4638      	mov	r0, r7
 800ad36:	f104 060b 	add.w	r6, r4, #11
 800ad3a:	f000 fa9f 	bl	800b27c <__malloc_unlock>
 800ad3e:	f026 0607 	bic.w	r6, r6, #7
 800ad42:	1d23      	adds	r3, r4, #4
 800ad44:	1af2      	subs	r2, r6, r3
 800ad46:	d0b6      	beq.n	800acb6 <_malloc_r+0x22>
 800ad48:	1b9b      	subs	r3, r3, r6
 800ad4a:	50a3      	str	r3, [r4, r2]
 800ad4c:	e7b3      	b.n	800acb6 <_malloc_r+0x22>
 800ad4e:	6862      	ldr	r2, [r4, #4]
 800ad50:	42a3      	cmp	r3, r4
 800ad52:	bf0c      	ite	eq
 800ad54:	6032      	streq	r2, [r6, #0]
 800ad56:	605a      	strne	r2, [r3, #4]
 800ad58:	e7ec      	b.n	800ad34 <_malloc_r+0xa0>
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	6864      	ldr	r4, [r4, #4]
 800ad5e:	e7b2      	b.n	800acc6 <_malloc_r+0x32>
 800ad60:	4634      	mov	r4, r6
 800ad62:	6876      	ldr	r6, [r6, #4]
 800ad64:	e7b9      	b.n	800acda <_malloc_r+0x46>
 800ad66:	230c      	movs	r3, #12
 800ad68:	603b      	str	r3, [r7, #0]
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f000 fa86 	bl	800b27c <__malloc_unlock>
 800ad70:	e7a1      	b.n	800acb6 <_malloc_r+0x22>
 800ad72:	6025      	str	r5, [r4, #0]
 800ad74:	e7de      	b.n	800ad34 <_malloc_r+0xa0>
 800ad76:	bf00      	nop
 800ad78:	200045d4 	.word	0x200045d4

0800ad7c <__ssputs_r>:
 800ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad80:	688e      	ldr	r6, [r1, #8]
 800ad82:	429e      	cmp	r6, r3
 800ad84:	4682      	mov	sl, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	4690      	mov	r8, r2
 800ad8a:	461f      	mov	r7, r3
 800ad8c:	d838      	bhi.n	800ae00 <__ssputs_r+0x84>
 800ad8e:	898a      	ldrh	r2, [r1, #12]
 800ad90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad94:	d032      	beq.n	800adfc <__ssputs_r+0x80>
 800ad96:	6825      	ldr	r5, [r4, #0]
 800ad98:	6909      	ldr	r1, [r1, #16]
 800ad9a:	eba5 0901 	sub.w	r9, r5, r1
 800ad9e:	6965      	ldr	r5, [r4, #20]
 800ada0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ada4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ada8:	3301      	adds	r3, #1
 800adaa:	444b      	add	r3, r9
 800adac:	106d      	asrs	r5, r5, #1
 800adae:	429d      	cmp	r5, r3
 800adb0:	bf38      	it	cc
 800adb2:	461d      	movcc	r5, r3
 800adb4:	0553      	lsls	r3, r2, #21
 800adb6:	d531      	bpl.n	800ae1c <__ssputs_r+0xa0>
 800adb8:	4629      	mov	r1, r5
 800adba:	f7ff ff6b 	bl	800ac94 <_malloc_r>
 800adbe:	4606      	mov	r6, r0
 800adc0:	b950      	cbnz	r0, 800add8 <__ssputs_r+0x5c>
 800adc2:	230c      	movs	r3, #12
 800adc4:	f8ca 3000 	str.w	r3, [sl]
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	f04f 30ff 	mov.w	r0, #4294967295
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	6921      	ldr	r1, [r4, #16]
 800adda:	464a      	mov	r2, r9
 800addc:	f7fb ff58 	bl	8006c90 <memcpy>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ade6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	6126      	str	r6, [r4, #16]
 800adee:	6165      	str	r5, [r4, #20]
 800adf0:	444e      	add	r6, r9
 800adf2:	eba5 0509 	sub.w	r5, r5, r9
 800adf6:	6026      	str	r6, [r4, #0]
 800adf8:	60a5      	str	r5, [r4, #8]
 800adfa:	463e      	mov	r6, r7
 800adfc:	42be      	cmp	r6, r7
 800adfe:	d900      	bls.n	800ae02 <__ssputs_r+0x86>
 800ae00:	463e      	mov	r6, r7
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	4632      	mov	r2, r6
 800ae06:	4641      	mov	r1, r8
 800ae08:	f000 fa18 	bl	800b23c <memmove>
 800ae0c:	68a3      	ldr	r3, [r4, #8]
 800ae0e:	1b9b      	subs	r3, r3, r6
 800ae10:	60a3      	str	r3, [r4, #8]
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	4433      	add	r3, r6
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e7db      	b.n	800add4 <__ssputs_r+0x58>
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	f000 fa33 	bl	800b288 <_realloc_r>
 800ae22:	4606      	mov	r6, r0
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d1e1      	bne.n	800adec <__ssputs_r+0x70>
 800ae28:	6921      	ldr	r1, [r4, #16]
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f7ff fec6 	bl	800abbc <_free_r>
 800ae30:	e7c7      	b.n	800adc2 <__ssputs_r+0x46>
	...

0800ae34 <_svfiprintf_r>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	4698      	mov	r8, r3
 800ae3a:	898b      	ldrh	r3, [r1, #12]
 800ae3c:	061b      	lsls	r3, r3, #24
 800ae3e:	b09d      	sub	sp, #116	; 0x74
 800ae40:	4607      	mov	r7, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	4614      	mov	r4, r2
 800ae46:	d50e      	bpl.n	800ae66 <_svfiprintf_r+0x32>
 800ae48:	690b      	ldr	r3, [r1, #16]
 800ae4a:	b963      	cbnz	r3, 800ae66 <_svfiprintf_r+0x32>
 800ae4c:	2140      	movs	r1, #64	; 0x40
 800ae4e:	f7ff ff21 	bl	800ac94 <_malloc_r>
 800ae52:	6028      	str	r0, [r5, #0]
 800ae54:	6128      	str	r0, [r5, #16]
 800ae56:	b920      	cbnz	r0, 800ae62 <_svfiprintf_r+0x2e>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	e0d1      	b.n	800b006 <_svfiprintf_r+0x1d2>
 800ae62:	2340      	movs	r3, #64	; 0x40
 800ae64:	616b      	str	r3, [r5, #20]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6a:	2320      	movs	r3, #32
 800ae6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae74:	2330      	movs	r3, #48	; 0x30
 800ae76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b020 <_svfiprintf_r+0x1ec>
 800ae7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae7e:	f04f 0901 	mov.w	r9, #1
 800ae82:	4623      	mov	r3, r4
 800ae84:	469a      	mov	sl, r3
 800ae86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae8a:	b10a      	cbz	r2, 800ae90 <_svfiprintf_r+0x5c>
 800ae8c:	2a25      	cmp	r2, #37	; 0x25
 800ae8e:	d1f9      	bne.n	800ae84 <_svfiprintf_r+0x50>
 800ae90:	ebba 0b04 	subs.w	fp, sl, r4
 800ae94:	d00b      	beq.n	800aeae <_svfiprintf_r+0x7a>
 800ae96:	465b      	mov	r3, fp
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff ff6d 	bl	800ad7c <__ssputs_r>
 800aea2:	3001      	adds	r0, #1
 800aea4:	f000 80aa 	beq.w	800affc <_svfiprintf_r+0x1c8>
 800aea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeaa:	445a      	add	r2, fp
 800aeac:	9209      	str	r2, [sp, #36]	; 0x24
 800aeae:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 80a2 	beq.w	800affc <_svfiprintf_r+0x1c8>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f04f 32ff 	mov.w	r2, #4294967295
 800aebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec2:	f10a 0a01 	add.w	sl, sl, #1
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	9307      	str	r3, [sp, #28]
 800aeca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aece:	931a      	str	r3, [sp, #104]	; 0x68
 800aed0:	4654      	mov	r4, sl
 800aed2:	2205      	movs	r2, #5
 800aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed8:	4851      	ldr	r0, [pc, #324]	; (800b020 <_svfiprintf_r+0x1ec>)
 800aeda:	f7f5 f989 	bl	80001f0 <memchr>
 800aede:	9a04      	ldr	r2, [sp, #16]
 800aee0:	b9d8      	cbnz	r0, 800af1a <_svfiprintf_r+0xe6>
 800aee2:	06d0      	lsls	r0, r2, #27
 800aee4:	bf44      	itt	mi
 800aee6:	2320      	movmi	r3, #32
 800aee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeec:	0711      	lsls	r1, r2, #28
 800aeee:	bf44      	itt	mi
 800aef0:	232b      	movmi	r3, #43	; 0x2b
 800aef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aef6:	f89a 3000 	ldrb.w	r3, [sl]
 800aefa:	2b2a      	cmp	r3, #42	; 0x2a
 800aefc:	d015      	beq.n	800af2a <_svfiprintf_r+0xf6>
 800aefe:	9a07      	ldr	r2, [sp, #28]
 800af00:	4654      	mov	r4, sl
 800af02:	2000      	movs	r0, #0
 800af04:	f04f 0c0a 	mov.w	ip, #10
 800af08:	4621      	mov	r1, r4
 800af0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af0e:	3b30      	subs	r3, #48	; 0x30
 800af10:	2b09      	cmp	r3, #9
 800af12:	d94e      	bls.n	800afb2 <_svfiprintf_r+0x17e>
 800af14:	b1b0      	cbz	r0, 800af44 <_svfiprintf_r+0x110>
 800af16:	9207      	str	r2, [sp, #28]
 800af18:	e014      	b.n	800af44 <_svfiprintf_r+0x110>
 800af1a:	eba0 0308 	sub.w	r3, r0, r8
 800af1e:	fa09 f303 	lsl.w	r3, r9, r3
 800af22:	4313      	orrs	r3, r2
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	46a2      	mov	sl, r4
 800af28:	e7d2      	b.n	800aed0 <_svfiprintf_r+0x9c>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	1d19      	adds	r1, r3, #4
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	9103      	str	r1, [sp, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	bfbb      	ittet	lt
 800af36:	425b      	neglt	r3, r3
 800af38:	f042 0202 	orrlt.w	r2, r2, #2
 800af3c:	9307      	strge	r3, [sp, #28]
 800af3e:	9307      	strlt	r3, [sp, #28]
 800af40:	bfb8      	it	lt
 800af42:	9204      	strlt	r2, [sp, #16]
 800af44:	7823      	ldrb	r3, [r4, #0]
 800af46:	2b2e      	cmp	r3, #46	; 0x2e
 800af48:	d10c      	bne.n	800af64 <_svfiprintf_r+0x130>
 800af4a:	7863      	ldrb	r3, [r4, #1]
 800af4c:	2b2a      	cmp	r3, #42	; 0x2a
 800af4e:	d135      	bne.n	800afbc <_svfiprintf_r+0x188>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	1d1a      	adds	r2, r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	9203      	str	r2, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfb8      	it	lt
 800af5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af60:	3402      	adds	r4, #2
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b030 <_svfiprintf_r+0x1fc>
 800af68:	7821      	ldrb	r1, [r4, #0]
 800af6a:	2203      	movs	r2, #3
 800af6c:	4650      	mov	r0, sl
 800af6e:	f7f5 f93f 	bl	80001f0 <memchr>
 800af72:	b140      	cbz	r0, 800af86 <_svfiprintf_r+0x152>
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	eba0 000a 	sub.w	r0, r0, sl
 800af7a:	fa03 f000 	lsl.w	r0, r3, r0
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	4303      	orrs	r3, r0
 800af82:	3401      	adds	r4, #1
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8a:	4826      	ldr	r0, [pc, #152]	; (800b024 <_svfiprintf_r+0x1f0>)
 800af8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af90:	2206      	movs	r2, #6
 800af92:	f7f5 f92d 	bl	80001f0 <memchr>
 800af96:	2800      	cmp	r0, #0
 800af98:	d038      	beq.n	800b00c <_svfiprintf_r+0x1d8>
 800af9a:	4b23      	ldr	r3, [pc, #140]	; (800b028 <_svfiprintf_r+0x1f4>)
 800af9c:	bb1b      	cbnz	r3, 800afe6 <_svfiprintf_r+0x1b2>
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	3307      	adds	r3, #7
 800afa2:	f023 0307 	bic.w	r3, r3, #7
 800afa6:	3308      	adds	r3, #8
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afac:	4433      	add	r3, r6
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
 800afb0:	e767      	b.n	800ae82 <_svfiprintf_r+0x4e>
 800afb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb6:	460c      	mov	r4, r1
 800afb8:	2001      	movs	r0, #1
 800afba:	e7a5      	b.n	800af08 <_svfiprintf_r+0xd4>
 800afbc:	2300      	movs	r3, #0
 800afbe:	3401      	adds	r4, #1
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	4619      	mov	r1, r3
 800afc4:	f04f 0c0a 	mov.w	ip, #10
 800afc8:	4620      	mov	r0, r4
 800afca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afce:	3a30      	subs	r2, #48	; 0x30
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	d903      	bls.n	800afdc <_svfiprintf_r+0x1a8>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0c5      	beq.n	800af64 <_svfiprintf_r+0x130>
 800afd8:	9105      	str	r1, [sp, #20]
 800afda:	e7c3      	b.n	800af64 <_svfiprintf_r+0x130>
 800afdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800afe0:	4604      	mov	r4, r0
 800afe2:	2301      	movs	r3, #1
 800afe4:	e7f0      	b.n	800afc8 <_svfiprintf_r+0x194>
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <_svfiprintf_r+0x1f8>)
 800afee:	a904      	add	r1, sp, #16
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7fb ff03 	bl	8006dfc <_printf_float>
 800aff6:	1c42      	adds	r2, r0, #1
 800aff8:	4606      	mov	r6, r0
 800affa:	d1d6      	bne.n	800afaa <_svfiprintf_r+0x176>
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	065b      	lsls	r3, r3, #25
 800b000:	f53f af2c 	bmi.w	800ae5c <_svfiprintf_r+0x28>
 800b004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b006:	b01d      	add	sp, #116	; 0x74
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	ab03      	add	r3, sp, #12
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	462a      	mov	r2, r5
 800b012:	4b06      	ldr	r3, [pc, #24]	; (800b02c <_svfiprintf_r+0x1f8>)
 800b014:	a904      	add	r1, sp, #16
 800b016:	4638      	mov	r0, r7
 800b018:	f7fc f994 	bl	8007344 <_printf_i>
 800b01c:	e7eb      	b.n	800aff6 <_svfiprintf_r+0x1c2>
 800b01e:	bf00      	nop
 800b020:	0800bb84 	.word	0x0800bb84
 800b024:	0800bb8e 	.word	0x0800bb8e
 800b028:	08006dfd 	.word	0x08006dfd
 800b02c:	0800ad7d 	.word	0x0800ad7d
 800b030:	0800bb8a 	.word	0x0800bb8a
 800b034:	00000000 	.word	0x00000000

0800b038 <nan>:
 800b038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b040 <nan+0x8>
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	00000000 	.word	0x00000000
 800b044:	7ff80000 	.word	0x7ff80000

0800b048 <_sbrk_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d06      	ldr	r5, [pc, #24]	; (800b064 <_sbrk_r+0x1c>)
 800b04c:	2300      	movs	r3, #0
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	f7f6 fe0c 	bl	8001c70 <_sbrk>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d102      	bne.n	800b062 <_sbrk_r+0x1a>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b103      	cbz	r3, 800b062 <_sbrk_r+0x1a>
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	200045dc 	.word	0x200045dc

0800b068 <__sread>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	460c      	mov	r4, r1
 800b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b070:	f000 fa92 	bl	800b598 <_read_r>
 800b074:	2800      	cmp	r0, #0
 800b076:	bfab      	itete	ge
 800b078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b07a:	89a3      	ldrhlt	r3, [r4, #12]
 800b07c:	181b      	addge	r3, r3, r0
 800b07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b082:	bfac      	ite	ge
 800b084:	6563      	strge	r3, [r4, #84]	; 0x54
 800b086:	81a3      	strhlt	r3, [r4, #12]
 800b088:	bd10      	pop	{r4, pc}

0800b08a <__swrite>:
 800b08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08e:	461f      	mov	r7, r3
 800b090:	898b      	ldrh	r3, [r1, #12]
 800b092:	05db      	lsls	r3, r3, #23
 800b094:	4605      	mov	r5, r0
 800b096:	460c      	mov	r4, r1
 800b098:	4616      	mov	r6, r2
 800b09a:	d505      	bpl.n	800b0a8 <__swrite+0x1e>
 800b09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f000 f8b8 	bl	800b218 <_lseek_r>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	4632      	mov	r2, r6
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0be:	f000 b837 	b.w	800b130 <_write_r>

0800b0c2 <__sseek>:
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ca:	f000 f8a5 	bl	800b218 <_lseek_r>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	bf15      	itete	ne
 800b0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0de:	81a3      	strheq	r3, [r4, #12]
 800b0e0:	bf18      	it	ne
 800b0e2:	81a3      	strhne	r3, [r4, #12]
 800b0e4:	bd10      	pop	{r4, pc}

0800b0e6 <__sclose>:
 800b0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ea:	f000 b851 	b.w	800b190 <_close_r>

0800b0ee <strncmp>:
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	b17a      	cbz	r2, 800b112 <strncmp+0x24>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	3901      	subs	r1, #1
 800b0f6:	1884      	adds	r4, r0, r2
 800b0f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b100:	4290      	cmp	r0, r2
 800b102:	d101      	bne.n	800b108 <strncmp+0x1a>
 800b104:	42a3      	cmp	r3, r4
 800b106:	d101      	bne.n	800b10c <strncmp+0x1e>
 800b108:	1a80      	subs	r0, r0, r2
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1f3      	bne.n	800b0f8 <strncmp+0xa>
 800b110:	e7fa      	b.n	800b108 <strncmp+0x1a>
 800b112:	4610      	mov	r0, r2
 800b114:	e7f9      	b.n	800b10a <strncmp+0x1c>

0800b116 <__ascii_wctomb>:
 800b116:	b149      	cbz	r1, 800b12c <__ascii_wctomb+0x16>
 800b118:	2aff      	cmp	r2, #255	; 0xff
 800b11a:	bf85      	ittet	hi
 800b11c:	238a      	movhi	r3, #138	; 0x8a
 800b11e:	6003      	strhi	r3, [r0, #0]
 800b120:	700a      	strbls	r2, [r1, #0]
 800b122:	f04f 30ff 	movhi.w	r0, #4294967295
 800b126:	bf98      	it	ls
 800b128:	2001      	movls	r0, #1
 800b12a:	4770      	bx	lr
 800b12c:	4608      	mov	r0, r1
 800b12e:	4770      	bx	lr

0800b130 <_write_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	; (800b150 <_write_r+0x20>)
 800b134:	4604      	mov	r4, r0
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7f6 f822 	bl	8001188 <_write>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_write_r+0x1e>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_write_r+0x1e>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	200045dc 	.word	0x200045dc

0800b154 <__assert_func>:
 800b154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b156:	4614      	mov	r4, r2
 800b158:	461a      	mov	r2, r3
 800b15a:	4b09      	ldr	r3, [pc, #36]	; (800b180 <__assert_func+0x2c>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4605      	mov	r5, r0
 800b160:	68d8      	ldr	r0, [r3, #12]
 800b162:	b14c      	cbz	r4, 800b178 <__assert_func+0x24>
 800b164:	4b07      	ldr	r3, [pc, #28]	; (800b184 <__assert_func+0x30>)
 800b166:	9100      	str	r1, [sp, #0]
 800b168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b16c:	4906      	ldr	r1, [pc, #24]	; (800b188 <__assert_func+0x34>)
 800b16e:	462b      	mov	r3, r5
 800b170:	f000 f81e 	bl	800b1b0 <fiprintf>
 800b174:	f000 fa22 	bl	800b5bc <abort>
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <__assert_func+0x38>)
 800b17a:	461c      	mov	r4, r3
 800b17c:	e7f3      	b.n	800b166 <__assert_func+0x12>
 800b17e:	bf00      	nop
 800b180:	200000fc 	.word	0x200000fc
 800b184:	0800bb95 	.word	0x0800bb95
 800b188:	0800bba2 	.word	0x0800bba2
 800b18c:	0800bbd0 	.word	0x0800bbd0

0800b190 <_close_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d06      	ldr	r5, [pc, #24]	; (800b1ac <_close_r+0x1c>)
 800b194:	2300      	movs	r3, #0
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	f7f6 fd33 	bl	8001c06 <_close>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_close_r+0x1a>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_close_r+0x1a>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	200045dc 	.word	0x200045dc

0800b1b0 <fiprintf>:
 800b1b0:	b40e      	push	{r1, r2, r3}
 800b1b2:	b503      	push	{r0, r1, lr}
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <fiprintf+0x20>)
 800b1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1be:	6800      	ldr	r0, [r0, #0]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	f000 f8b9 	bl	800b338 <_vfiprintf_r>
 800b1c6:	b002      	add	sp, #8
 800b1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1cc:	b003      	add	sp, #12
 800b1ce:	4770      	bx	lr
 800b1d0:	200000fc 	.word	0x200000fc

0800b1d4 <_fstat_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d07      	ldr	r5, [pc, #28]	; (800b1f4 <_fstat_r+0x20>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f7f6 fd1c 	bl	8001c1e <_fstat>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d102      	bne.n	800b1f0 <_fstat_r+0x1c>
 800b1ea:	682b      	ldr	r3, [r5, #0]
 800b1ec:	b103      	cbz	r3, 800b1f0 <_fstat_r+0x1c>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	bd38      	pop	{r3, r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200045dc 	.word	0x200045dc

0800b1f8 <_isatty_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	; (800b214 <_isatty_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f6 fd1b 	bl	8001c3e <_isatty>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_isatty_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_isatty_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200045dc 	.word	0x200045dc

0800b218 <_lseek_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_lseek_r+0x20>)
 800b21c:	4604      	mov	r4, r0
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f6 fd14 	bl	8001c54 <_lseek>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_lseek_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_lseek_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	200045dc 	.word	0x200045dc

0800b23c <memmove>:
 800b23c:	4288      	cmp	r0, r1
 800b23e:	b510      	push	{r4, lr}
 800b240:	eb01 0402 	add.w	r4, r1, r2
 800b244:	d902      	bls.n	800b24c <memmove+0x10>
 800b246:	4284      	cmp	r4, r0
 800b248:	4623      	mov	r3, r4
 800b24a:	d807      	bhi.n	800b25c <memmove+0x20>
 800b24c:	1e43      	subs	r3, r0, #1
 800b24e:	42a1      	cmp	r1, r4
 800b250:	d008      	beq.n	800b264 <memmove+0x28>
 800b252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b25a:	e7f8      	b.n	800b24e <memmove+0x12>
 800b25c:	4402      	add	r2, r0
 800b25e:	4601      	mov	r1, r0
 800b260:	428a      	cmp	r2, r1
 800b262:	d100      	bne.n	800b266 <memmove+0x2a>
 800b264:	bd10      	pop	{r4, pc}
 800b266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b26a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b26e:	e7f7      	b.n	800b260 <memmove+0x24>

0800b270 <__malloc_lock>:
 800b270:	4801      	ldr	r0, [pc, #4]	; (800b278 <__malloc_lock+0x8>)
 800b272:	f7fe bf4a 	b.w	800a10a <__retarget_lock_acquire_recursive>
 800b276:	bf00      	nop
 800b278:	200045ce 	.word	0x200045ce

0800b27c <__malloc_unlock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__malloc_unlock+0x8>)
 800b27e:	f7fe bf45 	b.w	800a10c <__retarget_lock_release_recursive>
 800b282:	bf00      	nop
 800b284:	200045ce 	.word	0x200045ce

0800b288 <_realloc_r>:
 800b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b28c:	4680      	mov	r8, r0
 800b28e:	4614      	mov	r4, r2
 800b290:	460e      	mov	r6, r1
 800b292:	b921      	cbnz	r1, 800b29e <_realloc_r+0x16>
 800b294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	4611      	mov	r1, r2
 800b29a:	f7ff bcfb 	b.w	800ac94 <_malloc_r>
 800b29e:	b92a      	cbnz	r2, 800b2ac <_realloc_r+0x24>
 800b2a0:	f7ff fc8c 	bl	800abbc <_free_r>
 800b2a4:	4625      	mov	r5, r4
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ac:	f000 f98d 	bl	800b5ca <_malloc_usable_size_r>
 800b2b0:	4284      	cmp	r4, r0
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	d802      	bhi.n	800b2bc <_realloc_r+0x34>
 800b2b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ba:	d812      	bhi.n	800b2e2 <_realloc_r+0x5a>
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fce8 	bl	800ac94 <_malloc_r>
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d0ed      	beq.n	800b2a6 <_realloc_r+0x1e>
 800b2ca:	42bc      	cmp	r4, r7
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	bf28      	it	cs
 800b2d2:	463a      	movcs	r2, r7
 800b2d4:	f7fb fcdc 	bl	8006c90 <memcpy>
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f7ff fc6e 	bl	800abbc <_free_r>
 800b2e0:	e7e1      	b.n	800b2a6 <_realloc_r+0x1e>
 800b2e2:	4635      	mov	r5, r6
 800b2e4:	e7df      	b.n	800b2a6 <_realloc_r+0x1e>

0800b2e6 <__sfputc_r>:
 800b2e6:	6893      	ldr	r3, [r2, #8]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	b410      	push	{r4}
 800b2ee:	6093      	str	r3, [r2, #8]
 800b2f0:	da08      	bge.n	800b304 <__sfputc_r+0x1e>
 800b2f2:	6994      	ldr	r4, [r2, #24]
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	db01      	blt.n	800b2fc <__sfputc_r+0x16>
 800b2f8:	290a      	cmp	r1, #10
 800b2fa:	d103      	bne.n	800b304 <__sfputc_r+0x1e>
 800b2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b300:	f7fd ba9e 	b.w	8008840 <__swbuf_r>
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	1c58      	adds	r0, r3, #1
 800b308:	6010      	str	r0, [r2, #0]
 800b30a:	7019      	strb	r1, [r3, #0]
 800b30c:	4608      	mov	r0, r1
 800b30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <__sfputs_r>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	4614      	mov	r4, r2
 800b31c:	18d5      	adds	r5, r2, r3
 800b31e:	42ac      	cmp	r4, r5
 800b320:	d101      	bne.n	800b326 <__sfputs_r+0x12>
 800b322:	2000      	movs	r0, #0
 800b324:	e007      	b.n	800b336 <__sfputs_r+0x22>
 800b326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32a:	463a      	mov	r2, r7
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff ffda 	bl	800b2e6 <__sfputc_r>
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	d1f3      	bne.n	800b31e <__sfputs_r+0xa>
 800b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b338 <_vfiprintf_r>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	460d      	mov	r5, r1
 800b33e:	b09d      	sub	sp, #116	; 0x74
 800b340:	4614      	mov	r4, r2
 800b342:	4698      	mov	r8, r3
 800b344:	4606      	mov	r6, r0
 800b346:	b118      	cbz	r0, 800b350 <_vfiprintf_r+0x18>
 800b348:	6983      	ldr	r3, [r0, #24]
 800b34a:	b90b      	cbnz	r3, 800b350 <_vfiprintf_r+0x18>
 800b34c:	f7fe facc 	bl	80098e8 <__sinit>
 800b350:	4b89      	ldr	r3, [pc, #548]	; (800b578 <_vfiprintf_r+0x240>)
 800b352:	429d      	cmp	r5, r3
 800b354:	d11b      	bne.n	800b38e <_vfiprintf_r+0x56>
 800b356:	6875      	ldr	r5, [r6, #4]
 800b358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35a:	07d9      	lsls	r1, r3, #31
 800b35c:	d405      	bmi.n	800b36a <_vfiprintf_r+0x32>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	059a      	lsls	r2, r3, #22
 800b362:	d402      	bmi.n	800b36a <_vfiprintf_r+0x32>
 800b364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b366:	f7fe fed0 	bl	800a10a <__retarget_lock_acquire_recursive>
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	071b      	lsls	r3, r3, #28
 800b36e:	d501      	bpl.n	800b374 <_vfiprintf_r+0x3c>
 800b370:	692b      	ldr	r3, [r5, #16]
 800b372:	b9eb      	cbnz	r3, 800b3b0 <_vfiprintf_r+0x78>
 800b374:	4629      	mov	r1, r5
 800b376:	4630      	mov	r0, r6
 800b378:	f7fd fab4 	bl	80088e4 <__swsetup_r>
 800b37c:	b1c0      	cbz	r0, 800b3b0 <_vfiprintf_r+0x78>
 800b37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b380:	07dc      	lsls	r4, r3, #31
 800b382:	d50e      	bpl.n	800b3a2 <_vfiprintf_r+0x6a>
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	b01d      	add	sp, #116	; 0x74
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	4b7b      	ldr	r3, [pc, #492]	; (800b57c <_vfiprintf_r+0x244>)
 800b390:	429d      	cmp	r5, r3
 800b392:	d101      	bne.n	800b398 <_vfiprintf_r+0x60>
 800b394:	68b5      	ldr	r5, [r6, #8]
 800b396:	e7df      	b.n	800b358 <_vfiprintf_r+0x20>
 800b398:	4b79      	ldr	r3, [pc, #484]	; (800b580 <_vfiprintf_r+0x248>)
 800b39a:	429d      	cmp	r5, r3
 800b39c:	bf08      	it	eq
 800b39e:	68f5      	ldreq	r5, [r6, #12]
 800b3a0:	e7da      	b.n	800b358 <_vfiprintf_r+0x20>
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	0598      	lsls	r0, r3, #22
 800b3a6:	d4ed      	bmi.n	800b384 <_vfiprintf_r+0x4c>
 800b3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3aa:	f7fe feaf 	bl	800a10c <__retarget_lock_release_recursive>
 800b3ae:	e7e9      	b.n	800b384 <_vfiprintf_r+0x4c>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b4:	2320      	movs	r3, #32
 800b3b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3be:	2330      	movs	r3, #48	; 0x30
 800b3c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b584 <_vfiprintf_r+0x24c>
 800b3c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c8:	f04f 0901 	mov.w	r9, #1
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	469a      	mov	sl, r3
 800b3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d4:	b10a      	cbz	r2, 800b3da <_vfiprintf_r+0xa2>
 800b3d6:	2a25      	cmp	r2, #37	; 0x25
 800b3d8:	d1f9      	bne.n	800b3ce <_vfiprintf_r+0x96>
 800b3da:	ebba 0b04 	subs.w	fp, sl, r4
 800b3de:	d00b      	beq.n	800b3f8 <_vfiprintf_r+0xc0>
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ff94 	bl	800b314 <__sfputs_r>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f000 80aa 	beq.w	800b546 <_vfiprintf_r+0x20e>
 800b3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f4:	445a      	add	r2, fp
 800b3f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 80a2 	beq.w	800b546 <_vfiprintf_r+0x20e>
 800b402:	2300      	movs	r3, #0
 800b404:	f04f 32ff 	mov.w	r2, #4294967295
 800b408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b40c:	f10a 0a01 	add.w	sl, sl, #1
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b418:	931a      	str	r3, [sp, #104]	; 0x68
 800b41a:	4654      	mov	r4, sl
 800b41c:	2205      	movs	r2, #5
 800b41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b422:	4858      	ldr	r0, [pc, #352]	; (800b584 <_vfiprintf_r+0x24c>)
 800b424:	f7f4 fee4 	bl	80001f0 <memchr>
 800b428:	9a04      	ldr	r2, [sp, #16]
 800b42a:	b9d8      	cbnz	r0, 800b464 <_vfiprintf_r+0x12c>
 800b42c:	06d1      	lsls	r1, r2, #27
 800b42e:	bf44      	itt	mi
 800b430:	2320      	movmi	r3, #32
 800b432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b436:	0713      	lsls	r3, r2, #28
 800b438:	bf44      	itt	mi
 800b43a:	232b      	movmi	r3, #43	; 0x2b
 800b43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b440:	f89a 3000 	ldrb.w	r3, [sl]
 800b444:	2b2a      	cmp	r3, #42	; 0x2a
 800b446:	d015      	beq.n	800b474 <_vfiprintf_r+0x13c>
 800b448:	9a07      	ldr	r2, [sp, #28]
 800b44a:	4654      	mov	r4, sl
 800b44c:	2000      	movs	r0, #0
 800b44e:	f04f 0c0a 	mov.w	ip, #10
 800b452:	4621      	mov	r1, r4
 800b454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b458:	3b30      	subs	r3, #48	; 0x30
 800b45a:	2b09      	cmp	r3, #9
 800b45c:	d94e      	bls.n	800b4fc <_vfiprintf_r+0x1c4>
 800b45e:	b1b0      	cbz	r0, 800b48e <_vfiprintf_r+0x156>
 800b460:	9207      	str	r2, [sp, #28]
 800b462:	e014      	b.n	800b48e <_vfiprintf_r+0x156>
 800b464:	eba0 0308 	sub.w	r3, r0, r8
 800b468:	fa09 f303 	lsl.w	r3, r9, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	46a2      	mov	sl, r4
 800b472:	e7d2      	b.n	800b41a <_vfiprintf_r+0xe2>
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	1d19      	adds	r1, r3, #4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	9103      	str	r1, [sp, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bfbb      	ittet	lt
 800b480:	425b      	neglt	r3, r3
 800b482:	f042 0202 	orrlt.w	r2, r2, #2
 800b486:	9307      	strge	r3, [sp, #28]
 800b488:	9307      	strlt	r3, [sp, #28]
 800b48a:	bfb8      	it	lt
 800b48c:	9204      	strlt	r2, [sp, #16]
 800b48e:	7823      	ldrb	r3, [r4, #0]
 800b490:	2b2e      	cmp	r3, #46	; 0x2e
 800b492:	d10c      	bne.n	800b4ae <_vfiprintf_r+0x176>
 800b494:	7863      	ldrb	r3, [r4, #1]
 800b496:	2b2a      	cmp	r3, #42	; 0x2a
 800b498:	d135      	bne.n	800b506 <_vfiprintf_r+0x1ce>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	1d1a      	adds	r2, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	9203      	str	r2, [sp, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bfb8      	it	lt
 800b4a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4aa:	3402      	adds	r4, #2
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b594 <_vfiprintf_r+0x25c>
 800b4b2:	7821      	ldrb	r1, [r4, #0]
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	f7f4 fe9a 	bl	80001f0 <memchr>
 800b4bc:	b140      	cbz	r0, 800b4d0 <_vfiprintf_r+0x198>
 800b4be:	2340      	movs	r3, #64	; 0x40
 800b4c0:	eba0 000a 	sub.w	r0, r0, sl
 800b4c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	4303      	orrs	r3, r0
 800b4cc:	3401      	adds	r4, #1
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	482c      	ldr	r0, [pc, #176]	; (800b588 <_vfiprintf_r+0x250>)
 800b4d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4da:	2206      	movs	r2, #6
 800b4dc:	f7f4 fe88 	bl	80001f0 <memchr>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d03f      	beq.n	800b564 <_vfiprintf_r+0x22c>
 800b4e4:	4b29      	ldr	r3, [pc, #164]	; (800b58c <_vfiprintf_r+0x254>)
 800b4e6:	bb1b      	cbnz	r3, 800b530 <_vfiprintf_r+0x1f8>
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	3307      	adds	r3, #7
 800b4ec:	f023 0307 	bic.w	r3, r3, #7
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	9303      	str	r3, [sp, #12]
 800b4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f6:	443b      	add	r3, r7
 800b4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fa:	e767      	b.n	800b3cc <_vfiprintf_r+0x94>
 800b4fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b500:	460c      	mov	r4, r1
 800b502:	2001      	movs	r0, #1
 800b504:	e7a5      	b.n	800b452 <_vfiprintf_r+0x11a>
 800b506:	2300      	movs	r3, #0
 800b508:	3401      	adds	r4, #1
 800b50a:	9305      	str	r3, [sp, #20]
 800b50c:	4619      	mov	r1, r3
 800b50e:	f04f 0c0a 	mov.w	ip, #10
 800b512:	4620      	mov	r0, r4
 800b514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b518:	3a30      	subs	r2, #48	; 0x30
 800b51a:	2a09      	cmp	r2, #9
 800b51c:	d903      	bls.n	800b526 <_vfiprintf_r+0x1ee>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0c5      	beq.n	800b4ae <_vfiprintf_r+0x176>
 800b522:	9105      	str	r1, [sp, #20]
 800b524:	e7c3      	b.n	800b4ae <_vfiprintf_r+0x176>
 800b526:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52a:	4604      	mov	r4, r0
 800b52c:	2301      	movs	r3, #1
 800b52e:	e7f0      	b.n	800b512 <_vfiprintf_r+0x1da>
 800b530:	ab03      	add	r3, sp, #12
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	462a      	mov	r2, r5
 800b536:	4b16      	ldr	r3, [pc, #88]	; (800b590 <_vfiprintf_r+0x258>)
 800b538:	a904      	add	r1, sp, #16
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7fb fc5e 	bl	8006dfc <_printf_float>
 800b540:	4607      	mov	r7, r0
 800b542:	1c78      	adds	r0, r7, #1
 800b544:	d1d6      	bne.n	800b4f4 <_vfiprintf_r+0x1bc>
 800b546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b548:	07d9      	lsls	r1, r3, #31
 800b54a:	d405      	bmi.n	800b558 <_vfiprintf_r+0x220>
 800b54c:	89ab      	ldrh	r3, [r5, #12]
 800b54e:	059a      	lsls	r2, r3, #22
 800b550:	d402      	bmi.n	800b558 <_vfiprintf_r+0x220>
 800b552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b554:	f7fe fdda 	bl	800a10c <__retarget_lock_release_recursive>
 800b558:	89ab      	ldrh	r3, [r5, #12]
 800b55a:	065b      	lsls	r3, r3, #25
 800b55c:	f53f af12 	bmi.w	800b384 <_vfiprintf_r+0x4c>
 800b560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b562:	e711      	b.n	800b388 <_vfiprintf_r+0x50>
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	462a      	mov	r2, r5
 800b56a:	4b09      	ldr	r3, [pc, #36]	; (800b590 <_vfiprintf_r+0x258>)
 800b56c:	a904      	add	r1, sp, #16
 800b56e:	4630      	mov	r0, r6
 800b570:	f7fb fee8 	bl	8007344 <_printf_i>
 800b574:	e7e4      	b.n	800b540 <_vfiprintf_r+0x208>
 800b576:	bf00      	nop
 800b578:	0800b96c 	.word	0x0800b96c
 800b57c:	0800b98c 	.word	0x0800b98c
 800b580:	0800b94c 	.word	0x0800b94c
 800b584:	0800bb84 	.word	0x0800bb84
 800b588:	0800bb8e 	.word	0x0800bb8e
 800b58c:	08006dfd 	.word	0x08006dfd
 800b590:	0800b315 	.word	0x0800b315
 800b594:	0800bb8a 	.word	0x0800bb8a

0800b598 <_read_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_read_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f6 fb10 	bl	8001bcc <_read>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_read_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_read_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	200045dc 	.word	0x200045dc

0800b5bc <abort>:
 800b5bc:	b508      	push	{r3, lr}
 800b5be:	2006      	movs	r0, #6
 800b5c0:	f000 f834 	bl	800b62c <raise>
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f7f6 faf7 	bl	8001bb8 <_exit>

0800b5ca <_malloc_usable_size_r>:
 800b5ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ce:	1f18      	subs	r0, r3, #4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bfbc      	itt	lt
 800b5d4:	580b      	ldrlt	r3, [r1, r0]
 800b5d6:	18c0      	addlt	r0, r0, r3
 800b5d8:	4770      	bx	lr

0800b5da <_raise_r>:
 800b5da:	291f      	cmp	r1, #31
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4604      	mov	r4, r0
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	d904      	bls.n	800b5ee <_raise_r+0x14>
 800b5e4:	2316      	movs	r3, #22
 800b5e6:	6003      	str	r3, [r0, #0]
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
 800b5ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5f0:	b112      	cbz	r2, 800b5f8 <_raise_r+0x1e>
 800b5f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5f6:	b94b      	cbnz	r3, 800b60c <_raise_r+0x32>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 f831 	bl	800b660 <_getpid_r>
 800b5fe:	462a      	mov	r2, r5
 800b600:	4601      	mov	r1, r0
 800b602:	4620      	mov	r0, r4
 800b604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b608:	f000 b818 	b.w	800b63c <_kill_r>
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d00a      	beq.n	800b626 <_raise_r+0x4c>
 800b610:	1c59      	adds	r1, r3, #1
 800b612:	d103      	bne.n	800b61c <_raise_r+0x42>
 800b614:	2316      	movs	r3, #22
 800b616:	6003      	str	r3, [r0, #0]
 800b618:	2001      	movs	r0, #1
 800b61a:	e7e7      	b.n	800b5ec <_raise_r+0x12>
 800b61c:	2400      	movs	r4, #0
 800b61e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b622:	4628      	mov	r0, r5
 800b624:	4798      	blx	r3
 800b626:	2000      	movs	r0, #0
 800b628:	e7e0      	b.n	800b5ec <_raise_r+0x12>
	...

0800b62c <raise>:
 800b62c:	4b02      	ldr	r3, [pc, #8]	; (800b638 <raise+0xc>)
 800b62e:	4601      	mov	r1, r0
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	f7ff bfd2 	b.w	800b5da <_raise_r>
 800b636:	bf00      	nop
 800b638:	200000fc 	.word	0x200000fc

0800b63c <_kill_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	; (800b65c <_kill_r+0x20>)
 800b640:	2300      	movs	r3, #0
 800b642:	4604      	mov	r4, r0
 800b644:	4608      	mov	r0, r1
 800b646:	4611      	mov	r1, r2
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	f7f6 faa5 	bl	8001b98 <_kill>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d102      	bne.n	800b658 <_kill_r+0x1c>
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	b103      	cbz	r3, 800b658 <_kill_r+0x1c>
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	bd38      	pop	{r3, r4, r5, pc}
 800b65a:	bf00      	nop
 800b65c:	200045dc 	.word	0x200045dc

0800b660 <_getpid_r>:
 800b660:	f7f6 ba92 	b.w	8001b88 <_getpid>

0800b664 <_init>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr

0800b670 <_fini>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	bf00      	nop
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr
