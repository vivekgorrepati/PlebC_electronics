
RS485_Linear_closed_loop_system_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800637c  0800637c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042dc  20000100  08006484  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043dc  08006484  000243dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001493f  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc9  00000000  00000000  00034a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00037a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00038c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858c  00000000  00000000  00039d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142ff  00000000  00000000  0005229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fe5  00000000  00000000  0006659b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  000fd5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062dc 	.word	0x080062dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080062dc 	.word	0x080062dc

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <vApplicationGetIdleTaskMemory+0x30>)
 8000ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000011c 	.word	0x2000011c
 8000d00:	20000170 	.word	0x20000170

08000d04 <updateEncoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncoder(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	481f      	ldr	r0, [pc, #124]	; (8000d8c <updateEncoder+0x88>)
 8000d0e:	f001 f875 	bl	8001dfc <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 8000d16:	2102      	movs	r1, #2
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <updateEncoder+0x88>)
 8000d1a:	f001 f86f 	bl	8001dfc <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <updateEncoder+0x8c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d008      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d005      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d002      	beq.n	8000d50 <updateEncoder+0x4c>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b0b      	cmp	r3, #11
 8000d4e:	d104      	bne.n	8000d5a <updateEncoder+0x56>
    encoderValue++;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <updateEncoder+0x90>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <updateEncoder+0x90>)
 8000d58:	6013      	str	r3, [r2, #0]
  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b0e      	cmp	r3, #14
 8000d5e:	d008      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	d005      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d002      	beq.n	8000d72 <updateEncoder+0x6e>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d104      	bne.n	8000d7c <updateEncoder+0x78>
    encoderValue--;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <updateEncoder+0x90>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <updateEncoder+0x90>)
 8000d7a:	6013      	str	r3, [r2, #0]

  lastEncoded = encoded;
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <updateEncoder+0x8c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	20000374 	.word	0x20000374
 8000d94:	20000378 	.word	0x20000378

08000d98 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d002      	beq.n	8000dae <HAL_GPIO_EXTI_Callback+0x16>
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8000dae:	f7ff ffa9 	bl	8000d04 <updateEncoder>

  }
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <UART_StartReceive>:

// Function to start UART reception
void UART_StartReceive(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <UART_StartReceive+0x20>)
 8000dc8:	f001 f830 	bl	8001e2c <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 8000dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd0:	4903      	ldr	r1, [pc, #12]	; (8000de0 <UART_StartReceive+0x24>)
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <UART_StartReceive+0x28>)
 8000dd4:	f002 faa5 	bl	8003322 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	20000478 	.word	0x20000478
 8000de4:	200003e0 	.word	0x200003e0

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 fca7 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f845 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 f925 	bl	8001044 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dfa:	f000 f8a9 	bl	8000f50 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000dfe:	f000 f8f7 	bl	8000ff0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <main+0x7c>)
 8000e04:	f001 fd5e 	bl	80028c4 <HAL_TIM_Base_Start>
  UART_StartReceive();
 8000e08:	f7ff ffd8 	bl	8000dbc <UART_StartReceive>

  rpm = Holding_Registers_Database[0];
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x80>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <main+0x84>)
 8000e14:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <main+0x88>)
 8000e18:	f107 041c 	add.w	r4, r7, #28
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 ff14 	bl	8004c5e <osThreadCreate>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <main+0x8c>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <main+0x90>)
 8000e3e:	463c      	mov	r4, r7
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 ff03 	bl	8004c5e <osThreadCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <main+0x94>)
 8000e5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e5e:	f003 fef7 	bl	8004c50 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <main+0x7a>
 8000e64:	20000398 	.word	0x20000398
 8000e68:	20000018 	.word	0x20000018
 8000e6c:	20000370 	.word	0x20000370
 8000e70:	0800630c 	.word	0x0800630c
 8000e74:	20000424 	.word	0x20000424
 8000e78:	08006328 	.word	0x08006328
 8000e7c:	20000428 	.word	0x20000428

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	2230      	movs	r2, #48	; 0x30
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fa1c 	bl	80062cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <SystemClock_Config+0xc8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a26      	ldr	r2, [pc, #152]	; (8000f48 <SystemClock_Config+0xc8>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <SystemClock_Config+0xc8>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <SystemClock_Config+0xcc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <SystemClock_Config+0xcc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 ffc3 	bl	8001e90 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f10:	f000 fa83 	bl	800141a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2103      	movs	r1, #3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fa25 	bl	8002380 <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f3c:	f000 fa6d 	bl	800141a <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3750      	adds	r7, #80	; 0x50
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <MX_TIM1_Init+0x9c>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f74:	225a      	movs	r2, #90	; 0x5a
 8000f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000f9a:	f001 fc43 	bl	8002824 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fa4:	f000 fa39 	bl	800141a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000fb6:	f001 fe49 	bl	8002c4c <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fc0:	f000 fa2b 	bl	800141a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM1_Init+0x98>)
 8000fd2:	f002 f845 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f000 fa1d 	bl	800141a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000398 	.word	0x20000398
 8000fec:	40010000 	.word	0x40010000

08000ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART1_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001028:	f002 f89c 	bl	8003164 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 f9f2 	bl	800141a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003e0 	.word	0x200003e0
 8001040:	40011000 	.word	0x40011000

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <MX_GPIO_Init+0x10c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <MX_GPIO_Init+0x10c>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <MX_GPIO_Init+0x10c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <MX_GPIO_Init+0x10c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <MX_GPIO_Init+0x10c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <MX_GPIO_Init+0x10c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_GPIO_Init+0x10c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <MX_GPIO_Init+0x10c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <MX_GPIO_Init+0x10c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <MX_GPIO_Init+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <MX_GPIO_Init+0x10c>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_GPIO_Init+0x10c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f240 1113 	movw	r1, #275	; 0x113
 80010d0:	4820      	ldr	r0, [pc, #128]	; (8001154 <MX_GPIO_Init+0x110>)
 80010d2:	f000 feab 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	481b      	ldr	r0, [pc, #108]	; (8001158 <MX_GPIO_Init+0x114>)
 80010ea:	f000 fd03 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 80010ee:	f240 1313 	movw	r3, #275	; 0x113
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_GPIO_Init+0x110>)
 8001108:	f000 fcf4 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800110c:	2303      	movs	r3, #3
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001110:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_GPIO_Init+0x118>)
 8001122:	f000 fce7 	bl	8001af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	2006      	movs	r0, #6
 800112c:	f000 fc26 	bl	800197c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001130:	2006      	movs	r0, #6
 8001132:	f000 fc3f 	bl	80019b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2007      	movs	r0, #7
 800113c:	f000 fc1e 	bl	800197c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001140:	2007      	movs	r0, #7
 8001142:	f000 fc37 	bl	80019b4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020800 	.word	0x40020800
 800115c:	40020400 	.word	0x40020400

08001160 <StartEncoderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
//	if(dumyValue == 10000)
//	{
//		dumyValue = 1000;
//	}

	Input_Registers_Database[0] = encoderValue; // Store the encoder value in the first input register
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <StartEncoderTask+0x54>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <StartEncoderTask+0x58>)
 8001170:	801a      	strh	r2, [r3, #0]
	int distance_covered = encoderValue * (mm_in_1rev/enc_val_in_1rev);
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <StartEncoderTask+0x54>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <StartEncoderTask+0x5c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <StartEncoderTask+0x60>)
 800118c:	edd3 6a00 	vldr	s13, [r3]
 8001190:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	ee17 3a90 	vmov	r3, s15
 80011a0:	60fb      	str	r3, [r7, #12]
	Input_Registers_Database[1] = distance_covered; // Store the encoder value in the first input register
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <StartEncoderTask+0x58>)
 80011a8:	805a      	strh	r2, [r3, #2]
    osDelay(20);
 80011aa:	2014      	movs	r0, #20
 80011ac:	f003 fda3 	bl	8004cf6 <osDelay>
  {
 80011b0:	e7da      	b.n	8001168 <StartEncoderTask+0x8>
 80011b2:	bf00      	nop
 80011b4:	20000378 	.word	0x20000378
 80011b8:	2000007c 	.word	0x2000007c
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <homePosition>:
* @param argument: Not used
* @retval None
*/

// Function to initialize motor position
void homePosition(MotorConfig* motor) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    // Move motor backward until limit switch is triggered
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 80011cc:	e01e      	b.n	800120c <homePosition+0x48>
    	// Calculate the new speed and step interval
		unsigned long stepInterval = computeNewSpeed();
 80011ce:	f004 ffc3 	bl	8006158 <computeNewSpeed>
 80011d2:	60f8      	str	r0, [r7, #12]

		// Generate a step pulse with the calculated interval
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6898      	ldr	r0, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	899b      	ldrh	r3, [r3, #12]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f000 fe24 	bl	8001e2c <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 ff66 	bl	80060bc <microDelay>
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6898      	ldr	r0, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	899b      	ldrh	r3, [r3, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f000 fe16 	bl	8001e2c <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f004 ff58 	bl	80060bc <microDelay>
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 800120c:	2102      	movs	r1, #2
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <homePosition+0x98>)
 8001210:	f000 fdf4 	bl	8001dfc <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d0d9      	beq.n	80011ce <homePosition+0xa>
    }
    HAL_Delay(300);
 800121a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800121e:	f000 fad1 	bl	80017c4 <HAL_Delay>
    // move motor forward 3mm or 480 steps

    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2110      	movs	r1, #16
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <homePosition+0x9c>)
 8001228:	f000 fe00 	bl	8001e2c <HAL_GPIO_WritePin>
    motorMove(motor, 480); // motor will move 3mm or 480 steps after hitting the limit switch
 800122c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f004 ffdd 	bl	80061f0 <motorMove>
    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2110      	movs	r1, #16
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <homePosition+0x9c>)
 800123c:	f000 fdf6 	bl	8001e2c <HAL_GPIO_WritePin>

    // Set encoder value to zero
    HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fabf 	bl	80017c4 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001246:	b672      	cpsid	i
}
 8001248:	bf00      	nop
    __disable_irq();

    encoderValue = 0;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <homePosition+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001250:	b662      	cpsie	i
}
 8001252:	bf00      	nop
    __enable_irq();
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020800 	.word	0x40020800
 8001260:	40020000 	.word	0x40020000
 8001264:	20000378 	.word	0x20000378

08001268 <StartMotorTask>:

/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */

  // Define motor configurations
  MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <StartMotorTask+0x158>)
 8001272:	f107 0408 	add.w	r4, r7, #8
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Setup stepper motor parameters
  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 800127c:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <StartMotorTask+0x15c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <StartMotorTask+0x160>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f004 ff3d 	bl	8006110 <setRPM>
  setAcceleration(20.0f); // Set acceleration in steps per second^2
 8001296:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800129a:	f004 ff29 	bl	80060f0 <setAcceleration>

  // Initialize motor position
   homePosition(&motor1);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff8e 	bl	80011c4 <homePosition>

  /* Infinite loop */
  for(;;)
  {
	rpm = Holding_Registers_Database[0];
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <StartMotorTask+0x164>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <StartMotorTask+0x15c>)
 80012b0:	601a      	str	r2, [r3, #0]
	setRPM(rpm, motorSetSteps); // (RPM, Steps)
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <StartMotorTask+0x15c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <StartMotorTask+0x160>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	f004 ff22 	bl	8006110 <setRPM>
    // Disable interrupts and read the encoder value
//    __disable_irq();
    currentPosition = encoderValue; // Read the latest encoder value
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <StartMotorTask+0x168>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <StartMotorTask+0x16c>)
 80012d2:	6013      	str	r3, [r2, #0]
    //Input_Registers_Database[1] = currentPosition; // Store the encoder value in the first input register
//    __enable_irq();

    input_distance = Holding_Registers_Database[4];
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <StartMotorTask+0x164>)
 80012d6:	891b      	ldrh	r3, [r3, #8]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <StartMotorTask+0x170>)
 80012dc:	601a      	str	r2, [r3, #0]


	// Calculate target position with floating-point division
	targetPosition = input_distance * (enc_val_in_1rev/mm_in_1rev); // in encoder value
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <StartMotorTask+0x170>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <StartMotorTask+0x174>)
 80012ec:	ed93 6a00 	vldr	s12, [r3]
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <StartMotorTask+0x178>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <StartMotorTask+0x17c>)
 8001306:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <StartMotorTask+0x17c>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 2a90 	vmov	r2, s15
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <StartMotorTask+0x16c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <StartMotorTask+0x180>)
 8001320:	6013      	str	r3, [r2, #0]

	// Calculate steps to move
	//stepsToMove = positionToMove * (motorSetSteps / (float)encoderPulseValue);
	stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <StartMotorTask+0x180>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <StartMotorTask+0x160>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <StartMotorTask+0x174>)
 800133c:	edd3 6a00 	vldr	s13, [r3]
 8001340:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 2a90 	vmov	r2, s15
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <StartMotorTask+0x184>)
 8001352:	601a      	str	r2, [r3, #0]

	if ((prev_input_distance != input_distance) || (prevstepsToMove != stepsToMove))
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <StartMotorTask+0x188>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <StartMotorTask+0x170>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d105      	bne.n	800136c <StartMotorTask+0x104>
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <StartMotorTask+0x18c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <StartMotorTask+0x184>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d004      	beq.n	8001376 <StartMotorTask+0x10e>
	{
	//Enable Drive
	HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2110      	movs	r1, #16
 8001370:	4821      	ldr	r0, [pc, #132]	; (80013f8 <StartMotorTask+0x190>)
 8001372:	f000 fd5b 	bl	8001e2c <HAL_GPIO_WritePin>
	}

	// Move motor
	motorMove(&motor1, stepsToMove);
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <StartMotorTask+0x184>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f004 ff35 	bl	80061f0 <motorMove>

	if ((prev_input_distance == input_distance) || (prevstepsToMove == stepsToMove))
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <StartMotorTask+0x188>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <StartMotorTask+0x170>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d005      	beq.n	800139e <StartMotorTask+0x136>
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <StartMotorTask+0x18c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <StartMotorTask+0x184>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d104      	bne.n	80013a8 <StartMotorTask+0x140>
		{
	//Disable Drive
	HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2110      	movs	r1, #16
 80013a2:	4815      	ldr	r0, [pc, #84]	; (80013f8 <StartMotorTask+0x190>)
 80013a4:	f000 fd42 	bl	8001e2c <HAL_GPIO_WritePin>
		}

	prev_input_distance = input_distance;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <StartMotorTask+0x170>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <StartMotorTask+0x188>)
 80013ae:	6013      	str	r3, [r2, #0]
	prevstepsToMove = stepsToMove;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <StartMotorTask+0x184>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <StartMotorTask+0x18c>)
 80013b6:	6013      	str	r3, [r2, #0]

	osDelay(100);
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f003 fc9c 	bl	8004cf6 <osDelay>
	rpm = Holding_Registers_Database[0];
 80013be:	e773      	b.n	80012a8 <StartMotorTask+0x40>
 80013c0:	08006344 	.word	0x08006344
 80013c4:	20000370 	.word	0x20000370
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000018 	.word	0x20000018
 80013d0:	20000378 	.word	0x20000378
 80013d4:	20000388 	.word	0x20000388
 80013d8:	20000384 	.word	0x20000384
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000008 	.word	0x20000008
 80013e4:	2000038c 	.word	0x2000038c
 80013e8:	20000390 	.word	0x20000390
 80013ec:	20000394 	.word	0x20000394
 80013f0:	2000037c 	.word	0x2000037c
 80013f4:	20000380 	.word	0x20000380
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d101      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140e:	f000 f9b9 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
}
 8001420:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001422:	e7fe      	b.n	8001422 <Error_Handler+0x8>

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_MspInit+0x54>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_MspInit+0x54>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x54>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_MspInit+0x54>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_MspInit+0x54>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_MspInit+0x54>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	f06f 0001 	mvn.w	r0, #1
 800146a:	f000 fa87 	bl	800197c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_TIM_Base_MspInit+0x3c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10d      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_TIM_Base_MspInit+0x40>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <HAL_TIM_Base_MspInit+0x40>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_TIM_Base_MspInit+0x40>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_UART_MspInit+0x94>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d134      	bne.n	800154c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_UART_MspInit+0x98>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_UART_MspInit+0x98>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x98>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_UART_MspInit+0x98>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_UART_MspInit+0x98>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_UART_MspInit+0x98>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800151a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152c:	2307      	movs	r3, #7
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <HAL_UART_MspInit+0x9c>)
 8001538:	f000 fadc 	bl	8001af4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2105      	movs	r1, #5
 8001540:	2025      	movs	r0, #37	; 0x25
 8001542:	f000 fa1b 	bl	800197c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001546:	2025      	movs	r0, #37	; 0x25
 8001548:	f000 fa34 	bl	80019b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40011000 	.word	0x40011000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_InitTick+0xe8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_InitTick+0xe8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_InitTick+0xe8>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158c:	f107 0210 	add.w	r2, r7, #16
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f001 f912 	bl	80027c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a6:	f001 f8e3 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80015aa:	6378      	str	r0, [r7, #52]	; 0x34
 80015ac:	e004      	b.n	80015b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ae:	f001 f8df 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80015b2:	4603      	mov	r3, r0
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <HAL_InitTick+0xec>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	0c9b      	lsrs	r3, r3, #18
 80015c2:	3b01      	subs	r3, #1
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_InitTick+0xf0>)
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_InitTick+0xf0>)
 80015d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_InitTick+0xf0>)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_InitTick+0xf0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_InitTick+0xf0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_InitTick+0xf0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <HAL_InitTick+0xf0>)
 80015f0:	f001 f918 	bl	8002824 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11b      	bne.n	800163a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <HAL_InitTick+0xf0>)
 8001604:	f001 f9b8 	bl	8002978 <HAL_TIM_Base_Start_IT>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800160e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001612:	2b00      	cmp	r3, #0
 8001614:	d111      	bne.n	800163a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001616:	201c      	movs	r0, #28
 8001618:	f000 f9cc 	bl	80019b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d808      	bhi.n	8001634 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001622:	2200      	movs	r2, #0
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	201c      	movs	r0, #28
 8001628:	f000 f9a8 	bl	800197c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162c:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_InitTick+0xf4>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e002      	b.n	800163a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800163e:	4618      	mov	r0, r3
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	431bde83 	.word	0x431bde83
 8001650:	2000042c 	.word	0x2000042c
 8001654:	20000010 	.word	0x20000010

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001688:	2001      	movs	r0, #1
 800168a:	f000 fbe9 	bl	8001e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001696:	2002      	movs	r0, #2
 8001698:	f000 fbe2 	bl	8001e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM2_IRQHandler+0x10>)
 80016a6:	f001 f9c9 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000042c 	.word	0x2000042c

080016b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <USART1_IRQHandler+0x10>)
 80016ba:	f001 fe97 	bl	80033ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200003e0 	.word	0x200003e0

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001708:	4c0b      	ldr	r4, [pc, #44]	; (8001738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001716:	f7ff ffd7 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f004 fdb3 	bl	8006284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fb63 	bl	8000de8 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001730:	08006384 	.word	0x08006384
  ldr r2, =_sbss
 8001734:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001738:	200043dc 	.word	0x200043dc

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f8fc 	bl	8001966 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fef6 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fe56 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000014 	.word	0x20000014
 80017a8:	20000474 	.word	0x20000474

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000474 	.word	0x20000474

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000014 	.word	0x20000014

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff4c 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198e:	f7ff ff61 	bl	8001854 <__NVIC_GetPriorityGrouping>
 8001992:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7ff ffb1 	bl	8001900 <NVIC_EncodePriority>
 800199e:	4602      	mov	r2, r0
 80019a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff80 	bl	80018ac <__NVIC_SetPriority>
}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff54 	bl	8001870 <__NVIC_EnableIRQ>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019de:	f7ff fee5 	bl	80017ac <HAL_GetTick>
 80019e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d008      	beq.n	8001a02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e052      	b.n	8001aa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0216 	bic.w	r2, r2, #22
 8001a10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <HAL_DMA_Abort+0x62>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0208 	bic.w	r2, r2, #8
 8001a40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a52:	e013      	b.n	8001a7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a54:	f7ff feaa 	bl	80017ac <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d90c      	bls.n	8001a7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2220      	movs	r2, #32
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e015      	b.n	8001aa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e4      	bne.n	8001a54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	223f      	movs	r2, #63	; 0x3f
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00c      	b.n	8001ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e159      	b.n	8001dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8148 	bne.w	8001dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c96:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x202>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x1fe>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_GPIO_Init+0x2f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x1f6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_GPIO_Init+0x300>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x1f2>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f aea2 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff8a 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40013c00 	.word	0x40013c00

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e267      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d075      	beq.n	8001f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b85      	ldr	r3, [pc, #532]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4b7e      	ldr	r3, [pc, #504]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x108>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d157      	bne.n	8001f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e242      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x74>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xb0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x98>
 8001f0e:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6f      	ldr	r2, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6c      	ldr	r2, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xb0>
 8001f28:	4b69      	ldr	r3, [pc, #420]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a68      	ldr	r2, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b66      	ldr	r3, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a65      	ldr	r2, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fc30 	bl	80017ac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fc2c 	bl	80017ac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e207      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xc0>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc1c 	bl	80017ac <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fc18 	bl	80017ac <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1f3      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b51      	ldr	r3, [pc, #324]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0xe8>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x152>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e1c7      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4937      	ldr	r1, [pc, #220]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e03a      	b.n	800206e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <HAL_RCC_OscConfig+0x244>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff fbd1 	bl	80017ac <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200e:	f7ff fbcd 	bl	80017ac <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1a8      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4925      	ldr	r1, [pc, #148]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x244>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff fbb0 	bl	80017ac <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fbac 	bl	80017ac <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e187      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d036      	beq.n	80020e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_RCC_OscConfig+0x248>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff fb90 	bl	80017ac <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fb8c 	bl	80017ac <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e167      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x240>)
 80020a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x200>
 80020ae:	e01b      	b.n	80020e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_OscConfig+0x248>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb79 	bl	80017ac <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	e00e      	b.n	80020dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff fb75 	bl	80017ac <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d907      	bls.n	80020dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e150      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	42470000 	.word	0x42470000
 80020d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ea      	bne.n	80020be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8097 	beq.w	8002224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a7c      	ldr	r2, [pc, #496]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b77      	ldr	r3, [pc, #476]	; (8002304 <HAL_RCC_OscConfig+0x474>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a73      	ldr	r2, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x474>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7ff fb35 	bl	80017ac <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff fb31 	bl	80017ac <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e10c      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCC_OscConfig+0x474>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x2ea>
 800216c:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x324>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x30c>
 8002182:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a5e      	ldr	r2, [pc, #376]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5b      	ldr	r2, [pc, #364]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0x324>
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a57      	ldr	r2, [pc, #348]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	4b55      	ldr	r3, [pc, #340]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a54      	ldr	r2, [pc, #336]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0304 	bic.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff faf6 	bl	80017ac <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff faf2 	bl	80017ac <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0cb      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0ee      	beq.n	80021c4 <HAL_RCC_OscConfig+0x334>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fae0 	bl	80017ac <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7ff fadc 	bl	80017ac <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0b5      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ee      	bne.n	80021f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a1 	beq.w	8002370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222e:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d05c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d141      	bne.n	80022c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fab0 	bl	80017ac <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff faac 	bl	80017ac <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e087      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	491b      	ldr	r1, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x478>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff fa85 	bl	80017ac <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff fa81 	bl	80017ac <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e05c      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x416>
 80022c4:	e054      	b.n	8002370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCC_OscConfig+0x478>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa6e 	bl	80017ac <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fa6a 	bl	80017ac <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e045      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_OscConfig+0x470>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x444>
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e038      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
 8002308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x4ec>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d028      	beq.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d121      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800233c:	4013      	ands	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002344:	4293      	cmp	r3, r2
 8002346:	d111      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	3b01      	subs	r3, #1
 8002356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0cc      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b68      	ldr	r3, [pc, #416]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d90c      	bls.n	80023bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b65      	ldr	r3, [pc, #404]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b8      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a58      	ldr	r2, [pc, #352]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494d      	ldr	r1, [pc, #308]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d044      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d119      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	2b03      	cmp	r3, #3
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e067      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4934      	ldr	r1, [pc, #208]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff f99c 	bl	80017ac <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff f998 	bl	80017ac <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e04f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d20c      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e032      	b.n	800252e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4916      	ldr	r1, [pc, #88]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f821 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	490a      	ldr	r1, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	5ccb      	ldrb	r3, [r1, r3]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a09      	ldr	r2, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f81a 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023c00 	.word	0x40023c00
 800253c:	40023800 	.word	0x40023800
 8002540:	0800635c 	.word	0x0800635c
 8002544:	2000000c 	.word	0x2000000c
 8002548:	20000010 	.word	0x20000010

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b094      	sub	sp, #80	; 0x50
 8002552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	647b      	str	r3, [r7, #68]	; 0x44
 8002558:	2300      	movs	r3, #0
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	2300      	movs	r3, #0
 800255e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002564:	4b79      	ldr	r3, [pc, #484]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d00d      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x40>
 8002570:	2b08      	cmp	r3, #8
 8002572:	f200 80e1 	bhi.w	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x34>
 800257a:	2b04      	cmp	r3, #4
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x3a>
 800257e:	e0db      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b73      	ldr	r3, [pc, #460]	; (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002584:	e0db      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCC_GetSysClockFreq+0x208>)
 8002588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800258a:	e0d8      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	2200      	movs	r2, #0
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	0159      	lsls	r1, r3, #5
 80025cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d0:	0150      	lsls	r0, r2, #5
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4621      	mov	r1, r4
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	6139      	str	r1, [r7, #16]
 80025dc:	4629      	mov	r1, r5
 80025de:	eb63 0301 	sbc.w	r3, r3, r1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f0:	4659      	mov	r1, fp
 80025f2:	018b      	lsls	r3, r1, #6
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fa:	4651      	mov	r1, sl
 80025fc:	018a      	lsls	r2, r1, #6
 80025fe:	4651      	mov	r1, sl
 8002600:	ebb2 0801 	subs.w	r8, r2, r1
 8002604:	4659      	mov	r1, fp
 8002606:	eb63 0901 	sbc.w	r9, r3, r1
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261e:	4690      	mov	r8, r2
 8002620:	4699      	mov	r9, r3
 8002622:	4623      	mov	r3, r4
 8002624:	eb18 0303 	adds.w	r3, r8, r3
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	462b      	mov	r3, r5
 800262c:	eb49 0303 	adc.w	r3, r9, r3
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800263e:	4629      	mov	r1, r5
 8002640:	024b      	lsls	r3, r1, #9
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002648:	4621      	mov	r1, r4
 800264a:	024a      	lsls	r2, r1, #9
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002652:	2200      	movs	r2, #0
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
 8002656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800265c:	f7fe f9b6 	bl	80009cc <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	e058      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	4618      	mov	r0, r3
 8002674:	4611      	mov	r1, r2
 8002676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	f04f 0000 	mov.w	r0, #0
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	0159      	lsls	r1, r3, #5
 8002692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002696:	0150      	lsls	r0, r2, #5
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4641      	mov	r1, r8
 800269e:	ebb2 0a01 	subs.w	sl, r2, r1
 80026a2:	4649      	mov	r1, r9
 80026a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026bc:	ebb2 040a 	subs.w	r4, r2, sl
 80026c0:	eb63 050b 	sbc.w	r5, r3, fp
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	00eb      	lsls	r3, r5, #3
 80026ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d2:	00e2      	lsls	r2, r4, #3
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	4643      	mov	r3, r8
 80026da:	18e3      	adds	r3, r4, r3
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	464b      	mov	r3, r9
 80026e0:	eb45 0303 	adc.w	r3, r5, r3
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f2:	4629      	mov	r1, r5
 80026f4:	028b      	lsls	r3, r1, #10
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026fc:	4621      	mov	r1, r4
 80026fe:	028a      	lsls	r2, r1, #10
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002706:	2200      	movs	r2, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	f7fe f95c 	bl	80009cc <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800272c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002740:	4618      	mov	r0, r3
 8002742:	3750      	adds	r7, #80	; 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400
 8002754:	007a1200 	.word	0x007a1200

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000000c 	.word	0x2000000c

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	0800636c 	.word	0x0800636c

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffdc 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	0800636c 	.word	0x0800636c

080027c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	220f      	movs	r2, #15
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_GetClockConfig+0x5c>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_RCC_GetClockConfig+0x60>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0207 	and.w	r2, r3, #7
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e041      	b.n	80028ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fe16 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fae2 	bl	8002e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e03c      	b.n	8002956 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_TIM_Base_Start+0xa0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <HAL_TIM_Base_Start+0x5c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d013      	beq.n	8002920 <HAL_TIM_Base_Start+0x5c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_TIM_Base_Start+0xa4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_TIM_Base_Start+0x5c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_TIM_Base_Start+0xa8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_TIM_Base_Start+0x5c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_TIM_Base_Start+0xac>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_Base_Start+0x5c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_TIM_Base_Start+0xb0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d010      	beq.n	8002954 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	e007      	b.n	8002954 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40014000 	.word	0x40014000

08002978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d001      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e044      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_Base_Start_IT+0xb0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d018      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x6c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d013      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x6c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_TIM_Base_Start_IT+0xb4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x6c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_TIM_Base_Start_IT+0xb8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x6c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_TIM_Base_Start_IT+0xbc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x6c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_TIM_Base_Start_IT+0xc0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d010      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	e007      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40000c00 	.word	0x40000c00
 8002a38:	40014000 	.word	0x40014000

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9b5 	bl	8002dee <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9a7 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9b8 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f98b 	bl	8002dee <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f97d 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f98e 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f961 	bl	8002dee <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f953 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f964 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0210 	mvn.w	r2, #16
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f937 	bl	8002dee <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f929 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f93a 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0201 	mvn.w	r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fc1e 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fab2 	bl	8003150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8ff 	bl	8002e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0220 	mvn.w	r2, #32
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa7c 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_ConfigClockSource+0x1c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e0b4      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x186>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca0:	d03e      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca6:	f200 8087 	bhi.w	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	f000 8086 	beq.w	8002dbe <HAL_TIM_ConfigClockSource+0x172>
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d87f      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b70      	cmp	r3, #112	; 0x70
 8002cba:	d01a      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8002cbc:	2b70      	cmp	r3, #112	; 0x70
 8002cbe:	d87b      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b60      	cmp	r3, #96	; 0x60
 8002cc2:	d050      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x11a>
 8002cc4:	2b60      	cmp	r3, #96	; 0x60
 8002cc6:	d877      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b50      	cmp	r3, #80	; 0x50
 8002cca:	d03c      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ccc:	2b50      	cmp	r3, #80	; 0x50
 8002cce:	d873      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d058      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x13a>
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d86f      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d064      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	2b30      	cmp	r3, #48	; 0x30
 8002cde:	d86b      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d060      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d867      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d05a      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf0:	e062      	b.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f000 f98d 	bl	8003020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	609a      	str	r2, [r3, #8]
      break;
 8002d1e:	e04f      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6899      	ldr	r1, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f000 f976 	bl	8003020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d42:	609a      	str	r2, [r3, #8]
      break;
 8002d44:	e03c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f000 f8ea 	bl	8002f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2150      	movs	r1, #80	; 0x50
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f943 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002d64:	e02c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f909 	bl	8002f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2160      	movs	r1, #96	; 0x60
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f933 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002d84:	e01c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f8ca 	bl	8002f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f923 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002da4:	e00c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 f91a 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002db6:	e003      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <TIM_Base_SetConfig+0xe4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00f      	beq.n	8002e64 <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d00b      	beq.n	8002e64 <TIM_Base_SetConfig+0x38>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <TIM_Base_SetConfig+0xe8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0x38>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <TIM_Base_SetConfig+0xec>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0x38>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <TIM_Base_SetConfig+0xf0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <TIM_Base_SetConfig+0xe4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01b      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d017      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <TIM_Base_SetConfig+0xe8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <TIM_Base_SetConfig+0xec>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00f      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <TIM_Base_SetConfig+0xf0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <TIM_Base_SetConfig+0xf4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <TIM_Base_SetConfig+0xf8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <TIM_Base_SetConfig+0xfc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d108      	bne.n	8002ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <TIM_Base_SetConfig+0xe4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	615a      	str	r2, [r3, #20]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0201 	bic.w	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 030a 	bic.w	r3, r3, #10
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b087      	sub	sp, #28
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0210 	bic.w	r2, r3, #16
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	031b      	lsls	r3, r3, #12
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	f043 0307 	orr.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	431a      	orrs	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003074:	2302      	movs	r3, #2
 8003076:	e050      	b.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d013      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10c      	bne.n	8003108 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40010000 	.word	0x40010000
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40014000 	.word	0x40014000

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e03f      	b.n	80031f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe f998 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fe11 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b08a      	sub	sp, #40	; 0x28
 8003202:	af02      	add	r7, sp, #8
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	d17c      	bne.n	8003318 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_UART_Transmit+0x2c>
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e075      	b.n	800331a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UART_Transmit+0x3e>
 8003238:	2302      	movs	r3, #2
 800323a:	e06e      	b.n	800331a <HAL_UART_Transmit+0x11c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	; 0x21
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003252:	f7fe faab 	bl	80017ac <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x82>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003290:	e02a      	b.n	80032e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fb51 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e036      	b.n	800331a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e007      	b.n	80032da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1cf      	bne.n	8003292 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fb21 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e006      	b.n	800331a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08c      	sub	sp, #48	; 0x30
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	4613      	mov	r3, r2
 800332e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	d152      	bne.n	80033e2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e04b      	b.n	80033e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8003356:	2302      	movs	r3, #2
 8003358:	e044      	b.n	80033e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	461a      	mov	r2, r3
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fb56 	bl	8003a20 <UART_Start_Receive_IT>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800337a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12c      	bne.n	80033dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	2b01      	cmp	r3, #1
 8003388:	d125      	bne.n	80033d6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	617b      	str	r3, [r7, #20]
   return(result);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c0:	627a      	str	r2, [r7, #36]	; 0x24
 80033c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80033d4:	e002      	b.n	80033dc <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80033dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033e0:	e000      	b.n	80033e4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3730      	adds	r7, #48	; 0x30
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0ba      	sub	sp, #232	; 0xe8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800342a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_UART_IRQHandler+0x66>
 800343e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fc05 	bl	8003c5a <UART_Receive_IT>
      return;
 8003450:	e256      	b.n	8003900 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80de 	beq.w	8003618 <HAL_UART_IRQHandler+0x22c>
 800345c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80d1 	beq.w	8003618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_UART_IRQHandler+0xae>
 8003482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_UART_IRQHandler+0xd2>
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0202 	orr.w	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_UART_IRQHandler+0xf6>
 80034ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f043 0204 	orr.w	r2, r3, #4
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d011      	beq.n	8003512 <HAL_UART_IRQHandler+0x126>
 80034ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0208 	orr.w	r2, r3, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 81ed 	beq.w	80038f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_UART_IRQHandler+0x14e>
 8003528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb90 	bl	8003c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_UART_IRQHandler+0x17a>
 800355e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04f      	beq.n	8003606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa98 	bl	8003a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d141      	bne.n	80035fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3314      	adds	r3, #20
 8003580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1d9      	bne.n	800357a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d013      	beq.n	80035f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4a7d      	ldr	r2, [pc, #500]	; (80037c8 <HAL_UART_IRQHandler+0x3dc>)
 80035d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fa68 	bl	8001ab0 <HAL_DMA_Abort_IT>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f0:	4610      	mov	r0, r2
 80035f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	e00e      	b.n	8003614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f99a 	bl	8003930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00a      	b.n	8003614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f996 	bl	8003930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e006      	b.n	8003614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f992 	bl	8003930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003612:	e170      	b.n	80038f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	bf00      	nop
    return;
 8003616:	e16e      	b.n	80038f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b01      	cmp	r3, #1
 800361e:	f040 814a 	bne.w	80038b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8143 	beq.w	80038b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 813c 	beq.w	80038b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	f040 80b4 	bne.w	80037cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8140 	beq.w	80038fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800367e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003682:	429a      	cmp	r2, r3
 8003684:	f080 8139 	bcs.w	80038fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800368e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	f000 8088 	beq.w	80037ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d9      	bne.n	800369e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800370e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e1      	bne.n	80036ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800374a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e3      	bne.n	8003726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800377c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377e:	f023 0310 	bic.w	r3, r3, #16
 8003782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003790:	65ba      	str	r2, [r7, #88]	; 0x58
 8003792:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e3      	bne.n	800376c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe f911 	bl	80019d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 f94e 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037c4:	e099      	b.n	80038fa <HAL_UART_IRQHandler+0x50e>
 80037c6:	bf00      	nop
 80037c8:	08003b63 	.word	0x08003b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 808b 	beq.w	80038fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8086 	beq.w	80038fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003816:	647a      	str	r2, [r7, #68]	; 0x44
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800381c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e3      	bne.n	80037f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	623b      	str	r3, [r7, #32]
   return(result);
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800384e:	633a      	str	r2, [r7, #48]	; 0x30
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e3      	bne.n	800382a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0310 	bic.w	r3, r3, #16
 8003886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003894:	61fa      	str	r2, [r7, #28]
 8003896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	617b      	str	r3, [r7, #20]
   return(result);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e3      	bne.n	8003870 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 f8d6 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b4:	e023      	b.n	80038fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_UART_IRQHandler+0x4ea>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f95b 	bl	8003b8a <UART_Transmit_IT>
    return;
 80038d4:	e014      	b.n	8003900 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <HAL_UART_IRQHandler+0x514>
 80038e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f99b 	bl	8003c2a <UART_EndTransmit_IT>
    return;
 80038f4:	e004      	b.n	8003900 <HAL_UART_IRQHandler+0x514>
    return;
 80038f6:	bf00      	nop
 80038f8:	e002      	b.n	8003900 <HAL_UART_IRQHandler+0x514>
      return;
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <HAL_UART_IRQHandler+0x514>
      return;
 80038fe:	bf00      	nop
  }
}
 8003900:	37e8      	adds	r7, #232	; 0xe8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop

08003908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b090      	sub	sp, #64	; 0x40
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e050      	b.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d04c      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 8003964:	f7fd ff22 	bl	80017ac <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003970:	429a      	cmp	r2, r3
 8003972:	d241      	bcs.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003994:	637a      	str	r2, [r7, #52]	; 0x34
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c8:	623a      	str	r2, [r7, #32]
 80039ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e00f      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d09f      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3740      	adds	r7, #64	; 0x40
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2222      	movs	r2, #34	; 0x22
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0220 	orr.w	r2, r2, #32
 8003a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b095      	sub	sp, #84	; 0x54
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d119      	bne.n	8003b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b34:	61ba      	str	r2, [r7, #24]
 8003b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b56:	bf00      	nop
 8003b58:	3754      	adds	r7, #84	; 0x54
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fed7 	bl	8003930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b21      	cmp	r3, #33	; 0x21
 8003b9c:	d13e      	bne.n	8003c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d114      	bne.n	8003bd2 <UART_Transmit_IT+0x48>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]
 8003bd0:	e008      	b.n	8003be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6211      	str	r1, [r2, #32]
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fe5c 	bl	8003908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b08c      	sub	sp, #48	; 0x30
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b22      	cmp	r3, #34	; 0x22
 8003c6c:	f040 80ab 	bne.w	8003dc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d117      	bne.n	8003caa <UART_Receive_IT+0x50>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d113      	bne.n	8003caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca8:	e026      	b.n	8003cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d007      	beq.n	8003cce <UART_Receive_IT+0x74>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <UART_Receive_IT+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e008      	b.n	8003cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d15a      	bne.n	8003dc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0220 	bic.w	r2, r2, #32
 8003d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d135      	bne.n	8003db8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f023 0310 	bic.w	r3, r3, #16
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	623a      	str	r2, [r7, #32]
 8003d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d10a      	bne.n	8003daa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fe55 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
 8003db6:	e002      	b.n	8003dbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fdaf 	bl	800391c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e002      	b.n	8003dc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3730      	adds	r7, #48	; 0x30
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd4:	b0c0      	sub	sp, #256	; 0x100
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	ea40 0301 	orr.w	r3, r0, r1
 8003df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e28:	f021 010c 	bic.w	r1, r1, #12
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e36:	430b      	orrs	r3, r1
 8003e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	6999      	ldr	r1, [r3, #24]
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	ea40 0301 	orr.w	r3, r0, r1
 8003e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8f      	ldr	r3, [pc, #572]	; (800409c <UART_SetConfig+0x2cc>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d005      	beq.n	8003e70 <UART_SetConfig+0xa0>
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	; (80040a0 <UART_SetConfig+0x2d0>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d104      	bne.n	8003e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe fc92 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003e74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e78:	e003      	b.n	8003e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e7a:	f7fe fc79 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	f040 810c 	bne.w	80040a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	eb12 0801 	adds.w	r8, r2, r1
 8003eb8:	4629      	mov	r1, r5
 8003eba:	eb43 0901 	adc.w	r9, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb18 0303 	adds.w	r3, r8, r3
 8003edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	eb49 0303 	adc.w	r3, r9, r3
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003efe:	460b      	mov	r3, r1
 8003f00:	18db      	adds	r3, r3, r3
 8003f02:	653b      	str	r3, [r7, #80]	; 0x50
 8003f04:	4613      	mov	r3, r2
 8003f06:	eb42 0303 	adc.w	r3, r2, r3
 8003f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f14:	f7fc fd5a 	bl	80009cc <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	011c      	lsls	r4, r3, #4
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	1891      	adds	r1, r2, r2
 8003f3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f40:	415b      	adcs	r3, r3
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f48:	4641      	mov	r1, r8
 8003f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb43 0b01 	adc.w	fp, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f68:	4692      	mov	sl, r2
 8003f6a:	469b      	mov	fp, r3
 8003f6c:	4643      	mov	r3, r8
 8003f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f76:	464b      	mov	r3, r9
 8003f78:	eb4b 0303 	adc.w	r3, fp, r3
 8003f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f94:	460b      	mov	r3, r1
 8003f96:	18db      	adds	r3, r3, r3
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003faa:	f7fc fd0f 	bl	80009cc <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <UART_SetConfig+0x2d4>)
 8003fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2264      	movs	r2, #100	; 0x64
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	1acb      	subs	r3, r1, r3
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <UART_SetConfig+0x2d4>)
 8003fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fd8:	441c      	add	r4, r3
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	1891      	adds	r1, r2, r2
 8003ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ff4:	415b      	adcs	r3, r3
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	1851      	adds	r1, r2, r1
 8004000:	6339      	str	r1, [r7, #48]	; 0x30
 8004002:	4649      	mov	r1, r9
 8004004:	414b      	adcs	r3, r1
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004014:	4659      	mov	r1, fp
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4651      	mov	r1, sl
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4642      	mov	r2, r8
 800402a:	189b      	adds	r3, r3, r2
 800402c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004030:	464b      	mov	r3, r9
 8004032:	460a      	mov	r2, r1
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800404c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004050:	460b      	mov	r3, r1
 8004052:	18db      	adds	r3, r3, r3
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004066:	f7fc fcb1 	bl	80009cc <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <UART_SetConfig+0x2d4>)
 8004070:	fba3 1302 	umull	r1, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	2164      	movs	r1, #100	; 0x64
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	3332      	adds	r3, #50	; 0x32
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <UART_SetConfig+0x2d4>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	f003 0207 	and.w	r2, r3, #7
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4422      	add	r2, r4
 8004096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004098:	e105      	b.n	80042a6 <UART_SetConfig+0x4d6>
 800409a:	bf00      	nop
 800409c:	40011000 	.word	0x40011000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ba:	4642      	mov	r2, r8
 80040bc:	464b      	mov	r3, r9
 80040be:	1891      	adds	r1, r2, r2
 80040c0:	6239      	str	r1, [r7, #32]
 80040c2:	415b      	adcs	r3, r3
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ca:	4641      	mov	r1, r8
 80040cc:	1854      	adds	r4, r2, r1
 80040ce:	4649      	mov	r1, r9
 80040d0:	eb43 0501 	adc.w	r5, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	00eb      	lsls	r3, r5, #3
 80040de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e2:	00e2      	lsls	r2, r4, #3
 80040e4:	4614      	mov	r4, r2
 80040e6:	461d      	mov	r5, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	18e3      	adds	r3, r4, r3
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040f0:	464b      	mov	r3, r9
 80040f2:	eb45 0303 	adc.w	r3, r5, r3
 80040f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004116:	4629      	mov	r1, r5
 8004118:	008b      	lsls	r3, r1, #2
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004120:	4621      	mov	r1, r4
 8004122:	008a      	lsls	r2, r1, #2
 8004124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004128:	f7fc fc50 	bl	80009cc <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <UART_SetConfig+0x4e4>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	61b9      	str	r1, [r7, #24]
 8004154:	415b      	adcs	r3, r3
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415c:	4641      	mov	r1, r8
 800415e:	1851      	adds	r1, r2, r1
 8004160:	6139      	str	r1, [r7, #16]
 8004162:	4649      	mov	r1, r9
 8004164:	414b      	adcs	r3, r1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004174:	4659      	mov	r1, fp
 8004176:	00cb      	lsls	r3, r1, #3
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417e:	4651      	mov	r1, sl
 8004180:	00ca      	lsls	r2, r1, #3
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	4603      	mov	r3, r0
 8004188:	4642      	mov	r2, r8
 800418a:	189b      	adds	r3, r3, r2
 800418c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041b4:	4649      	mov	r1, r9
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041be:	4641      	mov	r1, r8
 80041c0:	008a      	lsls	r2, r1, #2
 80041c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041c6:	f7fc fc01 	bl	80009cc <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <UART_SetConfig+0x4e4>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	3332      	adds	r3, #50	; 0x32
 80041e2:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <UART_SetConfig+0x4e4>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ee:	441c      	add	r4, r3
 80041f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f4:	2200      	movs	r2, #0
 80041f6:	673b      	str	r3, [r7, #112]	; 0x70
 80041f8:	677a      	str	r2, [r7, #116]	; 0x74
 80041fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041fe:	4642      	mov	r2, r8
 8004200:	464b      	mov	r3, r9
 8004202:	1891      	adds	r1, r2, r2
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	415b      	adcs	r3, r3
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420e:	4641      	mov	r1, r8
 8004210:	1851      	adds	r1, r2, r1
 8004212:	6039      	str	r1, [r7, #0]
 8004214:	4649      	mov	r1, r9
 8004216:	414b      	adcs	r3, r1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004226:	4659      	mov	r1, fp
 8004228:	00cb      	lsls	r3, r1, #3
 800422a:	4651      	mov	r1, sl
 800422c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004230:	4651      	mov	r1, sl
 8004232:	00ca      	lsls	r2, r1, #3
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	4603      	mov	r3, r0
 800423a:	4642      	mov	r2, r8
 800423c:	189b      	adds	r3, r3, r2
 800423e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004240:	464b      	mov	r3, r9
 8004242:	460a      	mov	r2, r1
 8004244:	eb42 0303 	adc.w	r3, r2, r3
 8004248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	663b      	str	r3, [r7, #96]	; 0x60
 8004254:	667a      	str	r2, [r7, #100]	; 0x64
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004262:	4649      	mov	r1, r9
 8004264:	008b      	lsls	r3, r1, #2
 8004266:	4641      	mov	r1, r8
 8004268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426c:	4641      	mov	r1, r8
 800426e:	008a      	lsls	r2, r1, #2
 8004270:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004274:	f7fc fbaa 	bl	80009cc <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <UART_SetConfig+0x4e4>)
 800427e:	fba3 1302 	umull	r1, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2164      	movs	r1, #100	; 0x64
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <UART_SetConfig+0x4e4>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4422      	add	r2, r4
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	bf00      	nop
 80042a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b2:	bf00      	nop
 80042b4:	51eb851f 	.word	0x51eb851f

080042b8 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 80042c2:	2201      	movs	r2, #1
 80042c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042c8:	4816      	ldr	r0, [pc, #88]	; (8004324 <sendData+0x6c>)
 80042ca:	f7fd fdaf 	bl	8001e2c <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f829 	bl	800432c <crc16>
 80042da:	4603      	mov	r3, r0
 80042dc:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	89fa      	ldrh	r2, [r7, #14]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	b299      	uxth	r1, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	b2ca      	uxtb	r2, r1
 80042fa:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3302      	adds	r3, #2
 8004302:	b29a      	uxth	r2, r3
 8004304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4807      	ldr	r0, [pc, #28]	; (8004328 <sendData+0x70>)
 800430c:	f7fe ff77 	bl	80031fe <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004316:	4803      	ldr	r0, [pc, #12]	; (8004324 <sendData+0x6c>)
 8004318:	f7fd fd88 	bl	8001e2c <HAL_GPIO_WritePin>

}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40020000 	.word	0x40020000
 8004328:	200003e0 	.word	0x200003e0

0800432c <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8004338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800433c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 800433e:	2300      	movs	r3, #0
 8004340:	81bb      	strh	r3, [r7, #12]
 8004342:	e022      	b.n	800438a <crc16+0x5e>
        crc ^= data[i];
 8004344:	89bb      	ldrh	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b29a      	uxth	r2, r3
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	4053      	eors	r3, r2
 8004352:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004354:	2300      	movs	r3, #0
 8004356:	72fb      	strb	r3, [r7, #11]
 8004358:	e011      	b.n	800437e <crc16+0x52>
            if (crc & 0x0001) {
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d006      	beq.n	8004372 <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <crc16+0x74>)
 800436c:	4053      	eors	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]
 8004370:	e002      	b.n	8004378 <crc16+0x4c>
            } else {
                crc >>= 1;
 8004372:	89fb      	ldrh	r3, [r7, #14]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	3301      	adds	r3, #1
 800437c:	72fb      	strb	r3, [r7, #11]
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	2b07      	cmp	r3, #7
 8004382:	d9ea      	bls.n	800435a <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8004384:	89bb      	ldrh	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	81bb      	strh	r3, [r7, #12]
 800438a:	89ba      	ldrh	r2, [r7, #12]
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3d8      	bcc.n	8004344 <crc16+0x18>
            }
        }
    }
    return crc;
 8004392:	89fb      	ldrh	r3, [r7, #14]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	ffffa001 	.word	0xffffa001

080043a4 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <modbusException+0x38>)
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <modbusException+0x3c>)
 80043b4:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <modbusException+0x38>)
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <modbusException+0x3c>)
 80043c2:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <modbusException+0x3c>)
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 80043ca:	2103      	movs	r1, #3
 80043cc:	4804      	ldr	r0, [pc, #16]	; (80043e0 <modbusException+0x3c>)
 80043ce:	f7ff ff73 	bl	80042b8 <sendData>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000478 	.word	0x20000478
 80043e0:	20000578 	.word	0x20000578

080043e4 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	460a      	mov	r2, r1
 80043ee:	80fb      	strh	r3, [r7, #6]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 80043f4:	88bb      	ldrh	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <readHoldingRegs+0x1c>
 80043fa:	88bb      	ldrh	r3, [r7, #4]
 80043fc:	2b32      	cmp	r3, #50	; 0x32
 80043fe:	d904      	bls.n	800440a <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004400:	2003      	movs	r0, #3
 8004402:	f7ff ffcf 	bl	80043a4 <modbusException>
        return 0;
 8004406:	2300      	movs	r3, #0
 8004408:	e04a      	b.n	80044a0 <readHoldingRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	88bb      	ldrh	r3, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	2b32      	cmp	r3, #50	; 0x32
 800441a:	d904      	bls.n	8004426 <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800441c:	2002      	movs	r0, #2
 800441e:	f7ff ffc1 	bl	80043a4 <modbusException>
        return 0;
 8004422:	2300      	movs	r3, #0
 8004424:	e03c      	b.n	80044a0 <readHoldingRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8004426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442a:	2100      	movs	r1, #0
 800442c:	481e      	ldr	r0, [pc, #120]	; (80044a8 <readHoldingRegs+0xc4>)
 800442e:	f001 ff4d 	bl	80062cc <memset>
    TxData[0] = SLAVE_ID;
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <readHoldingRegs+0xc4>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <readHoldingRegs+0xc8>)
 800443a:	785a      	ldrb	r2, [r3, #1]
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <readHoldingRegs+0xc4>)
 800443e:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8004440:	88bb      	ldrh	r3, [r7, #4]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <readHoldingRegs+0xc4>)
 800444a:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 800444c:	2303      	movs	r3, #3
 800444e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e01b      	b.n	800448e <readHoldingRegs+0xaa>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <readHoldingRegs+0xcc>)
 800445a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b299      	uxth	r1, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	617a      	str	r2, [r7, #20]
 8004468:	b2c9      	uxtb	r1, r1
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <readHoldingRegs+0xc4>)
 800446c:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <readHoldingRegs+0xcc>)
 8004472:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	617a      	str	r2, [r7, #20]
 800447c:	b2c9      	uxtb	r1, r1
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <readHoldingRegs+0xc4>)
 8004480:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	3301      	adds	r3, #1
 8004486:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	dbdf      	blt.n	8004456 <readHoldingRegs+0x72>
    }

    sendData(TxData, indx);
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <readHoldingRegs+0xc4>)
 800449a:	f7ff ff0d 	bl	80042b8 <sendData>
    return 1;
 800449e:	2301      	movs	r3, #1
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000578 	.word	0x20000578
 80044ac:	20000478 	.word	0x20000478
 80044b0:	20000018 	.word	0x20000018

080044b4 <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	460a      	mov	r2, r1
 80044be:	80fb      	strh	r3, [r7, #6]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 80044c4:	88bb      	ldrh	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <readInputRegs+0x1c>
 80044ca:	88bb      	ldrh	r3, [r7, #4]
 80044cc:	2b32      	cmp	r3, #50	; 0x32
 80044ce:	d904      	bls.n	80044da <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 80044d0:	2003      	movs	r0, #3
 80044d2:	f7ff ff67 	bl	80043a4 <modbusException>
        return 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e04a      	b.n	8004570 <readInputRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	88bb      	ldrh	r3, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	2b32      	cmp	r3, #50	; 0x32
 80044ea:	d904      	bls.n	80044f6 <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80044ec:	2002      	movs	r0, #2
 80044ee:	f7ff ff59 	bl	80043a4 <modbusException>
        return 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e03c      	b.n	8004570 <readInputRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 80044f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044fa:	2100      	movs	r1, #0
 80044fc:	481e      	ldr	r0, [pc, #120]	; (8004578 <readInputRegs+0xc4>)
 80044fe:	f001 fee5 	bl	80062cc <memset>
    TxData[0] = SLAVE_ID;
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <readInputRegs+0xc4>)
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <readInputRegs+0xc8>)
 800450a:	785a      	ldrb	r2, [r3, #1]
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <readInputRegs+0xc4>)
 800450e:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <readInputRegs+0xc4>)
 800451a:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 800451c:	2303      	movs	r3, #3
 800451e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e01b      	b.n	800455e <readInputRegs+0xaa>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <readInputRegs+0xcc>)
 800452a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b299      	uxth	r1, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	617a      	str	r2, [r7, #20]
 8004538:	b2c9      	uxtb	r1, r1
 800453a:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <readInputRegs+0xc4>)
 800453c:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <readInputRegs+0xcc>)
 8004542:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	617a      	str	r2, [r7, #20]
 800454c:	b2c9      	uxtb	r1, r1
 800454e:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <readInputRegs+0xc4>)
 8004550:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	3301      	adds	r3, #1
 8004556:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3301      	adds	r3, #1
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	88bb      	ldrh	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	dbdf      	blt.n	8004526 <readInputRegs+0x72>
    }

    sendData(TxData, indx);
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	4803      	ldr	r0, [pc, #12]	; (8004578 <readInputRegs+0xc4>)
 800456a:	f7ff fea5 	bl	80042b8 <sendData>
    return 1;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000578 	.word	0x20000578
 800457c:	20000478 	.word	0x20000478
 8004580:	2000007c 	.word	0x2000007c

08004584 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	460a      	mov	r2, r1
 800458e:	80fb      	strh	r3, [r7, #6]
 8004590:	4613      	mov	r3, r2
 8004592:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 8004594:	88bb      	ldrh	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <readCoils+0x1e>
 800459a:	88bb      	ldrh	r3, [r7, #4]
 800459c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045a0:	d904      	bls.n	80045ac <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 80045a2:	2003      	movs	r0, #3
 80045a4:	f7ff fefe 	bl	80043a4 <modbusException>
        return 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e080      	b.n	80046ae <readCoils+0x12a>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	88bb      	ldrh	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 80045b8:	897b      	ldrh	r3, [r7, #10]
 80045ba:	2bc7      	cmp	r3, #199	; 0xc7
 80045bc:	d904      	bls.n	80045c8 <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80045be:	2002      	movs	r0, #2
 80045c0:	f7ff fef0 	bl	80043a4 <modbusException>
        return 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e072      	b.n	80046ae <readCoils+0x12a>
    }

    memset(TxData, '\0', 256);
 80045c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045cc:	2100      	movs	r1, #0
 80045ce:	483a      	ldr	r0, [pc, #232]	; (80046b8 <readCoils+0x134>)
 80045d0:	f001 fe7c 	bl	80062cc <memset>
    TxData[0] = SLAVE_ID;
 80045d4:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <readCoils+0x134>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80045da:	4b38      	ldr	r3, [pc, #224]	; (80046bc <readCoils+0x138>)
 80045dc:	785a      	ldrb	r2, [r3, #1]
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <readCoils+0x134>)
 80045e0:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 80045e2:	88bb      	ldrh	r3, [r7, #4]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	88ba      	ldrh	r2, [r7, #4]
 80045ec:	f002 0207 	and.w	r2, r2, #7
 80045f0:	b292      	uxth	r2, r2
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2201      	movne	r2, #1
 80045f8:	2200      	moveq	r2, #0
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	4413      	add	r3, r2
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <readCoils+0x134>)
 8004602:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004604:	2303      	movs	r3, #3
 8004606:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	08db      	lsrs	r3, r3, #3
 800460c:	b29b      	uxth	r3, r3
 800460e:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e033      	b.n	800468a <readCoils+0x106>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8004622:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <readCoils+0x134>)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b25a      	sxtb	r2, r3
 800462c:	4924      	ldr	r1, [pc, #144]	; (80046c0 <readCoils+0x13c>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	440b      	add	r3, r1
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	8afb      	ldrh	r3, [r7, #22]
 8004638:	fa41 f303 	asr.w	r3, r1, r3
 800463c:	f003 0101 	and.w	r1, r3, #1
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	b25b      	sxtb	r3, r3
 8004648:	4313      	orrs	r3, r2
 800464a:	b25b      	sxtb	r3, r3
 800464c:	b2d9      	uxtb	r1, r3
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <readCoils+0x134>)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	460a      	mov	r2, r1
 8004656:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3301      	adds	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
        bitPosition++;
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	3301      	adds	r3, #1
 8004662:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b07      	cmp	r3, #7
 8004668:	dd04      	ble.n	8004674 <readCoils+0xf0>
            indxPosition = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
            indx++;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3301      	adds	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8004674:	8afb      	ldrh	r3, [r7, #22]
 8004676:	2b07      	cmp	r3, #7
 8004678:	d904      	bls.n	8004684 <readCoils+0x100>
            bitPosition = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	82fb      	strh	r3, [r7, #22]
            startByte++;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3301      	adds	r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	88bb      	ldrh	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	429a      	cmp	r2, r3
 8004690:	dbc7      	blt.n	8004622 <readCoils+0x9e>
        }
    }

    if (numCoils % 8 != 0) indx++;
 8004692:	88bb      	ldrh	r3, [r7, #4]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <readCoils+0x120>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 80046a4:	69f9      	ldr	r1, [r7, #28]
 80046a6:	4804      	ldr	r0, [pc, #16]	; (80046b8 <readCoils+0x134>)
 80046a8:	f7ff fe06 	bl	80042b8 <sendData>
    return 1;
 80046ac:	2301      	movs	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000578 	.word	0x20000578
 80046bc:	20000478 	.word	0x20000478
 80046c0:	200000e0 	.word	0x200000e0

080046c4 <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	460a      	mov	r2, r1
 80046ce:	80fb      	strh	r3, [r7, #6]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	2b31      	cmp	r3, #49	; 0x31
 80046d8:	d904      	bls.n	80046e4 <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80046da:	2002      	movs	r0, #2
 80046dc:	f7ff fe62 	bl	80043a4 <modbusException>
        return 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e020      	b.n	8004726 <writeSingleHoldingReg+0x62>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	4912      	ldr	r1, [pc, #72]	; (8004730 <writeSingleHoldingReg+0x6c>)
 80046e8:	88ba      	ldrh	r2, [r7, #4]
 80046ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = SLAVE_ID;
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <writeSingleHoldingReg+0x70>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <writeSingleHoldingReg+0x74>)
 80046f6:	785a      	ldrb	r2, [r3, #1]
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <writeSingleHoldingReg+0x70>)
 80046fa:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <writeSingleHoldingReg+0x74>)
 80046fe:	789a      	ldrb	r2, [r3, #2]
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <writeSingleHoldingReg+0x70>)
 8004702:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <writeSingleHoldingReg+0x74>)
 8004706:	78da      	ldrb	r2, [r3, #3]
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <writeSingleHoldingReg+0x70>)
 800470a:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <writeSingleHoldingReg+0x74>)
 800470e:	791a      	ldrb	r2, [r3, #4]
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <writeSingleHoldingReg+0x70>)
 8004712:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <writeSingleHoldingReg+0x74>)
 8004716:	795a      	ldrb	r2, [r3, #5]
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <writeSingleHoldingReg+0x70>)
 800471a:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 800471c:	2106      	movs	r1, #6
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <writeSingleHoldingReg+0x70>)
 8004720:	f7ff fdca 	bl	80042b8 <sendData>
    return 1;
 8004724:	2301      	movs	r3, #1
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000018 	.word	0x20000018
 8004734:	20000578 	.word	0x20000578
 8004738:	20000478 	.word	0x20000478

0800473c <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	603a      	str	r2, [r7, #0]
 8004746:	80fb      	strh	r3, [r7, #6]
 8004748:	460b      	mov	r3, r1
 800474a:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 800474c:	88bb      	ldrh	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <writeHoldingRegs+0x1c>
 8004752:	88bb      	ldrh	r3, [r7, #4]
 8004754:	2b7b      	cmp	r3, #123	; 0x7b
 8004756:	d904      	bls.n	8004762 <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004758:	2003      	movs	r0, #3
 800475a:	f7ff fe23 	bl	80043a4 <modbusException>
        return 0;
 800475e:	2300      	movs	r3, #0
 8004760:	e03f      	b.n	80047e2 <writeHoldingRegs+0xa6>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	88bb      	ldrh	r3, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	2b31      	cmp	r3, #49	; 0x31
 8004772:	d904      	bls.n	800477e <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004774:	2002      	movs	r0, #2
 8004776:	f7ff fe15 	bl	80043a4 <modbusException>
        return 0;
 800477a:	2300      	movs	r3, #0
 800477c:	e031      	b.n	80047e2 <writeHoldingRegs+0xa6>
    }

    for (int i = 0; i < numRegs; i++) {
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e00e      	b.n	80047a2 <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	441a      	add	r2, r3
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	1c59      	adds	r1, r3, #1
 8004790:	80f9      	strh	r1, [r7, #6]
 8004792:	4619      	mov	r1, r3
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <writeHoldingRegs+0xb0>)
 8004798:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	88bb      	ldrh	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	dbec      	blt.n	8004784 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <writeHoldingRegs+0xb8>)
 80047b2:	785a      	ldrb	r2, [r3, #1]
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047b6:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <writeHoldingRegs+0xb8>)
 80047ba:	789a      	ldrb	r2, [r3, #2]
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047be:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <writeHoldingRegs+0xb8>)
 80047c2:	78da      	ldrb	r2, [r3, #3]
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047c6:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <writeHoldingRegs+0xb8>)
 80047ca:	791a      	ldrb	r2, [r3, #4]
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047ce:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <writeHoldingRegs+0xb8>)
 80047d2:	795a      	ldrb	r2, [r3, #5]
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047d6:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 80047d8:	2106      	movs	r1, #6
 80047da:	4805      	ldr	r0, [pc, #20]	; (80047f0 <writeHoldingRegs+0xb4>)
 80047dc:	f7ff fd6c 	bl	80042b8 <sendData>
    return 1;
 80047e0:	2301      	movs	r3, #1
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000018 	.word	0x20000018
 80047f0:	20000578 	.word	0x20000578
 80047f4:	20000478 	.word	0x20000478

080047f8 <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	460a      	mov	r2, r1
 8004802:	80fb      	strh	r3, [r7, #6]
 8004804:	4613      	mov	r3, r2
 8004806:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	2bc7      	cmp	r3, #199	; 0xc7
 800480c:	d904      	bls.n	8004818 <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800480e:	2002      	movs	r0, #2
 8004810:	f7ff fdc8 	bl	80043a4 <modbusException>
        return 0;
 8004814:	2300      	movs	r3, #0
 8004816:	e05c      	b.n	80048d2 <writeSingleCoil+0xda>
    }

    int bytePos = writeAddr / 8;
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	b29b      	uxth	r3, r3
 800481e:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8004828:	797b      	ldrb	r3, [r7, #5]
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d116      	bne.n	800485c <writeSingleCoil+0x64>
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <writeSingleCoil+0xe4>)
 8004830:	795b      	ldrb	r3, [r3, #5]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d112      	bne.n	800485c <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <writeSingleCoil+0xe8>)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b25a      	sxtb	r2, r3
 8004840:	2101      	movs	r1, #1
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	b25b      	sxtb	r3, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	b25b      	sxtb	r3, r3
 800484e:	b2d9      	uxtb	r1, r3
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <writeSingleCoil+0xe8>)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	460a      	mov	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e020      	b.n	800489e <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 800485c:	797b      	ldrb	r3, [r7, #5]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <writeSingleCoil+0x9c>
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <writeSingleCoil+0xe4>)
 8004864:	795b      	ldrb	r3, [r3, #5]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d114      	bne.n	8004894 <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <writeSingleCoil+0xe8>)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b25a      	sxtb	r2, r3
 8004874:	2101      	movs	r1, #1
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	b25b      	sxtb	r3, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	b25b      	sxtb	r3, r3
 8004882:	4013      	ands	r3, r2
 8004884:	b25b      	sxtb	r3, r3
 8004886:	b2d9      	uxtb	r1, r3
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <writeSingleCoil+0xe8>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	460a      	mov	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e004      	b.n	800489e <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8004894:	2003      	movs	r0, #3
 8004896:	f7ff fd85 	bl	80043a4 <modbusException>
        return 0;
 800489a:	2300      	movs	r3, #0
 800489c:	e019      	b.n	80048d2 <writeSingleCoil+0xda>
    }

    TxData[0] = SLAVE_ID;
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <writeSingleCoil+0xec>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <writeSingleCoil+0xe4>)
 80048a6:	785a      	ldrb	r2, [r3, #1]
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <writeSingleCoil+0xec>)
 80048aa:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <writeSingleCoil+0xe4>)
 80048ae:	789a      	ldrb	r2, [r3, #2]
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <writeSingleCoil+0xec>)
 80048b2:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <writeSingleCoil+0xe4>)
 80048b6:	78da      	ldrb	r2, [r3, #3]
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <writeSingleCoil+0xec>)
 80048ba:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 80048bc:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <writeSingleCoil+0xec>)
 80048be:	797b      	ldrb	r3, [r7, #5]
 80048c0:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <writeSingleCoil+0xec>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 80048c8:	2106      	movs	r1, #6
 80048ca:	4806      	ldr	r0, [pc, #24]	; (80048e4 <writeSingleCoil+0xec>)
 80048cc:	f7ff fcf4 	bl	80042b8 <sendData>
    return 1;
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000478 	.word	0x20000478
 80048e0:	200000e0 	.word	0x200000e0
 80048e4:	20000578 	.word	0x20000578

080048e8 <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	603a      	str	r2, [r7, #0]
 80048f2:	80fb      	strh	r3, [r7, #6]
 80048f4:	460b      	mov	r3, r1
 80048f6:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <writeMultiCoils+0x1e>
 80048fe:	88bb      	ldrh	r3, [r7, #4]
 8004900:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004904:	d904      	bls.n	8004910 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8004906:	2003      	movs	r0, #3
 8004908:	f7ff fd4c 	bl	80043a4 <modbusException>
        return 0;
 800490c:	2300      	movs	r3, #0
 800490e:	e09c      	b.n	8004a4a <writeMultiCoils+0x162>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	88bb      	ldrh	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 800491c:	8a7b      	ldrh	r3, [r7, #18]
 800491e:	2bc7      	cmp	r3, #199	; 0xc7
 8004920:	d904      	bls.n	800492c <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004922:	2002      	movs	r0, #2
 8004924:	f7ff fd3e 	bl	80043a4 <modbusException>
        return 0;
 8004928:	2300      	movs	r3, #0
 800492a:	e08e      	b.n	8004a4a <writeMultiCoils+0x162>
    }

    int startByte = startAddr / 8;
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	b29b      	uxth	r3, r3
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t bitPosition = startAddr % 8;
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	847b      	strh	r3, [r7, #34]	; 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 800493c:	88bb      	ldrh	r3, [r7, #4]
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	88bb      	ldrh	r3, [r7, #4]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4413      	add	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e052      	b.n	8004a0a <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e047      	b.n	80049fa <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 800496a:	88bb      	ldrh	r3, [r7, #4]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	da47      	bge.n	8004a02 <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa42 f303 	asr.w	r3, r2, r3
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d012      	beq.n	80049b0 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 800498a:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <writeMultiCoils+0x16c>)
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b25a      	sxtb	r2, r3
 8004994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	b25b      	sxtb	r3, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	b2d9      	uxtb	r1, r3
 80049a4:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <writeMultiCoils+0x16c>)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	4413      	add	r3, r2
 80049aa:	460a      	mov	r2, r1
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e013      	b.n	80049d8 <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <writeMultiCoils+0x16c>)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	4413      	add	r3, r2
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b25a      	sxtb	r2, r3
 80049ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	4013      	ands	r3, r2
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	b2d9      	uxtb	r1, r3
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <writeMultiCoils+0x16c>)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	4413      	add	r3, r2
 80049d4:	460a      	mov	r2, r1
 80049d6:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 80049d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049da:	3301      	adds	r3, #1
 80049dc:	847b      	strh	r3, [r7, #34]	; 0x22
            if (bitPosition > 7) {
 80049de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049e0:	2b07      	cmp	r3, #7
 80049e2:	d904      	bls.n	80049ee <writeMultiCoils+0x106>
                bitPosition = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	847b      	strh	r3, [r7, #34]	; 0x22
                startByte++;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	3301      	adds	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
            }
            indx++;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3301      	adds	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b07      	cmp	r3, #7
 80049fe:	ddb4      	ble.n	800496a <writeMultiCoils+0x82>
 8004a00:	e000      	b.n	8004a04 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 8004a02:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	dba8      	blt.n	8004964 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <writeMultiCoils+0x170>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <writeMultiCoils+0x174>)
 8004a1a:	785a      	ldrb	r2, [r3, #1]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <writeMultiCoils+0x170>)
 8004a1e:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004a20:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <writeMultiCoils+0x174>)
 8004a22:	789a      	ldrb	r2, [r3, #2]
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <writeMultiCoils+0x170>)
 8004a26:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <writeMultiCoils+0x174>)
 8004a2a:	78da      	ldrb	r2, [r3, #3]
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <writeMultiCoils+0x170>)
 8004a2e:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <writeMultiCoils+0x174>)
 8004a32:	791a      	ldrb	r2, [r3, #4]
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <writeMultiCoils+0x170>)
 8004a36:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <writeMultiCoils+0x174>)
 8004a3a:	795a      	ldrb	r2, [r3, #5]
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <writeMultiCoils+0x170>)
 8004a3e:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004a40:	2106      	movs	r1, #6
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <writeMultiCoils+0x170>)
 8004a44:	f7ff fc38 	bl	80042b8 <sendData>
    return 1;
 8004a48:	2301      	movs	r3, #1
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3728      	adds	r7, #40	; 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200000e0 	.word	0x200000e0
 8004a58:	20000578 	.word	0x20000578
 8004a5c:	20000478 	.word	0x20000478

08004a60 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a66      	ldr	r2, [pc, #408]	; (8004c0c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	f040 80c7 	bne.w	8004c06 <HAL_UARTEx_RxEventCallback+0x1a6>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UARTEx_RxEventCallback+0x26>
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a84:	d906      	bls.n	8004a94 <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8004a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8a:	4961      	ldr	r1, [pc, #388]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fe fc48 	bl	8003322 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8004a92:	e0b8      	b.n	8004c06 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a9a:	485e      	ldr	r0, [pc, #376]	; (8004c14 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8004a9c:	f7fd f9c6 	bl	8001e2c <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != SLAVE_ID) {
 8004aa0:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d006      	beq.n	8004ab6 <HAL_UARTEx_RxEventCallback+0x56>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8004aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aac:	4958      	ldr	r1, [pc, #352]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fe fc37 	bl	8003322 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8004ab4:	e0a7      	b.n	8004c06 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	4a55      	ldr	r2, [pc, #340]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	b21a      	sxth	r2, r3
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	3b02      	subs	r3, #2
 8004ac6:	4952      	ldr	r1, [pc, #328]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	4313      	orrs	r3, r2
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	3b02      	subs	r3, #2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4619      	mov	r1, r3
 8004ada:	484d      	ldr	r0, [pc, #308]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004adc:	f7ff fc26 	bl	800432c <crc16>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d006      	beq.n	8004af8 <HAL_UARTEx_RxEventCallback+0x98>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8004aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aee:	4948      	ldr	r1, [pc, #288]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fe fc16 	bl	8003322 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8004af6:	e086      	b.n	8004c06 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004afa:	789b      	ldrb	r3, [r3, #2]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	b21a      	sxth	r2, r3
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	4313      	orrs	r3, r2
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004b0e:	791b      	ldrb	r3, [r3, #4]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004b16:	795b      	ldrb	r3, [r3, #5]
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 8004b20:	2201      	movs	r2, #1
 8004b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b26:	483b      	ldr	r0, [pc, #236]	; (8004c14 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8004b28:	f7fd f980 	bl	8001e2c <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 8004b2c:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	d85d      	bhi.n	8004bf2 <HAL_UARTEx_RxEventCallback+0x192>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004bf3 	.word	0x08004bf3
 8004b44:	08004b8b 	.word	0x08004b8b
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004ba7 	.word	0x08004ba7
 8004b50:	08004bb7 	.word	0x08004bb7
 8004b54:	08004bf3 	.word	0x08004bf3
 8004b58:	08004bf3 	.word	0x08004bf3
 8004b5c:	08004bf3 	.word	0x08004bf3
 8004b60:	08004bf3 	.word	0x08004bf3
 8004b64:	08004bf3 	.word	0x08004bf3
 8004b68:	08004bf3 	.word	0x08004bf3
 8004b6c:	08004bf3 	.word	0x08004bf3
 8004b70:	08004bf3 	.word	0x08004bf3
 8004b74:	08004bd7 	.word	0x08004bd7
 8004b78:	08004be5 	.word	0x08004be5
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8004b7c:	897a      	ldrh	r2, [r7, #10]
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fcfe 	bl	8004584 <readCoils>
                break;
 8004b88:	e037      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 8004b8a:	897a      	ldrh	r2, [r7, #10]
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fc27 	bl	80043e4 <readHoldingRegs>
                break;
 8004b96:	e030      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 8004b98:	897a      	ldrh	r2, [r7, #10]
 8004b9a:	89bb      	ldrh	r3, [r7, #12]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fc88 	bl	80044b4 <readInputRegs>
                break;
 8004ba4:	e029      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004ba8:	791a      	ldrb	r2, [r3, #4]
 8004baa:	89bb      	ldrh	r3, [r7, #12]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fe22 	bl	80047f8 <writeSingleCoil>
                break;
 8004bb4:	e021      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004bb8:	791b      	ldrb	r3, [r3, #4]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	b21a      	sxth	r2, r3
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004bc0:	795b      	ldrb	r3, [r3, #5]
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	89bb      	ldrh	r3, [r7, #12]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fd78 	bl	80046c4 <writeSingleHoldingReg>
                break;
 8004bd4:	e011      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff fe83 	bl	80048e8 <writeMultiCoils>
                break;
 8004be2:	e00a      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	89bb      	ldrh	r3, [r7, #12]
 8004be8:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <HAL_UARTEx_RxEventCallback+0x1bc>)
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fda6 	bl	800473c <writeHoldingRegs>
                break;
 8004bf0:	e003      	b.n	8004bfa <HAL_UARTEx_RxEventCallback+0x19a>
            default:
                modbusException(ILLEGAL_FUNCTION);
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f7ff fbd6 	bl	80043a4 <modbusException>
                break;
 8004bf8:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8004bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bfe:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fe fb8e 	bl	8003322 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	20000478 	.word	0x20000478
 8004c14:	40020000 	.word	0x40020000
 8004c18:	2000047f 	.word	0x2000047f
 8004c1c:	2000047e 	.word	0x2000047e

08004c20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c32:	2b84      	cmp	r3, #132	; 0x84
 8004c34:	d005      	beq.n	8004c42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3303      	adds	r3, #3
 8004c40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c54:	f000 fade 	bl	8005214 <vTaskStartScheduler>
  
  return osOK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c60:	b089      	sub	sp, #36	; 0x24
 8004c62:	af04      	add	r7, sp, #16
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <osThreadCreate+0x54>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01c      	beq.n	8004cb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685c      	ldr	r4, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681d      	ldr	r5, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691e      	ldr	r6, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ffc8 	bl	8004c20 <makeFreeRtosPriority>
 8004c90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c9a:	9202      	str	r2, [sp, #8]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	9100      	str	r1, [sp, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4632      	mov	r2, r6
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 f8ed 	bl	8004e86 <xTaskCreateStatic>
 8004cac:	4603      	mov	r3, r0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e01c      	b.n	8004cec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685c      	ldr	r4, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cbe:	b29e      	uxth	r6, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ffaa 	bl	8004c20 <makeFreeRtosPriority>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	9200      	str	r2, [sp, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 f92f 	bl	8004f40 <xTaskCreate>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <osDelay+0x16>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	e000      	b.n	8004d0e <osDelay+0x18>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa4c 	bl	80051ac <vTaskDelay>
  
  return osOK;
 8004d14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f103 0208 	add.w	r2, r3, #8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f103 0208 	add.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f103 0208 	add.w	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d103      	bne.n	8004de0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e00c      	b.n	8004dfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3308      	adds	r3, #8
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e002      	b.n	8004dee <vListInsert+0x2e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d2f6      	bcs.n	8004de8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	601a      	str	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6852      	ldr	r2, [r2, #4]
 8004e52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d103      	bne.n	8004e66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b08e      	sub	sp, #56	; 0x38
 8004e8a:	af04      	add	r7, sp, #16
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xTaskCreateStatic+0x46>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	61fb      	str	r3, [r7, #28]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ecc:	2354      	movs	r3, #84	; 0x54
 8004ece:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b54      	cmp	r3, #84	; 0x54
 8004ed4:	d00a      	beq.n	8004eec <xTaskCreateStatic+0x66>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	61bb      	str	r3, [r7, #24]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01e      	beq.n	8004f32 <xTaskCreateStatic+0xac>
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01b      	beq.n	8004f32 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f850 	bl	8004fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f2c:	f000 f8d4 	bl	80050d8 <prvAddNewTaskToReadyList>
 8004f30:	e001      	b.n	8004f36 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f36:	697b      	ldr	r3, [r7, #20]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af04      	add	r7, sp, #16
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fec7 	bl	8005ce8 <pvPortMalloc>
 8004f5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00e      	beq.n	8004f80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f62:	2054      	movs	r0, #84	; 0x54
 8004f64:	f000 fec0 	bl	8005ce8 <pvPortMalloc>
 8004f68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
 8004f76:	e005      	b.n	8004f84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f78:	6978      	ldr	r0, [r7, #20]
 8004f7a:	f000 ff81 	bl	8005e80 <vPortFree>
 8004f7e:	e001      	b.n	8004f84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d017      	beq.n	8004fba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	2300      	movs	r3, #0
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f80e 	bl	8004fca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fae:	69f8      	ldr	r0, [r7, #28]
 8004fb0:	f000 f892 	bl	80050d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e002      	b.n	8004fc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
	}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b088      	sub	sp, #32
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	617b      	str	r3, [r7, #20]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01f      	beq.n	8005058 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e012      	b.n	8005044 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	7819      	ldrb	r1, [r3, #0]
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	3334      	adds	r3, #52	; 0x34
 800502e:	460a      	mov	r2, r1
 8005030:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d9e9      	bls.n	800501e <prvInitialiseNewTask+0x54>
 800504a:	e000      	b.n	800504e <prvInitialiseNewTask+0x84>
			{
				break;
 800504c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005056:	e003      	b.n	8005060 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	2b06      	cmp	r3, #6
 8005064:	d901      	bls.n	800506a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005066:	2306      	movs	r3, #6
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fe6c 	bl	8004d5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	3318      	adds	r3, #24
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fe67 	bl	8004d5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	f1c3 0207 	rsb	r2, r3, #7
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f000 fc05 	bl	80058c8 <pxPortInitialiseStack>
 80050be:	4602      	mov	r2, r0
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d0:	bf00      	nop
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050e0:	f000 fd20 	bl	8005b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ee:	4b29      	ldr	r3, [pc, #164]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050f6:	4a27      	ldr	r2, [pc, #156]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <prvAddNewTaskToReadyList+0xb8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d110      	bne.n	8005126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005104:	f000 fabc 	bl	8005680 <prvInitialiseTaskLists>
 8005108:	e00d      	b.n	8005126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <prvAddNewTaskToReadyList+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d802      	bhi.n	8005126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <prvAddNewTaskToReadyList+0xc4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <prvAddNewTaskToReadyList+0xc4>)
 800512e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <prvAddNewTaskToReadyList+0xc8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4313      	orrs	r3, r2
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <prvAddNewTaskToReadyList+0xc8>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <prvAddNewTaskToReadyList+0xcc>)
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7ff fe0d 	bl	8004d78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800515e:	f000 fd11 	bl	8005b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <prvAddNewTaskToReadyList+0xc0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvAddNewTaskToReadyList+0xbc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d207      	bcs.n	8005188 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <prvAddNewTaskToReadyList+0xd0>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000778 	.word	0x20000778
 8005194:	20000678 	.word	0x20000678
 8005198:	20000784 	.word	0x20000784
 800519c:	20000794 	.word	0x20000794
 80051a0:	20000780 	.word	0x20000780
 80051a4:	2000067c 	.word	0x2000067c
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d017      	beq.n	80051ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <vTaskDelay+0x60>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <vTaskDelay+0x30>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051dc:	f000 f87a 	bl	80052d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051e0:	2100      	movs	r1, #0
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fb0a 	bl	80057fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051e8:	f000 f882 	bl	80052f0 <xTaskResumeAll>
 80051ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <vTaskDelay+0x64>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200007a0 	.word	0x200007a0
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005222:	463a      	mov	r2, r7
 8005224:	1d39      	adds	r1, r7, #4
 8005226:	f107 0308 	add.w	r3, r7, #8
 800522a:	4618      	mov	r0, r3
 800522c:	f7fb fd50 	bl	8000cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	9202      	str	r2, [sp, #8]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	460a      	mov	r2, r1
 8005242:	491e      	ldr	r1, [pc, #120]	; (80052bc <vTaskStartScheduler+0xa8>)
 8005244:	481e      	ldr	r0, [pc, #120]	; (80052c0 <vTaskStartScheduler+0xac>)
 8005246:	f7ff fe1e 	bl	8004e86 <xTaskCreateStatic>
 800524a:	4603      	mov	r3, r0
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <vTaskStartScheduler+0xb0>)
 800524e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005250:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <vTaskStartScheduler+0xb0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e001      	b.n	8005262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d116      	bne.n	8005296 <vTaskStartScheduler+0x82>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	613b      	str	r3, [r7, #16]
}
 800527a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <vTaskStartScheduler+0xb4>)
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <vTaskStartScheduler+0xb8>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <vTaskStartScheduler+0xbc>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005290:	f000 fba6 	bl	80059e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005294:	e00e      	b.n	80052b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d10a      	bne.n	80052b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vTaskStartScheduler+0x9e>
}
 80052b4:	bf00      	nop
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	08006354 	.word	0x08006354
 80052c0:	08005651 	.word	0x08005651
 80052c4:	2000079c 	.word	0x2000079c
 80052c8:	20000798 	.word	0x20000798
 80052cc:	20000784 	.word	0x20000784
 80052d0:	2000077c 	.word	0x2000077c

080052d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <vTaskSuspendAll+0x18>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a03      	ldr	r2, [pc, #12]	; (80052ec <vTaskSuspendAll+0x18>)
 80052e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	200007a0 	.word	0x200007a0

080052f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <xTaskResumeAll+0x114>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <xTaskResumeAll+0x2c>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	603b      	str	r3, [r7, #0]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800531c:	f000 fc02 	bl	8005b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005320:	4b38      	ldr	r3, [pc, #224]	; (8005404 <xTaskResumeAll+0x114>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	4a37      	ldr	r2, [pc, #220]	; (8005404 <xTaskResumeAll+0x114>)
 8005328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532a:	4b36      	ldr	r3, [pc, #216]	; (8005404 <xTaskResumeAll+0x114>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d161      	bne.n	80053f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005332:	4b35      	ldr	r3, [pc, #212]	; (8005408 <xTaskResumeAll+0x118>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d05d      	beq.n	80053f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800533a:	e02e      	b.n	800539a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533c:	4b33      	ldr	r3, [pc, #204]	; (800540c <xTaskResumeAll+0x11c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3318      	adds	r3, #24
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fd72 	bl	8004e32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd6d 	bl	8004e32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <xTaskResumeAll+0x120>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4313      	orrs	r3, r2
 8005366:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <xTaskResumeAll+0x120>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a27      	ldr	r2, [pc, #156]	; (8005414 <xTaskResumeAll+0x124>)
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7ff fcf9 	bl	8004d78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <xTaskResumeAll+0x128>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <xTaskResumeAll+0x12c>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <xTaskResumeAll+0x11c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cc      	bne.n	800533c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a8:	f000 fa08 	bl	80057bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <xTaskResumeAll+0x130>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b8:	f000 f836 	bl	8005428 <xTaskIncrementTick>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80053c2:	4b16      	ldr	r3, [pc, #88]	; (800541c <xTaskResumeAll+0x12c>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f1      	bne.n	80053b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <xTaskResumeAll+0x130>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <xTaskResumeAll+0x12c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <xTaskResumeAll+0x134>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f6:	f000 fbc5 	bl	8005b84 <vPortExitCritical>

	return xAlreadyYielded;
 80053fa:	68bb      	ldr	r3, [r7, #8]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200007a0 	.word	0x200007a0
 8005408:	20000778 	.word	0x20000778
 800540c:	20000738 	.word	0x20000738
 8005410:	20000780 	.word	0x20000780
 8005414:	2000067c 	.word	0x2000067c
 8005418:	20000678 	.word	0x20000678
 800541c:	2000078c 	.word	0x2000078c
 8005420:	20000788 	.word	0x20000788
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005432:	4b4e      	ldr	r3, [pc, #312]	; (800556c <xTaskIncrementTick+0x144>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 808e 	bne.w	8005558 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800543c:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <xTaskIncrementTick+0x148>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <xTaskIncrementTick+0x148>)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d120      	bne.n	8005492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005450:	4b48      	ldr	r3, [pc, #288]	; (8005574 <xTaskIncrementTick+0x14c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <xTaskIncrementTick+0x48>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	603b      	str	r3, [r7, #0]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xTaskIncrementTick+0x46>
 8005470:	4b40      	ldr	r3, [pc, #256]	; (8005574 <xTaskIncrementTick+0x14c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	4b40      	ldr	r3, [pc, #256]	; (8005578 <xTaskIncrementTick+0x150>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3e      	ldr	r2, [pc, #248]	; (8005574 <xTaskIncrementTick+0x14c>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <xTaskIncrementTick+0x150>)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b3d      	ldr	r3, [pc, #244]	; (800557c <xTaskIncrementTick+0x154>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	4a3c      	ldr	r2, [pc, #240]	; (800557c <xTaskIncrementTick+0x154>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	f000 f995 	bl	80057bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005492:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <xTaskIncrementTick+0x158>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d348      	bcc.n	800552e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <xTaskIncrementTick+0x14c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a6:	4b36      	ldr	r3, [pc, #216]	; (8005580 <xTaskIncrementTick+0x158>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	601a      	str	r2, [r3, #0]
					break;
 80054ae:	e03e      	b.n	800552e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b0:	4b30      	ldr	r3, [pc, #192]	; (8005574 <xTaskIncrementTick+0x14c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d203      	bcs.n	80054d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <xTaskIncrementTick+0x158>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ce:	e02e      	b.n	800552e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fcac 	bl	8004e32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3318      	adds	r3, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fca3 	bl	8004e32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	2201      	movs	r2, #1
 80054f2:	409a      	lsls	r2, r3
 80054f4:	4b23      	ldr	r3, [pc, #140]	; (8005584 <xTaskIncrementTick+0x15c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	4a22      	ldr	r2, [pc, #136]	; (8005584 <xTaskIncrementTick+0x15c>)
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <xTaskIncrementTick+0x160>)
 800550c:	441a      	add	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7ff fc2f 	bl	8004d78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <xTaskIncrementTick+0x164>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d3b9      	bcc.n	800549c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552c:	e7b6      	b.n	800549c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <xTaskIncrementTick+0x164>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	4914      	ldr	r1, [pc, #80]	; (8005588 <xTaskIncrementTick+0x160>)
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d901      	bls.n	800554a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <xTaskIncrementTick+0x168>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e004      	b.n	8005562 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <xTaskIncrementTick+0x16c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <xTaskIncrementTick+0x16c>)
 8005560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200007a0 	.word	0x200007a0
 8005570:	2000077c 	.word	0x2000077c
 8005574:	20000730 	.word	0x20000730
 8005578:	20000734 	.word	0x20000734
 800557c:	20000790 	.word	0x20000790
 8005580:	20000798 	.word	0x20000798
 8005584:	20000780 	.word	0x20000780
 8005588:	2000067c 	.word	0x2000067c
 800558c:	20000678 	.word	0x20000678
 8005590:	2000078c 	.word	0x2000078c
 8005594:	20000788 	.word	0x20000788

08005598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <vTaskSwitchContext+0xa4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <vTaskSwitchContext+0xa8>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ac:	e03f      	b.n	800562e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <vTaskSwitchContext+0xa8>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b4:	4b23      	ldr	r3, [pc, #140]	; (8005644 <vTaskSwitchContext+0xac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	fab3 f383 	clz	r3, r3
 80055c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	f1c3 031f 	rsb	r3, r3, #31
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	491f      	ldr	r1, [pc, #124]	; (8005648 <vTaskSwitchContext+0xb0>)
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vTaskSwitchContext+0x5a>
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a12      	ldr	r2, [pc, #72]	; (8005648 <vTaskSwitchContext+0xb0>)
 8005600:	4413      	add	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3308      	adds	r3, #8
 8005616:	429a      	cmp	r2, r3
 8005618:	d104      	bne.n	8005624 <vTaskSwitchContext+0x8c>
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <vTaskSwitchContext+0xb4>)
 800562c:	6013      	str	r3, [r2, #0]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200007a0 	.word	0x200007a0
 8005640:	2000078c 	.word	0x2000078c
 8005644:	20000780 	.word	0x20000780
 8005648:	2000067c 	.word	0x2000067c
 800564c:	20000678 	.word	0x20000678

08005650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005658:	f000 f852 	bl	8005700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <prvIdleTask+0x28>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d9f9      	bls.n	8005658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <prvIdleTask+0x2c>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005674:	e7f0      	b.n	8005658 <prvIdleTask+0x8>
 8005676:	bf00      	nop
 8005678:	2000067c 	.word	0x2000067c
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005686:	2300      	movs	r3, #0
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	e00c      	b.n	80056a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <prvInitialiseTaskLists+0x60>)
 8005698:	4413      	add	r3, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fb3f 	bl	8004d1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3301      	adds	r3, #1
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d9ef      	bls.n	800568c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056ac:	480d      	ldr	r0, [pc, #52]	; (80056e4 <prvInitialiseTaskLists+0x64>)
 80056ae:	f7ff fb36 	bl	8004d1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056b2:	480d      	ldr	r0, [pc, #52]	; (80056e8 <prvInitialiseTaskLists+0x68>)
 80056b4:	f7ff fb33 	bl	8004d1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056b8:	480c      	ldr	r0, [pc, #48]	; (80056ec <prvInitialiseTaskLists+0x6c>)
 80056ba:	f7ff fb30 	bl	8004d1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056be:	480c      	ldr	r0, [pc, #48]	; (80056f0 <prvInitialiseTaskLists+0x70>)
 80056c0:	f7ff fb2d 	bl	8004d1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056c4:	480b      	ldr	r0, [pc, #44]	; (80056f4 <prvInitialiseTaskLists+0x74>)
 80056c6:	f7ff fb2a 	bl	8004d1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056ca:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <prvInitialiseTaskLists+0x78>)
 80056cc:	4a05      	ldr	r2, [pc, #20]	; (80056e4 <prvInitialiseTaskLists+0x64>)
 80056ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <prvInitialiseTaskLists+0x7c>)
 80056d2:	4a05      	ldr	r2, [pc, #20]	; (80056e8 <prvInitialiseTaskLists+0x68>)
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2000067c 	.word	0x2000067c
 80056e4:	20000708 	.word	0x20000708
 80056e8:	2000071c 	.word	0x2000071c
 80056ec:	20000738 	.word	0x20000738
 80056f0:	2000074c 	.word	0x2000074c
 80056f4:	20000764 	.word	0x20000764
 80056f8:	20000730 	.word	0x20000730
 80056fc:	20000734 	.word	0x20000734

08005700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005706:	e019      	b.n	800573c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005708:	f000 fa0c 	bl	8005b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <prvCheckTasksWaitingTermination+0x50>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fb8a 	bl	8004e32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <prvCheckTasksWaitingTermination+0x54>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3b01      	subs	r3, #1
 8005724:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <prvCheckTasksWaitingTermination+0x54>)
 8005726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvCheckTasksWaitingTermination+0x58>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3b01      	subs	r3, #1
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <prvCheckTasksWaitingTermination+0x58>)
 8005730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005732:	f000 fa27 	bl	8005b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f810 	bl	800575c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <prvCheckTasksWaitingTermination+0x58>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e1      	bne.n	8005708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000074c 	.word	0x2000074c
 8005754:	20000778 	.word	0x20000778
 8005758:	20000760 	.word	0x20000760

0800575c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb84 	bl	8005e80 <vPortFree>
				vPortFree( pxTCB );
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fb81 	bl	8005e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800577e:	e018      	b.n	80057b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005786:	2b01      	cmp	r3, #1
 8005788:	d103      	bne.n	8005792 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb78 	bl	8005e80 <vPortFree>
	}
 8005790:	e00f      	b.n	80057b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005798:	2b02      	cmp	r3, #2
 800579a:	d00a      	beq.n	80057b2 <prvDeleteTCB+0x56>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <prvDeleteTCB+0x54>
	}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <prvResetNextTaskUnblockTime+0x38>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <prvResetNextTaskUnblockTime+0x3c>)
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057d4:	e008      	b.n	80057e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <prvResetNextTaskUnblockTime+0x38>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <prvResetNextTaskUnblockTime+0x3c>)
 80057e6:	6013      	str	r3, [r2, #0]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	20000730 	.word	0x20000730
 80057f8:	20000798 	.word	0x20000798

080057fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005806:	4b29      	ldr	r3, [pc, #164]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800580c:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3304      	adds	r3, #4
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fb0d 	bl	8004e32 <uxListRemove>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	2201      	movs	r2, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43da      	mvns	r2, r3
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4013      	ands	r3, r2
 8005832:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005834:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d10a      	bne.n	8005854 <prvAddCurrentTaskToDelayedList+0x58>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005844:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	481a      	ldr	r0, [pc, #104]	; (80058b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800584e:	f7ff fa93 	bl	8004d78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005852:	e026      	b.n	80058a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d209      	bcs.n	8005880 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f7ff faa1 	bl	8004dc0 <vListInsert>
}
 800587e:	e010      	b.n	80058a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7ff fa97 	bl	8004dc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	429a      	cmp	r2, r3
 800589a:	d202      	bcs.n	80058a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800589c:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6013      	str	r3, [r2, #0]
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2000077c 	.word	0x2000077c
 80058b0:	20000678 	.word	0x20000678
 80058b4:	20000780 	.word	0x20000780
 80058b8:	20000764 	.word	0x20000764
 80058bc:	20000734 	.word	0x20000734
 80058c0:	20000730 	.word	0x20000730
 80058c4:	20000798 	.word	0x20000798

080058c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3b04      	subs	r3, #4
 80058d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3b04      	subs	r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0201 	bic.w	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058f8:	4a0c      	ldr	r2, [pc, #48]	; (800592c <pxPortInitialiseStack+0x64>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b14      	subs	r3, #20
 8005902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3b04      	subs	r3, #4
 800590e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f06f 0202 	mvn.w	r2, #2
 8005916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3b20      	subs	r3, #32
 800591c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	08005931 	.word	0x08005931

08005930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <prvTaskExitError+0x54>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d00a      	beq.n	800595a <prvTaskExitError+0x2a>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60fb      	str	r3, [r7, #12]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <prvTaskExitError+0x28>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	60bb      	str	r3, [r7, #8]
}
 800596c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800596e:	bf00      	nop
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0fc      	beq.n	8005970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	200000fc 	.word	0x200000fc
	...

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	20000678 	.word	0x20000678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059b8:	4808      	ldr	r0, [pc, #32]	; (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059da:	bf00      	nop
 80059dc:	e000ed08 	.word	0xe000ed08

080059e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <xPortStartScheduler+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <xPortStartScheduler+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <xPortStartScheduler+0x26>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <xPortStartScheduler+0x120>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <xPortStartScheduler+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10a      	bne.n	8005a26 <xPortStartScheduler+0x46>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <xPortStartScheduler+0x12c>)
 8005a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <xPortStartScheduler+0x130>)
 8005a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a54:	e009      	b.n	8005a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d0ef      	beq.n	8005a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1c3 0307 	rsb	r3, r3, #7
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00a      	beq.n	8005a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <xPortStartScheduler+0x138>)
 8005abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ace:	f000 f8dd 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <xPortStartScheduler+0x13c>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ad8:	f000 f8fc 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ae8:	f7ff ff66 	bl	80059b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aec:	f7ff fd54 	bl	8005598 <vTaskSwitchContext>
	prvTaskExitError();
 8005af0:	f7ff ff1e 	bl	8005930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed00 	.word	0xe000ed00
 8005b04:	410fc271 	.word	0x410fc271
 8005b08:	410fc270 	.word	0x410fc270
 8005b0c:	e000e400 	.word	0xe000e400
 8005b10:	200007a4 	.word	0x200007a4
 8005b14:	200007a8 	.word	0x200007a8
 8005b18:	e000ed20 	.word	0xe000ed20
 8005b1c:	200000fc 	.word	0x200000fc
 8005b20:	e000ef34 	.word	0xe000ef34

08005b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortEnterCritical+0x5c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	603b      	str	r3, [r7, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vPortEnterCritical+0x4a>
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	200000fc 	.word	0x200000fc
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <vPortExitCritical+0x50>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <vPortExitCritical+0x24>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <vPortExitCritical+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <vPortExitCritical+0x42>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	200000fc 	.word	0x200000fc
	...

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7ff fcc2 	bl	8005598 <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	20000678 	.word	0x20000678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7ff fbe1 	bl	8005428 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <SysTick_Handler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	2000000c 	.word	0x2000000c
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cf4:	f7ff faee 	bl	80052d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <pvPortMalloc+0x180>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d00:	f000 f920 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <pvPortMalloc+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d014      	beq.n	8005d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0x6c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d06e      	beq.n	8005e38 <pvPortMalloc+0x150>
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <pvPortMalloc+0x188>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d869      	bhi.n	8005e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d6e:	e004      	b.n	8005d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <pvPortMalloc+0xa4>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <pvPortMalloc+0x180>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d050      	beq.n	8005e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	2308      	movs	r3, #8
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d91f      	bls.n	8005df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <pvPortMalloc+0xf8>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	613b      	str	r3, [r7, #16]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005df2:	69b8      	ldr	r0, [r7, #24]
 8005df4:	f000 f908 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <pvPortMalloc+0x188>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <pvPortMalloc+0x188>)
 8005e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <pvPortMalloc+0x188>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <pvPortMalloc+0x188>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x190>)
 8005e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <pvPortMalloc+0x184>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <pvPortMalloc+0x194>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <pvPortMalloc+0x194>)
 8005e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e38:	f7ff fa5a 	bl	80052f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x174>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x172>
	return pvReturn;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200043b4 	.word	0x200043b4
 8005e6c:	200043c8 	.word	0x200043c8
 8005e70:	200043b8 	.word	0x200043b8
 8005e74:	200043ac 	.word	0x200043ac
 8005e78:	200043bc 	.word	0x200043bc
 8005e7c:	200043c0 	.word	0x200043c0

08005e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04d      	beq.n	8005f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e92:	2308      	movs	r3, #8
 8005e94:	425b      	negs	r3, r3
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <vPortFree+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vPortFree+0x44>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <vPortFree+0x62>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <vPortFree+0xb8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7ff f9e4 	bl	80052d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortFree+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f874 	bl	8006008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xc0>)
 8005f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f2a:	f7ff f9e1 	bl	80052f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200043c8 	.word	0x200043c8
 8005f3c:	200043b8 	.word	0x200043b8
 8005f40:	200043c4 	.word	0x200043c4

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	200007ac 	.word	0x200007ac
 8005ff4:	200043ac 	.word	0x200043ac
 8005ff8:	200043b4 	.word	0x200043b4
 8005ffc:	200043bc 	.word	0x200043bc
 8006000:	200043b8 	.word	0x200043b8
 8006004:	200043c8 	.word	0x200043c8

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200043ac 	.word	0x200043ac
 80060b8:	200043b4 	.word	0x200043b4

080060bc <microDelay>:
static float _speed = 0.0;
static float _acceleration = 0.0;
static float _maxSpeed = 0.0;
static long _stepInterval = 0;

void microDelay(uint16_t delay) {
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <microDelay+0x30>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80060ce:	bf00      	nop
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <microDelay+0x30>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d3f9      	bcc.n	80060d0 <microDelay+0x14>
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000398 	.word	0x20000398

080060f0 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 80060fa:	4a04      	ldr	r2, [pc, #16]	; (800610c <setAcceleration+0x1c>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	200043d0 	.word	0x200043d0

08006110 <setRPM>:

void setRPM(float rpm, int steps) {
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	ed87 0a01 	vstr	s0, [r7, #4]
 800611a:	6038      	str	r0, [r7, #0]
    float speed = (rpm * (float)steps) / 60;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006126:	edd7 7a01 	vldr	s15, [r7, #4]
 800612a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800612e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800614c <setRPM+0x3c>
 8006132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006136:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 800613a:	4a05      	ldr	r2, [pc, #20]	; (8006150 <setRPM+0x40>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6013      	str	r3, [r2, #0]
}
 8006140:	bf00      	nop
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	42700000 	.word	0x42700000
 8006150:	200043d4 	.word	0x200043d4
 8006154:	00000000 	.word	0x00000000

08006158 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 800615c:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <computeNewSpeed+0x88>)
 800615e:	ed93 7a00 	vldr	s14, [r3]
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <computeNewSpeed+0x8c>)
 8006164:	edd3 7a00 	vldr	s15, [r3]
 8006168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800616c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006170:	d519      	bpl.n	80061a6 <computeNewSpeed+0x4e>
        _speed += _acceleration;
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <computeNewSpeed+0x88>)
 8006174:	ed93 7a00 	vldr	s14, [r3]
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <computeNewSpeed+0x90>)
 800617a:	edd3 7a00 	vldr	s15, [r3]
 800617e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <computeNewSpeed+0x88>)
 8006184:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <computeNewSpeed+0x88>)
 800618a:	ed93 7a00 	vldr	s14, [r3]
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <computeNewSpeed+0x8c>)
 8006190:	edd3 7a00 	vldr	s15, [r3]
 8006194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619c:	dd03      	ble.n	80061a6 <computeNewSpeed+0x4e>
            _speed = _maxSpeed;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <computeNewSpeed+0x8c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <computeNewSpeed+0x88>)
 80061a4:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <computeNewSpeed+0x88>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa f97c 	bl	80004a8 <__aeabi_f2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	a108      	add	r1, pc, #32	; (adr r1, 80061d8 <computeNewSpeed+0x80>)
 80061b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ba:	f7fa faf7 	bl	80007ac <__aeabi_ddiv>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fa fbd9 	bl	800097c <__aeabi_d2iz>
 80061ca:	4603      	mov	r3, r0
 80061cc:	4a07      	ldr	r2, [pc, #28]	; (80061ec <computeNewSpeed+0x94>)
 80061ce:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <computeNewSpeed+0x94>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	00000000 	.word	0x00000000
 80061dc:	412e8480 	.word	0x412e8480
 80061e0:	200043cc 	.word	0x200043cc
 80061e4:	200043d4 	.word	0x200043d4
 80061e8:	200043d0 	.word	0x200043d0
 80061ec:	200043d8 	.word	0x200043d8

080061f0 <motorMove>:

        // Optional: Implement a way to exit the loop if necessary
    }
}

void motorMove(MotorConfig* motor, int steps_to_move) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

	if (steps_to_move >0)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dd08      	ble.n	8006212 <motorMove+0x22>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction pin for forward movement
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	889b      	ldrh	r3, [r3, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	4619      	mov	r1, r3
 800620c:	f7fb fe0e 	bl	8001e2c <HAL_GPIO_WritePin>
 8006210:	e00a      	b.n	8006228 <motorMove+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction pin for backward movement
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	889b      	ldrh	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	4619      	mov	r1, r3
 800621e:	f7fb fe05 	bl	8001e2c <HAL_GPIO_WritePin>
		steps_to_move = steps_to_move * (-1); // converting steps to positive value
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	425b      	negs	r3, r3
 8006226:	603b      	str	r3, [r7, #0]
	}



    for(int i = 0; i < steps_to_move; i++)
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e021      	b.n	8006272 <motorMove+0x82>
    {
        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 800622e:	f7ff ff93 	bl	8006158 <computeNewSpeed>
 8006232:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6898      	ldr	r0, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	899b      	ldrh	r3, [r3, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	4619      	mov	r1, r3
 8006240:	f7fb fdf4 	bl	8001e2c <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	b29b      	uxth	r3, r3
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ff36 	bl	80060bc <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6898      	ldr	r0, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	899b      	ldrh	r3, [r3, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	4619      	mov	r1, r3
 800625c:	f7fb fde6 	bl	8001e2c <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	b29b      	uxth	r3, r3
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff ff28 	bl	80060bc <microDelay>
    for(int i = 0; i < steps_to_move; i++)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	dbd9      	blt.n	800622e <motorMove+0x3e>

        // Optional: Implement a way to exit the loop if necessary
    }
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <__libc_init_array>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	4d0d      	ldr	r5, [pc, #52]	; (80062bc <__libc_init_array+0x38>)
 8006288:	4c0d      	ldr	r4, [pc, #52]	; (80062c0 <__libc_init_array+0x3c>)
 800628a:	1b64      	subs	r4, r4, r5
 800628c:	10a4      	asrs	r4, r4, #2
 800628e:	2600      	movs	r6, #0
 8006290:	42a6      	cmp	r6, r4
 8006292:	d109      	bne.n	80062a8 <__libc_init_array+0x24>
 8006294:	4d0b      	ldr	r5, [pc, #44]	; (80062c4 <__libc_init_array+0x40>)
 8006296:	4c0c      	ldr	r4, [pc, #48]	; (80062c8 <__libc_init_array+0x44>)
 8006298:	f000 f820 	bl	80062dc <_init>
 800629c:	1b64      	subs	r4, r4, r5
 800629e:	10a4      	asrs	r4, r4, #2
 80062a0:	2600      	movs	r6, #0
 80062a2:	42a6      	cmp	r6, r4
 80062a4:	d105      	bne.n	80062b2 <__libc_init_array+0x2e>
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ac:	4798      	blx	r3
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7ee      	b.n	8006290 <__libc_init_array+0xc>
 80062b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b6:	4798      	blx	r3
 80062b8:	3601      	adds	r6, #1
 80062ba:	e7f2      	b.n	80062a2 <__libc_init_array+0x1e>
 80062bc:	0800637c 	.word	0x0800637c
 80062c0:	0800637c 	.word	0x0800637c
 80062c4:	0800637c 	.word	0x0800637c
 80062c8:	08006380 	.word	0x08006380

080062cc <memset>:
 80062cc:	4402      	add	r2, r0
 80062ce:	4603      	mov	r3, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d100      	bne.n	80062d6 <memset+0xa>
 80062d4:	4770      	bx	lr
 80062d6:	f803 1b01 	strb.w	r1, [r3], #1
 80062da:	e7f9      	b.n	80062d0 <memset+0x4>

080062dc <_init>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr

080062e8 <_fini>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr
