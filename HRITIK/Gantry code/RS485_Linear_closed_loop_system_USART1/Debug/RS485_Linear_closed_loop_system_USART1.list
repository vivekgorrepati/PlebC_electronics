
RS485_Linear_closed_loop_system_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800b348  0800b348  0001b348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b86c  0800b86c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b874  0800b874  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800b87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004308  200002d0  0800bb4c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d8  0800bb4c  000245d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001554f  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ed  00000000  00000000  0003584f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00039e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192f8  00000000  00000000  0003afa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015192  00000000  00000000  000542a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009861c  00000000  00000000  00069432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  00101aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b330 	.word	0x0800b330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800b330 	.word	0x0800b330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <vApplicationGetIdleTaskMemory+0x2c>)
 8001018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <vApplicationGetIdleTaskMemory+0x30>)
 800101e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002ec 	.word	0x200002ec
 8001038:	20000340 	.word	0x20000340

0800103c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001044:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001048:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001054:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001058:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800105c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001064:	e000      	b.n	8001068 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001066:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001068:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001072:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <updateEncoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncoder(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8001092:	2101      	movs	r1, #1
 8001094:	481f      	ldr	r0, [pc, #124]	; (8001114 <updateEncoder+0x88>)
 8001096:	f001 f989 	bl	80023ac <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 800109e:	2102      	movs	r1, #2
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <updateEncoder+0x88>)
 80010a2:	f001 f983 	bl	80023ac <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <updateEncoder+0x8c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b0d      	cmp	r3, #13
 80010c4:	d008      	beq.n	80010d8 <updateEncoder+0x4c>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d005      	beq.n	80010d8 <updateEncoder+0x4c>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d002      	beq.n	80010d8 <updateEncoder+0x4c>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b0b      	cmp	r3, #11
 80010d6:	d104      	bne.n	80010e2 <updateEncoder+0x56>
    encoderValue++;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <updateEncoder+0x90>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <updateEncoder+0x90>)
 80010e0:	6013      	str	r3, [r2, #0]
  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b0e      	cmp	r3, #14
 80010e6:	d008      	beq.n	80010fa <updateEncoder+0x6e>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d005      	beq.n	80010fa <updateEncoder+0x6e>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d002      	beq.n	80010fa <updateEncoder+0x6e>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d104      	bne.n	8001104 <updateEncoder+0x78>
    encoderValue--;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <updateEncoder+0x90>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <updateEncoder+0x90>)
 8001102:	6013      	str	r3, [r2, #0]

  lastEncoded = encoded;
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <updateEncoder+0x8c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020400 	.word	0x40020400
 8001118:	20000540 	.word	0x20000540
 800111c:	20000544 	.word	0x20000544

08001120 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_EXTI_Callback+0x16>
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8001136:	f7ff ffa9 	bl	800108c <updateEncoder>

  }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <UART_StartReceive>:

// Function to start UART reception
void UART_StartReceive(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <UART_StartReceive+0x20>)
 8001150:	f001 f944 	bl	80023dc <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	4903      	ldr	r1, [pc, #12]	; (8001168 <UART_StartReceive+0x24>)
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <UART_StartReceive+0x28>)
 800115c:	f002 fbb9 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020000 	.word	0x40020000
 8001168:	20000660 	.word	0x20000660
 800116c:	200005c4 	.word	0x200005c4

08001170 <_write>:

int _write(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e009      	b.n	800119a <_write+0x2a>

		ITM_SendChar((*ptr++));
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	60ba      	str	r2, [r7, #8]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <ITM_SendChar>
	for(i=0; i<len; i++)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbf1      	blt.n	8001186 <_write+0x16>

	return len;
 80011a2:	687b      	ldr	r3, [r7, #4]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	rpm = Holding_Registers_Database[0];
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <main+0xa0>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <main+0xa4>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	acceleration = Holding_Registers_Database[1];
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <main+0xa0>)
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <main+0xa8>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
	motorSetSteps = Holding_Registers_Database[3];
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <main+0xa0>)
 80011d8:	88db      	ldrh	r3, [r3, #6]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <main+0xac>)
 80011de:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fd86 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f844 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f924 	bl	8001434 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011ec:	f000 f8a8 	bl	8001340 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011f0:	f000 f8f6 	bl	80013e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011f4:	4819      	ldr	r0, [pc, #100]	; (800125c <main+0xb0>)
 80011f6:	f001 fe3d 	bl	8002e74 <HAL_TIM_Base_Start>
  UART_StartReceive();
 80011fa:	f7ff ffa3 	bl	8001144 <UART_StartReceive>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <main+0xb4>)
 8001200:	f107 041c 	add.w	r4, r7, #28
 8001204:	461d      	mov	r5, r3
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fff8 	bl	800520e <osThreadCreate>
 800121e:	4603      	mov	r3, r0
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <main+0xb8>)
 8001222:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <main+0xbc>)
 8001226:	463c      	mov	r4, r7
 8001228:	461d      	mov	r5, r3
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 8001236:	463b      	mov	r3, r7
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f003 ffe7 	bl	800520e <osThreadCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <main+0xc0>)
 8001244:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001246:	f003 ffdb 	bl	8005200 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800124a:	e7fe      	b.n	800124a <main+0x9e>
 800124c:	20000014 	.word	0x20000014
 8001250:	20000550 	.word	0x20000550
 8001254:	20000558 	.word	0x20000558
 8001258:	20000560 	.word	0x20000560
 800125c:	2000057c 	.word	0x2000057c
 8001260:	0800b360 	.word	0x0800b360
 8001264:	20000608 	.word	0x20000608
 8001268:	0800b37c 	.word	0x0800b37c
 800126c:	2000060c 	.word	0x2000060c

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fbee 	bl	8006a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <SystemClock_Config+0xc8>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <SystemClock_Config+0xc8>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <SystemClock_Config+0xcc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <SystemClock_Config+0xcc>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012e4:	2364      	movs	r3, #100	; 0x64
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f8a3 	bl	8002440 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 fab9 	bl	8001876 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2103      	movs	r1, #3
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fb05 	bl	8002930 <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800132c:	f000 faa3 	bl	8001876 <Error_Handler>
  }
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	; 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_TIM1_Init+0x98>)
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_TIM1_Init+0x98>)
 8001364:	225a      	movs	r2, #90	; 0x5a
 8001366:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_TIM1_Init+0x98>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM1_Init+0x98>)
 8001370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001374:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_TIM1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_TIM1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_TIM1_Init+0x98>)
 800138a:	f001 fd23 	bl	8002dd4 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fa6f 	bl	8001876 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_TIM1_Init+0x98>)
 80013a6:	f001 ff29 	bl	80031fc <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b0:	f000 fa61 	bl	8001876 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM1_Init+0x98>)
 80013c2:	f002 f925 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013cc:	f000 fa53 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000057c 	.word	0x2000057c
 80013dc:	40010000 	.word	0x40010000

080013e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART1_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_USART1_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_USART1_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART1_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART1_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART1_UART_Init+0x4c>)
 8001418:	f002 f97c 	bl	8003714 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 fa28 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200005c4 	.word	0x200005c4
 8001430:	40011000 	.word	0x40011000

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <MX_GPIO_Init+0x10c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <MX_GPIO_Init+0x10c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <MX_GPIO_Init+0x10c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_GPIO_Init+0x10c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_GPIO_Init+0x10c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <MX_GPIO_Init+0x10c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_GPIO_Init+0x10c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 1113 	movw	r1, #275	; 0x113
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <MX_GPIO_Init+0x110>)
 80014c2:	f000 ff8b 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 80014c6:	2302      	movs	r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <MX_GPIO_Init+0x114>)
 80014da:	f000 fde3 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 80014de:	f240 1313 	movw	r3, #275	; 0x113
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_GPIO_Init+0x110>)
 80014f8:	f000 fdd4 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80014fc:	2303      	movs	r3, #3
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001500:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480e      	ldr	r0, [pc, #56]	; (800154c <MX_GPIO_Init+0x118>)
 8001512:	f000 fdc7 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2006      	movs	r0, #6
 800151c:	f000 fd06 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001520:	2006      	movs	r0, #6
 8001522:	f000 fd1f 	bl	8001f64 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	2007      	movs	r0, #7
 800152c:	f000 fcfe 	bl	8001f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001530:	2007      	movs	r0, #7
 8001532:	f000 fd17 	bl	8001f64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020800 	.word	0x40020800
 800154c:	40020400 	.word	0x40020400

08001550 <StartEncoderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	Input_Registers_Database[0] = encoderValue; // Store the encoder value in the first input register
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <StartEncoderTask+0x58>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <StartEncoderTask+0x5c>)
 8001560:	801a      	strh	r2, [r3, #0]
	int distance_covered = encoderValue * (mm_in_1rev/enc_val_in_1rev);
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <StartEncoderTask+0x58>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <StartEncoderTask+0x60>)
 8001570:	ed93 6a00 	vldr	s12, [r3]
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <StartEncoderTask+0x64>)
 8001576:	edd3 6a00 	vldr	s13, [r3]
 800157a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	60fb      	str	r3, [r7, #12]
	Input_Registers_Database[1] = distance_covered; // Store the encoder value in the first input register
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <StartEncoderTask+0x5c>)
 8001592:	805a      	strh	r2, [r3, #2]
	distance = Holding_Registers_Database[4];
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <StartEncoderTask+0x68>)
 8001596:	891b      	ldrh	r3, [r3, #8]
 8001598:	461a      	mov	r2, r3
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <StartEncoderTask+0x6c>)
 800159c:	601a      	str	r2, [r3, #0]
    osDelay(20);
 800159e:	2014      	movs	r0, #20
 80015a0:	f003 fe81 	bl	80052a6 <osDelay>
  {
 80015a4:	e7d8      	b.n	8001558 <StartEncoderTask+0x8>
 80015a6:	bf00      	nop
 80015a8:	20000544 	.word	0x20000544
 80015ac:	20000078 	.word	0x20000078
 80015b0:	20000004 	.word	0x20000004
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000014 	.word	0x20000014
 80015bc:	20000564 	.word	0x20000564

080015c0 <homePosition>:
* @param argument: Not used
* @retval None
*/

// Function to initialize motor position
void homePosition(MotorConfig* motor) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	setRPM(30, motorSetSteps); // (RPM, Driver Steps)
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <homePosition+0xb0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80015d2:	f005 f875 	bl	80066c0 <setRPM>
	setAcceleration(5.0f); // Set acceleration in steps per second^2
 80015d6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80015da:	f005 f861 	bl	80066a0 <setAcceleration>

    // Move motor backward until limit switch is triggered
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 80015de:	e01e      	b.n	800161e <homePosition+0x5e>
    	// Calculate the new speed and step interval
		unsigned long stepInterval = computeNewSpeed();
 80015e0:	f005 f892 	bl	8006708 <computeNewSpeed>
 80015e4:	60f8      	str	r0, [r7, #12]

		// Generate a step pulse with the calculated interval
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6898      	ldr	r0, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	899b      	ldrh	r3, [r3, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	f000 fef3 	bl	80023dc <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 f835 	bl	800666c <microDelay>
		HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6898      	ldr	r0, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	899b      	ldrh	r3, [r3, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f000 fee5 	bl	80023dc <HAL_GPIO_WritePin>
		microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f005 f827 	bl	800666c <microDelay>
    while (HAL_GPIO_ReadPin(LIMIT_SW_GPIO_Port, LIMIT_SW_Pin) == GPIO_PIN_SET) {
 800161e:	2102      	movs	r1, #2
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <homePosition+0xb4>)
 8001622:	f000 fec3 	bl	80023ac <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d0d9      	beq.n	80015e0 <homePosition+0x20>
    }
    HAL_Delay(300);
 800162c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001630:	f000 fba0 	bl	8001d74 <HAL_Delay>
    // move motor forward 3mm or 480 steps

    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <homePosition+0xb8>)
 800163a:	f000 fecf 	bl	80023dc <HAL_GPIO_WritePin>
    motorMove(motor, 160*3); // motor will move 3mm or 480 steps after hitting the limit switch, 1mm = 160 steps
 800163e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f005 f8e0 	bl	8006808 <motorMove>
    HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <homePosition+0xb8>)
 800164e:	f000 fec5 	bl	80023dc <HAL_GPIO_WritePin>

    // Set encoder value to zero
    HAL_Delay(10);
 8001652:	200a      	movs	r0, #10
 8001654:	f000 fb8e 	bl	8001d74 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
    __disable_irq();

    encoderValue = 0;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <homePosition+0xbc>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001662:	b662      	cpsie	i
}
 8001664:	bf00      	nop
    __enable_irq();
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000560 	.word	0x20000560
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000
 800167c:	20000544 	.word	0x20000544

08001680 <StartMotorTask>:

/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */

  // Define motor configurations
  MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <StartMotorTask+0x190>)
 800168a:	f107 0408 	add.w	r4, r7, #8
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Initialize motor position
   homePosition(&motor1);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff91 	bl	80015c0 <homePosition>

  /* Infinite loop */
  for(;;)
  {
	  //Reading RMP value  from RPM holding register
	  rpm = Holding_Registers_Database[0];
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <StartMotorTask+0x194>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <StartMotorTask+0x198>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
	  if(rpm != prev_rpm)
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <StartMotorTask+0x198>)
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	4b59      	ldr	r3, [pc, #356]	; (800181c <StartMotorTask+0x19c>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d00d      	beq.n	80016e2 <StartMotorTask+0x62>
	  {
	  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 80016c6:	4b54      	ldr	r3, [pc, #336]	; (8001818 <StartMotorTask+0x198>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <StartMotorTask+0x1a0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f004 fff3 	bl	80066c0 <setRPM>
	  prev_rpm = rpm;
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <StartMotorTask+0x198>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a4f      	ldr	r2, [pc, #316]	; (800181c <StartMotorTask+0x19c>)
 80016e0:	6013      	str	r3, [r2, #0]
	  }

	  //Reading acceleration value from acceleration holding register
	  acceleration = Holding_Registers_Database[1];
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <StartMotorTask+0x194>)
 80016e4:	885b      	ldrh	r3, [r3, #2]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ee:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <StartMotorTask+0x1a4>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
	  if(acceleration != prev_acceleration)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <StartMotorTask+0x1a4>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <StartMotorTask+0x1a8>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eeb4 7a67 	vcmp.f32	s14, s15
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d00a      	beq.n	8001720 <StartMotorTask+0xa0>
	  {
	   setAcceleration(acceleration);
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <StartMotorTask+0x1a4>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	f004 ffc4 	bl	80066a0 <setAcceleration>
	   prev_acceleration = acceleration;
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <StartMotorTask+0x1a4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <StartMotorTask+0x1a8>)
 800171e:	6013      	str	r3, [r2, #0]
	  }

    // Disable interrupts and read the encoder value
    //__disable_irq();
    currentPosition = encoderValue; // Read the latest encoder value
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <StartMotorTask+0x1ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <StartMotorTask+0x1b0>)
 8001726:	6013      	str	r3, [r2, #0]
    //__enable_irq();

    input_distance = Holding_Registers_Database[4];
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <StartMotorTask+0x194>)
 800172a:	891b      	ldrh	r3, [r3, #8]
 800172c:	461a      	mov	r2, r3
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <StartMotorTask+0x1b4>)
 8001730:	601a      	str	r2, [r3, #0]


	// Calculate target position with floating-point division
	targetPosition = input_distance * (enc_val_in_1rev/mm_in_1rev); // in encoder value
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <StartMotorTask+0x1b4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <StartMotorTask+0x1b8>)
 8001740:	ed93 6a00 	vldr	s12, [r3]
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <StartMotorTask+0x1bc>)
 8001746:	edd3 6a00 	vldr	s13, [r3]
 800174a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <StartMotorTask+0x1c0>)
 8001754:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <StartMotorTask+0x1c0>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ee17 2a90 	vmov	r2, s15
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <StartMotorTask+0x1b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a35      	ldr	r2, [pc, #212]	; (8001844 <StartMotorTask+0x1c4>)
 800176e:	6013      	str	r3, [r2, #0]

	// Calculate steps to move
	stepsToMove = positionToMove * (motorSetSteps / (float)enc_val_in_1rev);
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <StartMotorTask+0x1c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <StartMotorTask+0x1a0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <StartMotorTask+0x1b8>)
 800178a:	edd3 6a00 	vldr	s13, [r3]
 800178e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179a:	ee17 2a90 	vmov	r2, s15
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <StartMotorTask+0x1c8>)
 80017a0:	601a      	str	r2, [r3, #0]

	if ((prev_input_distance != input_distance) || (prevstepsToMove != stepsToMove))
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <StartMotorTask+0x1cc>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <StartMotorTask+0x1b4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d105      	bne.n	80017ba <StartMotorTask+0x13a>
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <StartMotorTask+0x1d0>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <StartMotorTask+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d00c      	beq.n	80017d4 <StartMotorTask+0x154>
	{
	//Enable Drive
	HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2110      	movs	r1, #16
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <StartMotorTask+0x1d4>)
 80017c0:	f000 fe0c 	bl	80023dc <HAL_GPIO_WritePin>
	// Move motor
		motorMove(&motor1, stepsToMove);
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <StartMotorTask+0x1c8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 f81a 	bl	8006808 <motorMove>

	}



	if ((prev_input_distance == input_distance) || (prevstepsToMove == stepsToMove))
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <StartMotorTask+0x1cc>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <StartMotorTask+0x1b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d005      	beq.n	80017ec <StartMotorTask+0x16c>
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <StartMotorTask+0x1d0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <StartMotorTask+0x1c8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d104      	bne.n	80017f6 <StartMotorTask+0x176>
	{
		//Disable Drive
		HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	4818      	ldr	r0, [pc, #96]	; (8001854 <StartMotorTask+0x1d4>)
 80017f2:	f000 fdf3 	bl	80023dc <HAL_GPIO_WritePin>
	}


	prev_input_distance = input_distance;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <StartMotorTask+0x1b4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <StartMotorTask+0x1cc>)
 80017fc:	6013      	str	r3, [r2, #0]
	prevstepsToMove = stepsToMove;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <StartMotorTask+0x1c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <StartMotorTask+0x1d0>)
 8001804:	6013      	str	r3, [r2, #0]

	osDelay(20);
 8001806:	2014      	movs	r0, #20
 8001808:	f003 fd4d 	bl	80052a6 <osDelay>
	  rpm = Holding_Registers_Database[0];
 800180c:	e747      	b.n	800169e <StartMotorTask+0x1e>
 800180e:	bf00      	nop
 8001810:	0800b398 	.word	0x0800b398
 8001814:	20000014 	.word	0x20000014
 8001818:	20000550 	.word	0x20000550
 800181c:	20000554 	.word	0x20000554
 8001820:	20000560 	.word	0x20000560
 8001824:	20000558 	.word	0x20000558
 8001828:	2000055c 	.word	0x2000055c
 800182c:	20000544 	.word	0x20000544
 8001830:	2000056c 	.word	0x2000056c
 8001834:	20000568 	.word	0x20000568
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004
 8001840:	20000570 	.word	0x20000570
 8001844:	20000574 	.word	0x20000574
 8001848:	20000578 	.word	0x20000578
 800184c:	20000548 	.word	0x20000548
 8001850:	2000054c 	.word	0x2000054c
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d101      	bne.n	800186e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186a:	f000 fa63 	bl	8001d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800187a:	b672      	cpsid	i
}
 800187c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187e:	e7fe      	b.n	800187e <Error_Handler+0x8>

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_MspInit+0x54>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_MspInit+0x54>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x54>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_MspInit+0x54>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_MspInit+0x54>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_MspInit+0x54>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	210f      	movs	r1, #15
 80018c2:	f06f 0001 	mvn.w	r0, #1
 80018c6:	f000 fb31 	bl	8001f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_TIM_Base_MspInit+0x3c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10d      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0x40>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_TIM_Base_MspInit+0x40>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_Base_MspInit+0x40>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40010000 	.word	0x40010000
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_UART_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d134      	bne.n	80019a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001988:	2307      	movs	r3, #7
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_UART_MspInit+0x9c>)
 8001994:	f000 fb86 	bl	80020a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2105      	movs	r1, #5
 800199c:	2025      	movs	r0, #37	; 0x25
 800199e:	f000 fac5 	bl	8001f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a2:	2025      	movs	r0, #37	; 0x25
 80019a4:	f000 fade 	bl	8001f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000

080019bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	; 0x38
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_InitTick+0xe8>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <HAL_InitTick+0xe8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6413      	str	r3, [r2, #64]	; 0x40
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_InitTick+0xe8>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e8:	f107 0210 	add.w	r2, r7, #16
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f9bc 	bl	8002d70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a02:	f001 f98d 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8001a06:	6378      	str	r0, [r7, #52]	; 0x34
 8001a08:	e004      	b.n	8001a14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a0a:	f001 f989 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <HAL_InitTick+0xec>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	0c9b      	lsrs	r3, r3, #18
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_InitTick+0xf0>)
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_InitTick+0xf0>)
 8001a2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a30:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_InitTick+0xf0>)
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_InitTick+0xf0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_InitTick+0xf0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_InitTick+0xf0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <HAL_InitTick+0xf0>)
 8001a4c:	f001 f9c2 	bl	8002dd4 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d11b      	bne.n	8001a96 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a5e:	4813      	ldr	r0, [pc, #76]	; (8001aac <HAL_InitTick+0xf0>)
 8001a60:	f001 fa62 	bl	8002f28 <HAL_TIM_Base_Start_IT>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d111      	bne.n	8001a96 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a72:	201c      	movs	r0, #28
 8001a74:	f000 fa76 	bl	8001f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	d808      	bhi.n	8001a90 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	201c      	movs	r0, #28
 8001a84:	f000 fa52 	bl	8001f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a88:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_InitTick+0xf4>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e002      	b.n	8001a96 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3738      	adds	r7, #56	; 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	20000610 	.word	0x20000610
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 fc93 	bl	8002410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001af2:	2002      	movs	r0, #2
 8001af4:	f000 fc8c 	bl	8002410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f001 fa73 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000610 	.word	0x20000610

08001b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART1_IRQHandler+0x10>)
 8001b16:	f001 ff41 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200005c4 	.word	0x200005c4

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_kill>:

int _kill(int pid, int sig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3e:	f004 ff57 	bl	80069f0 <__errno>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2216      	movs	r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
  return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_exit>:

void _exit (int status)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffe7 	bl	8001b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b66:	e7fe      	b.n	8001b66 <_exit+0x12>

08001b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
  }

  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f004 fed8 	bl	80069f0 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20020000 	.word	0x20020000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000658 	.word	0x20000658
 8001c74:	200045d8 	.word	0x200045d8

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff ffd7 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f004 fe97 	bl	80069fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fa6d 	bl	80011ac <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001ce0:	0800b87c 	.word	0x0800b87c
  ldr r2, =_sbss
 8001ce4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001ce8:	200045d8 	.word	0x200045d8

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_Init+0x40>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_Init+0x40>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x40>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 f8fc 	bl	8001f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f7ff fe4c 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fdac 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000010 	.word	0x20000010
 8001d58:	2000065c 	.word	0x2000065c

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000065c 	.word	0x2000065c

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000010 	.word	0x20000010

08001dbc <__NVIC_SetPriorityGrouping>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff4c 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3e:	f7ff ff61 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7ff ffb1 	bl	8001eb0 <NVIC_EncodePriority>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff80 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff54 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8e:	f7ff fee5 	bl	8001d5c <HAL_GetTick>
 8001f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e052      	b.n	8002058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0216 	bic.w	r2, r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_DMA_Abort+0x62>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	e013      	b.n	800202c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002004:	f7ff feaa 	bl	8001d5c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b05      	cmp	r3, #5
 8002010:	d90c      	bls.n	800202c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e015      	b.n	8002058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e4      	bne.n	8002004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00c      	b.n	8002098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2205      	movs	r2, #5
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e159      	b.n	8002374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8148 	bne.w	800236e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a2 	beq.w	800236e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a56      	ldr	r2, [pc, #344]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_GPIO_Init+0x2e8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002246:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a49      	ldr	r2, [pc, #292]	; (8002394 <HAL_GPIO_Init+0x2f0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x202>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_Init+0x2f4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x1fe>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_GPIO_Init+0x2f8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x1fa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a46      	ldr	r2, [pc, #280]	; (80023a0 <HAL_GPIO_Init+0x2fc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x1f6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_GPIO_Init+0x300>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x1f2>
 8002292:	2304      	movs	r3, #4
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 8002296:	2307      	movs	r3, #7
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f aea2 	bls.w	80020c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe76 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e267      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d075      	beq.n	800254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d05b      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d157      	bne.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e242      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x74>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6f      	ldr	r2, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6c      	ldr	r2, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fc30 	bl	8001d5c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fc2c 	bl	8001d5c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e207      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fc1c 	bl	8001d5c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fc18 	bl	8001d5c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1f3      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0xe8>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c7      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff fbd1 	bl	8001d5c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fbcd 	bl	8001d5c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a8      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fbb0 	bl	8001d5c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7ff fbac 	bl	8001d5c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e187      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff fb90 	bl	8001d5c <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff fb8c 	bl	8001d5c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e167      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x200>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fb79 	bl	8001d5c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fb75 	bl	8001d5c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e150      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a7c      	ldr	r2, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b74      	ldr	r3, [pc, #464]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a73      	ldr	r2, [pc, #460]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fb35 	bl	8001d5c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7ff fb31 	bl	8001d5c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x2ea>
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x30c>
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff faf6 	bl	8001d5c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff faf2 	bl	8001d5c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0cb      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x334>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7ff fae0 	bl	8001d5c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff fadc 	bl	8001d5c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b5      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a1 	beq.w	8002920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d05c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d141      	bne.n	8002876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fab0 	bl	8001d5c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff faac 	bl	8001d5c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	491b      	ldr	r1, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fa85 	bl	8001d5c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fa81 	bl	8001d5c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x416>
 8002874:	e054      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fa6e 	bl	8001d5c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff fa6a 	bl	8001d5c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e045      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
 80028a2:	e03d      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e038      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x4ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7ff f99c 	bl	8001d5c <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7ff f998 	bl	8001d5c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff70 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	0800b3b0 	.word	0x0800b3b0
 8002af4:	20000008 	.word	0x20000008
 8002af8:	2000000c 	.word	0x2000000c

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	; 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c0c:	f7fe f844 	bl	8000c98 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd ffea 	bl	8000c98 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	; 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000008 	.word	0x20000008

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	0800b3c0 	.word	0x0800b3c0

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	0800b3c0 	.word	0x0800b3c0

08002d70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_RCC_GetClockConfig+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0207 	and.w	r2, r3, #7
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40023c00 	.word	0x40023c00

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fd6c 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fae2 	bl	80033dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e03c      	b.n	8002f06 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_TIM_Base_Start+0xa0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d013      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_TIM_Base_Start+0xa4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIM_Base_Start+0xa8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_TIM_Base_Start+0xac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIM_Base_Start+0xb0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e007      	b.n	8002f04 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000

08002f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e044      	b.n	8002fca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d013      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_TIM_Base_Start_IT+0xb4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d010      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	e007      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40014000 	.word	0x40014000

08002fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0202 	mvn.w	r2, #2
 8003018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9b5 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9a7 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f9b8 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0204 	mvn.w	r2, #4
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f98b 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f97d 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f98e 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0208 	mvn.w	r2, #8
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f961 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f953 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f964 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b10      	cmp	r3, #16
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0210 	mvn.w	r2, #16
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2208      	movs	r2, #8
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f937 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f929 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f93a 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0201 	mvn.w	r2, #1
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fb74 	bl	8001858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fab2 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8ff 	bl	80033c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0220 	mvn.w	r2, #32
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa7c 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIM_ConfigClockSource+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e0b4      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x186>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d03e      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	f200 8087 	bhi.w	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	f000 8086 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x172>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d87f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d01a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0xa6>
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d87b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d050      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x11a>
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d877      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d03c      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xfa>
 800327c:	2b50      	cmp	r3, #80	; 0x50
 800327e:	d873      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d058      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x13a>
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d86f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d064      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b30      	cmp	r3, #48	; 0x30
 800328e:	d86b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d060      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b20      	cmp	r3, #32
 8003296:	d867      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05c      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b10      	cmp	r3, #16
 800329e:	d05a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	e062      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f000 f98d 	bl	80035d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e04f      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f000 f976 	bl	80035d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f2:	609a      	str	r2, [r3, #8]
      break;
 80032f4:	e03c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 f8ea 	bl	80034dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2150      	movs	r1, #80	; 0x50
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f943 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003314:	e02c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 f909 	bl	800353a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2160      	movs	r1, #96	; 0x60
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f933 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003334:	e01c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 f8ca 	bl	80034dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f923 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003354:	e00c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 f91a 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 8003366:	e003      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e000      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <TIM_Base_SetConfig+0xe4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00f      	beq.n	8003414 <TIM_Base_SetConfig+0x38>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x38>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <TIM_Base_SetConfig+0xe8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x38>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <TIM_Base_SetConfig+0xec>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x38>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a2f      	ldr	r2, [pc, #188]	; (80034cc <TIM_Base_SetConfig+0xf0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a25      	ldr	r2, [pc, #148]	; (80034c0 <TIM_Base_SetConfig+0xe4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01b      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d017      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <TIM_Base_SetConfig+0xe8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <TIM_Base_SetConfig+0xec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00f      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a20      	ldr	r2, [pc, #128]	; (80034cc <TIM_Base_SetConfig+0xf0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00b      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <TIM_Base_SetConfig+0xf4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <TIM_Base_SetConfig+0xf8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_Base_SetConfig+0x8a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <TIM_Base_SetConfig+0xfc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <TIM_Base_SetConfig+0xe4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d103      	bne.n	80034ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	615a      	str	r2, [r3, #20]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400
 80034d8:	40014800 	.word	0x40014800

080034dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 030a 	bic.w	r3, r3, #10
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f043 0307 	orr.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e050      	b.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d013      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10c      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40014000 	.word	0x40014000

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e03f      	b.n	80037a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe f8ee 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fe11 	bl	8004380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800376c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800378c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	; 0x28
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d17c      	bne.n	80038c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_Transmit+0x2c>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e075      	b.n	80038ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x3e>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e06e      	b.n	80038ca <HAL_UART_Transmit+0x11c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003802:	f7fe faab 	bl	8001d5c <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d108      	bne.n	8003830 <HAL_UART_Transmit+0x82>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e003      	b.n	8003838 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003840:	e02a      	b.n	8003898 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fb51 	bl	8003ef4 <UART_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e036      	b.n	80038ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3302      	adds	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e007      	b.n	800388a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1cf      	bne.n	8003842 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fb21 	bl	8003ef4 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e006      	b.n	80038ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08c      	sub	sp, #48	; 0x30
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d152      	bne.n	8003992 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04b      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8003906:	2302      	movs	r3, #2
 8003908:	e044      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	461a      	mov	r2, r3
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fb56 	bl	8003fd0 <UART_Start_Receive_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800392a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800392e:	2b00      	cmp	r3, #0
 8003930:	d12c      	bne.n	800398c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b01      	cmp	r3, #1
 8003938:	d125      	bne.n	8003986 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f043 0310 	orr.w	r3, r3, #16
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003970:	627a      	str	r2, [r7, #36]	; 0x24
 8003972:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6a39      	ldr	r1, [r7, #32]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8003984:	e002      	b.n	800398c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800398c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003990:	e000      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3730      	adds	r7, #48	; 0x30
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0ba      	sub	sp, #232	; 0xe8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fc05 	bl	800420a <UART_Receive_IT>
      return;
 8003a00:	e256      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80de 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
 8003a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80d1 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
 8003a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
 8003a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0208 	orr.w	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 81ed 	beq.w	8003ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fb90 	bl	800420a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_UART_IRQHandler+0x17a>
 8003b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04f      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa98 	bl	800404c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d141      	bne.n	8003bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1d9      	bne.n	8003b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_UART_IRQHandler+0x3dc>)
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fa68 	bl	8002060 <HAL_DMA_Abort_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e00e      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f99a 	bl	8003ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00a      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f996 	bl	8003ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e006      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f992 	bl	8003ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bc2:	e170      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	bf00      	nop
    return;
 8003bc6:	e16e      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 814a 	bne.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8143 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 813c 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	f040 80b4 	bne.w	8003d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8140 	beq.w	8003eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c32:	429a      	cmp	r2, r3
 8003c34:	f080 8139 	bcs.w	8003eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	f000 8088 	beq.w	8003d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1d9      	bne.n	8003c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e1      	bne.n	8003c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e3      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e3      	bne.n	8003d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe f911 	bl	8001f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f001 f94e 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d74:	e099      	b.n	8003eaa <HAL_UART_IRQHandler+0x50e>
 8003d76:	bf00      	nop
 8003d78:	08004113 	.word	0x08004113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808b 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8086 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e44:	61fa      	str	r2, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	617b      	str	r3, [r7, #20]
   return(result);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f001 f8d6 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e64:	e023      	b.n	8003eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f95b 	bl	800413a <UART_Transmit_IT>
    return;
 8003e84:	e014      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f99b 	bl	80041da <UART_EndTransmit_IT>
    return;
 8003ea4:	e004      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eae:	bf00      	nop
  }
}
 8003eb0:	37e8      	adds	r7, #232	; 0xe8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b090      	sub	sp, #64	; 0x40
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f04:	e050      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d04c      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f14:	f7fd ff22 	bl	8001d5c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d241      	bcs.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f44:	637a      	str	r2, [r7, #52]	; 0x34
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	613b      	str	r3, [r7, #16]
   return(result);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f78:	623a      	str	r2, [r7, #32]
 8003f7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	69f9      	ldr	r1, [r7, #28]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00f      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d09f      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	; 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2222      	movs	r2, #34	; 0x22
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0220 	orr.w	r2, r2, #32
 800403c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b095      	sub	sp, #84	; 0x54
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004074:	643a      	str	r2, [r7, #64]	; 0x40
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800407a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	61fb      	str	r3, [r7, #28]
   return(result);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d119      	bne.n	80040f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	647b      	str	r3, [r7, #68]	; 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e4:	61ba      	str	r2, [r7, #24]
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	613b      	str	r3, [r7, #16]
   return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004106:	bf00      	nop
 8004108:	3754      	adds	r7, #84	; 0x54
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fed7 	bl	8003ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d13e      	bne.n	80041cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	d114      	bne.n	8004182 <UART_Transmit_IT+0x48>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d110      	bne.n	8004182 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]
 8004180:	e008      	b.n	8004194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6211      	str	r1, [r2, #32]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4619      	mov	r1, r3
 80041a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10f      	bne.n	80041c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fe5c 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b08c      	sub	sp, #48	; 0x30
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b22      	cmp	r3, #34	; 0x22
 800421c:	f040 80ab 	bne.w	8004376 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d117      	bne.n	800425a <UART_Receive_IT+0x50>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d113      	bne.n	800425a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004248:	b29a      	uxth	r2, r3
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
 8004258:	e026      	b.n	80042a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d007      	beq.n	800427e <UART_Receive_IT+0x74>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <UART_Receive_IT+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e008      	b.n	800429e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d15a      	bne.n	8004372 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0220 	bic.w	r2, r2, #32
 80042ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d135      	bne.n	8004368 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	613b      	str	r3, [r7, #16]
   return(result);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	623a      	str	r2, [r7, #32]
 8004324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	69f9      	ldr	r1, [r7, #28]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b10      	cmp	r3, #16
 8004342:	d10a      	bne.n	800435a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fe55 	bl	8005010 <HAL_UARTEx_RxEventCallback>
 8004366:	e002      	b.n	800436e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fdaf 	bl	8003ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e002      	b.n	8004378 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3730      	adds	r7, #48	; 0x30
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b0c0      	sub	sp, #256	; 0x100
 8004386:	af00      	add	r7, sp, #0
 8004388:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	68d9      	ldr	r1, [r3, #12]
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	ea40 0301 	orr.w	r3, r0, r1
 80043a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	431a      	orrs	r2, r3
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043d8:	f021 010c 	bic.w	r1, r1, #12
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043e6:	430b      	orrs	r3, r1
 80043e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	6999      	ldr	r1, [r3, #24]
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	ea40 0301 	orr.w	r3, r0, r1
 8004406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b8f      	ldr	r3, [pc, #572]	; (800464c <UART_SetConfig+0x2cc>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d005      	beq.n	8004420 <UART_SetConfig+0xa0>
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b8d      	ldr	r3, [pc, #564]	; (8004650 <UART_SetConfig+0x2d0>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d104      	bne.n	800442a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe fc92 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004424:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004428:	e003      	b.n	8004432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442a:	f7fe fc79 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800442e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	f040 810c 	bne.w	8004658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800444a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800444e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004452:	4622      	mov	r2, r4
 8004454:	462b      	mov	r3, r5
 8004456:	1891      	adds	r1, r2, r2
 8004458:	65b9      	str	r1, [r7, #88]	; 0x58
 800445a:	415b      	adcs	r3, r3
 800445c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004462:	4621      	mov	r1, r4
 8004464:	eb12 0801 	adds.w	r8, r2, r1
 8004468:	4629      	mov	r1, r5
 800446a:	eb43 0901 	adc.w	r9, r3, r1
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004482:	4690      	mov	r8, r2
 8004484:	4699      	mov	r9, r3
 8004486:	4623      	mov	r3, r4
 8004488:	eb18 0303 	adds.w	r3, r8, r3
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004490:	462b      	mov	r3, r5
 8004492:	eb49 0303 	adc.w	r3, r9, r3
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ae:	460b      	mov	r3, r1
 80044b0:	18db      	adds	r3, r3, r3
 80044b2:	653b      	str	r3, [r7, #80]	; 0x50
 80044b4:	4613      	mov	r3, r2
 80044b6:	eb42 0303 	adc.w	r3, r2, r3
 80044ba:	657b      	str	r3, [r7, #84]	; 0x54
 80044bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044c4:	f7fc fbe8 	bl	8000c98 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b61      	ldr	r3, [pc, #388]	; (8004654 <UART_SetConfig+0x2d4>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011c      	lsls	r4, r3, #4
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80044f0:	415b      	adcs	r3, r3
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044f8:	4641      	mov	r1, r8
 80044fa:	eb12 0a01 	adds.w	sl, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb43 0b01 	adc.w	fp, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004518:	4692      	mov	sl, r2
 800451a:	469b      	mov	fp, r3
 800451c:	4643      	mov	r3, r8
 800451e:	eb1a 0303 	adds.w	r3, sl, r3
 8004522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004526:	464b      	mov	r3, r9
 8004528:	eb4b 0303 	adc.w	r3, fp, r3
 800452c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800453c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004544:	460b      	mov	r3, r1
 8004546:	18db      	adds	r3, r3, r3
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	4613      	mov	r3, r2
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
 8004552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800455a:	f7fc fb9d 	bl	8000c98 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4611      	mov	r1, r2
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <UART_SetConfig+0x2d4>)
 8004566:	fba3 2301 	umull	r2, r3, r3, r1
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2264      	movs	r2, #100	; 0x64
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	1acb      	subs	r3, r1, r3
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <UART_SetConfig+0x2d4>)
 800457c:	fba3 2302 	umull	r2, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a4:	415b      	adcs	r3, r3
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	6339      	str	r1, [r7, #48]	; 0x30
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e0:	464b      	mov	r3, r9
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004600:	460b      	mov	r3, r1
 8004602:	18db      	adds	r3, r3, r3
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	4613      	mov	r3, r2
 8004608:	eb42 0303 	adc.w	r3, r2, r3
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004616:	f7fc fb3f 	bl	8000c98 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <UART_SetConfig+0x2d4>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	2164      	movs	r1, #100	; 0x64
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3332      	adds	r3, #50	; 0x32
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <UART_SetConfig+0x2d4>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	f003 0207 	and.w	r2, r3, #7
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4422      	add	r2, r4
 8004646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004648:	e105      	b.n	8004856 <UART_SetConfig+0x4d6>
 800464a:	bf00      	nop
 800464c:	40011000 	.word	0x40011000
 8004650:	40011400 	.word	0x40011400
 8004654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004662:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800466a:	4642      	mov	r2, r8
 800466c:	464b      	mov	r3, r9
 800466e:	1891      	adds	r1, r2, r2
 8004670:	6239      	str	r1, [r7, #32]
 8004672:	415b      	adcs	r3, r3
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	4641      	mov	r1, r8
 800467c:	1854      	adds	r4, r2, r1
 800467e:	4649      	mov	r1, r9
 8004680:	eb43 0501 	adc.w	r5, r3, r1
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046a0:	464b      	mov	r3, r9
 80046a2:	eb45 0303 	adc.w	r3, r5, r3
 80046a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046c6:	4629      	mov	r1, r5
 80046c8:	008b      	lsls	r3, r1, #2
 80046ca:	4621      	mov	r1, r4
 80046cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d0:	4621      	mov	r1, r4
 80046d2:	008a      	lsls	r2, r1, #2
 80046d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046d8:	f7fc fade 	bl	8000c98 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4b60      	ldr	r3, [pc, #384]	; (8004864 <UART_SetConfig+0x4e4>)
 80046e2:	fba3 2302 	umull	r2, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	011c      	lsls	r4, r3, #4
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	61b9      	str	r1, [r7, #24]
 8004704:	415b      	adcs	r3, r3
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6139      	str	r1, [r7, #16]
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004740:	464b      	mov	r3, r9
 8004742:	460a      	mov	r2, r1
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	67bb      	str	r3, [r7, #120]	; 0x78
 8004756:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004764:	4649      	mov	r1, r9
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476e:	4641      	mov	r1, r8
 8004770:	008a      	lsls	r2, r1, #2
 8004772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004776:	f7fc fa8f 	bl	8000c98 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <UART_SetConfig+0x4e4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a34      	ldr	r2, [pc, #208]	; (8004864 <UART_SetConfig+0x4e4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479e:	441c      	add	r4, r3
 80047a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a4:	2200      	movs	r2, #0
 80047a6:	673b      	str	r3, [r7, #112]	; 0x70
 80047a8:	677a      	str	r2, [r7, #116]	; 0x74
 80047aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047be:	4641      	mov	r1, r8
 80047c0:	1851      	adds	r1, r2, r1
 80047c2:	6039      	str	r1, [r7, #0]
 80047c4:	4649      	mov	r1, r9
 80047c6:	414b      	adcs	r3, r1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047d6:	4659      	mov	r1, fp
 80047d8:	00cb      	lsls	r3, r1, #3
 80047da:	4651      	mov	r1, sl
 80047dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e0:	4651      	mov	r1, sl
 80047e2:	00ca      	lsls	r2, r1, #3
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	4603      	mov	r3, r0
 80047ea:	4642      	mov	r2, r8
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f0:	464b      	mov	r3, r9
 80047f2:	460a      	mov	r2, r1
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
 8004804:	667a      	str	r2, [r7, #100]	; 0x64
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004812:	4649      	mov	r1, r9
 8004814:	008b      	lsls	r3, r1, #2
 8004816:	4641      	mov	r1, r8
 8004818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800481c:	4641      	mov	r1, r8
 800481e:	008a      	lsls	r2, r1, #2
 8004820:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004824:	f7fc fa38 	bl	8000c98 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <UART_SetConfig+0x4e4>)
 800482e:	fba3 1302 	umull	r1, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2164      	movs	r1, #100	; 0x64
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	3332      	adds	r3, #50	; 0x32
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <UART_SetConfig+0x4e4>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4422      	add	r2, r4
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	51eb851f 	.word	0x51eb851f

08004868 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 8004872:	2201      	movs	r2, #1
 8004874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004878:	4816      	ldr	r0, [pc, #88]	; (80048d4 <sendData+0x6c>)
 800487a:	f7fd fdaf 	bl	80023dc <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f829 	bl	80048dc <crc16>
 800488a:	4603      	mov	r3, r0
 800488c:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	89fa      	ldrh	r2, [r7, #14]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	b299      	uxth	r1, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	b2ca      	uxtb	r2, r1
 80048aa:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3302      	adds	r3, #2
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4807      	ldr	r0, [pc, #28]	; (80048d8 <sendData+0x70>)
 80048bc:	f7fe ff77 	bl	80037ae <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048c6:	4803      	ldr	r0, [pc, #12]	; (80048d4 <sendData+0x6c>)
 80048c8:	f7fd fd88 	bl	80023dc <HAL_GPIO_WritePin>

}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40020000 	.word	0x40020000
 80048d8:	200005c4 	.word	0x200005c4

080048dc <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80048e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ec:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 80048ee:	2300      	movs	r3, #0
 80048f0:	81bb      	strh	r3, [r7, #12]
 80048f2:	e022      	b.n	800493a <crc16+0x5e>
        crc ^= data[i];
 80048f4:	89bb      	ldrh	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	4053      	eors	r3, r2
 8004902:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004904:	2300      	movs	r3, #0
 8004906:	72fb      	strb	r3, [r7, #11]
 8004908:	e011      	b.n	800492e <crc16+0x52>
            if (crc & 0x0001) {
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <crc16+0x74>)
 800491c:	4053      	eors	r3, r2
 800491e:	81fb      	strh	r3, [r7, #14]
 8004920:	e002      	b.n	8004928 <crc16+0x4c>
            } else {
                crc >>= 1;
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8004928:	7afb      	ldrb	r3, [r7, #11]
 800492a:	3301      	adds	r3, #1
 800492c:	72fb      	strb	r3, [r7, #11]
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	2b07      	cmp	r3, #7
 8004932:	d9ea      	bls.n	800490a <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8004934:	89bb      	ldrh	r3, [r7, #12]
 8004936:	3301      	adds	r3, #1
 8004938:	81bb      	strh	r3, [r7, #12]
 800493a:	89ba      	ldrh	r2, [r7, #12]
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3d8      	bcc.n	80048f4 <crc16+0x18>
            }
        }
    }
    return crc;
 8004942:	89fb      	ldrh	r3, [r7, #14]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	ffffa001 	.word	0xffffa001

08004954 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <modbusException+0x38>)
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <modbusException+0x3c>)
 8004964:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <modbusException+0x38>)
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <modbusException+0x3c>)
 8004972:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 8004974:	4a06      	ldr	r2, [pc, #24]	; (8004990 <modbusException+0x3c>)
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 800497a:	2103      	movs	r1, #3
 800497c:	4804      	ldr	r0, [pc, #16]	; (8004990 <modbusException+0x3c>)
 800497e:	f7ff ff73 	bl	8004868 <sendData>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000660 	.word	0x20000660
 8004990:	20000760 	.word	0x20000760

08004994 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	460a      	mov	r2, r1
 800499e:	80fb      	strh	r3, [r7, #6]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 80049a4:	88bb      	ldrh	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <readHoldingRegs+0x1c>
 80049aa:	88bb      	ldrh	r3, [r7, #4]
 80049ac:	2b32      	cmp	r3, #50	; 0x32
 80049ae:	d904      	bls.n	80049ba <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 80049b0:	2003      	movs	r0, #3
 80049b2:	f7ff ffcf 	bl	8004954 <modbusException>
        return 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e04a      	b.n	8004a50 <readHoldingRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	88bb      	ldrh	r3, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	2b32      	cmp	r3, #50	; 0x32
 80049ca:	d904      	bls.n	80049d6 <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80049cc:	2002      	movs	r0, #2
 80049ce:	f7ff ffc1 	bl	8004954 <modbusException>
        return 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e03c      	b.n	8004a50 <readHoldingRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 80049d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049da:	2100      	movs	r1, #0
 80049dc:	481e      	ldr	r0, [pc, #120]	; (8004a58 <readHoldingRegs+0xc4>)
 80049de:	f002 f83f 	bl	8006a60 <memset>
    TxData[0] = SLAVE_ID;
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <readHoldingRegs+0xc4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <readHoldingRegs+0xc8>)
 80049ea:	785a      	ldrb	r2, [r3, #1]
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <readHoldingRegs+0xc4>)
 80049ee:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <readHoldingRegs+0xc4>)
 80049fa:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 80049fc:	2303      	movs	r3, #3
 80049fe:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e01b      	b.n	8004a3e <readHoldingRegs+0xaa>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <readHoldingRegs+0xcc>)
 8004a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b299      	uxth	r1, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	617a      	str	r2, [r7, #20]
 8004a18:	b2c9      	uxtb	r1, r1
 8004a1a:	4a0f      	ldr	r2, [pc, #60]	; (8004a58 <readHoldingRegs+0xc4>)
 8004a1c:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	4a0f      	ldr	r2, [pc, #60]	; (8004a60 <readHoldingRegs+0xcc>)
 8004a22:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	617a      	str	r2, [r7, #20]
 8004a2c:	b2c9      	uxtb	r1, r1
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <readHoldingRegs+0xc4>)
 8004a30:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	3301      	adds	r3, #1
 8004a36:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	88bb      	ldrh	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	dbdf      	blt.n	8004a06 <readHoldingRegs+0x72>
    }

    sendData(TxData, indx);
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	4803      	ldr	r0, [pc, #12]	; (8004a58 <readHoldingRegs+0xc4>)
 8004a4a:	f7ff ff0d 	bl	8004868 <sendData>
    return 1;
 8004a4e:	2301      	movs	r3, #1
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000760 	.word	0x20000760
 8004a5c:	20000660 	.word	0x20000660
 8004a60:	20000014 	.word	0x20000014

08004a64 <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 8004a74:	88bb      	ldrh	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <readInputRegs+0x1c>
 8004a7a:	88bb      	ldrh	r3, [r7, #4]
 8004a7c:	2b32      	cmp	r3, #50	; 0x32
 8004a7e:	d904      	bls.n	8004a8a <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f7ff ff67 	bl	8004954 <modbusException>
        return 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e04a      	b.n	8004b20 <readInputRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	88bb      	ldrh	r3, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	2b32      	cmp	r3, #50	; 0x32
 8004a9a:	d904      	bls.n	8004aa6 <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f7ff ff59 	bl	8004954 <modbusException>
        return 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e03c      	b.n	8004b20 <readInputRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8004aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aaa:	2100      	movs	r1, #0
 8004aac:	481e      	ldr	r0, [pc, #120]	; (8004b28 <readInputRegs+0xc4>)
 8004aae:	f001 ffd7 	bl	8006a60 <memset>
    TxData[0] = SLAVE_ID;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <readInputRegs+0xc4>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <readInputRegs+0xc8>)
 8004aba:	785a      	ldrb	r2, [r3, #1]
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <readInputRegs+0xc4>)
 8004abe:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8004ac0:	88bb      	ldrh	r3, [r7, #4]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <readInputRegs+0xc4>)
 8004aca:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004acc:	2303      	movs	r3, #3
 8004ace:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e01b      	b.n	8004b0e <readInputRegs+0xaa>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <readInputRegs+0xcc>)
 8004ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	617a      	str	r2, [r7, #20]
 8004ae8:	b2c9      	uxtb	r1, r1
 8004aea:	4a0f      	ldr	r2, [pc, #60]	; (8004b28 <readInputRegs+0xc4>)
 8004aec:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <readInputRegs+0xcc>)
 8004af2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	617a      	str	r2, [r7, #20]
 8004afc:	b2c9      	uxtb	r1, r1
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <readInputRegs+0xc4>)
 8004b00:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	3301      	adds	r3, #1
 8004b06:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	88bb      	ldrh	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	dbdf      	blt.n	8004ad6 <readInputRegs+0x72>
    }

    sendData(TxData, indx);
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	4803      	ldr	r0, [pc, #12]	; (8004b28 <readInputRegs+0xc4>)
 8004b1a:	f7ff fea5 	bl	8004868 <sendData>
    return 1;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000760 	.word	0x20000760
 8004b2c:	20000660 	.word	0x20000660
 8004b30:	20000078 	.word	0x20000078

08004b34 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	80fb      	strh	r3, [r7, #6]
 8004b40:	4613      	mov	r3, r2
 8004b42:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 8004b44:	88bb      	ldrh	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <readCoils+0x1e>
 8004b4a:	88bb      	ldrh	r3, [r7, #4]
 8004b4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b50:	d904      	bls.n	8004b5c <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8004b52:	2003      	movs	r0, #3
 8004b54:	f7ff fefe 	bl	8004954 <modbusException>
        return 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e080      	b.n	8004c5e <readCoils+0x12a>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	88bb      	ldrh	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	2bc7      	cmp	r3, #199	; 0xc7
 8004b6c:	d904      	bls.n	8004b78 <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004b6e:	2002      	movs	r0, #2
 8004b70:	f7ff fef0 	bl	8004954 <modbusException>
        return 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e072      	b.n	8004c5e <readCoils+0x12a>
    }

    memset(TxData, '\0', 256);
 8004b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	483a      	ldr	r0, [pc, #232]	; (8004c68 <readCoils+0x134>)
 8004b80:	f001 ff6e 	bl	8006a60 <memset>
    TxData[0] = SLAVE_ID;
 8004b84:	4b38      	ldr	r3, [pc, #224]	; (8004c68 <readCoils+0x134>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004b8a:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <readCoils+0x138>)
 8004b8c:	785a      	ldrb	r2, [r3, #1]
 8004b8e:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <readCoils+0x134>)
 8004b90:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 8004b92:	88bb      	ldrh	r3, [r7, #4]
 8004b94:	08db      	lsrs	r3, r3, #3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	88ba      	ldrh	r2, [r7, #4]
 8004b9c:	f002 0207 	and.w	r2, r2, #7
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	2a00      	cmp	r2, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2201      	movne	r2, #1
 8004ba8:	2200      	moveq	r2, #0
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	4413      	add	r3, r2
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <readCoils+0x134>)
 8004bb2:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e033      	b.n	8004c3a <readCoils+0x106>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8004bd2:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <readCoils+0x134>)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25a      	sxtb	r2, r3
 8004bdc:	4924      	ldr	r1, [pc, #144]	; (8004c70 <readCoils+0x13c>)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	440b      	add	r3, r1
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	8afb      	ldrh	r3, [r7, #22]
 8004be8:	fa41 f303 	asr.w	r3, r1, r3
 8004bec:	f003 0101 	and.w	r1, r3, #1
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	b2d9      	uxtb	r1, r3
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <readCoils+0x134>)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	460a      	mov	r2, r1
 8004c06:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
        bitPosition++;
 8004c0e:	8afb      	ldrh	r3, [r7, #22]
 8004c10:	3301      	adds	r3, #1
 8004c12:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b07      	cmp	r3, #7
 8004c18:	dd04      	ble.n	8004c24 <readCoils+0xf0>
            indxPosition = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
            indx++;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8004c24:	8afb      	ldrh	r3, [r7, #22]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d904      	bls.n	8004c34 <readCoils+0x100>
            bitPosition = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	82fb      	strh	r3, [r7, #22]
            startByte++;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	dbc7      	blt.n	8004bd2 <readCoils+0x9e>
        }
    }

    if (numCoils % 8 != 0) indx++;
 8004c42:	88bb      	ldrh	r3, [r7, #4]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <readCoils+0x120>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	4804      	ldr	r0, [pc, #16]	; (8004c68 <readCoils+0x134>)
 8004c58:	f7ff fe06 	bl	8004868 <sendData>
    return 1;
 8004c5c:	2301      	movs	r3, #1
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000760 	.word	0x20000760
 8004c6c:	20000660 	.word	0x20000660
 8004c70:	200000dc 	.word	0x200000dc

08004c74 <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	80fb      	strh	r3, [r7, #6]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b31      	cmp	r3, #49	; 0x31
 8004c88:	d904      	bls.n	8004c94 <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004c8a:	2002      	movs	r0, #2
 8004c8c:	f7ff fe62 	bl	8004954 <modbusException>
        return 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e020      	b.n	8004cd6 <writeSingleHoldingReg+0x62>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	4912      	ldr	r1, [pc, #72]	; (8004ce0 <writeSingleHoldingReg+0x6c>)
 8004c98:	88ba      	ldrh	r2, [r7, #4]
 8004c9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <writeSingleHoldingReg+0x74>)
 8004ca6:	785a      	ldrb	r2, [r3, #1]
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004caa:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <writeSingleHoldingReg+0x74>)
 8004cae:	789a      	ldrb	r2, [r3, #2]
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004cb2:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <writeSingleHoldingReg+0x74>)
 8004cb6:	78da      	ldrb	r2, [r3, #3]
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004cba:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <writeSingleHoldingReg+0x74>)
 8004cbe:	791a      	ldrb	r2, [r3, #4]
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004cc2:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <writeSingleHoldingReg+0x74>)
 8004cc6:	795a      	ldrb	r2, [r3, #5]
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004cca:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004ccc:	2106      	movs	r1, #6
 8004cce:	4805      	ldr	r0, [pc, #20]	; (8004ce4 <writeSingleHoldingReg+0x70>)
 8004cd0:	f7ff fdca 	bl	8004868 <sendData>
    return 1;
 8004cd4:	2301      	movs	r3, #1
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000014 	.word	0x20000014
 8004ce4:	20000760 	.word	0x20000760
 8004ce8:	20000660 	.word	0x20000660

08004cec <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	603a      	str	r2, [r7, #0]
 8004cf6:	80fb      	strh	r3, [r7, #6]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 8004cfc:	88bb      	ldrh	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <writeHoldingRegs+0x1c>
 8004d02:	88bb      	ldrh	r3, [r7, #4]
 8004d04:	2b7b      	cmp	r3, #123	; 0x7b
 8004d06:	d904      	bls.n	8004d12 <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8004d08:	2003      	movs	r0, #3
 8004d0a:	f7ff fe23 	bl	8004954 <modbusException>
        return 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e03f      	b.n	8004d92 <writeHoldingRegs+0xa6>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	88bb      	ldrh	r3, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	2b31      	cmp	r3, #49	; 0x31
 8004d22:	d904      	bls.n	8004d2e <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004d24:	2002      	movs	r0, #2
 8004d26:	f7ff fe15 	bl	8004954 <modbusException>
        return 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e031      	b.n	8004d92 <writeHoldingRegs+0xa6>
    }

    for (int i = 0; i < numRegs; i++) {
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e00e      	b.n	8004d52 <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	80f9      	strh	r1, [r7, #6]
 8004d42:	4619      	mov	r1, r3
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <writeHoldingRegs+0xb0>)
 8004d48:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	88bb      	ldrh	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	dbec      	blt.n	8004d34 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <writeHoldingRegs+0xb8>)
 8004d62:	785a      	ldrb	r2, [r3, #1]
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d66:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <writeHoldingRegs+0xb8>)
 8004d6a:	789a      	ldrb	r2, [r3, #2]
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d6e:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <writeHoldingRegs+0xb8>)
 8004d72:	78da      	ldrb	r2, [r3, #3]
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d76:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <writeHoldingRegs+0xb8>)
 8004d7a:	791a      	ldrb	r2, [r3, #4]
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d7e:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <writeHoldingRegs+0xb8>)
 8004d82:	795a      	ldrb	r2, [r3, #5]
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d86:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004d88:	2106      	movs	r1, #6
 8004d8a:	4805      	ldr	r0, [pc, #20]	; (8004da0 <writeHoldingRegs+0xb4>)
 8004d8c:	f7ff fd6c 	bl	8004868 <sendData>
    return 1;
 8004d90:	2301      	movs	r3, #1
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000014 	.word	0x20000014
 8004da0:	20000760 	.word	0x20000760
 8004da4:	20000660 	.word	0x20000660

08004da8 <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	460a      	mov	r2, r1
 8004db2:	80fb      	strh	r3, [r7, #6]
 8004db4:	4613      	mov	r3, r2
 8004db6:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	2bc7      	cmp	r3, #199	; 0xc7
 8004dbc:	d904      	bls.n	8004dc8 <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004dbe:	2002      	movs	r0, #2
 8004dc0:	f7ff fdc8 	bl	8004954 <modbusException>
        return 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e05c      	b.n	8004e82 <writeSingleCoil+0xda>
    }

    int bytePos = writeAddr / 8;
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8004dd8:	797b      	ldrb	r3, [r7, #5]
 8004dda:	2bff      	cmp	r3, #255	; 0xff
 8004ddc:	d116      	bne.n	8004e0c <writeSingleCoil+0x64>
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <writeSingleCoil+0xe4>)
 8004de0:	795b      	ldrb	r3, [r3, #5]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d112      	bne.n	8004e0c <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8004de6:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <writeSingleCoil+0xe8>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	b25a      	sxtb	r2, r3
 8004df0:	2101      	movs	r1, #1
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	b25b      	sxtb	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	b2d9      	uxtb	r1, r3
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <writeSingleCoil+0xe8>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	460a      	mov	r2, r1
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e020      	b.n	8004e4e <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 8004e0c:	797b      	ldrb	r3, [r7, #5]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d118      	bne.n	8004e44 <writeSingleCoil+0x9c>
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <writeSingleCoil+0xe4>)
 8004e14:	795b      	ldrb	r3, [r3, #5]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d114      	bne.n	8004e44 <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <writeSingleCoil+0xe8>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	b25a      	sxtb	r2, r3
 8004e24:	2101      	movs	r1, #1
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	b25b      	sxtb	r3, r3
 8004e32:	4013      	ands	r3, r2
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	b2d9      	uxtb	r1, r3
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <writeSingleCoil+0xe8>)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	460a      	mov	r2, r1
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e004      	b.n	8004e4e <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8004e44:	2003      	movs	r0, #3
 8004e46:	f7ff fd85 	bl	8004954 <modbusException>
        return 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e019      	b.n	8004e82 <writeSingleCoil+0xda>
    }

    TxData[0] = SLAVE_ID;
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <writeSingleCoil+0xec>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <writeSingleCoil+0xe4>)
 8004e56:	785a      	ldrb	r2, [r3, #1]
 8004e58:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <writeSingleCoil+0xec>)
 8004e5a:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <writeSingleCoil+0xe4>)
 8004e5e:	789a      	ldrb	r2, [r3, #2]
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <writeSingleCoil+0xec>)
 8004e62:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <writeSingleCoil+0xe4>)
 8004e66:	78da      	ldrb	r2, [r3, #3]
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <writeSingleCoil+0xec>)
 8004e6a:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <writeSingleCoil+0xec>)
 8004e6e:	797b      	ldrb	r3, [r7, #5]
 8004e70:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <writeSingleCoil+0xec>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8004e78:	2106      	movs	r1, #6
 8004e7a:	4806      	ldr	r0, [pc, #24]	; (8004e94 <writeSingleCoil+0xec>)
 8004e7c:	f7ff fcf4 	bl	8004868 <sendData>
    return 1;
 8004e80:	2301      	movs	r3, #1
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000660 	.word	0x20000660
 8004e90:	200000dc 	.word	0x200000dc
 8004e94:	20000760 	.word	0x20000760

08004e98 <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	603a      	str	r2, [r7, #0]
 8004ea2:	80fb      	strh	r3, [r7, #6]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 8004ea8:	88bb      	ldrh	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <writeMultiCoils+0x1e>
 8004eae:	88bb      	ldrh	r3, [r7, #4]
 8004eb0:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004eb4:	d904      	bls.n	8004ec0 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	f7ff fd4c 	bl	8004954 <modbusException>
        return 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e09c      	b.n	8004ffa <writeMultiCoils+0x162>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	2bc7      	cmp	r3, #199	; 0xc7
 8004ed0:	d904      	bls.n	8004edc <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8004ed2:	2002      	movs	r0, #2
 8004ed4:	f7ff fd3e 	bl	8004954 <modbusException>
        return 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e08e      	b.n	8004ffa <writeMultiCoils+0x162>
    }

    int startByte = startAddr / 8;
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t bitPosition = startAddr % 8;
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	847b      	strh	r3, [r7, #34]	; 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 8004eec:	88bb      	ldrh	r3, [r7, #4]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e052      	b.n	8004fba <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e047      	b.n	8004faa <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 8004f1a:	88bb      	ldrh	r3, [r7, #4]
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	da47      	bge.n	8004fb2 <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	fa42 f303 	asr.w	r3, r2, r3
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d012      	beq.n	8004f60 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 8004f3a:	4a32      	ldr	r2, [pc, #200]	; (8005004 <writeMultiCoils+0x16c>)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b25a      	sxtb	r2, r3
 8004f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	b2d9      	uxtb	r1, r3
 8004f54:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <writeMultiCoils+0x16c>)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	4413      	add	r3, r2
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e013      	b.n	8004f88 <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 8004f60:	4a28      	ldr	r2, [pc, #160]	; (8005004 <writeMultiCoils+0x16c>)
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b25a      	sxtb	r2, r3
 8004f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	b25b      	sxtb	r3, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	4013      	ands	r3, r2
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	b2d9      	uxtb	r1, r3
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <writeMultiCoils+0x16c>)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	4413      	add	r3, r2
 8004f84:	460a      	mov	r2, r1
 8004f86:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 8004f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	847b      	strh	r3, [r7, #34]	; 0x22
            if (bitPosition > 7) {
 8004f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d904      	bls.n	8004f9e <writeMultiCoils+0x106>
                bitPosition = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	847b      	strh	r3, [r7, #34]	; 0x22
                startByte++;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
            }
            indx++;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b07      	cmp	r3, #7
 8004fae:	ddb4      	ble.n	8004f1a <writeMultiCoils+0x82>
 8004fb0:	e000      	b.n	8004fb4 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 8004fb2:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	dba8      	blt.n	8004f14 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <writeMultiCoils+0x170>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <writeMultiCoils+0x174>)
 8004fca:	785a      	ldrb	r2, [r3, #1]
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <writeMultiCoils+0x170>)
 8004fce:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	; (800500c <writeMultiCoils+0x174>)
 8004fd2:	789a      	ldrb	r2, [r3, #2]
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <writeMultiCoils+0x170>)
 8004fd6:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <writeMultiCoils+0x174>)
 8004fda:	78da      	ldrb	r2, [r3, #3]
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <writeMultiCoils+0x170>)
 8004fde:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <writeMultiCoils+0x174>)
 8004fe2:	791a      	ldrb	r2, [r3, #4]
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <writeMultiCoils+0x170>)
 8004fe6:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <writeMultiCoils+0x174>)
 8004fea:	795a      	ldrb	r2, [r3, #5]
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <writeMultiCoils+0x170>)
 8004fee:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8004ff0:	2106      	movs	r1, #6
 8004ff2:	4805      	ldr	r0, [pc, #20]	; (8005008 <writeMultiCoils+0x170>)
 8004ff4:	f7ff fc38 	bl	8004868 <sendData>
    return 1;
 8004ff8:	2301      	movs	r3, #1
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	; 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200000dc 	.word	0x200000dc
 8005008:	20000760 	.word	0x20000760
 800500c:	20000660 	.word	0x20000660

08005010 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a66      	ldr	r2, [pc, #408]	; (80051bc <HAL_UARTEx_RxEventCallback+0x1ac>)
 8005022:	4293      	cmp	r3, r2
 8005024:	f040 80c7 	bne.w	80051b6 <HAL_UARTEx_RxEventCallback+0x1a6>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_UARTEx_RxEventCallback+0x26>
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005034:	d906      	bls.n	8005044 <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800503a:	4961      	ldr	r1, [pc, #388]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fe fc48 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005042:	e0b8      	b.n	80051b6 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8005044:	2200      	movs	r2, #0
 8005046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800504a:	485e      	ldr	r0, [pc, #376]	; (80051c4 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800504c:	f7fd f9c6 	bl	80023dc <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != SLAVE_ID) {
 8005050:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d006      	beq.n	8005066 <HAL_UARTEx_RxEventCallback+0x56>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800505c:	4958      	ldr	r1, [pc, #352]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fe fc37 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005064:	e0a7      	b.n	80051b6 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	3b01      	subs	r3, #1
 800506a:	4a55      	ldr	r2, [pc, #340]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800506c:	5cd3      	ldrb	r3, [r2, r3]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b21a      	sxth	r2, r3
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	3b02      	subs	r3, #2
 8005076:	4952      	ldr	r1, [pc, #328]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005078:	5ccb      	ldrb	r3, [r1, r3]
 800507a:	b21b      	sxth	r3, r3
 800507c:	4313      	orrs	r3, r2
 800507e:	b21b      	sxth	r3, r3
 8005080:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 8005082:	887b      	ldrh	r3, [r7, #2]
 8005084:	3b02      	subs	r3, #2
 8005086:	b29b      	uxth	r3, r3
 8005088:	4619      	mov	r1, r3
 800508a:	484d      	ldr	r0, [pc, #308]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800508c:	f7ff fc26 	bl	80048dc <crc16>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	89fb      	ldrh	r3, [r7, #14]
 8005096:	4293      	cmp	r3, r2
 8005098:	d006      	beq.n	80050a8 <HAL_UARTEx_RxEventCallback+0x98>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 800509a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800509e:	4948      	ldr	r1, [pc, #288]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fe fc16 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 80050a6:	e086      	b.n	80051b6 <HAL_UARTEx_RxEventCallback+0x1a6>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 80050a8:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	b21a      	sxth	r2, r3
 80050b0:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050be:	791b      	ldrb	r3, [r3, #4]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	b21a      	sxth	r2, r3
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050c6:	795b      	ldrb	r3, [r3, #5]
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050d6:	483b      	ldr	r0, [pc, #236]	; (80051c4 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80050d8:	f7fd f980 	bl	80023dc <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 80050dc:	4b38      	ldr	r3, [pc, #224]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	2b0f      	cmp	r3, #15
 80050e4:	d85d      	bhi.n	80051a2 <HAL_UARTEx_RxEventCallback+0x192>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <HAL_UARTEx_RxEventCallback+0xdc>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	0800512d 	.word	0x0800512d
 80050f0:	080051a3 	.word	0x080051a3
 80050f4:	0800513b 	.word	0x0800513b
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005157 	.word	0x08005157
 8005100:	08005167 	.word	0x08005167
 8005104:	080051a3 	.word	0x080051a3
 8005108:	080051a3 	.word	0x080051a3
 800510c:	080051a3 	.word	0x080051a3
 8005110:	080051a3 	.word	0x080051a3
 8005114:	080051a3 	.word	0x080051a3
 8005118:	080051a3 	.word	0x080051a3
 800511c:	080051a3 	.word	0x080051a3
 8005120:	080051a3 	.word	0x080051a3
 8005124:	08005187 	.word	0x08005187
 8005128:	08005195 	.word	0x08005195
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 800512c:	897a      	ldrh	r2, [r7, #10]
 800512e:	89bb      	ldrh	r3, [r7, #12]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fcfe 	bl	8004b34 <readCoils>
                break;
 8005138:	e037      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 800513a:	897a      	ldrh	r2, [r7, #10]
 800513c:	89bb      	ldrh	r3, [r7, #12]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fc27 	bl	8004994 <readHoldingRegs>
                break;
 8005146:	e030      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 8005148:	897a      	ldrh	r2, [r7, #10]
 800514a:	89bb      	ldrh	r3, [r7, #12]
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fc88 	bl	8004a64 <readInputRegs>
                break;
 8005154:	e029      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005158:	791a      	ldrb	r2, [r3, #4]
 800515a:	89bb      	ldrh	r3, [r7, #12]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fe22 	bl	8004da8 <writeSingleCoil>
                break;
 8005164:	e021      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 8005166:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	b21a      	sxth	r2, r3
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8005170:	795b      	ldrb	r3, [r3, #5]
 8005172:	b21b      	sxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b21b      	sxth	r3, r3
 8005178:	b29a      	uxth	r2, r3
 800517a:	89bb      	ldrh	r3, [r7, #12]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd78 	bl	8004c74 <writeSingleHoldingReg>
                break;
 8005184:	e011      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	89bb      	ldrh	r3, [r7, #12]
 800518a:	4a0f      	ldr	r2, [pc, #60]	; (80051c8 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fe83 	bl	8004e98 <writeMultiCoils>
                break;
 8005192:	e00a      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 8005194:	8979      	ldrh	r1, [r7, #10]
 8005196:	89bb      	ldrh	r3, [r7, #12]
 8005198:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <HAL_UARTEx_RxEventCallback+0x1bc>)
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fda6 	bl	8004cec <writeHoldingRegs>
                break;
 80051a0:	e003      	b.n	80051aa <HAL_UARTEx_RxEventCallback+0x19a>
            default:
                modbusException(ILLEGAL_FUNCTION);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f7ff fbd6 	bl	8004954 <modbusException>
                break;
 80051a8:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 80051aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ae:	4904      	ldr	r1, [pc, #16]	; (80051c0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe fb8e 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40011000 	.word	0x40011000
 80051c0:	20000660 	.word	0x20000660
 80051c4:	40020000 	.word	0x40020000
 80051c8:	20000667 	.word	0x20000667
 80051cc:	20000666 	.word	0x20000666

080051d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	2b84      	cmp	r3, #132	; 0x84
 80051e4:	d005      	beq.n	80051f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	3303      	adds	r3, #3
 80051f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005204:	f000 fade 	bl	80057c4 <vTaskStartScheduler>
  
  return osOK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	bd80      	pop	{r7, pc}

0800520e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800520e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005210:	b089      	sub	sp, #36	; 0x24
 8005212:	af04      	add	r7, sp, #16
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <osThreadCreate+0x54>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01c      	beq.n	8005262 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685c      	ldr	r4, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681d      	ldr	r5, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691e      	ldr	r6, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff ffc8 	bl	80051d0 <makeFreeRtosPriority>
 8005240:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800524a:	9202      	str	r2, [sp, #8]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	9100      	str	r1, [sp, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4632      	mov	r2, r6
 8005254:	4629      	mov	r1, r5
 8005256:	4620      	mov	r0, r4
 8005258:	f000 f8ed 	bl	8005436 <xTaskCreateStatic>
 800525c:	4603      	mov	r3, r0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e01c      	b.n	800529c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685c      	ldr	r4, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800526e:	b29e      	uxth	r6, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ffaa 	bl	80051d0 <makeFreeRtosPriority>
 800527c:	4602      	mov	r2, r0
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	9200      	str	r2, [sp, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	4632      	mov	r2, r6
 800528a:	4629      	mov	r1, r5
 800528c:	4620      	mov	r0, r4
 800528e:	f000 f92f 	bl	80054f0 <xTaskCreate>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	e000      	b.n	800529e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <osDelay+0x16>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	e000      	b.n	80052be <osDelay+0x18>
 80052bc:	2301      	movs	r3, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa4c 	bl	800575c <vTaskDelay>
  
  return osOK;
 80052c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f103 0208 	add.w	r2, r3, #8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 0208 	add.w	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f103 0208 	add.w	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d103      	bne.n	8005390 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e00c      	b.n	80053aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3308      	adds	r3, #8
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e002      	b.n	800539e <vListInsert+0x2e>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d2f6      	bcs.n	8005398 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6892      	ldr	r2, [r2, #8]
 80053f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6852      	ldr	r2, [r2, #4]
 8005402:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d103      	bne.n	8005416 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005436:	b580      	push	{r7, lr}
 8005438:	b08e      	sub	sp, #56	; 0x38
 800543a:	af04      	add	r7, sp, #16
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <xTaskCreateStatic+0x46>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800547c:	2354      	movs	r3, #84	; 0x54
 800547e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b54      	cmp	r3, #84	; 0x54
 8005484:	d00a      	beq.n	800549c <xTaskCreateStatic+0x66>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	61bb      	str	r3, [r7, #24]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800549c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01e      	beq.n	80054e2 <xTaskCreateStatic+0xac>
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01b      	beq.n	80054e2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054bc:	2300      	movs	r3, #0
 80054be:	9303      	str	r3, [sp, #12]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f850 	bl	800557a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054dc:	f000 f8d4 	bl	8005688 <prvAddNewTaskToReadyList>
 80054e0:	e001      	b.n	80054e6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054e6:	697b      	ldr	r3, [r7, #20]
	}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	; 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af04      	add	r7, sp, #16
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fec7 	bl	8006298 <pvPortMalloc>
 800550a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00e      	beq.n	8005530 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005512:	2054      	movs	r0, #84	; 0x54
 8005514:	f000 fec0 	bl	8006298 <pvPortMalloc>
 8005518:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
 8005526:	e005      	b.n	8005534 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	f000 ff81 	bl	8006430 <vPortFree>
 800552e:	e001      	b.n	8005534 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d017      	beq.n	800556a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	2300      	movs	r3, #0
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f80e 	bl	800557a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800555e:	69f8      	ldr	r0, [r7, #28]
 8005560:	f000 f892 	bl	8005688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	e002      	b.n	8005570 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005570:	69bb      	ldr	r3, [r7, #24]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005592:	3b01      	subs	r3, #1
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f023 0307 	bic.w	r3, r3, #7
 80055a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	617b      	str	r3, [r7, #20]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01f      	beq.n	8005608 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e012      	b.n	80055f4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	3334      	adds	r3, #52	; 0x34
 80055de:	460a      	mov	r2, r1
 80055e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d9e9      	bls.n	80055ce <prvInitialiseNewTask+0x54>
 80055fa:	e000      	b.n	80055fe <prvInitialiseNewTask+0x84>
			{
				break;
 80055fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005606:	e003      	b.n	8005610 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	2b06      	cmp	r3, #6
 8005614:	d901      	bls.n	800561a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005616:	2306      	movs	r3, #6
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2200      	movs	r2, #0
 800562a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	3304      	adds	r3, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe6c 	bl	800530e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	3318      	adds	r3, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fe67 	bl	800530e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	f1c3 0207 	rsb	r2, r3, #7
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2200      	movs	r2, #0
 800565a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	69b8      	ldr	r0, [r7, #24]
 800566a:	f000 fc05 	bl	8005e78 <pxPortInitialiseStack>
 800566e:	4602      	mov	r2, r0
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005690:	f000 fd20 	bl	80060d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <prvAddNewTaskToReadyList+0xb8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a29      	ldr	r2, [pc, #164]	; (8005740 <prvAddNewTaskToReadyList+0xb8>)
 800569c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800569e:	4b29      	ldr	r3, [pc, #164]	; (8005744 <prvAddNewTaskToReadyList+0xbc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <prvAddNewTaskToReadyList+0xbc>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <prvAddNewTaskToReadyList+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d110      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b4:	f000 fabc 	bl	8005c30 <prvInitialiseTaskLists>
 80056b8:	e00d      	b.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <prvAddNewTaskToReadyList+0xc0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056c2:	4b20      	ldr	r3, [pc, #128]	; (8005744 <prvAddNewTaskToReadyList+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d802      	bhi.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <prvAddNewTaskToReadyList+0xbc>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <prvAddNewTaskToReadyList+0xc4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <prvAddNewTaskToReadyList+0xc4>)
 80056de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	2201      	movs	r2, #1
 80056e6:	409a      	lsls	r2, r3
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <prvAddNewTaskToReadyList+0xcc>)
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7ff fe0d 	bl	8005328 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800570e:	f000 fd11 	bl	8006134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <prvAddNewTaskToReadyList+0xc0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <prvAddNewTaskToReadyList+0xbc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d207      	bcs.n	8005738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvAddNewTaskToReadyList+0xd0>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000960 	.word	0x20000960
 8005744:	20000860 	.word	0x20000860
 8005748:	2000096c 	.word	0x2000096c
 800574c:	2000097c 	.word	0x2000097c
 8005750:	20000968 	.word	0x20000968
 8005754:	20000864 	.word	0x20000864
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d017      	beq.n	800579e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <vTaskDelay+0x60>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <vTaskDelay+0x30>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60bb      	str	r3, [r7, #8]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800578c:	f000 f87a 	bl	8005884 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005790:	2100      	movs	r1, #0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fb0a 	bl	8005dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005798:	f000 f882 	bl	80058a0 <xTaskResumeAll>
 800579c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d107      	bne.n	80057b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <vTaskDelay+0x64>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000988 	.word	0x20000988
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057d2:	463a      	mov	r2, r7
 80057d4:	1d39      	adds	r1, r7, #4
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fb fc14 	bl	8001008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	9202      	str	r2, [sp, #8]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	460a      	mov	r2, r1
 80057f2:	491e      	ldr	r1, [pc, #120]	; (800586c <vTaskStartScheduler+0xa8>)
 80057f4:	481e      	ldr	r0, [pc, #120]	; (8005870 <vTaskStartScheduler+0xac>)
 80057f6:	f7ff fe1e 	bl	8005436 <xTaskCreateStatic>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <vTaskStartScheduler+0xb0>)
 80057fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <vTaskStartScheduler+0xb0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e001      	b.n	8005812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d116      	bne.n	8005846 <vTaskStartScheduler+0x82>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	613b      	str	r3, [r7, #16]
}
 800582a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <vTaskStartScheduler+0xb4>)
 800582e:	f04f 32ff 	mov.w	r2, #4294967295
 8005832:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <vTaskStartScheduler+0xb8>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800583a:	4b11      	ldr	r3, [pc, #68]	; (8005880 <vTaskStartScheduler+0xbc>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005840:	f000 fba6 	bl	8005f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005844:	e00e      	b.n	8005864 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d10a      	bne.n	8005864 <vTaskStartScheduler+0xa0>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <vTaskStartScheduler+0x9e>
}
 8005864:	bf00      	nop
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	0800b3a8 	.word	0x0800b3a8
 8005870:	08005c01 	.word	0x08005c01
 8005874:	20000984 	.word	0x20000984
 8005878:	20000980 	.word	0x20000980
 800587c:	2000096c 	.word	0x2000096c
 8005880:	20000964 	.word	0x20000964

08005884 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <vTaskSuspendAll+0x18>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a03      	ldr	r2, [pc, #12]	; (800589c <vTaskSuspendAll+0x18>)
 8005890:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000988 	.word	0x20000988

080058a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058ae:	4b41      	ldr	r3, [pc, #260]	; (80059b4 <xTaskResumeAll+0x114>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <xTaskResumeAll+0x2c>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	603b      	str	r3, [r7, #0]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058cc:	f000 fc02 	bl	80060d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058d0:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <xTaskResumeAll+0x114>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4a37      	ldr	r2, [pc, #220]	; (80059b4 <xTaskResumeAll+0x114>)
 80058d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <xTaskResumeAll+0x114>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d161      	bne.n	80059a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058e2:	4b35      	ldr	r3, [pc, #212]	; (80059b8 <xTaskResumeAll+0x118>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d05d      	beq.n	80059a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ea:	e02e      	b.n	800594a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <xTaskResumeAll+0x11c>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3318      	adds	r3, #24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fd72 	bl	80053e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fd6d 	bl	80053e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <xTaskResumeAll+0x120>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <xTaskResumeAll+0x120>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <xTaskResumeAll+0x124>)
 8005928:	441a      	add	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7ff fcf9 	bl	8005328 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <xTaskResumeAll+0x128>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005944:	4b21      	ldr	r3, [pc, #132]	; (80059cc <xTaskResumeAll+0x12c>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <xTaskResumeAll+0x11c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1cc      	bne.n	80058ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005958:	f000 fa08 	bl	8005d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800595c:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <xTaskResumeAll+0x130>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d010      	beq.n	800598a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005968:	f000 f836 	bl	80059d8 <xTaskIncrementTick>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005972:	4b16      	ldr	r3, [pc, #88]	; (80059cc <xTaskResumeAll+0x12c>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3b01      	subs	r3, #1
 800597c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f1      	bne.n	8005968 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <xTaskResumeAll+0x130>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800598a:	4b10      	ldr	r3, [pc, #64]	; (80059cc <xTaskResumeAll+0x12c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005992:	2301      	movs	r3, #1
 8005994:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005996:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <xTaskResumeAll+0x134>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059a6:	f000 fbc5 	bl	8006134 <vPortExitCritical>

	return xAlreadyYielded;
 80059aa:	68bb      	ldr	r3, [r7, #8]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000988 	.word	0x20000988
 80059b8:	20000960 	.word	0x20000960
 80059bc:	20000920 	.word	0x20000920
 80059c0:	20000968 	.word	0x20000968
 80059c4:	20000864 	.word	0x20000864
 80059c8:	20000860 	.word	0x20000860
 80059cc:	20000974 	.word	0x20000974
 80059d0:	20000970 	.word	0x20000970
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e2:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <xTaskIncrementTick+0x144>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 808e 	bne.w	8005b08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <xTaskIncrementTick+0x148>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059f4:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <xTaskIncrementTick+0x148>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d120      	bne.n	8005a42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a00:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <xTaskIncrementTick+0x46>
 8005a20:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <xTaskIncrementTick+0x150>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3e      	ldr	r2, [pc, #248]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4a3e      	ldr	r2, [pc, #248]	; (8005b28 <xTaskIncrementTick+0x150>)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <xTaskIncrementTick+0x154>)
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	f000 f995 	bl	8005d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a42:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d348      	bcc.n	8005ade <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a56:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5c:	601a      	str	r2, [r3, #0]
					break;
 8005a5e:	e03e      	b.n	8005ade <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a60:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <xTaskIncrementTick+0x14c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d203      	bcs.n	8005a80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a78:	4a2d      	ldr	r2, [pc, #180]	; (8005b30 <xTaskIncrementTick+0x158>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a7e:	e02e      	b.n	8005ade <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fcac 	bl	80053e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3318      	adds	r3, #24
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fca3 	bl	80053e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	4b23      	ldr	r3, [pc, #140]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <xTaskIncrementTick+0x15c>)
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005abc:	441a      	add	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7ff fc2f 	bl	8005328 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3b9      	bcc.n	8005a4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005adc:	e7b6      	b.n	8005a4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <xTaskIncrementTick+0x164>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae4:	4914      	ldr	r1, [pc, #80]	; (8005b38 <xTaskIncrementTick+0x160>)
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d901      	bls.n	8005afa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <xTaskIncrementTick+0x168>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e004      	b.n	8005b12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <xTaskIncrementTick+0x16c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a0d      	ldr	r2, [pc, #52]	; (8005b44 <xTaskIncrementTick+0x16c>)
 8005b10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000988 	.word	0x20000988
 8005b20:	20000964 	.word	0x20000964
 8005b24:	20000918 	.word	0x20000918
 8005b28:	2000091c 	.word	0x2000091c
 8005b2c:	20000978 	.word	0x20000978
 8005b30:	20000980 	.word	0x20000980
 8005b34:	20000968 	.word	0x20000968
 8005b38:	20000864 	.word	0x20000864
 8005b3c:	20000860 	.word	0x20000860
 8005b40:	20000974 	.word	0x20000974
 8005b44:	20000970 	.word	0x20000970

08005b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4e:	4b27      	ldr	r3, [pc, #156]	; (8005bec <vTaskSwitchContext+0xa4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b56:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <vTaskSwitchContext+0xa8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b5c:	e03f      	b.n	8005bde <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <vTaskSwitchContext+0xa8>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <vTaskSwitchContext+0xac>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	fab3 f383 	clz	r3, r3
 8005b70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	f1c3 031f 	rsb	r3, r3, #31
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <vTaskSwitchContext+0xb0>)
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskSwitchContext+0x5a>
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <vTaskSwitchContext+0xb0>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d104      	bne.n	8005bd4 <vTaskSwitchContext+0x8c>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <vTaskSwitchContext+0xb4>)
 8005bdc:	6013      	str	r3, [r2, #0]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000988 	.word	0x20000988
 8005bf0:	20000974 	.word	0x20000974
 8005bf4:	20000968 	.word	0x20000968
 8005bf8:	20000864 	.word	0x20000864
 8005bfc:	20000860 	.word	0x20000860

08005c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c08:	f000 f852 	bl	8005cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <prvIdleTask+0x28>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d9f9      	bls.n	8005c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <prvIdleTask+0x2c>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c24:	e7f0      	b.n	8005c08 <prvIdleTask+0x8>
 8005c26:	bf00      	nop
 8005c28:	20000864 	.word	0x20000864
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	e00c      	b.n	8005c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <prvInitialiseTaskLists+0x60>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fb3f 	bl	80052ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3301      	adds	r3, #1
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d9ef      	bls.n	8005c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c5c:	480d      	ldr	r0, [pc, #52]	; (8005c94 <prvInitialiseTaskLists+0x64>)
 8005c5e:	f7ff fb36 	bl	80052ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c62:	480d      	ldr	r0, [pc, #52]	; (8005c98 <prvInitialiseTaskLists+0x68>)
 8005c64:	f7ff fb33 	bl	80052ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c68:	480c      	ldr	r0, [pc, #48]	; (8005c9c <prvInitialiseTaskLists+0x6c>)
 8005c6a:	f7ff fb30 	bl	80052ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c6e:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <prvInitialiseTaskLists+0x70>)
 8005c70:	f7ff fb2d 	bl	80052ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c74:	480b      	ldr	r0, [pc, #44]	; (8005ca4 <prvInitialiseTaskLists+0x74>)
 8005c76:	f7ff fb2a 	bl	80052ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <prvInitialiseTaskLists+0x78>)
 8005c7c:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <prvInitialiseTaskLists+0x64>)
 8005c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvInitialiseTaskLists+0x7c>)
 8005c82:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <prvInitialiseTaskLists+0x68>)
 8005c84:	601a      	str	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000864 	.word	0x20000864
 8005c94:	200008f0 	.word	0x200008f0
 8005c98:	20000904 	.word	0x20000904
 8005c9c:	20000920 	.word	0x20000920
 8005ca0:	20000934 	.word	0x20000934
 8005ca4:	2000094c 	.word	0x2000094c
 8005ca8:	20000918 	.word	0x20000918
 8005cac:	2000091c 	.word	0x2000091c

08005cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb6:	e019      	b.n	8005cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb8:	f000 fa0c 	bl	80060d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <prvCheckTasksWaitingTermination+0x50>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fb8a 	bl	80053e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <prvCheckTasksWaitingTermination+0x54>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <prvCheckTasksWaitingTermination+0x54>)
 8005cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <prvCheckTasksWaitingTermination+0x58>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <prvCheckTasksWaitingTermination+0x58>)
 8005ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ce2:	f000 fa27 	bl	8006134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f810 	bl	8005d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <prvCheckTasksWaitingTermination+0x58>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e1      	bne.n	8005cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000934 	.word	0x20000934
 8005d04:	20000960 	.word	0x20000960
 8005d08:	20000948 	.word	0x20000948

08005d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb84 	bl	8006430 <vPortFree>
				vPortFree( pxTCB );
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fb81 	bl	8006430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d2e:	e018      	b.n	8005d62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d103      	bne.n	8005d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fb78 	bl	8006430 <vPortFree>
	}
 8005d40:	e00f      	b.n	8005d62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d00a      	beq.n	8005d62 <prvDeleteTCB+0x56>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <prvDeleteTCB+0x54>
	}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d84:	e008      	b.n	8005d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20000918 	.word	0x20000918
 8005da8:	20000980 	.word	0x20000980

08005dac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dbc:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fb0d 	bl	80053e2 <uxListRemove>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005dce:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4013      	ands	r3, r2
 8005de2:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005de4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d10a      	bne.n	8005e04 <prvAddCurrentTaskToDelayedList+0x58>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df4:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	481a      	ldr	r0, [pc, #104]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dfe:	f7ff fa93 	bl	8005328 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e02:	e026      	b.n	8005e52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4413      	add	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d209      	bcs.n	8005e30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1c:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7ff faa1 	bl	8005370 <vListInsert>
}
 8005e2e:	e010      	b.n	8005e52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7ff fa97 	bl	8005370 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d202      	bcs.n	8005e52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e4c:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6013      	str	r3, [r2, #0]
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000964 	.word	0x20000964
 8005e60:	20000860 	.word	0x20000860
 8005e64:	20000968 	.word	0x20000968
 8005e68:	2000094c 	.word	0x2000094c
 8005e6c:	2000091c 	.word	0x2000091c
 8005e70:	20000918 	.word	0x20000918
 8005e74:	20000980 	.word	0x20000980

08005e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3b04      	subs	r3, #4
 8005e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b04      	subs	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ea8:	4a0c      	ldr	r2, [pc, #48]	; (8005edc <pxPortInitialiseStack+0x64>)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b14      	subs	r3, #20
 8005eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f06f 0202 	mvn.w	r2, #2
 8005ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3b20      	subs	r3, #32
 8005ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ece:	68fb      	ldr	r3, [r7, #12]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	08005ee1 	.word	0x08005ee1

08005ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eea:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <prvTaskExitError+0x54>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef2:	d00a      	beq.n	8005f0a <prvTaskExitError+0x2a>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <prvTaskExitError+0x28>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60bb      	str	r3, [r7, #8]
}
 8005f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f1e:	bf00      	nop
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0fc      	beq.n	8005f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	200000f8 	.word	0x200000f8
	...

08005f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <pxCurrentTCBConst2>)
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	f380 8809 	msr	PSP, r0
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8811 	msr	BASEPRI, r0
 8005f5a:	4770      	bx	lr
 8005f5c:	f3af 8000 	nop.w

08005f60 <pxCurrentTCBConst2>:
 8005f60:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f68:	4808      	ldr	r0, [pc, #32]	; (8005f8c <prvPortStartFirstTask+0x24>)
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f380 8808 	msr	MSP, r0
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8814 	msr	CONTROL, r0
 8005f7a:	b662      	cpsie	i
 8005f7c:	b661      	cpsie	f
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	df00      	svc	0
 8005f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed08 	.word	0xe000ed08

08005f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f96:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <xPortStartScheduler+0x120>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	; (80060b4 <xPortStartScheduler+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10a      	bne.n	8005fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <xPortStartScheduler+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <xPortStartScheduler+0x12c>)
 8005fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <xPortStartScheduler+0x130>)
 8005ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ffe:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <xPortStartScheduler+0x134>)
 8006000:	2207      	movs	r2, #7
 8006002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006004:	e009      	b.n	800601a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <xPortStartScheduler+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3b01      	subs	r3, #1
 800600c:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <xPortStartScheduler+0x134>)
 800600e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d0ef      	beq.n	8006006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006026:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1c3 0307 	rsb	r3, r3, #7
 800602e:	2b04      	cmp	r3, #4
 8006030:	d00a      	beq.n	8006048 <xPortStartScheduler+0xb8>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60bb      	str	r3, [r7, #8]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <xPortStartScheduler+0x134>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <xPortStartScheduler+0x134>)
 8006050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <xPortStartScheduler+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <xPortStartScheduler+0x134>)
 800605c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <xPortStartScheduler+0x138>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <xPortStartScheduler+0x138>)
 800606c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <xPortStartScheduler+0x138>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <xPortStartScheduler+0x138>)
 8006078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800607c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800607e:	f000 f8dd 	bl	800623c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <xPortStartScheduler+0x13c>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006088:	f000 f8fc 	bl	8006284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <xPortStartScheduler+0x140>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <xPortStartScheduler+0x140>)
 8006092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006098:	f7ff ff66 	bl	8005f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800609c:	f7ff fd54 	bl	8005b48 <vTaskSwitchContext>
	prvTaskExitError();
 80060a0:	f7ff ff1e 	bl	8005ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000ed00 	.word	0xe000ed00
 80060b4:	410fc271 	.word	0x410fc271
 80060b8:	410fc270 	.word	0x410fc270
 80060bc:	e000e400 	.word	0xe000e400
 80060c0:	2000098c 	.word	0x2000098c
 80060c4:	20000990 	.word	0x20000990
 80060c8:	e000ed20 	.word	0xe000ed20
 80060cc:	200000f8 	.word	0x200000f8
 80060d0:	e000ef34 	.word	0xe000ef34

080060d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	607b      	str	r3, [r7, #4]
}
 80060ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <vPortEnterCritical+0x58>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <vPortEnterCritical+0x58>)
 80060f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <vPortEnterCritical+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10f      	bne.n	8006120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <vPortEnterCritical+0x5c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <vPortEnterCritical+0x4c>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vPortEnterCritical+0x4a>
	}
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	200000f8 	.word	0x200000f8
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <vPortExitCritical+0x50>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <vPortExitCritical+0x24>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	607b      	str	r3, [r7, #4]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vPortExitCritical+0x50>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <vPortExitCritical+0x50>)
 8006160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <vPortExitCritical+0x50>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <vPortExitCritical+0x42>
 800616a:	2300      	movs	r3, #0
 800616c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	200000f8 	.word	0x200000f8
	...

08006190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006190:	f3ef 8009 	mrs	r0, PSP
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <pxCurrentTCBConst>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f01e 0f10 	tst.w	lr, #16
 80061a0:	bf08      	it	eq
 80061a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061b4:	f380 8811 	msr	BASEPRI, r0
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f7ff fcc2 	bl	8005b48 <vTaskSwitchContext>
 80061c4:	f04f 0000 	mov.w	r0, #0
 80061c8:	f380 8811 	msr	BASEPRI, r0
 80061cc:	bc09      	pop	{r0, r3}
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	6808      	ldr	r0, [r1, #0]
 80061d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d6:	f01e 0f10 	tst.w	lr, #16
 80061da:	bf08      	it	eq
 80061dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061e0:	f380 8809 	msr	PSP, r0
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst>:
 80061f0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
}
 8006210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006212:	f7ff fbe1 	bl	80059d8 <xTaskIncrementTick>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <SysTick_Handler+0x40>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f383 8811 	msr	BASEPRI, r3
}
 800622e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <vPortSetupTimerInterrupt+0x38>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortSetupTimerInterrupt+0x3c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <vPortSetupTimerInterrupt+0x40>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	099b      	lsrs	r3, r3, #6
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <vPortSetupTimerInterrupt+0x44>)
 800625a:	3b01      	subs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	e000e010 	.word	0xe000e010
 8006274:	e000e018 	.word	0xe000e018
 8006278:	20000008 	.word	0x20000008
 800627c:	10624dd3 	.word	0x10624dd3
 8006280:	e000e014 	.word	0xe000e014

08006284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006294 <vPortEnableVFP+0x10>
 8006288:	6801      	ldr	r1, [r0, #0]
 800628a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800628e:	6001      	str	r1, [r0, #0]
 8006290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006292:	bf00      	nop
 8006294:	e000ed88 	.word	0xe000ed88

08006298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062a4:	f7ff faee 	bl	8005884 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062a8:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <pvPortMalloc+0x180>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062b0:	f000 f920 	bl	80064f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062b4:	4b59      	ldr	r3, [pc, #356]	; (800641c <pvPortMalloc+0x184>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8093 	bne.w	80063e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01d      	beq.n	8006304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062c8:	2208      	movs	r2, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f023 0307 	bic.w	r3, r3, #7
 80062e0:	3308      	adds	r3, #8
 80062e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <pvPortMalloc+0x6c>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	617b      	str	r3, [r7, #20]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d06e      	beq.n	80063e8 <pvPortMalloc+0x150>
 800630a:	4b45      	ldr	r3, [pc, #276]	; (8006420 <pvPortMalloc+0x188>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d869      	bhi.n	80063e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006314:	4b43      	ldr	r3, [pc, #268]	; (8006424 <pvPortMalloc+0x18c>)
 8006316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <pvPortMalloc+0x18c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631e:	e004      	b.n	800632a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <pvPortMalloc+0xa4>
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f1      	bne.n	8006320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800633c:	4b36      	ldr	r3, [pc, #216]	; (8006418 <pvPortMalloc+0x180>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	429a      	cmp	r2, r3
 8006344:	d050      	beq.n	80063e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2208      	movs	r2, #8
 800634c:	4413      	add	r3, r2
 800634e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	2308      	movs	r3, #8
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	429a      	cmp	r2, r3
 8006366:	d91f      	bls.n	80063a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <pvPortMalloc+0xf8>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	613b      	str	r3, [r7, #16]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1ad2      	subs	r2, r2, r3
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063a2:	69b8      	ldr	r0, [r7, #24]
 80063a4:	f000 f908 	bl	80065b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <pvPortMalloc+0x188>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <pvPortMalloc+0x188>)
 80063b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <pvPortMalloc+0x188>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <pvPortMalloc+0x190>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d203      	bcs.n	80063ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063c2:	4b17      	ldr	r3, [pc, #92]	; (8006420 <pvPortMalloc+0x188>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <pvPortMalloc+0x190>)
 80063c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <pvPortMalloc+0x184>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <pvPortMalloc+0x194>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a11      	ldr	r2, [pc, #68]	; (800642c <pvPortMalloc+0x194>)
 80063e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063e8:	f7ff fa5a 	bl	80058a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <pvPortMalloc+0x174>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60fb      	str	r3, [r7, #12]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <pvPortMalloc+0x172>
	return pvReturn;
 800640c:	69fb      	ldr	r3, [r7, #28]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	2000459c 	.word	0x2000459c
 800641c:	200045b0 	.word	0x200045b0
 8006420:	200045a0 	.word	0x200045a0
 8006424:	20004594 	.word	0x20004594
 8006428:	200045a4 	.word	0x200045a4
 800642c:	200045a8 	.word	0x200045a8

08006430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d04d      	beq.n	80064de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006442:	2308      	movs	r3, #8
 8006444:	425b      	negs	r3, r3
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <vPortFree+0xb8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <vPortFree+0x44>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <vPortFree+0x62>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60bb      	str	r3, [r7, #8]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <vPortFree+0xb8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <vPortFree+0xb8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	401a      	ands	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064b8:	f7ff f9e4 	bl	8005884 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <vPortFree+0xbc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4413      	add	r3, r2
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <vPortFree+0xbc>)
 80064c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f000 f874 	bl	80065b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <vPortFree+0xc0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <vPortFree+0xc0>)
 80064d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064da:	f7ff f9e1 	bl	80058a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200045b0 	.word	0x200045b0
 80064ec:	200045a0 	.word	0x200045a0
 80064f0:	200045ac 	.word	0x200045ac

080064f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <prvHeapInit+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00c      	beq.n	8006528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <prvHeapInit+0xac>)
 8006524:	4413      	add	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <prvHeapInit+0xb0>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <prvHeapInit+0xb0>)
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4413      	add	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006540:	2208      	movs	r2, #8
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <prvHeapInit+0xb4>)
 8006554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <prvHeapInit+0xb4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <prvHeapInit+0xb4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvHeapInit+0xb4>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <prvHeapInit+0xb8>)
 8006582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <prvHeapInit+0xbc>)
 800658a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <prvHeapInit+0xc0>)
 800658e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20000994 	.word	0x20000994
 80065a4:	20004594 	.word	0x20004594
 80065a8:	2000459c 	.word	0x2000459c
 80065ac:	200045a4 	.word	0x200045a4
 80065b0:	200045a0 	.word	0x200045a0
 80065b4:	200045b0 	.word	0x200045b0

080065b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <prvInsertBlockIntoFreeList+0xac>)
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <prvInsertBlockIntoFreeList+0x14>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d8f7      	bhi.n	80065c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d108      	bne.n	80065fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	441a      	add	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d118      	bne.n	8006640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <prvInsertBlockIntoFreeList+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d00d      	beq.n	8006636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	441a      	add	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e008      	b.n	8006648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvInsertBlockIntoFreeList+0xb0>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e003      	b.n	8006648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d002      	beq.n	8006656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20004594 	.word	0x20004594
 8006668:	2000459c 	.word	0x2000459c

0800666c <microDelay>:
bool emergencyMotorStopReg = false;

// External TIM handle declared in main.c
extern TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <microDelay+0x30>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800667e:	bf00      	nop
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <microDelay+0x30>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3f9      	bcc.n	8006680 <microDelay+0x14>
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000057c 	.word	0x2000057c

080066a0 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 80066aa:	4a04      	ldr	r2, [pc, #16]	; (80066bc <setAcceleration+0x1c>)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	200045b8 	.word	0x200045b8

080066c0 <setRPM>:

void setRPM(volatile float rpm, int steps) {
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80066ca:	6038      	str	r0, [r7, #0]
    volatile float speed = (rpm * steps) / 60.0f;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066de:	eddf 6a07 	vldr	s13, [pc, #28]	; 80066fc <setRPM+0x3c>
 80066e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066e6:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <setRPM+0x40>)
 80066ee:	6013      	str	r3, [r2, #0]

}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	42700000 	.word	0x42700000
 8006700:	200045bc 	.word	0x200045bc
 8006704:	00000000 	.word	0x00000000

08006708 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 800670c:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <computeNewSpeed+0xf0>)
 800670e:	ed93 7a00 	vldr	s14, [r3]
 8006712:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <computeNewSpeed+0xf4>)
 8006714:	edd3 7a00 	vldr	s15, [r3]
 8006718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006720:	d51a      	bpl.n	8006758 <computeNewSpeed+0x50>
        _speed += _acceleration;
 8006722:	4b37      	ldr	r3, [pc, #220]	; (8006800 <computeNewSpeed+0xf8>)
 8006724:	ed93 7a00 	vldr	s14, [r3]
 8006728:	4b33      	ldr	r3, [pc, #204]	; (80067f8 <computeNewSpeed+0xf0>)
 800672a:	edd3 7a00 	vldr	s15, [r3]
 800672e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006732:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <computeNewSpeed+0xf0>)
 8006734:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8006738:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <computeNewSpeed+0xf0>)
 800673a:	ed93 7a00 	vldr	s14, [r3]
 800673e:	4b2f      	ldr	r3, [pc, #188]	; (80067fc <computeNewSpeed+0xf4>)
 8006740:	edd3 7a00 	vldr	s15, [r3]
 8006744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	dd29      	ble.n	80067a2 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 800674e:	4b2b      	ldr	r3, [pc, #172]	; (80067fc <computeNewSpeed+0xf4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a29      	ldr	r2, [pc, #164]	; (80067f8 <computeNewSpeed+0xf0>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e024      	b.n	80067a2 <computeNewSpeed+0x9a>
        }
    } else if (_speed > _maxSpeed) {
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <computeNewSpeed+0xf0>)
 800675a:	ed93 7a00 	vldr	s14, [r3]
 800675e:	4b27      	ldr	r3, [pc, #156]	; (80067fc <computeNewSpeed+0xf4>)
 8006760:	edd3 7a00 	vldr	s15, [r3]
 8006764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676c:	dd19      	ble.n	80067a2 <computeNewSpeed+0x9a>
        _speed -= _acceleration;
 800676e:	4b24      	ldr	r3, [pc, #144]	; (8006800 <computeNewSpeed+0xf8>)
 8006770:	edd3 7a00 	vldr	s15, [r3]
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <computeNewSpeed+0xf0>)
 8006776:	ed93 7a00 	vldr	s14, [r3]
 800677a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <computeNewSpeed+0xf0>)
 8006780:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < _maxSpeed) {
 8006784:	4b1c      	ldr	r3, [pc, #112]	; (80067f8 <computeNewSpeed+0xf0>)
 8006786:	ed93 7a00 	vldr	s14, [r3]
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <computeNewSpeed+0xf4>)
 800678c:	edd3 7a00 	vldr	s15, [r3]
 8006790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006798:	d503      	bpl.n	80067a2 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <computeNewSpeed+0xf4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <computeNewSpeed+0xf0>)
 80067a0:	6013      	str	r3, [r2, #0]
        }
    }

    // Prevent division by zero
    if (_speed <= 0) {
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <computeNewSpeed+0xf0>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b0:	d803      	bhi.n	80067ba <computeNewSpeed+0xb2>
        _speed = 1; // Or any minimum non-zero value suitable for your application
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <computeNewSpeed+0xf0>)
 80067b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80067b8:	601a      	str	r2, [r3, #0]
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <computeNewSpeed+0xf0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 feca 	bl	8000558 <__aeabi_f2d>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	a109      	add	r1, pc, #36	; (adr r1, 80067f0 <computeNewSpeed+0xe8>)
 80067ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ce:	f7fa f845 	bl	800085c <__aeabi_ddiv>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	f7fa f9c5 	bl	8000b68 <__aeabi_d2iz>
 80067de:	4603      	mov	r3, r0
 80067e0:	4a08      	ldr	r2, [pc, #32]	; (8006804 <computeNewSpeed+0xfc>)
 80067e2:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <computeNewSpeed+0xfc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	f3af 8000 	nop.w
 80067f0:	00000000 	.word	0x00000000
 80067f4:	412e8480 	.word	0x412e8480
 80067f8:	200045b4 	.word	0x200045b4
 80067fc:	200045bc 	.word	0x200045bc
 8006800:	200045b8 	.word	0x200045b8
 8006804:	200045c0 	.word	0x200045c0

08006808 <motorMove>:
        // Optional: Implement a way to exit the loop if necessary
    }
}


void motorMove(MotorConfig* motor, int steps_to_move) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]

    // Set direction based on the steps_to_move value
    if (steps_to_move > 0) {
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd08      	ble.n	800682a <motorMove+0x22>
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction for forward movement
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	889b      	ldrh	r3, [r3, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	4619      	mov	r1, r3
 8006824:	f7fb fdda 	bl	80023dc <HAL_GPIO_WritePin>
 8006828:	e00a      	b.n	8006840 <motorMove+0x38>
    } else {
        HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction for backward movement
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	889b      	ldrh	r3, [r3, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	4619      	mov	r1, r3
 8006836:	f7fb fdd1 	bl	80023dc <HAL_GPIO_WritePin>
        steps_to_move = -steps_to_move; // Convert steps_to_move to positive value
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	425b      	negs	r3, r3
 800683e:	603b      	str	r3, [r7, #0]
    }

    for (int i = 0; i < steps_to_move; i++) {
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e043      	b.n	80068ce <motorMove+0xc6>
        motorStopReg = (bool) Holding_Registers_Database[5];
 8006846:	4b29      	ldr	r3, [pc, #164]	; (80068ec <motorMove+0xe4>)
 8006848:	895b      	ldrh	r3, [r3, #10]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2da      	uxtb	r2, r3
 8006854:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <motorMove+0xe8>)
 8006856:	701a      	strb	r2, [r3, #0]
        emergencyMotorStopReg = (bool) Holding_Registers_Database[6];
 8006858:	4b24      	ldr	r3, [pc, #144]	; (80068ec <motorMove+0xe4>)
 800685a:	899b      	ldrh	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2da      	uxtb	r2, r3
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <motorMove+0xec>)
 8006868:	701a      	strb	r2, [r3, #0]

        if (motorStopReg) {
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <motorMove+0xe8>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <motorMove+0x72>
            //printf("Motor stopped by motorStopReg.\n");
            motorStop(motor);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f840 	bl	80068f8 <motorStop>
            break;  // Exit the loop on motor stop condition
 8006878:	e02d      	b.n	80068d6 <motorMove+0xce>
        }

        if (emergencyMotorStopReg) {
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <motorMove+0xec>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <motorMove+0x82>
            //printf("Motor stopped by emergencyMotorStopReg.\n");
            emergencyMotorStop(motor);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f894 	bl	80069b0 <emergencyMotorStop>
            break;  // Exit the loop on emergency stop condition
 8006888:	e025      	b.n	80068d6 <motorMove+0xce>
        }

        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 800688a:	f7ff ff3d 	bl	8006708 <computeNewSpeed>
 800688e:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6898      	ldr	r0, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	899b      	ldrh	r3, [r3, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	4619      	mov	r1, r3
 800689c:	f7fb fd9e 	bl	80023dc <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // High pulse duration
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fee0 	bl	800666c <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6898      	ldr	r0, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	899b      	ldrh	r3, [r3, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	4619      	mov	r1, r3
 80068b8:	f7fb fd90 	bl	80023dc <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Low pulse duration
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fed2 	bl	800666c <microDelay>
    for (int i = 0; i < steps_to_move; i++) {
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	dbb7      	blt.n	8006846 <motorMove+0x3e>
    }

    // Resetting stop flags after movement
    Holding_Registers_Database[5] = 0;
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <motorMove+0xe4>)
 80068d8:	2200      	movs	r2, #0
 80068da:	815a      	strh	r2, [r3, #10]
    Holding_Registers_Database[6] = 0;
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <motorMove+0xe4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	819a      	strh	r2, [r3, #12]

}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000014 	.word	0x20000014
 80068f0:	200045c4 	.word	0x200045c4
 80068f4:	200045c5 	.word	0x200045c5

080068f8 <motorStop>:


void motorStop(MotorConfig* motor) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    while (_speed > 0) {
 8006900:	e035      	b.n	800696e <motorStop+0x76>
        _speed -= _acceleration;
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <motorStop+0xa8>)
 8006904:	edd3 7a00 	vldr	s15, [r3]
 8006908:	4b26      	ldr	r3, [pc, #152]	; (80069a4 <motorStop+0xac>)
 800690a:	ed93 7a00 	vldr	s14, [r3]
 800690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <motorStop+0xac>)
 8006914:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < 0) {
 8006918:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <motorStop+0xac>)
 800691a:	edd3 7a00 	vldr	s15, [r3]
 800691e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	d503      	bpl.n	8006930 <motorStop+0x38>
            _speed = 0;
 8006928:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <motorStop+0xac>)
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
        }

        // Calculate the new step interval for deceleration
        unsigned long stepInterval = computeNewSpeed();
 8006930:	f7ff feea 	bl	8006708 <computeNewSpeed>
 8006934:	60f8      	str	r0, [r7, #12]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6898      	ldr	r0, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	899b      	ldrh	r3, [r3, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	4619      	mov	r1, r3
 8006942:	f7fb fd4b 	bl	80023dc <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fe8d 	bl	800666c <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6898      	ldr	r0, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	899b      	ldrh	r3, [r3, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	4619      	mov	r1, r3
 800695e:	f7fb fd3d 	bl	80023dc <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff fe7f 	bl	800666c <microDelay>
    while (_speed > 0) {
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <motorStop+0xac>)
 8006970:	edd3 7a00 	vldr	s15, [r3]
 8006974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697c:	dcc1      	bgt.n	8006902 <motorStop+0xa>
    }
    	// step pin is low after stopping
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6898      	ldr	r0, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	899b      	ldrh	r3, [r3, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	4619      	mov	r1, r3
 800698a:	f7fb fd27 	bl	80023dc <HAL_GPIO_WritePin>
        Holding_Registers_Database[4] = Input_Registers_Database[1];
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <motorStop+0xb0>)
 8006990:	885a      	ldrh	r2, [r3, #2]
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <motorStop+0xb4>)
 8006994:	811a      	strh	r2, [r3, #8]
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	200045b8 	.word	0x200045b8
 80069a4:	200045b4 	.word	0x200045b4
 80069a8:	20000078 	.word	0x20000078
 80069ac:	20000014 	.word	0x20000014

080069b0 <emergencyMotorStop>:



void emergencyMotorStop(MotorConfig* motor) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6898      	ldr	r0, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	899b      	ldrh	r3, [r3, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	4619      	mov	r1, r3
 80069c4:	f7fb fd0a 	bl	80023dc <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	889b      	ldrh	r3, [r3, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	4619      	mov	r1, r3
 80069d4:	f7fb fd02 	bl	80023dc <HAL_GPIO_WritePin>


    Holding_Registers_Database[4] = Input_Registers_Database[1];
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <emergencyMotorStop+0x38>)
 80069da:	885a      	ldrh	r2, [r3, #2]
 80069dc:	4b03      	ldr	r3, [pc, #12]	; (80069ec <emergencyMotorStop+0x3c>)
 80069de:	811a      	strh	r2, [r3, #8]

}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20000078 	.word	0x20000078
 80069ec:	20000014 	.word	0x20000014

080069f0 <__errno>:
 80069f0:	4b01      	ldr	r3, [pc, #4]	; (80069f8 <__errno+0x8>)
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	200000fc 	.word	0x200000fc

080069fc <__libc_init_array>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4d0d      	ldr	r5, [pc, #52]	; (8006a34 <__libc_init_array+0x38>)
 8006a00:	4c0d      	ldr	r4, [pc, #52]	; (8006a38 <__libc_init_array+0x3c>)
 8006a02:	1b64      	subs	r4, r4, r5
 8006a04:	10a4      	asrs	r4, r4, #2
 8006a06:	2600      	movs	r6, #0
 8006a08:	42a6      	cmp	r6, r4
 8006a0a:	d109      	bne.n	8006a20 <__libc_init_array+0x24>
 8006a0c:	4d0b      	ldr	r5, [pc, #44]	; (8006a3c <__libc_init_array+0x40>)
 8006a0e:	4c0c      	ldr	r4, [pc, #48]	; (8006a40 <__libc_init_array+0x44>)
 8006a10:	f004 fc8e 	bl	800b330 <_init>
 8006a14:	1b64      	subs	r4, r4, r5
 8006a16:	10a4      	asrs	r4, r4, #2
 8006a18:	2600      	movs	r6, #0
 8006a1a:	42a6      	cmp	r6, r4
 8006a1c:	d105      	bne.n	8006a2a <__libc_init_array+0x2e>
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a24:	4798      	blx	r3
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7ee      	b.n	8006a08 <__libc_init_array+0xc>
 8006a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2e:	4798      	blx	r3
 8006a30:	3601      	adds	r6, #1
 8006a32:	e7f2      	b.n	8006a1a <__libc_init_array+0x1e>
 8006a34:	0800b874 	.word	0x0800b874
 8006a38:	0800b874 	.word	0x0800b874
 8006a3c:	0800b874 	.word	0x0800b874
 8006a40:	0800b878 	.word	0x0800b878

08006a44 <memcpy>:
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a4c:	d100      	bne.n	8006a50 <memcpy+0xc>
 8006a4e:	4770      	bx	lr
 8006a50:	b510      	push	{r4, lr}
 8006a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d1f9      	bne.n	8006a52 <memcpy+0xe>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <memset>:
 8006a60:	4402      	add	r2, r0
 8006a62:	4603      	mov	r3, r0
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d100      	bne.n	8006a6a <memset+0xa>
 8006a68:	4770      	bx	lr
 8006a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6e:	e7f9      	b.n	8006a64 <memset+0x4>

08006a70 <__cvt>:
 8006a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	ec55 4b10 	vmov	r4, r5, d0
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	460e      	mov	r6, r1
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	462b      	mov	r3, r5
 8006a80:	bfbb      	ittet	lt
 8006a82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a86:	461d      	movlt	r5, r3
 8006a88:	2300      	movge	r3, #0
 8006a8a:	232d      	movlt	r3, #45	; 0x2d
 8006a8c:	700b      	strb	r3, [r1, #0]
 8006a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a94:	4691      	mov	r9, r2
 8006a96:	f023 0820 	bic.w	r8, r3, #32
 8006a9a:	bfbc      	itt	lt
 8006a9c:	4622      	movlt	r2, r4
 8006a9e:	4614      	movlt	r4, r2
 8006aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aa4:	d005      	beq.n	8006ab2 <__cvt+0x42>
 8006aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006aaa:	d100      	bne.n	8006aae <__cvt+0x3e>
 8006aac:	3601      	adds	r6, #1
 8006aae:	2102      	movs	r1, #2
 8006ab0:	e000      	b.n	8006ab4 <__cvt+0x44>
 8006ab2:	2103      	movs	r1, #3
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	ab02      	add	r3, sp, #8
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	ec45 4b10 	vmov	d0, r4, r5
 8006ac0:	4653      	mov	r3, sl
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	f001 fdac 	bl	8008620 <_dtoa_r>
 8006ac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006acc:	4607      	mov	r7, r0
 8006ace:	d102      	bne.n	8006ad6 <__cvt+0x66>
 8006ad0:	f019 0f01 	tst.w	r9, #1
 8006ad4:	d022      	beq.n	8006b1c <__cvt+0xac>
 8006ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ada:	eb07 0906 	add.w	r9, r7, r6
 8006ade:	d110      	bne.n	8006b02 <__cvt+0x92>
 8006ae0:	783b      	ldrb	r3, [r7, #0]
 8006ae2:	2b30      	cmp	r3, #48	; 0x30
 8006ae4:	d10a      	bne.n	8006afc <__cvt+0x8c>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7f9 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af2:	b918      	cbnz	r0, 8006afc <__cvt+0x8c>
 8006af4:	f1c6 0601 	rsb	r6, r6, #1
 8006af8:	f8ca 6000 	str.w	r6, [sl]
 8006afc:	f8da 3000 	ldr.w	r3, [sl]
 8006b00:	4499      	add	r9, r3
 8006b02:	2200      	movs	r2, #0
 8006b04:	2300      	movs	r3, #0
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b0e:	b108      	cbz	r0, 8006b14 <__cvt+0xa4>
 8006b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b14:	2230      	movs	r2, #48	; 0x30
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	454b      	cmp	r3, r9
 8006b1a:	d307      	bcc.n	8006b2c <__cvt+0xbc>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b20:	1bdb      	subs	r3, r3, r7
 8006b22:	4638      	mov	r0, r7
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	b004      	add	sp, #16
 8006b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	e7f0      	b.n	8006b16 <__cvt+0xa6>

08006b34 <__exponent>:
 8006b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b36:	4603      	mov	r3, r0
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	bfb8      	it	lt
 8006b3c:	4249      	neglt	r1, r1
 8006b3e:	f803 2b02 	strb.w	r2, [r3], #2
 8006b42:	bfb4      	ite	lt
 8006b44:	222d      	movlt	r2, #45	; 0x2d
 8006b46:	222b      	movge	r2, #43	; 0x2b
 8006b48:	2909      	cmp	r1, #9
 8006b4a:	7042      	strb	r2, [r0, #1]
 8006b4c:	dd2a      	ble.n	8006ba4 <__exponent+0x70>
 8006b4e:	f10d 0407 	add.w	r4, sp, #7
 8006b52:	46a4      	mov	ip, r4
 8006b54:	270a      	movs	r7, #10
 8006b56:	46a6      	mov	lr, r4
 8006b58:	460a      	mov	r2, r1
 8006b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8006b62:	3530      	adds	r5, #48	; 0x30
 8006b64:	2a63      	cmp	r2, #99	; 0x63
 8006b66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b6e:	4631      	mov	r1, r6
 8006b70:	dcf1      	bgt.n	8006b56 <__exponent+0x22>
 8006b72:	3130      	adds	r1, #48	; 0x30
 8006b74:	f1ae 0502 	sub.w	r5, lr, #2
 8006b78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b7c:	1c44      	adds	r4, r0, #1
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4561      	cmp	r1, ip
 8006b82:	d30a      	bcc.n	8006b9a <__exponent+0x66>
 8006b84:	f10d 0209 	add.w	r2, sp, #9
 8006b88:	eba2 020e 	sub.w	r2, r2, lr
 8006b8c:	4565      	cmp	r5, ip
 8006b8e:	bf88      	it	hi
 8006b90:	2200      	movhi	r2, #0
 8006b92:	4413      	add	r3, r2
 8006b94:	1a18      	subs	r0, r3, r0
 8006b96:	b003      	add	sp, #12
 8006b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ba2:	e7ed      	b.n	8006b80 <__exponent+0x4c>
 8006ba4:	2330      	movs	r3, #48	; 0x30
 8006ba6:	3130      	adds	r1, #48	; 0x30
 8006ba8:	7083      	strb	r3, [r0, #2]
 8006baa:	70c1      	strb	r1, [r0, #3]
 8006bac:	1d03      	adds	r3, r0, #4
 8006bae:	e7f1      	b.n	8006b94 <__exponent+0x60>

08006bb0 <_printf_float>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	ed2d 8b02 	vpush	{d8}
 8006bb8:	b08d      	sub	sp, #52	; 0x34
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	f002 fe89 	bl	80098dc <_localeconv_r>
 8006bca:	f8d0 a000 	ldr.w	sl, [r0]
 8006bce:	4650      	mov	r0, sl
 8006bd0:	f7f9 fb06 	bl	80001e0 <strlen>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006be0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006be4:	3307      	adds	r3, #7
 8006be6:	f023 0307 	bic.w	r3, r3, #7
 8006bea:	f103 0208 	add.w	r2, r3, #8
 8006bee:	f8c8 2000 	str.w	r2, [r8]
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c08:	ee08 0a10 	vmov	s16, r0
 8006c0c:	4b9f      	ldr	r3, [pc, #636]	; (8006e8c <_printf_float+0x2dc>)
 8006c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	f7f9 ff91 	bl	8000b3c <__aeabi_dcmpun>
 8006c1a:	bb88      	cbnz	r0, 8006c80 <_printf_float+0xd0>
 8006c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c20:	4b9a      	ldr	r3, [pc, #616]	; (8006e8c <_printf_float+0x2dc>)
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	f7f9 ff6b 	bl	8000b00 <__aeabi_dcmple>
 8006c2a:	bb48      	cbnz	r0, 8006c80 <_printf_float+0xd0>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff5a 	bl	8000aec <__aeabi_dcmplt>
 8006c38:	b110      	cbz	r0, 8006c40 <_printf_float+0x90>
 8006c3a:	232d      	movs	r3, #45	; 0x2d
 8006c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c40:	4b93      	ldr	r3, [pc, #588]	; (8006e90 <_printf_float+0x2e0>)
 8006c42:	4894      	ldr	r0, [pc, #592]	; (8006e94 <_printf_float+0x2e4>)
 8006c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c48:	bf94      	ite	ls
 8006c4a:	4698      	movls	r8, r3
 8006c4c:	4680      	movhi	r8, r0
 8006c4e:	2303      	movs	r3, #3
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	f023 0204 	bic.w	r2, r3, #4
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	9700      	str	r7, [sp, #0]
 8006c60:	4633      	mov	r3, r6
 8006c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c64:	4621      	mov	r1, r4
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 f9d8 	bl	800701c <_printf_common>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f040 8090 	bne.w	8006d92 <_printf_float+0x1e2>
 8006c72:	f04f 30ff 	mov.w	r0, #4294967295
 8006c76:	b00d      	add	sp, #52	; 0x34
 8006c78:	ecbd 8b02 	vpop	{d8}
 8006c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 ff58 	bl	8000b3c <__aeabi_dcmpun>
 8006c8c:	b140      	cbz	r0, 8006ca0 <_printf_float+0xf0>
 8006c8e:	464b      	mov	r3, r9
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfbc      	itt	lt
 8006c94:	232d      	movlt	r3, #45	; 0x2d
 8006c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c9a:	487f      	ldr	r0, [pc, #508]	; (8006e98 <_printf_float+0x2e8>)
 8006c9c:	4b7f      	ldr	r3, [pc, #508]	; (8006e9c <_printf_float+0x2ec>)
 8006c9e:	e7d1      	b.n	8006c44 <_printf_float+0x94>
 8006ca0:	6863      	ldr	r3, [r4, #4]
 8006ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ca6:	9206      	str	r2, [sp, #24]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	d13f      	bne.n	8006d2c <_printf_float+0x17c>
 8006cac:	2306      	movs	r3, #6
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	6861      	ldr	r1, [r4, #4]
 8006cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9303      	str	r3, [sp, #12]
 8006cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8006cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cc2:	ab09      	add	r3, sp, #36	; 0x24
 8006cc4:	ec49 8b10 	vmov	d0, r8, r9
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	6022      	str	r2, [r4, #0]
 8006ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f7ff fecd 	bl	8006a70 <__cvt>
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cda:	2b47      	cmp	r3, #71	; 0x47
 8006cdc:	4680      	mov	r8, r0
 8006cde:	d108      	bne.n	8006cf2 <_printf_float+0x142>
 8006ce0:	1cc8      	adds	r0, r1, #3
 8006ce2:	db02      	blt.n	8006cea <_printf_float+0x13a>
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	dd41      	ble.n	8006d6e <_printf_float+0x1be>
 8006cea:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cee:	fa5f fb8b 	uxtb.w	fp, fp
 8006cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cf6:	d820      	bhi.n	8006d3a <_printf_float+0x18a>
 8006cf8:	3901      	subs	r1, #1
 8006cfa:	465a      	mov	r2, fp
 8006cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d00:	9109      	str	r1, [sp, #36]	; 0x24
 8006d02:	f7ff ff17 	bl	8006b34 <__exponent>
 8006d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d08:	1813      	adds	r3, r2, r0
 8006d0a:	2a01      	cmp	r2, #1
 8006d0c:	4681      	mov	r9, r0
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	dc02      	bgt.n	8006d18 <_printf_float+0x168>
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	07d2      	lsls	r2, r2, #31
 8006d16:	d501      	bpl.n	8006d1c <_printf_float+0x16c>
 8006d18:	3301      	adds	r3, #1
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d09c      	beq.n	8006c5e <_printf_float+0xae>
 8006d24:	232d      	movs	r3, #45	; 0x2d
 8006d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2a:	e798      	b.n	8006c5e <_printf_float+0xae>
 8006d2c:	9a06      	ldr	r2, [sp, #24]
 8006d2e:	2a47      	cmp	r2, #71	; 0x47
 8006d30:	d1be      	bne.n	8006cb0 <_printf_float+0x100>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1bc      	bne.n	8006cb0 <_printf_float+0x100>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e7b9      	b.n	8006cae <_printf_float+0xfe>
 8006d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d3e:	d118      	bne.n	8006d72 <_printf_float+0x1c2>
 8006d40:	2900      	cmp	r1, #0
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	dd0b      	ble.n	8006d5e <_printf_float+0x1ae>
 8006d46:	6121      	str	r1, [r4, #16]
 8006d48:	b913      	cbnz	r3, 8006d50 <_printf_float+0x1a0>
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	07d0      	lsls	r0, r2, #31
 8006d4e:	d502      	bpl.n	8006d56 <_printf_float+0x1a6>
 8006d50:	3301      	adds	r3, #1
 8006d52:	440b      	add	r3, r1
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	e7de      	b.n	8006d1c <_printf_float+0x16c>
 8006d5e:	b913      	cbnz	r3, 8006d66 <_printf_float+0x1b6>
 8006d60:	6822      	ldr	r2, [r4, #0]
 8006d62:	07d2      	lsls	r2, r2, #31
 8006d64:	d501      	bpl.n	8006d6a <_printf_float+0x1ba>
 8006d66:	3302      	adds	r3, #2
 8006d68:	e7f4      	b.n	8006d54 <_printf_float+0x1a4>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7f2      	b.n	8006d54 <_printf_float+0x1a4>
 8006d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d74:	4299      	cmp	r1, r3
 8006d76:	db05      	blt.n	8006d84 <_printf_float+0x1d4>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	6121      	str	r1, [r4, #16]
 8006d7c:	07d8      	lsls	r0, r3, #31
 8006d7e:	d5ea      	bpl.n	8006d56 <_printf_float+0x1a6>
 8006d80:	1c4b      	adds	r3, r1, #1
 8006d82:	e7e7      	b.n	8006d54 <_printf_float+0x1a4>
 8006d84:	2900      	cmp	r1, #0
 8006d86:	bfd4      	ite	le
 8006d88:	f1c1 0202 	rsble	r2, r1, #2
 8006d8c:	2201      	movgt	r2, #1
 8006d8e:	4413      	add	r3, r2
 8006d90:	e7e0      	b.n	8006d54 <_printf_float+0x1a4>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	055a      	lsls	r2, r3, #21
 8006d96:	d407      	bmi.n	8006da8 <_printf_float+0x1f8>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	4642      	mov	r2, r8
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	d12c      	bne.n	8006e00 <_printf_float+0x250>
 8006da6:	e764      	b.n	8006c72 <_printf_float+0xc2>
 8006da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dac:	f240 80e0 	bls.w	8006f70 <_printf_float+0x3c0>
 8006db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006db4:	2200      	movs	r2, #0
 8006db6:	2300      	movs	r3, #0
 8006db8:	f7f9 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d034      	beq.n	8006e2a <_printf_float+0x27a>
 8006dc0:	4a37      	ldr	r2, [pc, #220]	; (8006ea0 <_printf_float+0x2f0>)
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f af51 	beq.w	8006c72 <_printf_float+0xc2>
 8006dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	db02      	blt.n	8006dde <_printf_float+0x22e>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	07d8      	lsls	r0, r3, #31
 8006ddc:	d510      	bpl.n	8006e00 <_printf_float+0x250>
 8006dde:	ee18 3a10 	vmov	r3, s16
 8006de2:	4652      	mov	r2, sl
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af41 	beq.w	8006c72 <_printf_float+0xc2>
 8006df0:	f04f 0800 	mov.w	r8, #0
 8006df4:	f104 091a 	add.w	r9, r4, #26
 8006df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	4543      	cmp	r3, r8
 8006dfe:	dc09      	bgt.n	8006e14 <_printf_float+0x264>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	079b      	lsls	r3, r3, #30
 8006e04:	f100 8105 	bmi.w	8007012 <_printf_float+0x462>
 8006e08:	68e0      	ldr	r0, [r4, #12]
 8006e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0c:	4298      	cmp	r0, r3
 8006e0e:	bfb8      	it	lt
 8006e10:	4618      	movlt	r0, r3
 8006e12:	e730      	b.n	8006c76 <_printf_float+0xc6>
 8006e14:	2301      	movs	r3, #1
 8006e16:	464a      	mov	r2, r9
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af27 	beq.w	8006c72 <_printf_float+0xc2>
 8006e24:	f108 0801 	add.w	r8, r8, #1
 8006e28:	e7e6      	b.n	8006df8 <_printf_float+0x248>
 8006e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dc39      	bgt.n	8006ea4 <_printf_float+0x2f4>
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <_printf_float+0x2f0>)
 8006e32:	2301      	movs	r3, #1
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b8      	blx	r7
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f43f af19 	beq.w	8006c72 <_printf_float+0xc2>
 8006e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d102      	bne.n	8006e4e <_printf_float+0x29e>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	07d9      	lsls	r1, r3, #31
 8006e4c:	d5d8      	bpl.n	8006e00 <_printf_float+0x250>
 8006e4e:	ee18 3a10 	vmov	r3, s16
 8006e52:	4652      	mov	r2, sl
 8006e54:	4631      	mov	r1, r6
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f43f af09 	beq.w	8006c72 <_printf_float+0xc2>
 8006e60:	f04f 0900 	mov.w	r9, #0
 8006e64:	f104 0a1a 	add.w	sl, r4, #26
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	425b      	negs	r3, r3
 8006e6c:	454b      	cmp	r3, r9
 8006e6e:	dc01      	bgt.n	8006e74 <_printf_float+0x2c4>
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	e792      	b.n	8006d9a <_printf_float+0x1ea>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4652      	mov	r2, sl
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f aef7 	beq.w	8006c72 <_printf_float+0xc2>
 8006e84:	f109 0901 	add.w	r9, r9, #1
 8006e88:	e7ee      	b.n	8006e68 <_printf_float+0x2b8>
 8006e8a:	bf00      	nop
 8006e8c:	7fefffff 	.word	0x7fefffff
 8006e90:	0800b3cc 	.word	0x0800b3cc
 8006e94:	0800b3d0 	.word	0x0800b3d0
 8006e98:	0800b3d8 	.word	0x0800b3d8
 8006e9c:	0800b3d4 	.word	0x0800b3d4
 8006ea0:	0800b3dc 	.word	0x0800b3dc
 8006ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bfa8      	it	ge
 8006eac:	461a      	movge	r2, r3
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	4691      	mov	r9, r2
 8006eb2:	dc37      	bgt.n	8006f24 <_printf_float+0x374>
 8006eb4:	f04f 0b00 	mov.w	fp, #0
 8006eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebc:	f104 021a 	add.w	r2, r4, #26
 8006ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	eba3 0309 	sub.w	r3, r3, r9
 8006ec8:	455b      	cmp	r3, fp
 8006eca:	dc33      	bgt.n	8006f34 <_printf_float+0x384>
 8006ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	db3b      	blt.n	8006f4c <_printf_float+0x39c>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07da      	lsls	r2, r3, #31
 8006ed8:	d438      	bmi.n	8006f4c <_printf_float+0x39c>
 8006eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee0:	1a9a      	subs	r2, r3, r2
 8006ee2:	eba3 0901 	sub.w	r9, r3, r1
 8006ee6:	4591      	cmp	r9, r2
 8006ee8:	bfa8      	it	ge
 8006eea:	4691      	movge	r9, r2
 8006eec:	f1b9 0f00 	cmp.w	r9, #0
 8006ef0:	dc35      	bgt.n	8006f5e <_printf_float+0x3ae>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006efa:	f104 0a1a 	add.w	sl, r4, #26
 8006efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	eba3 0309 	sub.w	r3, r3, r9
 8006f08:	4543      	cmp	r3, r8
 8006f0a:	f77f af79 	ble.w	8006e00 <_printf_float+0x250>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4652      	mov	r2, sl
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	f43f aeaa 	beq.w	8006c72 <_printf_float+0xc2>
 8006f1e:	f108 0801 	add.w	r8, r8, #1
 8006f22:	e7ec      	b.n	8006efe <_printf_float+0x34e>
 8006f24:	4613      	mov	r3, r2
 8006f26:	4631      	mov	r1, r6
 8006f28:	4642      	mov	r2, r8
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c0      	bne.n	8006eb4 <_printf_float+0x304>
 8006f32:	e69e      	b.n	8006c72 <_printf_float+0xc2>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	9205      	str	r2, [sp, #20]
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f ae97 	beq.w	8006c72 <_printf_float+0xc2>
 8006f44:	9a05      	ldr	r2, [sp, #20]
 8006f46:	f10b 0b01 	add.w	fp, fp, #1
 8006f4a:	e7b9      	b.n	8006ec0 <_printf_float+0x310>
 8006f4c:	ee18 3a10 	vmov	r3, s16
 8006f50:	4652      	mov	r2, sl
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d1be      	bne.n	8006eda <_printf_float+0x32a>
 8006f5c:	e689      	b.n	8006c72 <_printf_float+0xc2>
 8006f5e:	9a05      	ldr	r2, [sp, #20]
 8006f60:	464b      	mov	r3, r9
 8006f62:	4442      	add	r2, r8
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d1c1      	bne.n	8006ef2 <_printf_float+0x342>
 8006f6e:	e680      	b.n	8006c72 <_printf_float+0xc2>
 8006f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f72:	2a01      	cmp	r2, #1
 8006f74:	dc01      	bgt.n	8006f7a <_printf_float+0x3ca>
 8006f76:	07db      	lsls	r3, r3, #31
 8006f78:	d538      	bpl.n	8006fec <_printf_float+0x43c>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	f43f ae74 	beq.w	8006c72 <_printf_float+0xc2>
 8006f8a:	ee18 3a10 	vmov	r3, s16
 8006f8e:	4652      	mov	r2, sl
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f ae6b 	beq.w	8006c72 <_printf_float+0xc2>
 8006f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f7f9 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa8:	b9d8      	cbnz	r0, 8006fe2 <_printf_float+0x432>
 8006faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fac:	f108 0201 	add.w	r2, r8, #1
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d10e      	bne.n	8006fda <_printf_float+0x42a>
 8006fbc:	e659      	b.n	8006c72 <_printf_float+0xc2>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f ae52 	beq.w	8006c72 <_printf_float+0xc2>
 8006fce:	f108 0801 	add.w	r8, r8, #1
 8006fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4543      	cmp	r3, r8
 8006fd8:	dcf1      	bgt.n	8006fbe <_printf_float+0x40e>
 8006fda:	464b      	mov	r3, r9
 8006fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fe0:	e6dc      	b.n	8006d9c <_printf_float+0x1ec>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	f104 0a1a 	add.w	sl, r4, #26
 8006fea:	e7f2      	b.n	8006fd2 <_printf_float+0x422>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4642      	mov	r2, r8
 8006ff0:	e7df      	b.n	8006fb2 <_printf_float+0x402>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	464a      	mov	r2, r9
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae38 	beq.w	8006c72 <_printf_float+0xc2>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	68e3      	ldr	r3, [r4, #12]
 8007008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800700a:	1a5b      	subs	r3, r3, r1
 800700c:	4543      	cmp	r3, r8
 800700e:	dcf0      	bgt.n	8006ff2 <_printf_float+0x442>
 8007010:	e6fa      	b.n	8006e08 <_printf_float+0x258>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f104 0919 	add.w	r9, r4, #25
 800701a:	e7f4      	b.n	8007006 <_printf_float+0x456>

0800701c <_printf_common>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	4616      	mov	r6, r2
 8007022:	4699      	mov	r9, r3
 8007024:	688a      	ldr	r2, [r1, #8]
 8007026:	690b      	ldr	r3, [r1, #16]
 8007028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800702c:	4293      	cmp	r3, r2
 800702e:	bfb8      	it	lt
 8007030:	4613      	movlt	r3, r2
 8007032:	6033      	str	r3, [r6, #0]
 8007034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007038:	4607      	mov	r7, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b10a      	cbz	r2, 8007042 <_printf_common+0x26>
 800703e:	3301      	adds	r3, #1
 8007040:	6033      	str	r3, [r6, #0]
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	0699      	lsls	r1, r3, #26
 8007046:	bf42      	ittt	mi
 8007048:	6833      	ldrmi	r3, [r6, #0]
 800704a:	3302      	addmi	r3, #2
 800704c:	6033      	strmi	r3, [r6, #0]
 800704e:	6825      	ldr	r5, [r4, #0]
 8007050:	f015 0506 	ands.w	r5, r5, #6
 8007054:	d106      	bne.n	8007064 <_printf_common+0x48>
 8007056:	f104 0a19 	add.w	sl, r4, #25
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	6832      	ldr	r2, [r6, #0]
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	42ab      	cmp	r3, r5
 8007062:	dc26      	bgt.n	80070b2 <_printf_common+0x96>
 8007064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007068:	1e13      	subs	r3, r2, #0
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	bf18      	it	ne
 800706e:	2301      	movne	r3, #1
 8007070:	0692      	lsls	r2, r2, #26
 8007072:	d42b      	bmi.n	80070cc <_printf_common+0xb0>
 8007074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d01e      	beq.n	80070c0 <_printf_common+0xa4>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	68e5      	ldr	r5, [r4, #12]
 8007086:	6832      	ldr	r2, [r6, #0]
 8007088:	f003 0306 	and.w	r3, r3, #6
 800708c:	2b04      	cmp	r3, #4
 800708e:	bf08      	it	eq
 8007090:	1aad      	subeq	r5, r5, r2
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	bf0c      	ite	eq
 8007098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800709c:	2500      	movne	r5, #0
 800709e:	4293      	cmp	r3, r2
 80070a0:	bfc4      	itt	gt
 80070a2:	1a9b      	subgt	r3, r3, r2
 80070a4:	18ed      	addgt	r5, r5, r3
 80070a6:	2600      	movs	r6, #0
 80070a8:	341a      	adds	r4, #26
 80070aa:	42b5      	cmp	r5, r6
 80070ac:	d11a      	bne.n	80070e4 <_printf_common+0xc8>
 80070ae:	2000      	movs	r0, #0
 80070b0:	e008      	b.n	80070c4 <_printf_common+0xa8>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4652      	mov	r2, sl
 80070b6:	4649      	mov	r1, r9
 80070b8:	4638      	mov	r0, r7
 80070ba:	47c0      	blx	r8
 80070bc:	3001      	adds	r0, #1
 80070be:	d103      	bne.n	80070c8 <_printf_common+0xac>
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c8:	3501      	adds	r5, #1
 80070ca:	e7c6      	b.n	800705a <_printf_common+0x3e>
 80070cc:	18e1      	adds	r1, r4, r3
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	2030      	movs	r0, #48	; 0x30
 80070d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070d6:	4422      	add	r2, r4
 80070d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070e0:	3302      	adds	r3, #2
 80070e2:	e7c7      	b.n	8007074 <_printf_common+0x58>
 80070e4:	2301      	movs	r3, #1
 80070e6:	4622      	mov	r2, r4
 80070e8:	4649      	mov	r1, r9
 80070ea:	4638      	mov	r0, r7
 80070ec:	47c0      	blx	r8
 80070ee:	3001      	adds	r0, #1
 80070f0:	d0e6      	beq.n	80070c0 <_printf_common+0xa4>
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7d9      	b.n	80070aa <_printf_common+0x8e>
	...

080070f8 <_printf_i>:
 80070f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	7e0f      	ldrb	r7, [r1, #24]
 80070fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007100:	2f78      	cmp	r7, #120	; 0x78
 8007102:	4691      	mov	r9, r2
 8007104:	4680      	mov	r8, r0
 8007106:	460c      	mov	r4, r1
 8007108:	469a      	mov	sl, r3
 800710a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800710e:	d807      	bhi.n	8007120 <_printf_i+0x28>
 8007110:	2f62      	cmp	r7, #98	; 0x62
 8007112:	d80a      	bhi.n	800712a <_printf_i+0x32>
 8007114:	2f00      	cmp	r7, #0
 8007116:	f000 80d8 	beq.w	80072ca <_printf_i+0x1d2>
 800711a:	2f58      	cmp	r7, #88	; 0x58
 800711c:	f000 80a3 	beq.w	8007266 <_printf_i+0x16e>
 8007120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007128:	e03a      	b.n	80071a0 <_printf_i+0xa8>
 800712a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800712e:	2b15      	cmp	r3, #21
 8007130:	d8f6      	bhi.n	8007120 <_printf_i+0x28>
 8007132:	a101      	add	r1, pc, #4	; (adr r1, 8007138 <_printf_i+0x40>)
 8007134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007138:	08007191 	.word	0x08007191
 800713c:	080071a5 	.word	0x080071a5
 8007140:	08007121 	.word	0x08007121
 8007144:	08007121 	.word	0x08007121
 8007148:	08007121 	.word	0x08007121
 800714c:	08007121 	.word	0x08007121
 8007150:	080071a5 	.word	0x080071a5
 8007154:	08007121 	.word	0x08007121
 8007158:	08007121 	.word	0x08007121
 800715c:	08007121 	.word	0x08007121
 8007160:	08007121 	.word	0x08007121
 8007164:	080072b1 	.word	0x080072b1
 8007168:	080071d5 	.word	0x080071d5
 800716c:	08007293 	.word	0x08007293
 8007170:	08007121 	.word	0x08007121
 8007174:	08007121 	.word	0x08007121
 8007178:	080072d3 	.word	0x080072d3
 800717c:	08007121 	.word	0x08007121
 8007180:	080071d5 	.word	0x080071d5
 8007184:	08007121 	.word	0x08007121
 8007188:	08007121 	.word	0x08007121
 800718c:	0800729b 	.word	0x0800729b
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	602a      	str	r2, [r5, #0]
 8007198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800719c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0a3      	b.n	80072ec <_printf_i+0x1f4>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	6829      	ldr	r1, [r5, #0]
 80071a8:	0606      	lsls	r6, r0, #24
 80071aa:	f101 0304 	add.w	r3, r1, #4
 80071ae:	d50a      	bpl.n	80071c6 <_printf_i+0xce>
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	da03      	bge.n	80071c0 <_printf_i+0xc8>
 80071b8:	232d      	movs	r3, #45	; 0x2d
 80071ba:	4276      	negs	r6, r6
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c0:	485e      	ldr	r0, [pc, #376]	; (800733c <_printf_i+0x244>)
 80071c2:	230a      	movs	r3, #10
 80071c4:	e019      	b.n	80071fa <_printf_i+0x102>
 80071c6:	680e      	ldr	r6, [r1, #0]
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071ce:	bf18      	it	ne
 80071d0:	b236      	sxthne	r6, r6
 80071d2:	e7ef      	b.n	80071b4 <_printf_i+0xbc>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	6820      	ldr	r0, [r4, #0]
 80071d8:	1d19      	adds	r1, r3, #4
 80071da:	6029      	str	r1, [r5, #0]
 80071dc:	0601      	lsls	r1, r0, #24
 80071de:	d501      	bpl.n	80071e4 <_printf_i+0xec>
 80071e0:	681e      	ldr	r6, [r3, #0]
 80071e2:	e002      	b.n	80071ea <_printf_i+0xf2>
 80071e4:	0646      	lsls	r6, r0, #25
 80071e6:	d5fb      	bpl.n	80071e0 <_printf_i+0xe8>
 80071e8:	881e      	ldrh	r6, [r3, #0]
 80071ea:	4854      	ldr	r0, [pc, #336]	; (800733c <_printf_i+0x244>)
 80071ec:	2f6f      	cmp	r7, #111	; 0x6f
 80071ee:	bf0c      	ite	eq
 80071f0:	2308      	moveq	r3, #8
 80071f2:	230a      	movne	r3, #10
 80071f4:	2100      	movs	r1, #0
 80071f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071fa:	6865      	ldr	r5, [r4, #4]
 80071fc:	60a5      	str	r5, [r4, #8]
 80071fe:	2d00      	cmp	r5, #0
 8007200:	bfa2      	ittt	ge
 8007202:	6821      	ldrge	r1, [r4, #0]
 8007204:	f021 0104 	bicge.w	r1, r1, #4
 8007208:	6021      	strge	r1, [r4, #0]
 800720a:	b90e      	cbnz	r6, 8007210 <_printf_i+0x118>
 800720c:	2d00      	cmp	r5, #0
 800720e:	d04d      	beq.n	80072ac <_printf_i+0x1b4>
 8007210:	4615      	mov	r5, r2
 8007212:	fbb6 f1f3 	udiv	r1, r6, r3
 8007216:	fb03 6711 	mls	r7, r3, r1, r6
 800721a:	5dc7      	ldrb	r7, [r0, r7]
 800721c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007220:	4637      	mov	r7, r6
 8007222:	42bb      	cmp	r3, r7
 8007224:	460e      	mov	r6, r1
 8007226:	d9f4      	bls.n	8007212 <_printf_i+0x11a>
 8007228:	2b08      	cmp	r3, #8
 800722a:	d10b      	bne.n	8007244 <_printf_i+0x14c>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07de      	lsls	r6, r3, #31
 8007230:	d508      	bpl.n	8007244 <_printf_i+0x14c>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6861      	ldr	r1, [r4, #4]
 8007236:	4299      	cmp	r1, r3
 8007238:	bfde      	ittt	le
 800723a:	2330      	movle	r3, #48	; 0x30
 800723c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007240:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007244:	1b52      	subs	r2, r2, r5
 8007246:	6122      	str	r2, [r4, #16]
 8007248:	f8cd a000 	str.w	sl, [sp]
 800724c:	464b      	mov	r3, r9
 800724e:	aa03      	add	r2, sp, #12
 8007250:	4621      	mov	r1, r4
 8007252:	4640      	mov	r0, r8
 8007254:	f7ff fee2 	bl	800701c <_printf_common>
 8007258:	3001      	adds	r0, #1
 800725a:	d14c      	bne.n	80072f6 <_printf_i+0x1fe>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	b004      	add	sp, #16
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	4835      	ldr	r0, [pc, #212]	; (800733c <_printf_i+0x244>)
 8007268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800726c:	6829      	ldr	r1, [r5, #0]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	f851 6b04 	ldr.w	r6, [r1], #4
 8007274:	6029      	str	r1, [r5, #0]
 8007276:	061d      	lsls	r5, r3, #24
 8007278:	d514      	bpl.n	80072a4 <_printf_i+0x1ac>
 800727a:	07df      	lsls	r7, r3, #31
 800727c:	bf44      	itt	mi
 800727e:	f043 0320 	orrmi.w	r3, r3, #32
 8007282:	6023      	strmi	r3, [r4, #0]
 8007284:	b91e      	cbnz	r6, 800728e <_printf_i+0x196>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f023 0320 	bic.w	r3, r3, #32
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	2310      	movs	r3, #16
 8007290:	e7b0      	b.n	80071f4 <_printf_i+0xfc>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f043 0320 	orr.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	2378      	movs	r3, #120	; 0x78
 800729c:	4828      	ldr	r0, [pc, #160]	; (8007340 <_printf_i+0x248>)
 800729e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072a2:	e7e3      	b.n	800726c <_printf_i+0x174>
 80072a4:	0659      	lsls	r1, r3, #25
 80072a6:	bf48      	it	mi
 80072a8:	b2b6      	uxthmi	r6, r6
 80072aa:	e7e6      	b.n	800727a <_printf_i+0x182>
 80072ac:	4615      	mov	r5, r2
 80072ae:	e7bb      	b.n	8007228 <_printf_i+0x130>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	6826      	ldr	r6, [r4, #0]
 80072b4:	6961      	ldr	r1, [r4, #20]
 80072b6:	1d18      	adds	r0, r3, #4
 80072b8:	6028      	str	r0, [r5, #0]
 80072ba:	0635      	lsls	r5, r6, #24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	d501      	bpl.n	80072c4 <_printf_i+0x1cc>
 80072c0:	6019      	str	r1, [r3, #0]
 80072c2:	e002      	b.n	80072ca <_printf_i+0x1d2>
 80072c4:	0670      	lsls	r0, r6, #25
 80072c6:	d5fb      	bpl.n	80072c0 <_printf_i+0x1c8>
 80072c8:	8019      	strh	r1, [r3, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	4615      	mov	r5, r2
 80072d0:	e7ba      	b.n	8007248 <_printf_i+0x150>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	1d1a      	adds	r2, r3, #4
 80072d6:	602a      	str	r2, [r5, #0]
 80072d8:	681d      	ldr	r5, [r3, #0]
 80072da:	6862      	ldr	r2, [r4, #4]
 80072dc:	2100      	movs	r1, #0
 80072de:	4628      	mov	r0, r5
 80072e0:	f7f8 ff86 	bl	80001f0 <memchr>
 80072e4:	b108      	cbz	r0, 80072ea <_printf_i+0x1f2>
 80072e6:	1b40      	subs	r0, r0, r5
 80072e8:	6060      	str	r0, [r4, #4]
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	2300      	movs	r3, #0
 80072f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f4:	e7a8      	b.n	8007248 <_printf_i+0x150>
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	462a      	mov	r2, r5
 80072fa:	4649      	mov	r1, r9
 80072fc:	4640      	mov	r0, r8
 80072fe:	47d0      	blx	sl
 8007300:	3001      	adds	r0, #1
 8007302:	d0ab      	beq.n	800725c <_printf_i+0x164>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	079b      	lsls	r3, r3, #30
 8007308:	d413      	bmi.n	8007332 <_printf_i+0x23a>
 800730a:	68e0      	ldr	r0, [r4, #12]
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	4298      	cmp	r0, r3
 8007310:	bfb8      	it	lt
 8007312:	4618      	movlt	r0, r3
 8007314:	e7a4      	b.n	8007260 <_printf_i+0x168>
 8007316:	2301      	movs	r3, #1
 8007318:	4632      	mov	r2, r6
 800731a:	4649      	mov	r1, r9
 800731c:	4640      	mov	r0, r8
 800731e:	47d0      	blx	sl
 8007320:	3001      	adds	r0, #1
 8007322:	d09b      	beq.n	800725c <_printf_i+0x164>
 8007324:	3501      	adds	r5, #1
 8007326:	68e3      	ldr	r3, [r4, #12]
 8007328:	9903      	ldr	r1, [sp, #12]
 800732a:	1a5b      	subs	r3, r3, r1
 800732c:	42ab      	cmp	r3, r5
 800732e:	dcf2      	bgt.n	8007316 <_printf_i+0x21e>
 8007330:	e7eb      	b.n	800730a <_printf_i+0x212>
 8007332:	2500      	movs	r5, #0
 8007334:	f104 0619 	add.w	r6, r4, #25
 8007338:	e7f5      	b.n	8007326 <_printf_i+0x22e>
 800733a:	bf00      	nop
 800733c:	0800b3de 	.word	0x0800b3de
 8007340:	0800b3ef 	.word	0x0800b3ef

08007344 <_scanf_float>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	b087      	sub	sp, #28
 800734a:	4617      	mov	r7, r2
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	688b      	ldr	r3, [r1, #8]
 8007350:	1e5a      	subs	r2, r3, #1
 8007352:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007356:	bf83      	ittte	hi
 8007358:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800735c:	195b      	addhi	r3, r3, r5
 800735e:	9302      	strhi	r3, [sp, #8]
 8007360:	2300      	movls	r3, #0
 8007362:	bf86      	itte	hi
 8007364:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007368:	608b      	strhi	r3, [r1, #8]
 800736a:	9302      	strls	r3, [sp, #8]
 800736c:	680b      	ldr	r3, [r1, #0]
 800736e:	468b      	mov	fp, r1
 8007370:	2500      	movs	r5, #0
 8007372:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007376:	f84b 3b1c 	str.w	r3, [fp], #28
 800737a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800737e:	4680      	mov	r8, r0
 8007380:	460c      	mov	r4, r1
 8007382:	465e      	mov	r6, fp
 8007384:	46aa      	mov	sl, r5
 8007386:	46a9      	mov	r9, r5
 8007388:	9501      	str	r5, [sp, #4]
 800738a:	68a2      	ldr	r2, [r4, #8]
 800738c:	b152      	cbz	r2, 80073a4 <_scanf_float+0x60>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b4e      	cmp	r3, #78	; 0x4e
 8007394:	d864      	bhi.n	8007460 <_scanf_float+0x11c>
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d83c      	bhi.n	8007414 <_scanf_float+0xd0>
 800739a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800739e:	b2c8      	uxtb	r0, r1
 80073a0:	280e      	cmp	r0, #14
 80073a2:	d93a      	bls.n	800741a <_scanf_float+0xd6>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	d003      	beq.n	80073b2 <_scanf_float+0x6e>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073b6:	f1ba 0f01 	cmp.w	sl, #1
 80073ba:	f200 8113 	bhi.w	80075e4 <_scanf_float+0x2a0>
 80073be:	455e      	cmp	r6, fp
 80073c0:	f200 8105 	bhi.w	80075ce <_scanf_float+0x28a>
 80073c4:	2501      	movs	r5, #1
 80073c6:	4628      	mov	r0, r5
 80073c8:	b007      	add	sp, #28
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073d2:	2a0d      	cmp	r2, #13
 80073d4:	d8e6      	bhi.n	80073a4 <_scanf_float+0x60>
 80073d6:	a101      	add	r1, pc, #4	; (adr r1, 80073dc <_scanf_float+0x98>)
 80073d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073dc:	0800751b 	.word	0x0800751b
 80073e0:	080073a5 	.word	0x080073a5
 80073e4:	080073a5 	.word	0x080073a5
 80073e8:	080073a5 	.word	0x080073a5
 80073ec:	0800757b 	.word	0x0800757b
 80073f0:	08007553 	.word	0x08007553
 80073f4:	080073a5 	.word	0x080073a5
 80073f8:	080073a5 	.word	0x080073a5
 80073fc:	08007529 	.word	0x08007529
 8007400:	080073a5 	.word	0x080073a5
 8007404:	080073a5 	.word	0x080073a5
 8007408:	080073a5 	.word	0x080073a5
 800740c:	080073a5 	.word	0x080073a5
 8007410:	080074e1 	.word	0x080074e1
 8007414:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007418:	e7db      	b.n	80073d2 <_scanf_float+0x8e>
 800741a:	290e      	cmp	r1, #14
 800741c:	d8c2      	bhi.n	80073a4 <_scanf_float+0x60>
 800741e:	a001      	add	r0, pc, #4	; (adr r0, 8007424 <_scanf_float+0xe0>)
 8007420:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007424:	080074d3 	.word	0x080074d3
 8007428:	080073a5 	.word	0x080073a5
 800742c:	080074d3 	.word	0x080074d3
 8007430:	08007567 	.word	0x08007567
 8007434:	080073a5 	.word	0x080073a5
 8007438:	08007481 	.word	0x08007481
 800743c:	080074bd 	.word	0x080074bd
 8007440:	080074bd 	.word	0x080074bd
 8007444:	080074bd 	.word	0x080074bd
 8007448:	080074bd 	.word	0x080074bd
 800744c:	080074bd 	.word	0x080074bd
 8007450:	080074bd 	.word	0x080074bd
 8007454:	080074bd 	.word	0x080074bd
 8007458:	080074bd 	.word	0x080074bd
 800745c:	080074bd 	.word	0x080074bd
 8007460:	2b6e      	cmp	r3, #110	; 0x6e
 8007462:	d809      	bhi.n	8007478 <_scanf_float+0x134>
 8007464:	2b60      	cmp	r3, #96	; 0x60
 8007466:	d8b2      	bhi.n	80073ce <_scanf_float+0x8a>
 8007468:	2b54      	cmp	r3, #84	; 0x54
 800746a:	d077      	beq.n	800755c <_scanf_float+0x218>
 800746c:	2b59      	cmp	r3, #89	; 0x59
 800746e:	d199      	bne.n	80073a4 <_scanf_float+0x60>
 8007470:	2d07      	cmp	r5, #7
 8007472:	d197      	bne.n	80073a4 <_scanf_float+0x60>
 8007474:	2508      	movs	r5, #8
 8007476:	e029      	b.n	80074cc <_scanf_float+0x188>
 8007478:	2b74      	cmp	r3, #116	; 0x74
 800747a:	d06f      	beq.n	800755c <_scanf_float+0x218>
 800747c:	2b79      	cmp	r3, #121	; 0x79
 800747e:	e7f6      	b.n	800746e <_scanf_float+0x12a>
 8007480:	6821      	ldr	r1, [r4, #0]
 8007482:	05c8      	lsls	r0, r1, #23
 8007484:	d51a      	bpl.n	80074bc <_scanf_float+0x178>
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800748c:	6021      	str	r1, [r4, #0]
 800748e:	f109 0901 	add.w	r9, r9, #1
 8007492:	b11b      	cbz	r3, 800749c <_scanf_float+0x158>
 8007494:	3b01      	subs	r3, #1
 8007496:	3201      	adds	r2, #1
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	60a2      	str	r2, [r4, #8]
 800749c:	68a3      	ldr	r3, [r4, #8]
 800749e:	3b01      	subs	r3, #1
 80074a0:	60a3      	str	r3, [r4, #8]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	3301      	adds	r3, #1
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	f340 8084 	ble.w	80075bc <_scanf_float+0x278>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	e766      	b.n	800738a <_scanf_float+0x46>
 80074bc:	eb1a 0f05 	cmn.w	sl, r5
 80074c0:	f47f af70 	bne.w	80073a4 <_scanf_float+0x60>
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	f806 3b01 	strb.w	r3, [r6], #1
 80074d0:	e7e4      	b.n	800749c <_scanf_float+0x158>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	0610      	lsls	r0, r2, #24
 80074d6:	f57f af65 	bpl.w	80073a4 <_scanf_float+0x60>
 80074da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074de:	e7f4      	b.n	80074ca <_scanf_float+0x186>
 80074e0:	f1ba 0f00 	cmp.w	sl, #0
 80074e4:	d10e      	bne.n	8007504 <_scanf_float+0x1c0>
 80074e6:	f1b9 0f00 	cmp.w	r9, #0
 80074ea:	d10e      	bne.n	800750a <_scanf_float+0x1c6>
 80074ec:	6822      	ldr	r2, [r4, #0]
 80074ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074f6:	d108      	bne.n	800750a <_scanf_float+0x1c6>
 80074f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	f04f 0a01 	mov.w	sl, #1
 8007502:	e7e3      	b.n	80074cc <_scanf_float+0x188>
 8007504:	f1ba 0f02 	cmp.w	sl, #2
 8007508:	d055      	beq.n	80075b6 <_scanf_float+0x272>
 800750a:	2d01      	cmp	r5, #1
 800750c:	d002      	beq.n	8007514 <_scanf_float+0x1d0>
 800750e:	2d04      	cmp	r5, #4
 8007510:	f47f af48 	bne.w	80073a4 <_scanf_float+0x60>
 8007514:	3501      	adds	r5, #1
 8007516:	b2ed      	uxtb	r5, r5
 8007518:	e7d8      	b.n	80074cc <_scanf_float+0x188>
 800751a:	f1ba 0f01 	cmp.w	sl, #1
 800751e:	f47f af41 	bne.w	80073a4 <_scanf_float+0x60>
 8007522:	f04f 0a02 	mov.w	sl, #2
 8007526:	e7d1      	b.n	80074cc <_scanf_float+0x188>
 8007528:	b97d      	cbnz	r5, 800754a <_scanf_float+0x206>
 800752a:	f1b9 0f00 	cmp.w	r9, #0
 800752e:	f47f af3c 	bne.w	80073aa <_scanf_float+0x66>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007538:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800753c:	f47f af39 	bne.w	80073b2 <_scanf_float+0x6e>
 8007540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	2501      	movs	r5, #1
 8007548:	e7c0      	b.n	80074cc <_scanf_float+0x188>
 800754a:	2d03      	cmp	r5, #3
 800754c:	d0e2      	beq.n	8007514 <_scanf_float+0x1d0>
 800754e:	2d05      	cmp	r5, #5
 8007550:	e7de      	b.n	8007510 <_scanf_float+0x1cc>
 8007552:	2d02      	cmp	r5, #2
 8007554:	f47f af26 	bne.w	80073a4 <_scanf_float+0x60>
 8007558:	2503      	movs	r5, #3
 800755a:	e7b7      	b.n	80074cc <_scanf_float+0x188>
 800755c:	2d06      	cmp	r5, #6
 800755e:	f47f af21 	bne.w	80073a4 <_scanf_float+0x60>
 8007562:	2507      	movs	r5, #7
 8007564:	e7b2      	b.n	80074cc <_scanf_float+0x188>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	0591      	lsls	r1, r2, #22
 800756a:	f57f af1b 	bpl.w	80073a4 <_scanf_float+0x60>
 800756e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	f8cd 9004 	str.w	r9, [sp, #4]
 8007578:	e7a8      	b.n	80074cc <_scanf_float+0x188>
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007580:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007584:	d006      	beq.n	8007594 <_scanf_float+0x250>
 8007586:	0550      	lsls	r0, r2, #21
 8007588:	f57f af0c 	bpl.w	80073a4 <_scanf_float+0x60>
 800758c:	f1b9 0f00 	cmp.w	r9, #0
 8007590:	f43f af0f 	beq.w	80073b2 <_scanf_float+0x6e>
 8007594:	0591      	lsls	r1, r2, #22
 8007596:	bf58      	it	pl
 8007598:	9901      	ldrpl	r1, [sp, #4]
 800759a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800759e:	bf58      	it	pl
 80075a0:	eba9 0101 	subpl.w	r1, r9, r1
 80075a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075a8:	bf58      	it	pl
 80075aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	e78a      	b.n	80074cc <_scanf_float+0x188>
 80075b6:	f04f 0a03 	mov.w	sl, #3
 80075ba:	e787      	b.n	80074cc <_scanf_float+0x188>
 80075bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075c0:	4639      	mov	r1, r7
 80075c2:	4640      	mov	r0, r8
 80075c4:	4798      	blx	r3
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f aedf 	beq.w	800738a <_scanf_float+0x46>
 80075cc:	e6ea      	b.n	80073a4 <_scanf_float+0x60>
 80075ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075d6:	463a      	mov	r2, r7
 80075d8:	4640      	mov	r0, r8
 80075da:	4798      	blx	r3
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	3b01      	subs	r3, #1
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	e6ec      	b.n	80073be <_scanf_float+0x7a>
 80075e4:	1e6b      	subs	r3, r5, #1
 80075e6:	2b06      	cmp	r3, #6
 80075e8:	d825      	bhi.n	8007636 <_scanf_float+0x2f2>
 80075ea:	2d02      	cmp	r5, #2
 80075ec:	d836      	bhi.n	800765c <_scanf_float+0x318>
 80075ee:	455e      	cmp	r6, fp
 80075f0:	f67f aee8 	bls.w	80073c4 <_scanf_float+0x80>
 80075f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075fc:	463a      	mov	r2, r7
 80075fe:	4640      	mov	r0, r8
 8007600:	4798      	blx	r3
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	3b01      	subs	r3, #1
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	e7f1      	b.n	80075ee <_scanf_float+0x2aa>
 800760a:	9802      	ldr	r0, [sp, #8]
 800760c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007610:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	463a      	mov	r2, r7
 8007618:	4640      	mov	r0, r8
 800761a:	4798      	blx	r3
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	3b01      	subs	r3, #1
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007626:	fa5f fa8a 	uxtb.w	sl, sl
 800762a:	f1ba 0f02 	cmp.w	sl, #2
 800762e:	d1ec      	bne.n	800760a <_scanf_float+0x2c6>
 8007630:	3d03      	subs	r5, #3
 8007632:	b2ed      	uxtb	r5, r5
 8007634:	1b76      	subs	r6, r6, r5
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	05da      	lsls	r2, r3, #23
 800763a:	d52f      	bpl.n	800769c <_scanf_float+0x358>
 800763c:	055b      	lsls	r3, r3, #21
 800763e:	d510      	bpl.n	8007662 <_scanf_float+0x31e>
 8007640:	455e      	cmp	r6, fp
 8007642:	f67f aebf 	bls.w	80073c4 <_scanf_float+0x80>
 8007646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800764a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800764e:	463a      	mov	r2, r7
 8007650:	4640      	mov	r0, r8
 8007652:	4798      	blx	r3
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	3b01      	subs	r3, #1
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	e7f1      	b.n	8007640 <_scanf_float+0x2fc>
 800765c:	46aa      	mov	sl, r5
 800765e:	9602      	str	r6, [sp, #8]
 8007660:	e7df      	b.n	8007622 <_scanf_float+0x2de>
 8007662:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	2965      	cmp	r1, #101	; 0x65
 800766a:	f103 33ff 	add.w	r3, r3, #4294967295
 800766e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	d00c      	beq.n	8007690 <_scanf_float+0x34c>
 8007676:	2945      	cmp	r1, #69	; 0x45
 8007678:	d00a      	beq.n	8007690 <_scanf_float+0x34c>
 800767a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800767e:	463a      	mov	r2, r7
 8007680:	4640      	mov	r0, r8
 8007682:	4798      	blx	r3
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800768a:	3b01      	subs	r3, #1
 800768c:	1eb5      	subs	r5, r6, #2
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007694:	463a      	mov	r2, r7
 8007696:	4640      	mov	r0, r8
 8007698:	4798      	blx	r3
 800769a:	462e      	mov	r6, r5
 800769c:	6825      	ldr	r5, [r4, #0]
 800769e:	f015 0510 	ands.w	r5, r5, #16
 80076a2:	d159      	bne.n	8007758 <_scanf_float+0x414>
 80076a4:	7035      	strb	r5, [r6, #0]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d11b      	bne.n	80076ea <_scanf_float+0x3a6>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	454b      	cmp	r3, r9
 80076b6:	eba3 0209 	sub.w	r2, r3, r9
 80076ba:	d123      	bne.n	8007704 <_scanf_float+0x3c0>
 80076bc:	2200      	movs	r2, #0
 80076be:	4659      	mov	r1, fp
 80076c0:	4640      	mov	r0, r8
 80076c2:	f000 fe97 	bl	80083f4 <_strtod_r>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	f012 0f02 	tst.w	r2, #2
 80076ce:	ec57 6b10 	vmov	r6, r7, d0
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	d021      	beq.n	800771a <_scanf_float+0x3d6>
 80076d6:	9903      	ldr	r1, [sp, #12]
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	600a      	str	r2, [r1, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	e9c3 6700 	strd	r6, r7, [r3]
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60e3      	str	r3, [r4, #12]
 80076e8:	e66d      	b.n	80073c6 <_scanf_float+0x82>
 80076ea:	9b04      	ldr	r3, [sp, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0e5      	beq.n	80076bc <_scanf_float+0x378>
 80076f0:	9905      	ldr	r1, [sp, #20]
 80076f2:	230a      	movs	r3, #10
 80076f4:	462a      	mov	r2, r5
 80076f6:	3101      	adds	r1, #1
 80076f8:	4640      	mov	r0, r8
 80076fa:	f000 ff03 	bl	8008504 <_strtol_r>
 80076fe:	9b04      	ldr	r3, [sp, #16]
 8007700:	9e05      	ldr	r6, [sp, #20]
 8007702:	1ac2      	subs	r2, r0, r3
 8007704:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007708:	429e      	cmp	r6, r3
 800770a:	bf28      	it	cs
 800770c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007710:	4912      	ldr	r1, [pc, #72]	; (800775c <_scanf_float+0x418>)
 8007712:	4630      	mov	r0, r6
 8007714:	f000 f82c 	bl	8007770 <siprintf>
 8007718:	e7d0      	b.n	80076bc <_scanf_float+0x378>
 800771a:	9903      	ldr	r1, [sp, #12]
 800771c:	f012 0f04 	tst.w	r2, #4
 8007720:	f103 0204 	add.w	r2, r3, #4
 8007724:	600a      	str	r2, [r1, #0]
 8007726:	d1d9      	bne.n	80076dc <_scanf_float+0x398>
 8007728:	f8d3 8000 	ldr.w	r8, [r3]
 800772c:	ee10 2a10 	vmov	r2, s0
 8007730:	ee10 0a10 	vmov	r0, s0
 8007734:	463b      	mov	r3, r7
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 fa00 	bl	8000b3c <__aeabi_dcmpun>
 800773c:	b128      	cbz	r0, 800774a <_scanf_float+0x406>
 800773e:	4808      	ldr	r0, [pc, #32]	; (8007760 <_scanf_float+0x41c>)
 8007740:	f000 f810 	bl	8007764 <nanf>
 8007744:	ed88 0a00 	vstr	s0, [r8]
 8007748:	e7cb      	b.n	80076e2 <_scanf_float+0x39e>
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f9 fa53 	bl	8000bf8 <__aeabi_d2f>
 8007752:	f8c8 0000 	str.w	r0, [r8]
 8007756:	e7c4      	b.n	80076e2 <_scanf_float+0x39e>
 8007758:	2500      	movs	r5, #0
 800775a:	e634      	b.n	80073c6 <_scanf_float+0x82>
 800775c:	0800b400 	.word	0x0800b400
 8007760:	0800b808 	.word	0x0800b808

08007764 <nanf>:
 8007764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800776c <nanf+0x8>
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	7fc00000 	.word	0x7fc00000

08007770 <siprintf>:
 8007770:	b40e      	push	{r1, r2, r3}
 8007772:	b500      	push	{lr}
 8007774:	b09c      	sub	sp, #112	; 0x70
 8007776:	ab1d      	add	r3, sp, #116	; 0x74
 8007778:	9002      	str	r0, [sp, #8]
 800777a:	9006      	str	r0, [sp, #24]
 800777c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <siprintf+0x38>)
 8007782:	9107      	str	r1, [sp, #28]
 8007784:	9104      	str	r1, [sp, #16]
 8007786:	4909      	ldr	r1, [pc, #36]	; (80077ac <siprintf+0x3c>)
 8007788:	f853 2b04 	ldr.w	r2, [r3], #4
 800778c:	9105      	str	r1, [sp, #20]
 800778e:	6800      	ldr	r0, [r0, #0]
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	a902      	add	r1, sp, #8
 8007794:	f002 fed4 	bl	800a540 <_svfiprintf_r>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	b01c      	add	sp, #112	; 0x70
 80077a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a4:	b003      	add	sp, #12
 80077a6:	4770      	bx	lr
 80077a8:	200000fc 	.word	0x200000fc
 80077ac:	ffff0208 	.word	0xffff0208

080077b0 <sulp>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4604      	mov	r4, r0
 80077b4:	460d      	mov	r5, r1
 80077b6:	ec45 4b10 	vmov	d0, r4, r5
 80077ba:	4616      	mov	r6, r2
 80077bc:	f002 fc1e 	bl	8009ffc <__ulp>
 80077c0:	ec51 0b10 	vmov	r0, r1, d0
 80077c4:	b17e      	cbz	r6, 80077e6 <sulp+0x36>
 80077c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd09      	ble.n	80077e6 <sulp+0x36>
 80077d2:	051b      	lsls	r3, r3, #20
 80077d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80077d8:	2400      	movs	r4, #0
 80077da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80077de:	4622      	mov	r2, r4
 80077e0:	462b      	mov	r3, r5
 80077e2:	f7f8 ff11 	bl	8000608 <__aeabi_dmul>
 80077e6:	bd70      	pop	{r4, r5, r6, pc}

080077e8 <_strtod_l>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b02 	vpush	{d8}
 80077f0:	b09d      	sub	sp, #116	; 0x74
 80077f2:	461f      	mov	r7, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	9318      	str	r3, [sp, #96]	; 0x60
 80077f8:	4ba2      	ldr	r3, [pc, #648]	; (8007a84 <_strtod_l+0x29c>)
 80077fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	4604      	mov	r4, r0
 8007802:	4618      	mov	r0, r3
 8007804:	4688      	mov	r8, r1
 8007806:	f7f8 fceb 	bl	80001e0 <strlen>
 800780a:	f04f 0a00 	mov.w	sl, #0
 800780e:	4605      	mov	r5, r0
 8007810:	f04f 0b00 	mov.w	fp, #0
 8007814:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	2a2b      	cmp	r2, #43	; 0x2b
 800781e:	d04e      	beq.n	80078be <_strtod_l+0xd6>
 8007820:	d83b      	bhi.n	800789a <_strtod_l+0xb2>
 8007822:	2a0d      	cmp	r2, #13
 8007824:	d834      	bhi.n	8007890 <_strtod_l+0xa8>
 8007826:	2a08      	cmp	r2, #8
 8007828:	d834      	bhi.n	8007894 <_strtod_l+0xac>
 800782a:	2a00      	cmp	r2, #0
 800782c:	d03e      	beq.n	80078ac <_strtod_l+0xc4>
 800782e:	2300      	movs	r3, #0
 8007830:	930a      	str	r3, [sp, #40]	; 0x28
 8007832:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007834:	7833      	ldrb	r3, [r6, #0]
 8007836:	2b30      	cmp	r3, #48	; 0x30
 8007838:	f040 80b0 	bne.w	800799c <_strtod_l+0x1b4>
 800783c:	7873      	ldrb	r3, [r6, #1]
 800783e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007842:	2b58      	cmp	r3, #88	; 0x58
 8007844:	d168      	bne.n	8007918 <_strtod_l+0x130>
 8007846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	ab18      	add	r3, sp, #96	; 0x60
 800784c:	9702      	str	r7, [sp, #8]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4a8d      	ldr	r2, [pc, #564]	; (8007a88 <_strtod_l+0x2a0>)
 8007852:	ab19      	add	r3, sp, #100	; 0x64
 8007854:	a917      	add	r1, sp, #92	; 0x5c
 8007856:	4620      	mov	r0, r4
 8007858:	f001 fd38 	bl	80092cc <__gethex>
 800785c:	f010 0707 	ands.w	r7, r0, #7
 8007860:	4605      	mov	r5, r0
 8007862:	d005      	beq.n	8007870 <_strtod_l+0x88>
 8007864:	2f06      	cmp	r7, #6
 8007866:	d12c      	bne.n	80078c2 <_strtod_l+0xda>
 8007868:	3601      	adds	r6, #1
 800786a:	2300      	movs	r3, #0
 800786c:	9617      	str	r6, [sp, #92]	; 0x5c
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007872:	2b00      	cmp	r3, #0
 8007874:	f040 8590 	bne.w	8008398 <_strtod_l+0xbb0>
 8007878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787a:	b1eb      	cbz	r3, 80078b8 <_strtod_l+0xd0>
 800787c:	4652      	mov	r2, sl
 800787e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007882:	ec43 2b10 	vmov	d0, r2, r3
 8007886:	b01d      	add	sp, #116	; 0x74
 8007888:	ecbd 8b02 	vpop	{d8}
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	2a20      	cmp	r2, #32
 8007892:	d1cc      	bne.n	800782e <_strtod_l+0x46>
 8007894:	3301      	adds	r3, #1
 8007896:	9317      	str	r3, [sp, #92]	; 0x5c
 8007898:	e7be      	b.n	8007818 <_strtod_l+0x30>
 800789a:	2a2d      	cmp	r2, #45	; 0x2d
 800789c:	d1c7      	bne.n	800782e <_strtod_l+0x46>
 800789e:	2201      	movs	r2, #1
 80078a0:	920a      	str	r2, [sp, #40]	; 0x28
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1c2      	bne.n	8007832 <_strtod_l+0x4a>
 80078ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 856e 	bne.w	8008394 <_strtod_l+0xbac>
 80078b8:	4652      	mov	r2, sl
 80078ba:	465b      	mov	r3, fp
 80078bc:	e7e1      	b.n	8007882 <_strtod_l+0x9a>
 80078be:	2200      	movs	r2, #0
 80078c0:	e7ee      	b.n	80078a0 <_strtod_l+0xb8>
 80078c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078c4:	b13a      	cbz	r2, 80078d6 <_strtod_l+0xee>
 80078c6:	2135      	movs	r1, #53	; 0x35
 80078c8:	a81a      	add	r0, sp, #104	; 0x68
 80078ca:	f002 fca2 	bl	800a212 <__copybits>
 80078ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078d0:	4620      	mov	r0, r4
 80078d2:	f002 f861 	bl	8009998 <_Bfree>
 80078d6:	3f01      	subs	r7, #1
 80078d8:	2f04      	cmp	r7, #4
 80078da:	d806      	bhi.n	80078ea <_strtod_l+0x102>
 80078dc:	e8df f007 	tbb	[pc, r7]
 80078e0:	1714030a 	.word	0x1714030a
 80078e4:	0a          	.byte	0x0a
 80078e5:	00          	.byte	0x00
 80078e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80078ea:	0728      	lsls	r0, r5, #28
 80078ec:	d5c0      	bpl.n	8007870 <_strtod_l+0x88>
 80078ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80078f2:	e7bd      	b.n	8007870 <_strtod_l+0x88>
 80078f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80078f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007902:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007906:	e7f0      	b.n	80078ea <_strtod_l+0x102>
 8007908:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007a8c <_strtod_l+0x2a4>
 800790c:	e7ed      	b.n	80078ea <_strtod_l+0x102>
 800790e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007912:	f04f 3aff 	mov.w	sl, #4294967295
 8007916:	e7e8      	b.n	80078ea <_strtod_l+0x102>
 8007918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	9217      	str	r2, [sp, #92]	; 0x5c
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b30      	cmp	r3, #48	; 0x30
 8007922:	d0f9      	beq.n	8007918 <_strtod_l+0x130>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0a3      	beq.n	8007870 <_strtod_l+0x88>
 8007928:	2301      	movs	r3, #1
 800792a:	f04f 0900 	mov.w	r9, #0
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007932:	9308      	str	r3, [sp, #32]
 8007934:	f8cd 901c 	str.w	r9, [sp, #28]
 8007938:	464f      	mov	r7, r9
 800793a:	220a      	movs	r2, #10
 800793c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800793e:	7806      	ldrb	r6, [r0, #0]
 8007940:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007944:	b2d9      	uxtb	r1, r3
 8007946:	2909      	cmp	r1, #9
 8007948:	d92a      	bls.n	80079a0 <_strtod_l+0x1b8>
 800794a:	9905      	ldr	r1, [sp, #20]
 800794c:	462a      	mov	r2, r5
 800794e:	f002 ff0f 	bl	800a770 <strncmp>
 8007952:	b398      	cbz	r0, 80079bc <_strtod_l+0x1d4>
 8007954:	2000      	movs	r0, #0
 8007956:	4632      	mov	r2, r6
 8007958:	463d      	mov	r5, r7
 800795a:	9005      	str	r0, [sp, #20]
 800795c:	4603      	mov	r3, r0
 800795e:	2a65      	cmp	r2, #101	; 0x65
 8007960:	d001      	beq.n	8007966 <_strtod_l+0x17e>
 8007962:	2a45      	cmp	r2, #69	; 0x45
 8007964:	d118      	bne.n	8007998 <_strtod_l+0x1b0>
 8007966:	b91d      	cbnz	r5, 8007970 <_strtod_l+0x188>
 8007968:	9a04      	ldr	r2, [sp, #16]
 800796a:	4302      	orrs	r2, r0
 800796c:	d09e      	beq.n	80078ac <_strtod_l+0xc4>
 800796e:	2500      	movs	r5, #0
 8007970:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007974:	f108 0201 	add.w	r2, r8, #1
 8007978:	9217      	str	r2, [sp, #92]	; 0x5c
 800797a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800797e:	2a2b      	cmp	r2, #43	; 0x2b
 8007980:	d075      	beq.n	8007a6e <_strtod_l+0x286>
 8007982:	2a2d      	cmp	r2, #45	; 0x2d
 8007984:	d07b      	beq.n	8007a7e <_strtod_l+0x296>
 8007986:	f04f 0c00 	mov.w	ip, #0
 800798a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800798e:	2909      	cmp	r1, #9
 8007990:	f240 8082 	bls.w	8007a98 <_strtod_l+0x2b0>
 8007994:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007998:	2600      	movs	r6, #0
 800799a:	e09d      	b.n	8007ad8 <_strtod_l+0x2f0>
 800799c:	2300      	movs	r3, #0
 800799e:	e7c4      	b.n	800792a <_strtod_l+0x142>
 80079a0:	2f08      	cmp	r7, #8
 80079a2:	bfd8      	it	le
 80079a4:	9907      	ldrle	r1, [sp, #28]
 80079a6:	f100 0001 	add.w	r0, r0, #1
 80079aa:	bfda      	itte	le
 80079ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80079b0:	9307      	strle	r3, [sp, #28]
 80079b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80079b6:	3701      	adds	r7, #1
 80079b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80079ba:	e7bf      	b.n	800793c <_strtod_l+0x154>
 80079bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079be:	195a      	adds	r2, r3, r5
 80079c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80079c2:	5d5a      	ldrb	r2, [r3, r5]
 80079c4:	2f00      	cmp	r7, #0
 80079c6:	d037      	beq.n	8007a38 <_strtod_l+0x250>
 80079c8:	9005      	str	r0, [sp, #20]
 80079ca:	463d      	mov	r5, r7
 80079cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80079d0:	2b09      	cmp	r3, #9
 80079d2:	d912      	bls.n	80079fa <_strtod_l+0x212>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e7c2      	b.n	800795e <_strtod_l+0x176>
 80079d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80079de:	785a      	ldrb	r2, [r3, #1]
 80079e0:	3001      	adds	r0, #1
 80079e2:	2a30      	cmp	r2, #48	; 0x30
 80079e4:	d0f8      	beq.n	80079d8 <_strtod_l+0x1f0>
 80079e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	f200 84d9 	bhi.w	80083a2 <_strtod_l+0xbba>
 80079f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079f2:	9005      	str	r0, [sp, #20]
 80079f4:	2000      	movs	r0, #0
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	4605      	mov	r5, r0
 80079fa:	3a30      	subs	r2, #48	; 0x30
 80079fc:	f100 0301 	add.w	r3, r0, #1
 8007a00:	d014      	beq.n	8007a2c <_strtod_l+0x244>
 8007a02:	9905      	ldr	r1, [sp, #20]
 8007a04:	4419      	add	r1, r3
 8007a06:	9105      	str	r1, [sp, #20]
 8007a08:	462b      	mov	r3, r5
 8007a0a:	eb00 0e05 	add.w	lr, r0, r5
 8007a0e:	210a      	movs	r1, #10
 8007a10:	4573      	cmp	r3, lr
 8007a12:	d113      	bne.n	8007a3c <_strtod_l+0x254>
 8007a14:	182b      	adds	r3, r5, r0
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	f105 0501 	add.w	r5, r5, #1
 8007a1c:	4405      	add	r5, r0
 8007a1e:	dc1c      	bgt.n	8007a5a <_strtod_l+0x272>
 8007a20:	9907      	ldr	r1, [sp, #28]
 8007a22:	230a      	movs	r3, #10
 8007a24:	fb03 2301 	mla	r3, r3, r1, r2
 8007a28:	9307      	str	r3, [sp, #28]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a2e:	1c51      	adds	r1, r2, #1
 8007a30:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a32:	7852      	ldrb	r2, [r2, #1]
 8007a34:	4618      	mov	r0, r3
 8007a36:	e7c9      	b.n	80079cc <_strtod_l+0x1e4>
 8007a38:	4638      	mov	r0, r7
 8007a3a:	e7d2      	b.n	80079e2 <_strtod_l+0x1fa>
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	dc04      	bgt.n	8007a4a <_strtod_l+0x262>
 8007a40:	9e07      	ldr	r6, [sp, #28]
 8007a42:	434e      	muls	r6, r1
 8007a44:	9607      	str	r6, [sp, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	e7e2      	b.n	8007a10 <_strtod_l+0x228>
 8007a4a:	f103 0c01 	add.w	ip, r3, #1
 8007a4e:	f1bc 0f10 	cmp.w	ip, #16
 8007a52:	bfd8      	it	le
 8007a54:	fb01 f909 	mulle.w	r9, r1, r9
 8007a58:	e7f5      	b.n	8007a46 <_strtod_l+0x25e>
 8007a5a:	2d10      	cmp	r5, #16
 8007a5c:	bfdc      	itt	le
 8007a5e:	230a      	movle	r3, #10
 8007a60:	fb03 2909 	mlale	r9, r3, r9, r2
 8007a64:	e7e1      	b.n	8007a2a <_strtod_l+0x242>
 8007a66:	2300      	movs	r3, #0
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e77c      	b.n	8007968 <_strtod_l+0x180>
 8007a6e:	f04f 0c00 	mov.w	ip, #0
 8007a72:	f108 0202 	add.w	r2, r8, #2
 8007a76:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007a7c:	e785      	b.n	800798a <_strtod_l+0x1a2>
 8007a7e:	f04f 0c01 	mov.w	ip, #1
 8007a82:	e7f6      	b.n	8007a72 <_strtod_l+0x28a>
 8007a84:	0800b650 	.word	0x0800b650
 8007a88:	0800b408 	.word	0x0800b408
 8007a8c:	7ff00000 	.word	0x7ff00000
 8007a90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a92:	1c51      	adds	r1, r2, #1
 8007a94:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a96:	7852      	ldrb	r2, [r2, #1]
 8007a98:	2a30      	cmp	r2, #48	; 0x30
 8007a9a:	d0f9      	beq.n	8007a90 <_strtod_l+0x2a8>
 8007a9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007aa0:	2908      	cmp	r1, #8
 8007aa2:	f63f af79 	bhi.w	8007998 <_strtod_l+0x1b0>
 8007aa6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007aaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007aac:	9206      	str	r2, [sp, #24]
 8007aae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ab0:	1c51      	adds	r1, r2, #1
 8007ab2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ab4:	7852      	ldrb	r2, [r2, #1]
 8007ab6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007aba:	2e09      	cmp	r6, #9
 8007abc:	d937      	bls.n	8007b2e <_strtod_l+0x346>
 8007abe:	9e06      	ldr	r6, [sp, #24]
 8007ac0:	1b89      	subs	r1, r1, r6
 8007ac2:	2908      	cmp	r1, #8
 8007ac4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ac8:	dc02      	bgt.n	8007ad0 <_strtod_l+0x2e8>
 8007aca:	4576      	cmp	r6, lr
 8007acc:	bfa8      	it	ge
 8007ace:	4676      	movge	r6, lr
 8007ad0:	f1bc 0f00 	cmp.w	ip, #0
 8007ad4:	d000      	beq.n	8007ad8 <_strtod_l+0x2f0>
 8007ad6:	4276      	negs	r6, r6
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	d14d      	bne.n	8007b78 <_strtod_l+0x390>
 8007adc:	9904      	ldr	r1, [sp, #16]
 8007ade:	4301      	orrs	r1, r0
 8007ae0:	f47f aec6 	bne.w	8007870 <_strtod_l+0x88>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f47f aee1 	bne.w	80078ac <_strtod_l+0xc4>
 8007aea:	2a69      	cmp	r2, #105	; 0x69
 8007aec:	d027      	beq.n	8007b3e <_strtod_l+0x356>
 8007aee:	dc24      	bgt.n	8007b3a <_strtod_l+0x352>
 8007af0:	2a49      	cmp	r2, #73	; 0x49
 8007af2:	d024      	beq.n	8007b3e <_strtod_l+0x356>
 8007af4:	2a4e      	cmp	r2, #78	; 0x4e
 8007af6:	f47f aed9 	bne.w	80078ac <_strtod_l+0xc4>
 8007afa:	499f      	ldr	r1, [pc, #636]	; (8007d78 <_strtod_l+0x590>)
 8007afc:	a817      	add	r0, sp, #92	; 0x5c
 8007afe:	f001 fe3d 	bl	800977c <__match>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f43f aed2 	beq.w	80078ac <_strtod_l+0xc4>
 8007b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b28      	cmp	r3, #40	; 0x28
 8007b0e:	d12d      	bne.n	8007b6c <_strtod_l+0x384>
 8007b10:	499a      	ldr	r1, [pc, #616]	; (8007d7c <_strtod_l+0x594>)
 8007b12:	aa1a      	add	r2, sp, #104	; 0x68
 8007b14:	a817      	add	r0, sp, #92	; 0x5c
 8007b16:	f001 fe45 	bl	80097a4 <__hexnan>
 8007b1a:	2805      	cmp	r0, #5
 8007b1c:	d126      	bne.n	8007b6c <_strtod_l+0x384>
 8007b1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b2c:	e6a0      	b.n	8007870 <_strtod_l+0x88>
 8007b2e:	210a      	movs	r1, #10
 8007b30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007b34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b38:	e7b9      	b.n	8007aae <_strtod_l+0x2c6>
 8007b3a:	2a6e      	cmp	r2, #110	; 0x6e
 8007b3c:	e7db      	b.n	8007af6 <_strtod_l+0x30e>
 8007b3e:	4990      	ldr	r1, [pc, #576]	; (8007d80 <_strtod_l+0x598>)
 8007b40:	a817      	add	r0, sp, #92	; 0x5c
 8007b42:	f001 fe1b 	bl	800977c <__match>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aeb0 	beq.w	80078ac <_strtod_l+0xc4>
 8007b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4e:	498d      	ldr	r1, [pc, #564]	; (8007d84 <_strtod_l+0x59c>)
 8007b50:	3b01      	subs	r3, #1
 8007b52:	a817      	add	r0, sp, #92	; 0x5c
 8007b54:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b56:	f001 fe11 	bl	800977c <__match>
 8007b5a:	b910      	cbnz	r0, 8007b62 <_strtod_l+0x37a>
 8007b5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b5e:	3301      	adds	r3, #1
 8007b60:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007d94 <_strtod_l+0x5ac>
 8007b66:	f04f 0a00 	mov.w	sl, #0
 8007b6a:	e681      	b.n	8007870 <_strtod_l+0x88>
 8007b6c:	4886      	ldr	r0, [pc, #536]	; (8007d88 <_strtod_l+0x5a0>)
 8007b6e:	f002 fde7 	bl	800a740 <nan>
 8007b72:	ec5b ab10 	vmov	sl, fp, d0
 8007b76:	e67b      	b.n	8007870 <_strtod_l+0x88>
 8007b78:	9b05      	ldr	r3, [sp, #20]
 8007b7a:	9807      	ldr	r0, [sp, #28]
 8007b7c:	1af3      	subs	r3, r6, r3
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	bf08      	it	eq
 8007b82:	462f      	moveq	r7, r5
 8007b84:	2d10      	cmp	r5, #16
 8007b86:	9306      	str	r3, [sp, #24]
 8007b88:	46a8      	mov	r8, r5
 8007b8a:	bfa8      	it	ge
 8007b8c:	f04f 0810 	movge.w	r8, #16
 8007b90:	f7f8 fcc0 	bl	8000514 <__aeabi_ui2d>
 8007b94:	2d09      	cmp	r5, #9
 8007b96:	4682      	mov	sl, r0
 8007b98:	468b      	mov	fp, r1
 8007b9a:	dd13      	ble.n	8007bc4 <_strtod_l+0x3dc>
 8007b9c:	4b7b      	ldr	r3, [pc, #492]	; (8007d8c <_strtod_l+0x5a4>)
 8007b9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ba2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ba6:	f7f8 fd2f 	bl	8000608 <__aeabi_dmul>
 8007baa:	4682      	mov	sl, r0
 8007bac:	4648      	mov	r0, r9
 8007bae:	468b      	mov	fp, r1
 8007bb0:	f7f8 fcb0 	bl	8000514 <__aeabi_ui2d>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4650      	mov	r0, sl
 8007bba:	4659      	mov	r1, fp
 8007bbc:	f7f8 fb6e 	bl	800029c <__adddf3>
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	468b      	mov	fp, r1
 8007bc4:	2d0f      	cmp	r5, #15
 8007bc6:	dc38      	bgt.n	8007c3a <_strtod_l+0x452>
 8007bc8:	9b06      	ldr	r3, [sp, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f43f ae50 	beq.w	8007870 <_strtod_l+0x88>
 8007bd0:	dd24      	ble.n	8007c1c <_strtod_l+0x434>
 8007bd2:	2b16      	cmp	r3, #22
 8007bd4:	dc0b      	bgt.n	8007bee <_strtod_l+0x406>
 8007bd6:	496d      	ldr	r1, [pc, #436]	; (8007d8c <_strtod_l+0x5a4>)
 8007bd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be0:	4652      	mov	r2, sl
 8007be2:	465b      	mov	r3, fp
 8007be4:	f7f8 fd10 	bl	8000608 <__aeabi_dmul>
 8007be8:	4682      	mov	sl, r0
 8007bea:	468b      	mov	fp, r1
 8007bec:	e640      	b.n	8007870 <_strtod_l+0x88>
 8007bee:	9a06      	ldr	r2, [sp, #24]
 8007bf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	db20      	blt.n	8007c3a <_strtod_l+0x452>
 8007bf8:	4c64      	ldr	r4, [pc, #400]	; (8007d8c <_strtod_l+0x5a4>)
 8007bfa:	f1c5 050f 	rsb	r5, r5, #15
 8007bfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c0a:	f7f8 fcfd 	bl	8000608 <__aeabi_dmul>
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	1b5d      	subs	r5, r3, r5
 8007c12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c1a:	e7e3      	b.n	8007be4 <_strtod_l+0x3fc>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	3316      	adds	r3, #22
 8007c20:	db0b      	blt.n	8007c3a <_strtod_l+0x452>
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	1b9e      	subs	r6, r3, r6
 8007c26:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <_strtod_l+0x5a4>)
 8007c28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007c2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c30:	4650      	mov	r0, sl
 8007c32:	4659      	mov	r1, fp
 8007c34:	f7f8 fe12 	bl	800085c <__aeabi_ddiv>
 8007c38:	e7d6      	b.n	8007be8 <_strtod_l+0x400>
 8007c3a:	9b06      	ldr	r3, [sp, #24]
 8007c3c:	eba5 0808 	sub.w	r8, r5, r8
 8007c40:	4498      	add	r8, r3
 8007c42:	f1b8 0f00 	cmp.w	r8, #0
 8007c46:	dd74      	ble.n	8007d32 <_strtod_l+0x54a>
 8007c48:	f018 030f 	ands.w	r3, r8, #15
 8007c4c:	d00a      	beq.n	8007c64 <_strtod_l+0x47c>
 8007c4e:	494f      	ldr	r1, [pc, #316]	; (8007d8c <_strtod_l+0x5a4>)
 8007c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c54:	4652      	mov	r2, sl
 8007c56:	465b      	mov	r3, fp
 8007c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5c:	f7f8 fcd4 	bl	8000608 <__aeabi_dmul>
 8007c60:	4682      	mov	sl, r0
 8007c62:	468b      	mov	fp, r1
 8007c64:	f038 080f 	bics.w	r8, r8, #15
 8007c68:	d04f      	beq.n	8007d0a <_strtod_l+0x522>
 8007c6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c6e:	dd22      	ble.n	8007cb6 <_strtod_l+0x4ce>
 8007c70:	2500      	movs	r5, #0
 8007c72:	462e      	mov	r6, r5
 8007c74:	9507      	str	r5, [sp, #28]
 8007c76:	9505      	str	r5, [sp, #20]
 8007c78:	2322      	movs	r3, #34	; 0x22
 8007c7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007d94 <_strtod_l+0x5ac>
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	f04f 0a00 	mov.w	sl, #0
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f43f adf2 	beq.w	8007870 <_strtod_l+0x88>
 8007c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f001 fe82 	bl	8009998 <_Bfree>
 8007c94:	9905      	ldr	r1, [sp, #20]
 8007c96:	4620      	mov	r0, r4
 8007c98:	f001 fe7e 	bl	8009998 <_Bfree>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f001 fe7a 	bl	8009998 <_Bfree>
 8007ca4:	9907      	ldr	r1, [sp, #28]
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 fe76 	bl	8009998 <_Bfree>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f001 fe72 	bl	8009998 <_Bfree>
 8007cb4:	e5dc      	b.n	8007870 <_strtod_l+0x88>
 8007cb6:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <_strtod_l+0x5a8>)
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	4699      	mov	r9, r3
 8007cc6:	f1b8 0f01 	cmp.w	r8, #1
 8007cca:	dc21      	bgt.n	8007d10 <_strtod_l+0x528>
 8007ccc:	b10b      	cbz	r3, 8007cd2 <_strtod_l+0x4ea>
 8007cce:	4682      	mov	sl, r0
 8007cd0:	468b      	mov	fp, r1
 8007cd2:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <_strtod_l+0x5a8>)
 8007cd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007cd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007cdc:	4652      	mov	r2, sl
 8007cde:	465b      	mov	r3, fp
 8007ce0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ce4:	f7f8 fc90 	bl	8000608 <__aeabi_dmul>
 8007ce8:	4b2a      	ldr	r3, [pc, #168]	; (8007d94 <_strtod_l+0x5ac>)
 8007cea:	460a      	mov	r2, r1
 8007cec:	400b      	ands	r3, r1
 8007cee:	492a      	ldr	r1, [pc, #168]	; (8007d98 <_strtod_l+0x5b0>)
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	4682      	mov	sl, r0
 8007cf4:	d8bc      	bhi.n	8007c70 <_strtod_l+0x488>
 8007cf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007cfa:	428b      	cmp	r3, r1
 8007cfc:	bf86      	itte	hi
 8007cfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007d9c <_strtod_l+0x5b4>
 8007d02:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	e084      	b.n	8007e1a <_strtod_l+0x632>
 8007d10:	f018 0f01 	tst.w	r8, #1
 8007d14:	d005      	beq.n	8007d22 <_strtod_l+0x53a>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fc74 	bl	8000608 <__aeabi_dmul>
 8007d20:	2301      	movs	r3, #1
 8007d22:	9a04      	ldr	r2, [sp, #16]
 8007d24:	3208      	adds	r2, #8
 8007d26:	f109 0901 	add.w	r9, r9, #1
 8007d2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d2e:	9204      	str	r2, [sp, #16]
 8007d30:	e7c9      	b.n	8007cc6 <_strtod_l+0x4de>
 8007d32:	d0ea      	beq.n	8007d0a <_strtod_l+0x522>
 8007d34:	f1c8 0800 	rsb	r8, r8, #0
 8007d38:	f018 020f 	ands.w	r2, r8, #15
 8007d3c:	d00a      	beq.n	8007d54 <_strtod_l+0x56c>
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <_strtod_l+0x5a4>)
 8007d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d44:	4650      	mov	r0, sl
 8007d46:	4659      	mov	r1, fp
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fd86 	bl	800085c <__aeabi_ddiv>
 8007d50:	4682      	mov	sl, r0
 8007d52:	468b      	mov	fp, r1
 8007d54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007d58:	d0d7      	beq.n	8007d0a <_strtod_l+0x522>
 8007d5a:	f1b8 0f1f 	cmp.w	r8, #31
 8007d5e:	dd1f      	ble.n	8007da0 <_strtod_l+0x5b8>
 8007d60:	2500      	movs	r5, #0
 8007d62:	462e      	mov	r6, r5
 8007d64:	9507      	str	r5, [sp, #28]
 8007d66:	9505      	str	r5, [sp, #20]
 8007d68:	2322      	movs	r3, #34	; 0x22
 8007d6a:	f04f 0a00 	mov.w	sl, #0
 8007d6e:	f04f 0b00 	mov.w	fp, #0
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	e786      	b.n	8007c84 <_strtod_l+0x49c>
 8007d76:	bf00      	nop
 8007d78:	0800b3d9 	.word	0x0800b3d9
 8007d7c:	0800b41c 	.word	0x0800b41c
 8007d80:	0800b3d1 	.word	0x0800b3d1
 8007d84:	0800b55c 	.word	0x0800b55c
 8007d88:	0800b808 	.word	0x0800b808
 8007d8c:	0800b6e8 	.word	0x0800b6e8
 8007d90:	0800b6c0 	.word	0x0800b6c0
 8007d94:	7ff00000 	.word	0x7ff00000
 8007d98:	7ca00000 	.word	0x7ca00000
 8007d9c:	7fefffff 	.word	0x7fefffff
 8007da0:	f018 0310 	ands.w	r3, r8, #16
 8007da4:	bf18      	it	ne
 8007da6:	236a      	movne	r3, #106	; 0x6a
 8007da8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008158 <_strtod_l+0x970>
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	4650      	mov	r0, sl
 8007db0:	4659      	mov	r1, fp
 8007db2:	2300      	movs	r3, #0
 8007db4:	f018 0f01 	tst.w	r8, #1
 8007db8:	d004      	beq.n	8007dc4 <_strtod_l+0x5dc>
 8007dba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007dbe:	f7f8 fc23 	bl	8000608 <__aeabi_dmul>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007dc8:	f109 0908 	add.w	r9, r9, #8
 8007dcc:	d1f2      	bne.n	8007db4 <_strtod_l+0x5cc>
 8007dce:	b10b      	cbz	r3, 8007dd4 <_strtod_l+0x5ec>
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	468b      	mov	fp, r1
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	b1c3      	cbz	r3, 8007e0a <_strtod_l+0x622>
 8007dd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007ddc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	4659      	mov	r1, fp
 8007de4:	dd11      	ble.n	8007e0a <_strtod_l+0x622>
 8007de6:	2b1f      	cmp	r3, #31
 8007de8:	f340 8124 	ble.w	8008034 <_strtod_l+0x84c>
 8007dec:	2b34      	cmp	r3, #52	; 0x34
 8007dee:	bfde      	ittt	le
 8007df0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007df4:	f04f 33ff 	movle.w	r3, #4294967295
 8007df8:	fa03 f202 	lslle.w	r2, r3, r2
 8007dfc:	f04f 0a00 	mov.w	sl, #0
 8007e00:	bfcc      	ite	gt
 8007e02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007e06:	ea02 0b01 	andle.w	fp, r2, r1
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4650      	mov	r0, sl
 8007e10:	4659      	mov	r1, fp
 8007e12:	f7f8 fe61 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d1a2      	bne.n	8007d60 <_strtod_l+0x578>
 8007e1a:	9b07      	ldr	r3, [sp, #28]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	9908      	ldr	r1, [sp, #32]
 8007e20:	462b      	mov	r3, r5
 8007e22:	463a      	mov	r2, r7
 8007e24:	4620      	mov	r0, r4
 8007e26:	f001 fe1f 	bl	8009a68 <__s2b>
 8007e2a:	9007      	str	r0, [sp, #28]
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f af1f 	beq.w	8007c70 <_strtod_l+0x488>
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	1b9e      	subs	r6, r3, r6
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bfb4      	ite	lt
 8007e3c:	4633      	movlt	r3, r6
 8007e3e:	2300      	movge	r3, #0
 8007e40:	930c      	str	r3, [sp, #48]	; 0x30
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	2500      	movs	r5, #0
 8007e46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007e4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e4c:	462e      	mov	r6, r5
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	4620      	mov	r0, r4
 8007e52:	6859      	ldr	r1, [r3, #4]
 8007e54:	f001 fd60 	bl	8009918 <_Balloc>
 8007e58:	9005      	str	r0, [sp, #20]
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	f43f af0c 	beq.w	8007c78 <_strtod_l+0x490>
 8007e60:	9b07      	ldr	r3, [sp, #28]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	3202      	adds	r2, #2
 8007e66:	f103 010c 	add.w	r1, r3, #12
 8007e6a:	0092      	lsls	r2, r2, #2
 8007e6c:	300c      	adds	r0, #12
 8007e6e:	f7fe fde9 	bl	8006a44 <memcpy>
 8007e72:	ec4b ab10 	vmov	d0, sl, fp
 8007e76:	aa1a      	add	r2, sp, #104	; 0x68
 8007e78:	a919      	add	r1, sp, #100	; 0x64
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f002 f93a 	bl	800a0f4 <__d2b>
 8007e80:	ec4b ab18 	vmov	d8, sl, fp
 8007e84:	9018      	str	r0, [sp, #96]	; 0x60
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f aef6 	beq.w	8007c78 <_strtod_l+0x490>
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f001 fe84 	bl	8009b9c <__i2b>
 8007e94:	4606      	mov	r6, r0
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f aeee 	beq.w	8007c78 <_strtod_l+0x490>
 8007e9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e9e:	9904      	ldr	r1, [sp, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bfab      	itete	ge
 8007ea4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007ea6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007ea8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007eaa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007eae:	bfac      	ite	ge
 8007eb0:	eb03 0902 	addge.w	r9, r3, r2
 8007eb4:	1ad7      	sublt	r7, r2, r3
 8007eb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007eb8:	eba3 0801 	sub.w	r8, r3, r1
 8007ebc:	4490      	add	r8, r2
 8007ebe:	4ba1      	ldr	r3, [pc, #644]	; (8008144 <_strtod_l+0x95c>)
 8007ec0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ec4:	4598      	cmp	r8, r3
 8007ec6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007eca:	f280 80c7 	bge.w	800805c <_strtod_l+0x874>
 8007ece:	eba3 0308 	sub.w	r3, r3, r8
 8007ed2:	2b1f      	cmp	r3, #31
 8007ed4:	eba2 0203 	sub.w	r2, r2, r3
 8007ed8:	f04f 0101 	mov.w	r1, #1
 8007edc:	f300 80b1 	bgt.w	8008042 <_strtod_l+0x85a>
 8007ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9308      	str	r3, [sp, #32]
 8007eea:	eb09 0802 	add.w	r8, r9, r2
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	45c1      	cmp	r9, r8
 8007ef2:	4417      	add	r7, r2
 8007ef4:	441f      	add	r7, r3
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	bfa8      	it	ge
 8007efa:	4643      	movge	r3, r8
 8007efc:	42bb      	cmp	r3, r7
 8007efe:	bfa8      	it	ge
 8007f00:	463b      	movge	r3, r7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bfc2      	ittt	gt
 8007f06:	eba8 0803 	subgt.w	r8, r8, r3
 8007f0a:	1aff      	subgt	r7, r7, r3
 8007f0c:	eba9 0903 	subgt.w	r9, r9, r3
 8007f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd17      	ble.n	8007f46 <_strtod_l+0x75e>
 8007f16:	4631      	mov	r1, r6
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f001 fefe 	bl	8009d1c <__pow5mult>
 8007f20:	4606      	mov	r6, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f43f aea8 	beq.w	8007c78 <_strtod_l+0x490>
 8007f28:	4601      	mov	r1, r0
 8007f2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f001 fe4b 	bl	8009bc8 <__multiply>
 8007f32:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f43f ae9f 	beq.w	8007c78 <_strtod_l+0x490>
 8007f3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f001 fd2b 	bl	8009998 <_Bfree>
 8007f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f44:	9318      	str	r3, [sp, #96]	; 0x60
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	f300 808c 	bgt.w	8008066 <_strtod_l+0x87e>
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd08      	ble.n	8007f66 <_strtod_l+0x77e>
 8007f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f56:	9905      	ldr	r1, [sp, #20]
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f001 fedf 	bl	8009d1c <__pow5mult>
 8007f5e:	9005      	str	r0, [sp, #20]
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f43f ae89 	beq.w	8007c78 <_strtod_l+0x490>
 8007f66:	2f00      	cmp	r7, #0
 8007f68:	dd08      	ble.n	8007f7c <_strtod_l+0x794>
 8007f6a:	9905      	ldr	r1, [sp, #20]
 8007f6c:	463a      	mov	r2, r7
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f001 ff2e 	bl	8009dd0 <__lshift>
 8007f74:	9005      	str	r0, [sp, #20]
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f43f ae7e 	beq.w	8007c78 <_strtod_l+0x490>
 8007f7c:	f1b9 0f00 	cmp.w	r9, #0
 8007f80:	dd08      	ble.n	8007f94 <_strtod_l+0x7ac>
 8007f82:	4631      	mov	r1, r6
 8007f84:	464a      	mov	r2, r9
 8007f86:	4620      	mov	r0, r4
 8007f88:	f001 ff22 	bl	8009dd0 <__lshift>
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f43f ae72 	beq.w	8007c78 <_strtod_l+0x490>
 8007f94:	9a05      	ldr	r2, [sp, #20]
 8007f96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f001 ffa5 	bl	8009ee8 <__mdiff>
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f43f ae69 	beq.w	8007c78 <_strtod_l+0x490>
 8007fa6:	68c3      	ldr	r3, [r0, #12]
 8007fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007faa:	2300      	movs	r3, #0
 8007fac:	60c3      	str	r3, [r0, #12]
 8007fae:	4631      	mov	r1, r6
 8007fb0:	f001 ff7e 	bl	8009eb0 <__mcmp>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	da60      	bge.n	800807a <_strtod_l+0x892>
 8007fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fba:	ea53 030a 	orrs.w	r3, r3, sl
 8007fbe:	f040 8082 	bne.w	80080c6 <_strtod_l+0x8de>
 8007fc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d17d      	bne.n	80080c6 <_strtod_l+0x8de>
 8007fca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fce:	0d1b      	lsrs	r3, r3, #20
 8007fd0:	051b      	lsls	r3, r3, #20
 8007fd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007fd6:	d976      	bls.n	80080c6 <_strtod_l+0x8de>
 8007fd8:	696b      	ldr	r3, [r5, #20]
 8007fda:	b913      	cbnz	r3, 8007fe2 <_strtod_l+0x7fa>
 8007fdc:	692b      	ldr	r3, [r5, #16]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	dd71      	ble.n	80080c6 <_strtod_l+0x8de>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 fef2 	bl	8009dd0 <__lshift>
 8007fec:	4631      	mov	r1, r6
 8007fee:	4605      	mov	r5, r0
 8007ff0:	f001 ff5e 	bl	8009eb0 <__mcmp>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dd66      	ble.n	80080c6 <_strtod_l+0x8de>
 8007ff8:	9904      	ldr	r1, [sp, #16]
 8007ffa:	4a53      	ldr	r2, [pc, #332]	; (8008148 <_strtod_l+0x960>)
 8007ffc:	465b      	mov	r3, fp
 8007ffe:	2900      	cmp	r1, #0
 8008000:	f000 8081 	beq.w	8008106 <_strtod_l+0x91e>
 8008004:	ea02 010b 	and.w	r1, r2, fp
 8008008:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800800c:	dc7b      	bgt.n	8008106 <_strtod_l+0x91e>
 800800e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008012:	f77f aea9 	ble.w	8007d68 <_strtod_l+0x580>
 8008016:	4b4d      	ldr	r3, [pc, #308]	; (800814c <_strtod_l+0x964>)
 8008018:	4650      	mov	r0, sl
 800801a:	4659      	mov	r1, fp
 800801c:	2200      	movs	r2, #0
 800801e:	f7f8 faf3 	bl	8000608 <__aeabi_dmul>
 8008022:	460b      	mov	r3, r1
 8008024:	4303      	orrs	r3, r0
 8008026:	bf08      	it	eq
 8008028:	2322      	moveq	r3, #34	; 0x22
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	bf08      	it	eq
 8008030:	6023      	streq	r3, [r4, #0]
 8008032:	e62b      	b.n	8007c8c <_strtod_l+0x4a4>
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	ea03 0a0a 	and.w	sl, r3, sl
 8008040:	e6e3      	b.n	8007e0a <_strtod_l+0x622>
 8008042:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008046:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800804a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800804e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008052:	fa01 f308 	lsl.w	r3, r1, r8
 8008056:	9308      	str	r3, [sp, #32]
 8008058:	910d      	str	r1, [sp, #52]	; 0x34
 800805a:	e746      	b.n	8007eea <_strtod_l+0x702>
 800805c:	2300      	movs	r3, #0
 800805e:	9308      	str	r3, [sp, #32]
 8008060:	2301      	movs	r3, #1
 8008062:	930d      	str	r3, [sp, #52]	; 0x34
 8008064:	e741      	b.n	8007eea <_strtod_l+0x702>
 8008066:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008068:	4642      	mov	r2, r8
 800806a:	4620      	mov	r0, r4
 800806c:	f001 feb0 	bl	8009dd0 <__lshift>
 8008070:	9018      	str	r0, [sp, #96]	; 0x60
 8008072:	2800      	cmp	r0, #0
 8008074:	f47f af6b 	bne.w	8007f4e <_strtod_l+0x766>
 8008078:	e5fe      	b.n	8007c78 <_strtod_l+0x490>
 800807a:	465f      	mov	r7, fp
 800807c:	d16e      	bne.n	800815c <_strtod_l+0x974>
 800807e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008080:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008084:	b342      	cbz	r2, 80080d8 <_strtod_l+0x8f0>
 8008086:	4a32      	ldr	r2, [pc, #200]	; (8008150 <_strtod_l+0x968>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d128      	bne.n	80080de <_strtod_l+0x8f6>
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	4651      	mov	r1, sl
 8008090:	b1eb      	cbz	r3, 80080ce <_strtod_l+0x8e6>
 8008092:	4b2d      	ldr	r3, [pc, #180]	; (8008148 <_strtod_l+0x960>)
 8008094:	403b      	ands	r3, r7
 8008096:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	d819      	bhi.n	80080d4 <_strtod_l+0x8ec>
 80080a0:	0d1b      	lsrs	r3, r3, #20
 80080a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	4299      	cmp	r1, r3
 80080ac:	d117      	bne.n	80080de <_strtod_l+0x8f6>
 80080ae:	4b29      	ldr	r3, [pc, #164]	; (8008154 <_strtod_l+0x96c>)
 80080b0:	429f      	cmp	r7, r3
 80080b2:	d102      	bne.n	80080ba <_strtod_l+0x8d2>
 80080b4:	3101      	adds	r1, #1
 80080b6:	f43f addf 	beq.w	8007c78 <_strtod_l+0x490>
 80080ba:	4b23      	ldr	r3, [pc, #140]	; (8008148 <_strtod_l+0x960>)
 80080bc:	403b      	ands	r3, r7
 80080be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80080c2:	f04f 0a00 	mov.w	sl, #0
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1a4      	bne.n	8008016 <_strtod_l+0x82e>
 80080cc:	e5de      	b.n	8007c8c <_strtod_l+0x4a4>
 80080ce:	f04f 33ff 	mov.w	r3, #4294967295
 80080d2:	e7ea      	b.n	80080aa <_strtod_l+0x8c2>
 80080d4:	4613      	mov	r3, r2
 80080d6:	e7e8      	b.n	80080aa <_strtod_l+0x8c2>
 80080d8:	ea53 030a 	orrs.w	r3, r3, sl
 80080dc:	d08c      	beq.n	8007ff8 <_strtod_l+0x810>
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	b1db      	cbz	r3, 800811a <_strtod_l+0x932>
 80080e2:	423b      	tst	r3, r7
 80080e4:	d0ef      	beq.n	80080c6 <_strtod_l+0x8de>
 80080e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e8:	9a04      	ldr	r2, [sp, #16]
 80080ea:	4650      	mov	r0, sl
 80080ec:	4659      	mov	r1, fp
 80080ee:	b1c3      	cbz	r3, 8008122 <_strtod_l+0x93a>
 80080f0:	f7ff fb5e 	bl	80077b0 <sulp>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	ec51 0b18 	vmov	r0, r1, d8
 80080fc:	f7f8 f8ce 	bl	800029c <__adddf3>
 8008100:	4682      	mov	sl, r0
 8008102:	468b      	mov	fp, r1
 8008104:	e7df      	b.n	80080c6 <_strtod_l+0x8de>
 8008106:	4013      	ands	r3, r2
 8008108:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800810c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008110:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008114:	f04f 3aff 	mov.w	sl, #4294967295
 8008118:	e7d5      	b.n	80080c6 <_strtod_l+0x8de>
 800811a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800811c:	ea13 0f0a 	tst.w	r3, sl
 8008120:	e7e0      	b.n	80080e4 <_strtod_l+0x8fc>
 8008122:	f7ff fb45 	bl	80077b0 <sulp>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	ec51 0b18 	vmov	r0, r1, d8
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	2200      	movs	r2, #0
 8008134:	2300      	movs	r3, #0
 8008136:	4682      	mov	sl, r0
 8008138:	468b      	mov	fp, r1
 800813a:	f7f8 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0c1      	beq.n	80080c6 <_strtod_l+0x8de>
 8008142:	e611      	b.n	8007d68 <_strtod_l+0x580>
 8008144:	fffffc02 	.word	0xfffffc02
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	39500000 	.word	0x39500000
 8008150:	000fffff 	.word	0x000fffff
 8008154:	7fefffff 	.word	0x7fefffff
 8008158:	0800b430 	.word	0x0800b430
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	f002 f824 	bl	800a1ac <__ratio>
 8008164:	ec59 8b10 	vmov	r8, r9, d0
 8008168:	ee10 0a10 	vmov	r0, s0
 800816c:	2200      	movs	r2, #0
 800816e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 fcc4 	bl	8000b00 <__aeabi_dcmple>
 8008178:	2800      	cmp	r0, #0
 800817a:	d07a      	beq.n	8008272 <_strtod_l+0xa8a>
 800817c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04a      	beq.n	8008218 <_strtod_l+0xa30>
 8008182:	4b95      	ldr	r3, [pc, #596]	; (80083d8 <_strtod_l+0xbf0>)
 8008184:	2200      	movs	r2, #0
 8008186:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800818a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80083d8 <_strtod_l+0xbf0>
 800818e:	f04f 0800 	mov.w	r8, #0
 8008192:	4b92      	ldr	r3, [pc, #584]	; (80083dc <_strtod_l+0xbf4>)
 8008194:	403b      	ands	r3, r7
 8008196:	930d      	str	r3, [sp, #52]	; 0x34
 8008198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800819a:	4b91      	ldr	r3, [pc, #580]	; (80083e0 <_strtod_l+0xbf8>)
 800819c:	429a      	cmp	r2, r3
 800819e:	f040 80b0 	bne.w	8008302 <_strtod_l+0xb1a>
 80081a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80081aa:	ec4b ab10 	vmov	d0, sl, fp
 80081ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081b2:	f001 ff23 	bl	8009ffc <__ulp>
 80081b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081ba:	ec53 2b10 	vmov	r2, r3, d0
 80081be:	f7f8 fa23 	bl	8000608 <__aeabi_dmul>
 80081c2:	4652      	mov	r2, sl
 80081c4:	465b      	mov	r3, fp
 80081c6:	f7f8 f869 	bl	800029c <__adddf3>
 80081ca:	460b      	mov	r3, r1
 80081cc:	4983      	ldr	r1, [pc, #524]	; (80083dc <_strtod_l+0xbf4>)
 80081ce:	4a85      	ldr	r2, [pc, #532]	; (80083e4 <_strtod_l+0xbfc>)
 80081d0:	4019      	ands	r1, r3
 80081d2:	4291      	cmp	r1, r2
 80081d4:	4682      	mov	sl, r0
 80081d6:	d960      	bls.n	800829a <_strtod_l+0xab2>
 80081d8:	ee18 3a90 	vmov	r3, s17
 80081dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d104      	bne.n	80081ee <_strtod_l+0xa06>
 80081e4:	ee18 3a10 	vmov	r3, s16
 80081e8:	3301      	adds	r3, #1
 80081ea:	f43f ad45 	beq.w	8007c78 <_strtod_l+0x490>
 80081ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80083f0 <_strtod_l+0xc08>
 80081f2:	f04f 3aff 	mov.w	sl, #4294967295
 80081f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081f8:	4620      	mov	r0, r4
 80081fa:	f001 fbcd 	bl	8009998 <_Bfree>
 80081fe:	9905      	ldr	r1, [sp, #20]
 8008200:	4620      	mov	r0, r4
 8008202:	f001 fbc9 	bl	8009998 <_Bfree>
 8008206:	4631      	mov	r1, r6
 8008208:	4620      	mov	r0, r4
 800820a:	f001 fbc5 	bl	8009998 <_Bfree>
 800820e:	4629      	mov	r1, r5
 8008210:	4620      	mov	r0, r4
 8008212:	f001 fbc1 	bl	8009998 <_Bfree>
 8008216:	e61a      	b.n	8007e4e <_strtod_l+0x666>
 8008218:	f1ba 0f00 	cmp.w	sl, #0
 800821c:	d11b      	bne.n	8008256 <_strtod_l+0xa6e>
 800821e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008222:	b9f3      	cbnz	r3, 8008262 <_strtod_l+0xa7a>
 8008224:	4b6c      	ldr	r3, [pc, #432]	; (80083d8 <_strtod_l+0xbf0>)
 8008226:	2200      	movs	r2, #0
 8008228:	4640      	mov	r0, r8
 800822a:	4649      	mov	r1, r9
 800822c:	f7f8 fc5e 	bl	8000aec <__aeabi_dcmplt>
 8008230:	b9d0      	cbnz	r0, 8008268 <_strtod_l+0xa80>
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <_strtod_l+0xc00>)
 8008238:	2200      	movs	r2, #0
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008246:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800824a:	9315      	str	r3, [sp, #84]	; 0x54
 800824c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008250:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008254:	e79d      	b.n	8008192 <_strtod_l+0x9aa>
 8008256:	f1ba 0f01 	cmp.w	sl, #1
 800825a:	d102      	bne.n	8008262 <_strtod_l+0xa7a>
 800825c:	2f00      	cmp	r7, #0
 800825e:	f43f ad83 	beq.w	8007d68 <_strtod_l+0x580>
 8008262:	4b62      	ldr	r3, [pc, #392]	; (80083ec <_strtod_l+0xc04>)
 8008264:	2200      	movs	r2, #0
 8008266:	e78e      	b.n	8008186 <_strtod_l+0x99e>
 8008268:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80083e8 <_strtod_l+0xc00>
 800826c:	f04f 0800 	mov.w	r8, #0
 8008270:	e7e7      	b.n	8008242 <_strtod_l+0xa5a>
 8008272:	4b5d      	ldr	r3, [pc, #372]	; (80083e8 <_strtod_l+0xc00>)
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	2200      	movs	r2, #0
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008280:	4680      	mov	r8, r0
 8008282:	4689      	mov	r9, r1
 8008284:	b933      	cbnz	r3, 8008294 <_strtod_l+0xaac>
 8008286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828a:	900e      	str	r0, [sp, #56]	; 0x38
 800828c:	930f      	str	r3, [sp, #60]	; 0x3c
 800828e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008292:	e7dd      	b.n	8008250 <_strtod_l+0xa68>
 8008294:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008298:	e7f9      	b.n	800828e <_strtod_l+0xaa6>
 800829a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800829e:	9b04      	ldr	r3, [sp, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1a8      	bne.n	80081f6 <_strtod_l+0xa0e>
 80082a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082aa:	0d1b      	lsrs	r3, r3, #20
 80082ac:	051b      	lsls	r3, r3, #20
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d1a1      	bne.n	80081f6 <_strtod_l+0xa0e>
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f8 fd07 	bl	8000cc8 <__aeabi_d2lz>
 80082ba:	f7f8 f977 	bl	80005ac <__aeabi_l2d>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4640      	mov	r0, r8
 80082c4:	4649      	mov	r1, r9
 80082c6:	f7f7 ffe7 	bl	8000298 <__aeabi_dsub>
 80082ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082d0:	ea43 030a 	orr.w	r3, r3, sl
 80082d4:	4313      	orrs	r3, r2
 80082d6:	4680      	mov	r8, r0
 80082d8:	4689      	mov	r9, r1
 80082da:	d055      	beq.n	8008388 <_strtod_l+0xba0>
 80082dc:	a336      	add	r3, pc, #216	; (adr r3, 80083b8 <_strtod_l+0xbd0>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f8 fc03 	bl	8000aec <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f47f acd0 	bne.w	8007c8c <_strtod_l+0x4a4>
 80082ec:	a334      	add	r3, pc, #208	; (adr r3, 80083c0 <_strtod_l+0xbd8>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f8 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f af7b 	beq.w	80081f6 <_strtod_l+0xa0e>
 8008300:	e4c4      	b.n	8007c8c <_strtod_l+0x4a4>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	b333      	cbz	r3, 8008354 <_strtod_l+0xb6c>
 8008306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008308:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800830c:	d822      	bhi.n	8008354 <_strtod_l+0xb6c>
 800830e:	a32e      	add	r3, pc, #184	; (adr r3, 80083c8 <_strtod_l+0xbe0>)
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 fbf2 	bl	8000b00 <__aeabi_dcmple>
 800831c:	b1a0      	cbz	r0, 8008348 <_strtod_l+0xb60>
 800831e:	4649      	mov	r1, r9
 8008320:	4640      	mov	r0, r8
 8008322:	f7f8 fc49 	bl	8000bb8 <__aeabi_d2uiz>
 8008326:	2801      	cmp	r0, #1
 8008328:	bf38      	it	cc
 800832a:	2001      	movcc	r0, #1
 800832c:	f7f8 f8f2 	bl	8000514 <__aeabi_ui2d>
 8008330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	bb23      	cbnz	r3, 8008382 <_strtod_l+0xb9a>
 8008338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800833c:	9010      	str	r0, [sp, #64]	; 0x40
 800833e:	9311      	str	r3, [sp, #68]	; 0x44
 8008340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008344:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800834c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	9309      	str	r3, [sp, #36]	; 0x24
 8008354:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008358:	eeb0 0a48 	vmov.f32	s0, s16
 800835c:	eef0 0a68 	vmov.f32	s1, s17
 8008360:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008364:	f001 fe4a 	bl	8009ffc <__ulp>
 8008368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800836c:	ec53 2b10 	vmov	r2, r3, d0
 8008370:	f7f8 f94a 	bl	8000608 <__aeabi_dmul>
 8008374:	ec53 2b18 	vmov	r2, r3, d8
 8008378:	f7f7 ff90 	bl	800029c <__adddf3>
 800837c:	4682      	mov	sl, r0
 800837e:	468b      	mov	fp, r1
 8008380:	e78d      	b.n	800829e <_strtod_l+0xab6>
 8008382:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008386:	e7db      	b.n	8008340 <_strtod_l+0xb58>
 8008388:	a311      	add	r3, pc, #68	; (adr r3, 80083d0 <_strtod_l+0xbe8>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f7f8 fbad 	bl	8000aec <__aeabi_dcmplt>
 8008392:	e7b2      	b.n	80082fa <_strtod_l+0xb12>
 8008394:	2300      	movs	r3, #0
 8008396:	930a      	str	r3, [sp, #40]	; 0x28
 8008398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800839a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	f7ff ba6b 	b.w	8007878 <_strtod_l+0x90>
 80083a2:	2a65      	cmp	r2, #101	; 0x65
 80083a4:	f43f ab5f 	beq.w	8007a66 <_strtod_l+0x27e>
 80083a8:	2a45      	cmp	r2, #69	; 0x45
 80083aa:	f43f ab5c 	beq.w	8007a66 <_strtod_l+0x27e>
 80083ae:	2301      	movs	r3, #1
 80083b0:	f7ff bb94 	b.w	8007adc <_strtod_l+0x2f4>
 80083b4:	f3af 8000 	nop.w
 80083b8:	94a03595 	.word	0x94a03595
 80083bc:	3fdfffff 	.word	0x3fdfffff
 80083c0:	35afe535 	.word	0x35afe535
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	ffc00000 	.word	0xffc00000
 80083cc:	41dfffff 	.word	0x41dfffff
 80083d0:	94a03595 	.word	0x94a03595
 80083d4:	3fcfffff 	.word	0x3fcfffff
 80083d8:	3ff00000 	.word	0x3ff00000
 80083dc:	7ff00000 	.word	0x7ff00000
 80083e0:	7fe00000 	.word	0x7fe00000
 80083e4:	7c9fffff 	.word	0x7c9fffff
 80083e8:	3fe00000 	.word	0x3fe00000
 80083ec:	bff00000 	.word	0xbff00000
 80083f0:	7fefffff 	.word	0x7fefffff

080083f4 <_strtod_r>:
 80083f4:	4b01      	ldr	r3, [pc, #4]	; (80083fc <_strtod_r+0x8>)
 80083f6:	f7ff b9f7 	b.w	80077e8 <_strtod_l>
 80083fa:	bf00      	nop
 80083fc:	20000164 	.word	0x20000164

08008400 <_strtol_l.constprop.0>:
 8008400:	2b01      	cmp	r3, #1
 8008402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008406:	d001      	beq.n	800840c <_strtol_l.constprop.0+0xc>
 8008408:	2b24      	cmp	r3, #36	; 0x24
 800840a:	d906      	bls.n	800841a <_strtol_l.constprop.0+0x1a>
 800840c:	f7fe faf0 	bl	80069f0 <__errno>
 8008410:	2316      	movs	r3, #22
 8008412:	6003      	str	r3, [r0, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008500 <_strtol_l.constprop.0+0x100>
 800841e:	460d      	mov	r5, r1
 8008420:	462e      	mov	r6, r5
 8008422:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008426:	f814 700c 	ldrb.w	r7, [r4, ip]
 800842a:	f017 0708 	ands.w	r7, r7, #8
 800842e:	d1f7      	bne.n	8008420 <_strtol_l.constprop.0+0x20>
 8008430:	2c2d      	cmp	r4, #45	; 0x2d
 8008432:	d132      	bne.n	800849a <_strtol_l.constprop.0+0x9a>
 8008434:	782c      	ldrb	r4, [r5, #0]
 8008436:	2701      	movs	r7, #1
 8008438:	1cb5      	adds	r5, r6, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05b      	beq.n	80084f6 <_strtol_l.constprop.0+0xf6>
 800843e:	2b10      	cmp	r3, #16
 8008440:	d109      	bne.n	8008456 <_strtol_l.constprop.0+0x56>
 8008442:	2c30      	cmp	r4, #48	; 0x30
 8008444:	d107      	bne.n	8008456 <_strtol_l.constprop.0+0x56>
 8008446:	782c      	ldrb	r4, [r5, #0]
 8008448:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800844c:	2c58      	cmp	r4, #88	; 0x58
 800844e:	d14d      	bne.n	80084ec <_strtol_l.constprop.0+0xec>
 8008450:	786c      	ldrb	r4, [r5, #1]
 8008452:	2310      	movs	r3, #16
 8008454:	3502      	adds	r5, #2
 8008456:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800845a:	f108 38ff 	add.w	r8, r8, #4294967295
 800845e:	f04f 0c00 	mov.w	ip, #0
 8008462:	fbb8 f9f3 	udiv	r9, r8, r3
 8008466:	4666      	mov	r6, ip
 8008468:	fb03 8a19 	mls	sl, r3, r9, r8
 800846c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008470:	f1be 0f09 	cmp.w	lr, #9
 8008474:	d816      	bhi.n	80084a4 <_strtol_l.constprop.0+0xa4>
 8008476:	4674      	mov	r4, lr
 8008478:	42a3      	cmp	r3, r4
 800847a:	dd24      	ble.n	80084c6 <_strtol_l.constprop.0+0xc6>
 800847c:	f1bc 0f00 	cmp.w	ip, #0
 8008480:	db1e      	blt.n	80084c0 <_strtol_l.constprop.0+0xc0>
 8008482:	45b1      	cmp	r9, r6
 8008484:	d31c      	bcc.n	80084c0 <_strtol_l.constprop.0+0xc0>
 8008486:	d101      	bne.n	800848c <_strtol_l.constprop.0+0x8c>
 8008488:	45a2      	cmp	sl, r4
 800848a:	db19      	blt.n	80084c0 <_strtol_l.constprop.0+0xc0>
 800848c:	fb06 4603 	mla	r6, r6, r3, r4
 8008490:	f04f 0c01 	mov.w	ip, #1
 8008494:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008498:	e7e8      	b.n	800846c <_strtol_l.constprop.0+0x6c>
 800849a:	2c2b      	cmp	r4, #43	; 0x2b
 800849c:	bf04      	itt	eq
 800849e:	782c      	ldrbeq	r4, [r5, #0]
 80084a0:	1cb5      	addeq	r5, r6, #2
 80084a2:	e7ca      	b.n	800843a <_strtol_l.constprop.0+0x3a>
 80084a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80084a8:	f1be 0f19 	cmp.w	lr, #25
 80084ac:	d801      	bhi.n	80084b2 <_strtol_l.constprop.0+0xb2>
 80084ae:	3c37      	subs	r4, #55	; 0x37
 80084b0:	e7e2      	b.n	8008478 <_strtol_l.constprop.0+0x78>
 80084b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084b6:	f1be 0f19 	cmp.w	lr, #25
 80084ba:	d804      	bhi.n	80084c6 <_strtol_l.constprop.0+0xc6>
 80084bc:	3c57      	subs	r4, #87	; 0x57
 80084be:	e7db      	b.n	8008478 <_strtol_l.constprop.0+0x78>
 80084c0:	f04f 3cff 	mov.w	ip, #4294967295
 80084c4:	e7e6      	b.n	8008494 <_strtol_l.constprop.0+0x94>
 80084c6:	f1bc 0f00 	cmp.w	ip, #0
 80084ca:	da05      	bge.n	80084d8 <_strtol_l.constprop.0+0xd8>
 80084cc:	2322      	movs	r3, #34	; 0x22
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	4646      	mov	r6, r8
 80084d2:	b942      	cbnz	r2, 80084e6 <_strtol_l.constprop.0+0xe6>
 80084d4:	4630      	mov	r0, r6
 80084d6:	e79e      	b.n	8008416 <_strtol_l.constprop.0+0x16>
 80084d8:	b107      	cbz	r7, 80084dc <_strtol_l.constprop.0+0xdc>
 80084da:	4276      	negs	r6, r6
 80084dc:	2a00      	cmp	r2, #0
 80084de:	d0f9      	beq.n	80084d4 <_strtol_l.constprop.0+0xd4>
 80084e0:	f1bc 0f00 	cmp.w	ip, #0
 80084e4:	d000      	beq.n	80084e8 <_strtol_l.constprop.0+0xe8>
 80084e6:	1e69      	subs	r1, r5, #1
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	e7f3      	b.n	80084d4 <_strtol_l.constprop.0+0xd4>
 80084ec:	2430      	movs	r4, #48	; 0x30
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1b1      	bne.n	8008456 <_strtol_l.constprop.0+0x56>
 80084f2:	2308      	movs	r3, #8
 80084f4:	e7af      	b.n	8008456 <_strtol_l.constprop.0+0x56>
 80084f6:	2c30      	cmp	r4, #48	; 0x30
 80084f8:	d0a5      	beq.n	8008446 <_strtol_l.constprop.0+0x46>
 80084fa:	230a      	movs	r3, #10
 80084fc:	e7ab      	b.n	8008456 <_strtol_l.constprop.0+0x56>
 80084fe:	bf00      	nop
 8008500:	0800b459 	.word	0x0800b459

08008504 <_strtol_r>:
 8008504:	f7ff bf7c 	b.w	8008400 <_strtol_l.constprop.0>

08008508 <quorem>:
 8008508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	6903      	ldr	r3, [r0, #16]
 800850e:	690c      	ldr	r4, [r1, #16]
 8008510:	42a3      	cmp	r3, r4
 8008512:	4607      	mov	r7, r0
 8008514:	f2c0 8081 	blt.w	800861a <quorem+0x112>
 8008518:	3c01      	subs	r4, #1
 800851a:	f101 0814 	add.w	r8, r1, #20
 800851e:	f100 0514 	add.w	r5, r0, #20
 8008522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800852c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008530:	3301      	adds	r3, #1
 8008532:	429a      	cmp	r2, r3
 8008534:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008538:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800853c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008540:	d331      	bcc.n	80085a6 <quorem+0x9e>
 8008542:	f04f 0e00 	mov.w	lr, #0
 8008546:	4640      	mov	r0, r8
 8008548:	46ac      	mov	ip, r5
 800854a:	46f2      	mov	sl, lr
 800854c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008550:	b293      	uxth	r3, r2
 8008552:	fb06 e303 	mla	r3, r6, r3, lr
 8008556:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800855a:	b29b      	uxth	r3, r3
 800855c:	ebaa 0303 	sub.w	r3, sl, r3
 8008560:	f8dc a000 	ldr.w	sl, [ip]
 8008564:	0c12      	lsrs	r2, r2, #16
 8008566:	fa13 f38a 	uxtah	r3, r3, sl
 800856a:	fb06 e202 	mla	r2, r6, r2, lr
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	9b00      	ldr	r3, [sp, #0]
 8008572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008576:	b292      	uxth	r2, r2
 8008578:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800857c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008580:	f8bd 3000 	ldrh.w	r3, [sp]
 8008584:	4581      	cmp	r9, r0
 8008586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800858a:	f84c 3b04 	str.w	r3, [ip], #4
 800858e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008592:	d2db      	bcs.n	800854c <quorem+0x44>
 8008594:	f855 300b 	ldr.w	r3, [r5, fp]
 8008598:	b92b      	cbnz	r3, 80085a6 <quorem+0x9e>
 800859a:	9b01      	ldr	r3, [sp, #4]
 800859c:	3b04      	subs	r3, #4
 800859e:	429d      	cmp	r5, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	d32e      	bcc.n	8008602 <quorem+0xfa>
 80085a4:	613c      	str	r4, [r7, #16]
 80085a6:	4638      	mov	r0, r7
 80085a8:	f001 fc82 	bl	8009eb0 <__mcmp>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	db24      	blt.n	80085fa <quorem+0xf2>
 80085b0:	3601      	adds	r6, #1
 80085b2:	4628      	mov	r0, r5
 80085b4:	f04f 0c00 	mov.w	ip, #0
 80085b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80085bc:	f8d0 e000 	ldr.w	lr, [r0]
 80085c0:	b293      	uxth	r3, r2
 80085c2:	ebac 0303 	sub.w	r3, ip, r3
 80085c6:	0c12      	lsrs	r2, r2, #16
 80085c8:	fa13 f38e 	uxtah	r3, r3, lr
 80085cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085da:	45c1      	cmp	r9, r8
 80085dc:	f840 3b04 	str.w	r3, [r0], #4
 80085e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085e4:	d2e8      	bcs.n	80085b8 <quorem+0xb0>
 80085e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ee:	b922      	cbnz	r2, 80085fa <quorem+0xf2>
 80085f0:	3b04      	subs	r3, #4
 80085f2:	429d      	cmp	r5, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	d30a      	bcc.n	800860e <quorem+0x106>
 80085f8:	613c      	str	r4, [r7, #16]
 80085fa:	4630      	mov	r0, r6
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	3b04      	subs	r3, #4
 8008606:	2a00      	cmp	r2, #0
 8008608:	d1cc      	bne.n	80085a4 <quorem+0x9c>
 800860a:	3c01      	subs	r4, #1
 800860c:	e7c7      	b.n	800859e <quorem+0x96>
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	3b04      	subs	r3, #4
 8008612:	2a00      	cmp	r2, #0
 8008614:	d1f0      	bne.n	80085f8 <quorem+0xf0>
 8008616:	3c01      	subs	r4, #1
 8008618:	e7eb      	b.n	80085f2 <quorem+0xea>
 800861a:	2000      	movs	r0, #0
 800861c:	e7ee      	b.n	80085fc <quorem+0xf4>
	...

08008620 <_dtoa_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	ed2d 8b04 	vpush	{d8-d9}
 8008628:	ec57 6b10 	vmov	r6, r7, d0
 800862c:	b093      	sub	sp, #76	; 0x4c
 800862e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008634:	9106      	str	r1, [sp, #24]
 8008636:	ee10 aa10 	vmov	sl, s0
 800863a:	4604      	mov	r4, r0
 800863c:	9209      	str	r2, [sp, #36]	; 0x24
 800863e:	930c      	str	r3, [sp, #48]	; 0x30
 8008640:	46bb      	mov	fp, r7
 8008642:	b975      	cbnz	r5, 8008662 <_dtoa_r+0x42>
 8008644:	2010      	movs	r0, #16
 8008646:	f001 f94d 	bl	80098e4 <malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	6260      	str	r0, [r4, #36]	; 0x24
 800864e:	b920      	cbnz	r0, 800865a <_dtoa_r+0x3a>
 8008650:	4ba7      	ldr	r3, [pc, #668]	; (80088f0 <_dtoa_r+0x2d0>)
 8008652:	21ea      	movs	r1, #234	; 0xea
 8008654:	48a7      	ldr	r0, [pc, #668]	; (80088f4 <_dtoa_r+0x2d4>)
 8008656:	f002 f8ad 	bl	800a7b4 <__assert_func>
 800865a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800865e:	6005      	str	r5, [r0, #0]
 8008660:	60c5      	str	r5, [r0, #12]
 8008662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	b151      	cbz	r1, 800867e <_dtoa_r+0x5e>
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	604a      	str	r2, [r1, #4]
 800866c:	2301      	movs	r3, #1
 800866e:	4093      	lsls	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
 8008672:	4620      	mov	r0, r4
 8008674:	f001 f990 	bl	8009998 <_Bfree>
 8008678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	1e3b      	subs	r3, r7, #0
 8008680:	bfaa      	itet	ge
 8008682:	2300      	movge	r3, #0
 8008684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008688:	f8c8 3000 	strge.w	r3, [r8]
 800868c:	4b9a      	ldr	r3, [pc, #616]	; (80088f8 <_dtoa_r+0x2d8>)
 800868e:	bfbc      	itt	lt
 8008690:	2201      	movlt	r2, #1
 8008692:	f8c8 2000 	strlt.w	r2, [r8]
 8008696:	ea33 030b 	bics.w	r3, r3, fp
 800869a:	d11b      	bne.n	80086d4 <_dtoa_r+0xb4>
 800869c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800869e:	f242 730f 	movw	r3, #9999	; 0x270f
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086a8:	4333      	orrs	r3, r6
 80086aa:	f000 8592 	beq.w	80091d2 <_dtoa_r+0xbb2>
 80086ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b0:	b963      	cbnz	r3, 80086cc <_dtoa_r+0xac>
 80086b2:	4b92      	ldr	r3, [pc, #584]	; (80088fc <_dtoa_r+0x2dc>)
 80086b4:	e022      	b.n	80086fc <_dtoa_r+0xdc>
 80086b6:	4b92      	ldr	r3, [pc, #584]	; (8008900 <_dtoa_r+0x2e0>)
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	3308      	adds	r3, #8
 80086bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	9801      	ldr	r0, [sp, #4]
 80086c2:	b013      	add	sp, #76	; 0x4c
 80086c4:	ecbd 8b04 	vpop	{d8-d9}
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	4b8b      	ldr	r3, [pc, #556]	; (80088fc <_dtoa_r+0x2dc>)
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	3303      	adds	r3, #3
 80086d2:	e7f3      	b.n	80086bc <_dtoa_r+0x9c>
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4650      	mov	r0, sl
 80086da:	4659      	mov	r1, fp
 80086dc:	f7f8 f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80086e0:	ec4b ab19 	vmov	d9, sl, fp
 80086e4:	4680      	mov	r8, r0
 80086e6:	b158      	cbz	r0, 8008700 <_dtoa_r+0xe0>
 80086e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ea:	2301      	movs	r3, #1
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 856b 	beq.w	80091cc <_dtoa_r+0xbac>
 80086f6:	4883      	ldr	r0, [pc, #524]	; (8008904 <_dtoa_r+0x2e4>)
 80086f8:	6018      	str	r0, [r3, #0]
 80086fa:	1e43      	subs	r3, r0, #1
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	e7df      	b.n	80086c0 <_dtoa_r+0xa0>
 8008700:	ec4b ab10 	vmov	d0, sl, fp
 8008704:	aa10      	add	r2, sp, #64	; 0x40
 8008706:	a911      	add	r1, sp, #68	; 0x44
 8008708:	4620      	mov	r0, r4
 800870a:	f001 fcf3 	bl	800a0f4 <__d2b>
 800870e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008712:	ee08 0a10 	vmov	s16, r0
 8008716:	2d00      	cmp	r5, #0
 8008718:	f000 8084 	beq.w	8008824 <_dtoa_r+0x204>
 800871c:	ee19 3a90 	vmov	r3, s19
 8008720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008728:	4656      	mov	r6, sl
 800872a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800872e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008736:	4b74      	ldr	r3, [pc, #464]	; (8008908 <_dtoa_r+0x2e8>)
 8008738:	2200      	movs	r2, #0
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	a365      	add	r3, pc, #404	; (adr r3, 80088d8 <_dtoa_r+0x2b8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	a364      	add	r3, pc, #400	; (adr r3, 80088e0 <_dtoa_r+0x2c0>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 fda3 	bl	800029c <__adddf3>
 8008756:	4606      	mov	r6, r0
 8008758:	4628      	mov	r0, r5
 800875a:	460f      	mov	r7, r1
 800875c:	f7f7 feea 	bl	8000534 <__aeabi_i2d>
 8008760:	a361      	add	r3, pc, #388	; (adr r3, 80088e8 <_dtoa_r+0x2c8>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 ff4f 	bl	8000608 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f7 fd93 	bl	800029c <__adddf3>
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	f7f8 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800877e:	2200      	movs	r2, #0
 8008780:	9000      	str	r0, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f8 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800878c:	b150      	cbz	r0, 80087a4 <_dtoa_r+0x184>
 800878e:	9800      	ldr	r0, [sp, #0]
 8008790:	f7f7 fed0 	bl	8000534 <__aeabi_i2d>
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	f7f8 f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800879c:	b910      	cbnz	r0, 80087a4 <_dtoa_r+0x184>
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	2b16      	cmp	r3, #22
 80087a8:	d85a      	bhi.n	8008860 <_dtoa_r+0x240>
 80087aa:	9a00      	ldr	r2, [sp, #0]
 80087ac:	4b57      	ldr	r3, [pc, #348]	; (800890c <_dtoa_r+0x2ec>)
 80087ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	ec51 0b19 	vmov	r0, r1, d9
 80087ba:	f7f8 f997 	bl	8000aec <__aeabi_dcmplt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d050      	beq.n	8008864 <_dtoa_r+0x244>
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	2300      	movs	r3, #0
 80087ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80087cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ce:	1b5d      	subs	r5, r3, r5
 80087d0:	1e6b      	subs	r3, r5, #1
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	bf45      	ittet	mi
 80087d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80087da:	9304      	strmi	r3, [sp, #16]
 80087dc:	2300      	movpl	r3, #0
 80087de:	2300      	movmi	r3, #0
 80087e0:	bf4c      	ite	mi
 80087e2:	9305      	strmi	r3, [sp, #20]
 80087e4:	9304      	strpl	r3, [sp, #16]
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db3d      	blt.n	8008868 <_dtoa_r+0x248>
 80087ec:	9b05      	ldr	r3, [sp, #20]
 80087ee:	9a00      	ldr	r2, [sp, #0]
 80087f0:	920a      	str	r2, [sp, #40]	; 0x28
 80087f2:	4413      	add	r3, r2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	f200 8089 	bhi.w	8008914 <_dtoa_r+0x2f4>
 8008802:	2b05      	cmp	r3, #5
 8008804:	bfc4      	itt	gt
 8008806:	3b04      	subgt	r3, #4
 8008808:	9306      	strgt	r3, [sp, #24]
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	f1a3 0302 	sub.w	r3, r3, #2
 8008810:	bfcc      	ite	gt
 8008812:	2500      	movgt	r5, #0
 8008814:	2501      	movle	r5, #1
 8008816:	2b03      	cmp	r3, #3
 8008818:	f200 8087 	bhi.w	800892a <_dtoa_r+0x30a>
 800881c:	e8df f003 	tbb	[pc, r3]
 8008820:	59383a2d 	.word	0x59383a2d
 8008824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008828:	441d      	add	r5, r3
 800882a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800882e:	2b20      	cmp	r3, #32
 8008830:	bfc1      	itttt	gt
 8008832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800883a:	fa0b f303 	lslgt.w	r3, fp, r3
 800883e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008842:	bfda      	itte	le
 8008844:	f1c3 0320 	rsble	r3, r3, #32
 8008848:	fa06 f003 	lslle.w	r0, r6, r3
 800884c:	4318      	orrgt	r0, r3
 800884e:	f7f7 fe61 	bl	8000514 <__aeabi_ui2d>
 8008852:	2301      	movs	r3, #1
 8008854:	4606      	mov	r6, r0
 8008856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800885a:	3d01      	subs	r5, #1
 800885c:	930e      	str	r3, [sp, #56]	; 0x38
 800885e:	e76a      	b.n	8008736 <_dtoa_r+0x116>
 8008860:	2301      	movs	r3, #1
 8008862:	e7b2      	b.n	80087ca <_dtoa_r+0x1aa>
 8008864:	900b      	str	r0, [sp, #44]	; 0x2c
 8008866:	e7b1      	b.n	80087cc <_dtoa_r+0x1ac>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	9a00      	ldr	r2, [sp, #0]
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	4253      	negs	r3, r2
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	2300      	movs	r3, #0
 8008876:	930a      	str	r3, [sp, #40]	; 0x28
 8008878:	e7bf      	b.n	80087fa <_dtoa_r+0x1da>
 800887a:	2300      	movs	r3, #0
 800887c:	9308      	str	r3, [sp, #32]
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc55      	bgt.n	8008930 <_dtoa_r+0x310>
 8008884:	2301      	movs	r3, #1
 8008886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800888a:	461a      	mov	r2, r3
 800888c:	9209      	str	r2, [sp, #36]	; 0x24
 800888e:	e00c      	b.n	80088aa <_dtoa_r+0x28a>
 8008890:	2301      	movs	r3, #1
 8008892:	e7f3      	b.n	800887c <_dtoa_r+0x25c>
 8008894:	2300      	movs	r3, #0
 8008896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008898:	9308      	str	r3, [sp, #32]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	4413      	add	r3, r2
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	3301      	adds	r3, #1
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	9303      	str	r3, [sp, #12]
 80088a6:	bfb8      	it	lt
 80088a8:	2301      	movlt	r3, #1
 80088aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088ac:	2200      	movs	r2, #0
 80088ae:	6042      	str	r2, [r0, #4]
 80088b0:	2204      	movs	r2, #4
 80088b2:	f102 0614 	add.w	r6, r2, #20
 80088b6:	429e      	cmp	r6, r3
 80088b8:	6841      	ldr	r1, [r0, #4]
 80088ba:	d93d      	bls.n	8008938 <_dtoa_r+0x318>
 80088bc:	4620      	mov	r0, r4
 80088be:	f001 f82b 	bl	8009918 <_Balloc>
 80088c2:	9001      	str	r0, [sp, #4]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d13b      	bne.n	8008940 <_dtoa_r+0x320>
 80088c8:	4b11      	ldr	r3, [pc, #68]	; (8008910 <_dtoa_r+0x2f0>)
 80088ca:	4602      	mov	r2, r0
 80088cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088d0:	e6c0      	b.n	8008654 <_dtoa_r+0x34>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e7df      	b.n	8008896 <_dtoa_r+0x276>
 80088d6:	bf00      	nop
 80088d8:	636f4361 	.word	0x636f4361
 80088dc:	3fd287a7 	.word	0x3fd287a7
 80088e0:	8b60c8b3 	.word	0x8b60c8b3
 80088e4:	3fc68a28 	.word	0x3fc68a28
 80088e8:	509f79fb 	.word	0x509f79fb
 80088ec:	3fd34413 	.word	0x3fd34413
 80088f0:	0800b566 	.word	0x0800b566
 80088f4:	0800b57d 	.word	0x0800b57d
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800b562 	.word	0x0800b562
 8008900:	0800b559 	.word	0x0800b559
 8008904:	0800b3dd 	.word	0x0800b3dd
 8008908:	3ff80000 	.word	0x3ff80000
 800890c:	0800b6e8 	.word	0x0800b6e8
 8008910:	0800b5d8 	.word	0x0800b5d8
 8008914:	2501      	movs	r5, #1
 8008916:	2300      	movs	r3, #0
 8008918:	9306      	str	r3, [sp, #24]
 800891a:	9508      	str	r5, [sp, #32]
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	2312      	movs	r3, #18
 8008928:	e7b0      	b.n	800888c <_dtoa_r+0x26c>
 800892a:	2301      	movs	r3, #1
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	e7f5      	b.n	800891c <_dtoa_r+0x2fc>
 8008930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008936:	e7b8      	b.n	80088aa <_dtoa_r+0x28a>
 8008938:	3101      	adds	r1, #1
 800893a:	6041      	str	r1, [r0, #4]
 800893c:	0052      	lsls	r2, r2, #1
 800893e:	e7b8      	b.n	80088b2 <_dtoa_r+0x292>
 8008940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008942:	9a01      	ldr	r2, [sp, #4]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	2b0e      	cmp	r3, #14
 800894a:	f200 809d 	bhi.w	8008a88 <_dtoa_r+0x468>
 800894e:	2d00      	cmp	r5, #0
 8008950:	f000 809a 	beq.w	8008a88 <_dtoa_r+0x468>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	dd32      	ble.n	80089c0 <_dtoa_r+0x3a0>
 800895a:	4ab7      	ldr	r2, [pc, #732]	; (8008c38 <_dtoa_r+0x618>)
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	05d8      	lsls	r0, r3, #23
 800896c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008970:	d516      	bpl.n	80089a0 <_dtoa_r+0x380>
 8008972:	4bb2      	ldr	r3, [pc, #712]	; (8008c3c <_dtoa_r+0x61c>)
 8008974:	ec51 0b19 	vmov	r0, r1, d9
 8008978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800897c:	f7f7 ff6e 	bl	800085c <__aeabi_ddiv>
 8008980:	f007 070f 	and.w	r7, r7, #15
 8008984:	4682      	mov	sl, r0
 8008986:	468b      	mov	fp, r1
 8008988:	2503      	movs	r5, #3
 800898a:	4eac      	ldr	r6, [pc, #688]	; (8008c3c <_dtoa_r+0x61c>)
 800898c:	b957      	cbnz	r7, 80089a4 <_dtoa_r+0x384>
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 ff61 	bl	800085c <__aeabi_ddiv>
 800899a:	4682      	mov	sl, r0
 800899c:	468b      	mov	fp, r1
 800899e:	e028      	b.n	80089f2 <_dtoa_r+0x3d2>
 80089a0:	2502      	movs	r5, #2
 80089a2:	e7f2      	b.n	800898a <_dtoa_r+0x36a>
 80089a4:	07f9      	lsls	r1, r7, #31
 80089a6:	d508      	bpl.n	80089ba <_dtoa_r+0x39a>
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089b0:	f7f7 fe2a 	bl	8000608 <__aeabi_dmul>
 80089b4:	3501      	adds	r5, #1
 80089b6:	4680      	mov	r8, r0
 80089b8:	4689      	mov	r9, r1
 80089ba:	107f      	asrs	r7, r7, #1
 80089bc:	3608      	adds	r6, #8
 80089be:	e7e5      	b.n	800898c <_dtoa_r+0x36c>
 80089c0:	f000 809b 	beq.w	8008afa <_dtoa_r+0x4da>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	4f9d      	ldr	r7, [pc, #628]	; (8008c3c <_dtoa_r+0x61c>)
 80089c8:	425e      	negs	r6, r3
 80089ca:	4b9b      	ldr	r3, [pc, #620]	; (8008c38 <_dtoa_r+0x618>)
 80089cc:	f006 020f 	and.w	r2, r6, #15
 80089d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	ec51 0b19 	vmov	r0, r1, d9
 80089dc:	f7f7 fe14 	bl	8000608 <__aeabi_dmul>
 80089e0:	1136      	asrs	r6, r6, #4
 80089e2:	4682      	mov	sl, r0
 80089e4:	468b      	mov	fp, r1
 80089e6:	2300      	movs	r3, #0
 80089e8:	2502      	movs	r5, #2
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	d17a      	bne.n	8008ae4 <_dtoa_r+0x4c4>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1d3      	bne.n	800899a <_dtoa_r+0x37a>
 80089f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8082 	beq.w	8008afe <_dtoa_r+0x4de>
 80089fa:	4b91      	ldr	r3, [pc, #580]	; (8008c40 <_dtoa_r+0x620>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	4650      	mov	r0, sl
 8008a00:	4659      	mov	r1, fp
 8008a02:	f7f8 f873 	bl	8000aec <__aeabi_dcmplt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d079      	beq.n	8008afe <_dtoa_r+0x4de>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d076      	beq.n	8008afe <_dtoa_r+0x4de>
 8008a10:	9b02      	ldr	r3, [sp, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	dd36      	ble.n	8008a84 <_dtoa_r+0x464>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	1e5f      	subs	r7, r3, #1
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4b88      	ldr	r3, [pc, #544]	; (8008c44 <_dtoa_r+0x624>)
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	9e02      	ldr	r6, [sp, #8]
 8008a28:	4682      	mov	sl, r0
 8008a2a:	468b      	mov	fp, r1
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fd80 	bl	8000534 <__aeabi_i2d>
 8008a34:	4652      	mov	r2, sl
 8008a36:	465b      	mov	r3, fp
 8008a38:	f7f7 fde6 	bl	8000608 <__aeabi_dmul>
 8008a3c:	4b82      	ldr	r3, [pc, #520]	; (8008c48 <_dtoa_r+0x628>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7f7 fc2c 	bl	800029c <__adddf3>
 8008a44:	46d0      	mov	r8, sl
 8008a46:	46d9      	mov	r9, fp
 8008a48:	4682      	mov	sl, r0
 8008a4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d158      	bne.n	8008b04 <_dtoa_r+0x4e4>
 8008a52:	4b7e      	ldr	r3, [pc, #504]	; (8008c4c <_dtoa_r+0x62c>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	f7f7 fc1d 	bl	8000298 <__aeabi_dsub>
 8008a5e:	4652      	mov	r2, sl
 8008a60:	465b      	mov	r3, fp
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	f7f8 f85f 	bl	8000b28 <__aeabi_dcmpgt>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f040 8295 	bne.w	8008f9a <_dtoa_r+0x97a>
 8008a70:	4652      	mov	r2, sl
 8008a72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f8 f837 	bl	8000aec <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f040 8289 	bne.w	8008f96 <_dtoa_r+0x976>
 8008a84:	ec5b ab19 	vmov	sl, fp, d9
 8008a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f2c0 8148 	blt.w	8008d20 <_dtoa_r+0x700>
 8008a90:	9a00      	ldr	r2, [sp, #0]
 8008a92:	2a0e      	cmp	r2, #14
 8008a94:	f300 8144 	bgt.w	8008d20 <_dtoa_r+0x700>
 8008a98:	4b67      	ldr	r3, [pc, #412]	; (8008c38 <_dtoa_r+0x618>)
 8008a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f280 80d5 	bge.w	8008c54 <_dtoa_r+0x634>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f300 80d1 	bgt.w	8008c54 <_dtoa_r+0x634>
 8008ab2:	f040 826f 	bne.w	8008f94 <_dtoa_r+0x974>
 8008ab6:	4b65      	ldr	r3, [pc, #404]	; (8008c4c <_dtoa_r+0x62c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	f7f8 f825 	bl	8000b14 <__aeabi_dcmpge>
 8008aca:	9e03      	ldr	r6, [sp, #12]
 8008acc:	4637      	mov	r7, r6
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f040 8245 	bne.w	8008f5e <_dtoa_r+0x93e>
 8008ad4:	9d01      	ldr	r5, [sp, #4]
 8008ad6:	2331      	movs	r3, #49	; 0x31
 8008ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8008adc:	9b00      	ldr	r3, [sp, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	e240      	b.n	8008f66 <_dtoa_r+0x946>
 8008ae4:	07f2      	lsls	r2, r6, #31
 8008ae6:	d505      	bpl.n	8008af4 <_dtoa_r+0x4d4>
 8008ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aec:	f7f7 fd8c 	bl	8000608 <__aeabi_dmul>
 8008af0:	3501      	adds	r5, #1
 8008af2:	2301      	movs	r3, #1
 8008af4:	1076      	asrs	r6, r6, #1
 8008af6:	3708      	adds	r7, #8
 8008af8:	e777      	b.n	80089ea <_dtoa_r+0x3ca>
 8008afa:	2502      	movs	r5, #2
 8008afc:	e779      	b.n	80089f2 <_dtoa_r+0x3d2>
 8008afe:	9f00      	ldr	r7, [sp, #0]
 8008b00:	9e03      	ldr	r6, [sp, #12]
 8008b02:	e794      	b.n	8008a2e <_dtoa_r+0x40e>
 8008b04:	9901      	ldr	r1, [sp, #4]
 8008b06:	4b4c      	ldr	r3, [pc, #304]	; (8008c38 <_dtoa_r+0x618>)
 8008b08:	4431      	add	r1, r6
 8008b0a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b0c:	9908      	ldr	r1, [sp, #32]
 8008b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d043      	beq.n	8008ba2 <_dtoa_r+0x582>
 8008b1a:	494d      	ldr	r1, [pc, #308]	; (8008c50 <_dtoa_r+0x630>)
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f7 fe9d 	bl	800085c <__aeabi_ddiv>
 8008b22:	4652      	mov	r2, sl
 8008b24:	465b      	mov	r3, fp
 8008b26:	f7f7 fbb7 	bl	8000298 <__aeabi_dsub>
 8008b2a:	9d01      	ldr	r5, [sp, #4]
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	468b      	mov	fp, r1
 8008b30:	4649      	mov	r1, r9
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7f8 f818 	bl	8000b68 <__aeabi_d2iz>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	f7f7 fcfb 	bl	8000534 <__aeabi_i2d>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fba7 	bl	8000298 <__aeabi_dsub>
 8008b4a:	3630      	adds	r6, #48	; 0x30
 8008b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	f7f7 ffc8 	bl	8000aec <__aeabi_dcmplt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d163      	bne.n	8008c28 <_dtoa_r+0x608>
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	4936      	ldr	r1, [pc, #216]	; (8008c40 <_dtoa_r+0x620>)
 8008b66:	2000      	movs	r0, #0
 8008b68:	f7f7 fb96 	bl	8000298 <__aeabi_dsub>
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	465b      	mov	r3, fp
 8008b70:	f7f7 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f040 80b5 	bne.w	8008ce4 <_dtoa_r+0x6c4>
 8008b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	d081      	beq.n	8008a84 <_dtoa_r+0x464>
 8008b80:	4b30      	ldr	r3, [pc, #192]	; (8008c44 <_dtoa_r+0x624>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	4650      	mov	r0, sl
 8008b86:	4659      	mov	r1, fp
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <_dtoa_r+0x624>)
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	2200      	movs	r2, #0
 8008b98:	f7f7 fd36 	bl	8000608 <__aeabi_dmul>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	e7c6      	b.n	8008b30 <_dtoa_r+0x510>
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	4659      	mov	r1, fp
 8008ba6:	f7f7 fd2f 	bl	8000608 <__aeabi_dmul>
 8008baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bac:	9d01      	ldr	r5, [sp, #4]
 8008bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	468b      	mov	fp, r1
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	f7f7 ffd6 	bl	8000b68 <__aeabi_d2iz>
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	f7f7 fcb9 	bl	8000534 <__aeabi_i2d>
 8008bc2:	3630      	adds	r6, #48	; 0x30
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	f7f7 fb64 	bl	8000298 <__aeabi_dsub>
 8008bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	4680      	mov	r8, r0
 8008bda:	4689      	mov	r9, r1
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	d124      	bne.n	8008c2c <_dtoa_r+0x60c>
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <_dtoa_r+0x630>)
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb58 	bl	800029c <__adddf3>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 ff98 	bl	8000b28 <__aeabi_dcmpgt>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d173      	bne.n	8008ce4 <_dtoa_r+0x6c4>
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4913      	ldr	r1, [pc, #76]	; (8008c50 <_dtoa_r+0x630>)
 8008c02:	2000      	movs	r0, #0
 8008c04:	f7f7 fb48 	bl	8000298 <__aeabi_dsub>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4649      	mov	r1, r9
 8008c10:	f7f7 ff6c 	bl	8000aec <__aeabi_dcmplt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f43f af35 	beq.w	8008a84 <_dtoa_r+0x464>
 8008c1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c1c:	1e6b      	subs	r3, r5, #1
 8008c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c24:	2b30      	cmp	r3, #48	; 0x30
 8008c26:	d0f8      	beq.n	8008c1a <_dtoa_r+0x5fa>
 8008c28:	9700      	str	r7, [sp, #0]
 8008c2a:	e049      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <_dtoa_r+0x624>)
 8008c2e:	f7f7 fceb 	bl	8000608 <__aeabi_dmul>
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	e7bd      	b.n	8008bb4 <_dtoa_r+0x594>
 8008c38:	0800b6e8 	.word	0x0800b6e8
 8008c3c:	0800b6c0 	.word	0x0800b6c0
 8008c40:	3ff00000 	.word	0x3ff00000
 8008c44:	40240000 	.word	0x40240000
 8008c48:	401c0000 	.word	0x401c0000
 8008c4c:	40140000 	.word	0x40140000
 8008c50:	3fe00000 	.word	0x3fe00000
 8008c54:	9d01      	ldr	r5, [sp, #4]
 8008c56:	4656      	mov	r6, sl
 8008c58:	465f      	mov	r7, fp
 8008c5a:	4642      	mov	r2, r8
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 fdfb 	bl	800085c <__aeabi_ddiv>
 8008c66:	f7f7 ff7f 	bl	8000b68 <__aeabi_d2iz>
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	f7f7 fc62 	bl	8000534 <__aeabi_i2d>
 8008c70:	4642      	mov	r2, r8
 8008c72:	464b      	mov	r3, r9
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	f805 6b01 	strb.w	r6, [r5], #1
 8008c8c:	9e01      	ldr	r6, [sp, #4]
 8008c8e:	9f03      	ldr	r7, [sp, #12]
 8008c90:	1bae      	subs	r6, r5, r6
 8008c92:	42b7      	cmp	r7, r6
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	d135      	bne.n	8008d06 <_dtoa_r+0x6e6>
 8008c9a:	f7f7 faff 	bl	800029c <__adddf3>
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	f7f7 ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8008caa:	b9d0      	cbnz	r0, 8008ce2 <_dtoa_r+0x6c2>
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cb8:	b110      	cbz	r0, 8008cc0 <_dtoa_r+0x6a0>
 8008cba:	f01a 0f01 	tst.w	sl, #1
 8008cbe:	d110      	bne.n	8008ce2 <_dtoa_r+0x6c2>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	ee18 1a10 	vmov	r1, s16
 8008cc6:	f000 fe67 	bl	8009998 <_Bfree>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9800      	ldr	r0, [sp, #0]
 8008cce:	702b      	strb	r3, [r5, #0]
 8008cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	6018      	str	r0, [r3, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f43f acf1 	beq.w	80086c0 <_dtoa_r+0xa0>
 8008cde:	601d      	str	r5, [r3, #0]
 8008ce0:	e4ee      	b.n	80086c0 <_dtoa_r+0xa0>
 8008ce2:	9f00      	ldr	r7, [sp, #0]
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cec:	2a39      	cmp	r2, #57	; 0x39
 8008cee:	d106      	bne.n	8008cfe <_dtoa_r+0x6de>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d1f7      	bne.n	8008ce6 <_dtoa_r+0x6c6>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	2230      	movs	r2, #48	; 0x30
 8008cfa:	3701      	adds	r7, #1
 8008cfc:	700a      	strb	r2, [r1, #0]
 8008cfe:	781a      	ldrb	r2, [r3, #0]
 8008d00:	3201      	adds	r2, #1
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e790      	b.n	8008c28 <_dtoa_r+0x608>
 8008d06:	4ba6      	ldr	r3, [pc, #664]	; (8008fa0 <_dtoa_r+0x980>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f7f7 fc7d 	bl	8000608 <__aeabi_dmul>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2300      	movs	r3, #0
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d09d      	beq.n	8008c5a <_dtoa_r+0x63a>
 8008d1e:	e7cf      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	f000 80d7 	beq.w	8008ed6 <_dtoa_r+0x8b6>
 8008d28:	9a06      	ldr	r2, [sp, #24]
 8008d2a:	2a01      	cmp	r2, #1
 8008d2c:	f300 80ba 	bgt.w	8008ea4 <_dtoa_r+0x884>
 8008d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	f000 80b2 	beq.w	8008e9c <_dtoa_r+0x87c>
 8008d38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d3c:	9e07      	ldr	r6, [sp, #28]
 8008d3e:	9d04      	ldr	r5, [sp, #16]
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	441a      	add	r2, r3
 8008d44:	9204      	str	r2, [sp, #16]
 8008d46:	9a05      	ldr	r2, [sp, #20]
 8008d48:	2101      	movs	r1, #1
 8008d4a:	441a      	add	r2, r3
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	9205      	str	r2, [sp, #20]
 8008d50:	f000 ff24 	bl	8009b9c <__i2b>
 8008d54:	4607      	mov	r7, r0
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	dd0c      	ble.n	8008d74 <_dtoa_r+0x754>
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd09      	ble.n	8008d74 <_dtoa_r+0x754>
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	bfa8      	it	ge
 8008d66:	462b      	movge	r3, r5
 8008d68:	1ad2      	subs	r2, r2, r3
 8008d6a:	9204      	str	r2, [sp, #16]
 8008d6c:	9a05      	ldr	r2, [sp, #20]
 8008d6e:	1aed      	subs	r5, r5, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	b31b      	cbz	r3, 8008dc0 <_dtoa_r+0x7a0>
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80af 	beq.w	8008ede <_dtoa_r+0x8be>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	dd13      	ble.n	8008dac <_dtoa_r+0x78c>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4632      	mov	r2, r6
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 ffc7 	bl	8009d1c <__pow5mult>
 8008d8e:	ee18 2a10 	vmov	r2, s16
 8008d92:	4601      	mov	r1, r0
 8008d94:	4607      	mov	r7, r0
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 ff16 	bl	8009bc8 <__multiply>
 8008d9c:	ee18 1a10 	vmov	r1, s16
 8008da0:	4680      	mov	r8, r0
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 fdf8 	bl	8009998 <_Bfree>
 8008da8:	ee08 8a10 	vmov	s16, r8
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	1b9a      	subs	r2, r3, r6
 8008db0:	d006      	beq.n	8008dc0 <_dtoa_r+0x7a0>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 ffb0 	bl	8009d1c <__pow5mult>
 8008dbc:	ee08 0a10 	vmov	s16, r0
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 feea 	bl	8009b9c <__i2b>
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	f340 8088 	ble.w	8008ee2 <_dtoa_r+0x8c2>
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 ffa0 	bl	8009d1c <__pow5mult>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	4606      	mov	r6, r0
 8008de2:	f340 8081 	ble.w	8008ee8 <_dtoa_r+0x8c8>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	6933      	ldr	r3, [r6, #16]
 8008dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008df0:	6918      	ldr	r0, [r3, #16]
 8008df2:	f000 fe83 	bl	8009afc <__hi0bits>
 8008df6:	f1c0 0020 	rsb	r0, r0, #32
 8008dfa:	9b05      	ldr	r3, [sp, #20]
 8008dfc:	4418      	add	r0, r3
 8008dfe:	f010 001f 	ands.w	r0, r0, #31
 8008e02:	f000 8092 	beq.w	8008f2a <_dtoa_r+0x90a>
 8008e06:	f1c0 0320 	rsb	r3, r0, #32
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	f340 808a 	ble.w	8008f24 <_dtoa_r+0x904>
 8008e10:	f1c0 001c 	rsb	r0, r0, #28
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	4403      	add	r3, r0
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	9b05      	ldr	r3, [sp, #20]
 8008e1c:	4403      	add	r3, r0
 8008e1e:	4405      	add	r5, r0
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd07      	ble.n	8008e38 <_dtoa_r+0x818>
 8008e28:	ee18 1a10 	vmov	r1, s16
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 ffce 	bl	8009dd0 <__lshift>
 8008e34:	ee08 0a10 	vmov	s16, r0
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd05      	ble.n	8008e4a <_dtoa_r+0x82a>
 8008e3e:	4631      	mov	r1, r6
 8008e40:	461a      	mov	r2, r3
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 ffc4 	bl	8009dd0 <__lshift>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d06e      	beq.n	8008f2e <_dtoa_r+0x90e>
 8008e50:	ee18 0a10 	vmov	r0, s16
 8008e54:	4631      	mov	r1, r6
 8008e56:	f001 f82b 	bl	8009eb0 <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	da67      	bge.n	8008f2e <_dtoa_r+0x90e>
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	ee18 1a10 	vmov	r1, s16
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	220a      	movs	r2, #10
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fdb5 	bl	80099dc <__multadd>
 8008e72:	9b08      	ldr	r3, [sp, #32]
 8008e74:	ee08 0a10 	vmov	s16, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 81b1 	beq.w	80091e0 <_dtoa_r+0xbc0>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4639      	mov	r1, r7
 8008e82:	220a      	movs	r2, #10
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 fda9 	bl	80099dc <__multadd>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	f300 808e 	bgt.w	8008fb0 <_dtoa_r+0x990>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	dc51      	bgt.n	8008f3e <_dtoa_r+0x91e>
 8008e9a:	e089      	b.n	8008fb0 <_dtoa_r+0x990>
 8008e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ea2:	e74b      	b.n	8008d3c <_dtoa_r+0x71c>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	1e5e      	subs	r6, r3, #1
 8008ea8:	9b07      	ldr	r3, [sp, #28]
 8008eaa:	42b3      	cmp	r3, r6
 8008eac:	bfbf      	itttt	lt
 8008eae:	9b07      	ldrlt	r3, [sp, #28]
 8008eb0:	9607      	strlt	r6, [sp, #28]
 8008eb2:	1af2      	sublt	r2, r6, r3
 8008eb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008eb6:	bfb6      	itet	lt
 8008eb8:	189b      	addlt	r3, r3, r2
 8008eba:	1b9e      	subge	r6, r3, r6
 8008ebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	bfb8      	it	lt
 8008ec2:	2600      	movlt	r6, #0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfb7      	itett	lt
 8008ec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ed0:	1a9d      	sublt	r5, r3, r2
 8008ed2:	2300      	movlt	r3, #0
 8008ed4:	e734      	b.n	8008d40 <_dtoa_r+0x720>
 8008ed6:	9e07      	ldr	r6, [sp, #28]
 8008ed8:	9d04      	ldr	r5, [sp, #16]
 8008eda:	9f08      	ldr	r7, [sp, #32]
 8008edc:	e73b      	b.n	8008d56 <_dtoa_r+0x736>
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	e767      	b.n	8008db2 <_dtoa_r+0x792>
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	dc18      	bgt.n	8008f1a <_dtoa_r+0x8fa>
 8008ee8:	f1ba 0f00 	cmp.w	sl, #0
 8008eec:	d115      	bne.n	8008f1a <_dtoa_r+0x8fa>
 8008eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ef2:	b993      	cbnz	r3, 8008f1a <_dtoa_r+0x8fa>
 8008ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ef8:	0d1b      	lsrs	r3, r3, #20
 8008efa:	051b      	lsls	r3, r3, #20
 8008efc:	b183      	cbz	r3, 8008f20 <_dtoa_r+0x900>
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	3301      	adds	r3, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9b05      	ldr	r3, [sp, #20]
 8008f06:	3301      	adds	r3, #1
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	f04f 0801 	mov.w	r8, #1
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f af6a 	bne.w	8008dea <_dtoa_r+0x7ca>
 8008f16:	2001      	movs	r0, #1
 8008f18:	e76f      	b.n	8008dfa <_dtoa_r+0x7da>
 8008f1a:	f04f 0800 	mov.w	r8, #0
 8008f1e:	e7f6      	b.n	8008f0e <_dtoa_r+0x8ee>
 8008f20:	4698      	mov	r8, r3
 8008f22:	e7f4      	b.n	8008f0e <_dtoa_r+0x8ee>
 8008f24:	f43f af7d 	beq.w	8008e22 <_dtoa_r+0x802>
 8008f28:	4618      	mov	r0, r3
 8008f2a:	301c      	adds	r0, #28
 8008f2c:	e772      	b.n	8008e14 <_dtoa_r+0x7f4>
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc37      	bgt.n	8008fa4 <_dtoa_r+0x984>
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	dd34      	ble.n	8008fa4 <_dtoa_r+0x984>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	9302      	str	r3, [sp, #8]
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	b96b      	cbnz	r3, 8008f5e <_dtoa_r+0x93e>
 8008f42:	4631      	mov	r1, r6
 8008f44:	2205      	movs	r2, #5
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fd48 	bl	80099dc <__multadd>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4606      	mov	r6, r0
 8008f50:	ee18 0a10 	vmov	r0, s16
 8008f54:	f000 ffac 	bl	8009eb0 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f73f adbb 	bgt.w	8008ad4 <_dtoa_r+0x4b4>
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	9d01      	ldr	r5, [sp, #4]
 8008f62:	43db      	mvns	r3, r3
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fd13 	bl	8009998 <_Bfree>
 8008f72:	2f00      	cmp	r7, #0
 8008f74:	f43f aea4 	beq.w	8008cc0 <_dtoa_r+0x6a0>
 8008f78:	f1b8 0f00 	cmp.w	r8, #0
 8008f7c:	d005      	beq.n	8008f8a <_dtoa_r+0x96a>
 8008f7e:	45b8      	cmp	r8, r7
 8008f80:	d003      	beq.n	8008f8a <_dtoa_r+0x96a>
 8008f82:	4641      	mov	r1, r8
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 fd07 	bl	8009998 <_Bfree>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fd03 	bl	8009998 <_Bfree>
 8008f92:	e695      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008f94:	2600      	movs	r6, #0
 8008f96:	4637      	mov	r7, r6
 8008f98:	e7e1      	b.n	8008f5e <_dtoa_r+0x93e>
 8008f9a:	9700      	str	r7, [sp, #0]
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	e599      	b.n	8008ad4 <_dtoa_r+0x4b4>
 8008fa0:	40240000 	.word	0x40240000
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80ca 	beq.w	8009140 <_dtoa_r+0xb20>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	dd05      	ble.n	8008fc0 <_dtoa_r+0x9a0>
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 ff09 	bl	8009dd0 <__lshift>
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	f1b8 0f00 	cmp.w	r8, #0
 8008fc4:	d05b      	beq.n	800907e <_dtoa_r+0xa5e>
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fca5 	bl	8009918 <_Balloc>
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b928      	cbnz	r0, 8008fde <_dtoa_r+0x9be>
 8008fd2:	4b87      	ldr	r3, [pc, #540]	; (80091f0 <_dtoa_r+0xbd0>)
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008fda:	f7ff bb3b 	b.w	8008654 <_dtoa_r+0x34>
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	3202      	adds	r2, #2
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	f107 010c 	add.w	r1, r7, #12
 8008fe8:	300c      	adds	r0, #12
 8008fea:	f7fd fd2b 	bl	8006a44 <memcpy>
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 feec 	bl	8009dd0 <__lshift>
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	f103 0901 	add.w	r9, r3, #1
 8008ffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009002:	4413      	add	r3, r2
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	f00a 0301 	and.w	r3, sl, #1
 800900a:	46b8      	mov	r8, r7
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	4607      	mov	r7, r0
 8009010:	4631      	mov	r1, r6
 8009012:	ee18 0a10 	vmov	r0, s16
 8009016:	f7ff fa77 	bl	8008508 <quorem>
 800901a:	4641      	mov	r1, r8
 800901c:	9002      	str	r0, [sp, #8]
 800901e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009022:	ee18 0a10 	vmov	r0, s16
 8009026:	f000 ff43 	bl	8009eb0 <__mcmp>
 800902a:	463a      	mov	r2, r7
 800902c:	9003      	str	r0, [sp, #12]
 800902e:	4631      	mov	r1, r6
 8009030:	4620      	mov	r0, r4
 8009032:	f000 ff59 	bl	8009ee8 <__mdiff>
 8009036:	68c2      	ldr	r2, [r0, #12]
 8009038:	f109 3bff 	add.w	fp, r9, #4294967295
 800903c:	4605      	mov	r5, r0
 800903e:	bb02      	cbnz	r2, 8009082 <_dtoa_r+0xa62>
 8009040:	4601      	mov	r1, r0
 8009042:	ee18 0a10 	vmov	r0, s16
 8009046:	f000 ff33 	bl	8009eb0 <__mcmp>
 800904a:	4602      	mov	r2, r0
 800904c:	4629      	mov	r1, r5
 800904e:	4620      	mov	r0, r4
 8009050:	9207      	str	r2, [sp, #28]
 8009052:	f000 fca1 	bl	8009998 <_Bfree>
 8009056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800905a:	ea43 0102 	orr.w	r1, r3, r2
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	430b      	orrs	r3, r1
 8009062:	464d      	mov	r5, r9
 8009064:	d10f      	bne.n	8009086 <_dtoa_r+0xa66>
 8009066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800906a:	d02a      	beq.n	80090c2 <_dtoa_r+0xaa2>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd02      	ble.n	8009078 <_dtoa_r+0xa58>
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009078:	f88b a000 	strb.w	sl, [fp]
 800907c:	e775      	b.n	8008f6a <_dtoa_r+0x94a>
 800907e:	4638      	mov	r0, r7
 8009080:	e7ba      	b.n	8008ff8 <_dtoa_r+0x9d8>
 8009082:	2201      	movs	r2, #1
 8009084:	e7e2      	b.n	800904c <_dtoa_r+0xa2c>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	db04      	blt.n	8009096 <_dtoa_r+0xa76>
 800908c:	9906      	ldr	r1, [sp, #24]
 800908e:	430b      	orrs	r3, r1
 8009090:	9904      	ldr	r1, [sp, #16]
 8009092:	430b      	orrs	r3, r1
 8009094:	d122      	bne.n	80090dc <_dtoa_r+0xabc>
 8009096:	2a00      	cmp	r2, #0
 8009098:	ddee      	ble.n	8009078 <_dtoa_r+0xa58>
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	2201      	movs	r2, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fe95 	bl	8009dd0 <__lshift>
 80090a6:	4631      	mov	r1, r6
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	f000 ff00 	bl	8009eb0 <__mcmp>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	dc03      	bgt.n	80090bc <_dtoa_r+0xa9c>
 80090b4:	d1e0      	bne.n	8009078 <_dtoa_r+0xa58>
 80090b6:	f01a 0f01 	tst.w	sl, #1
 80090ba:	d0dd      	beq.n	8009078 <_dtoa_r+0xa58>
 80090bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090c0:	d1d7      	bne.n	8009072 <_dtoa_r+0xa52>
 80090c2:	2339      	movs	r3, #57	; 0x39
 80090c4:	f88b 3000 	strb.w	r3, [fp]
 80090c8:	462b      	mov	r3, r5
 80090ca:	461d      	mov	r5, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090d2:	2a39      	cmp	r2, #57	; 0x39
 80090d4:	d071      	beq.n	80091ba <_dtoa_r+0xb9a>
 80090d6:	3201      	adds	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e746      	b.n	8008f6a <_dtoa_r+0x94a>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	dd07      	ble.n	80090f0 <_dtoa_r+0xad0>
 80090e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090e4:	d0ed      	beq.n	80090c2 <_dtoa_r+0xaa2>
 80090e6:	f10a 0301 	add.w	r3, sl, #1
 80090ea:	f88b 3000 	strb.w	r3, [fp]
 80090ee:	e73c      	b.n	8008f6a <_dtoa_r+0x94a>
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80090f6:	4599      	cmp	r9, r3
 80090f8:	d047      	beq.n	800918a <_dtoa_r+0xb6a>
 80090fa:	ee18 1a10 	vmov	r1, s16
 80090fe:	2300      	movs	r3, #0
 8009100:	220a      	movs	r2, #10
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fc6a 	bl	80099dc <__multadd>
 8009108:	45b8      	cmp	r8, r7
 800910a:	ee08 0a10 	vmov	s16, r0
 800910e:	f04f 0300 	mov.w	r3, #0
 8009112:	f04f 020a 	mov.w	r2, #10
 8009116:	4641      	mov	r1, r8
 8009118:	4620      	mov	r0, r4
 800911a:	d106      	bne.n	800912a <_dtoa_r+0xb0a>
 800911c:	f000 fc5e 	bl	80099dc <__multadd>
 8009120:	4680      	mov	r8, r0
 8009122:	4607      	mov	r7, r0
 8009124:	f109 0901 	add.w	r9, r9, #1
 8009128:	e772      	b.n	8009010 <_dtoa_r+0x9f0>
 800912a:	f000 fc57 	bl	80099dc <__multadd>
 800912e:	4639      	mov	r1, r7
 8009130:	4680      	mov	r8, r0
 8009132:	2300      	movs	r3, #0
 8009134:	220a      	movs	r2, #10
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fc50 	bl	80099dc <__multadd>
 800913c:	4607      	mov	r7, r0
 800913e:	e7f1      	b.n	8009124 <_dtoa_r+0xb04>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	9d01      	ldr	r5, [sp, #4]
 8009146:	ee18 0a10 	vmov	r0, s16
 800914a:	4631      	mov	r1, r6
 800914c:	f7ff f9dc 	bl	8008508 <quorem>
 8009150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	f805 ab01 	strb.w	sl, [r5], #1
 800915a:	1aea      	subs	r2, r5, r3
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	4293      	cmp	r3, r2
 8009160:	dd09      	ble.n	8009176 <_dtoa_r+0xb56>
 8009162:	ee18 1a10 	vmov	r1, s16
 8009166:	2300      	movs	r3, #0
 8009168:	220a      	movs	r2, #10
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fc36 	bl	80099dc <__multadd>
 8009170:	ee08 0a10 	vmov	s16, r0
 8009174:	e7e7      	b.n	8009146 <_dtoa_r+0xb26>
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfc8      	it	gt
 800917c:	461d      	movgt	r5, r3
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	bfd8      	it	le
 8009182:	2501      	movle	r5, #1
 8009184:	441d      	add	r5, r3
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	2201      	movs	r2, #1
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fe1d 	bl	8009dd0 <__lshift>
 8009196:	4631      	mov	r1, r6
 8009198:	ee08 0a10 	vmov	s16, r0
 800919c:	f000 fe88 	bl	8009eb0 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc91      	bgt.n	80090c8 <_dtoa_r+0xaa8>
 80091a4:	d102      	bne.n	80091ac <_dtoa_r+0xb8c>
 80091a6:	f01a 0f01 	tst.w	sl, #1
 80091aa:	d18d      	bne.n	80090c8 <_dtoa_r+0xaa8>
 80091ac:	462b      	mov	r3, r5
 80091ae:	461d      	mov	r5, r3
 80091b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091b4:	2a30      	cmp	r2, #48	; 0x30
 80091b6:	d0fa      	beq.n	80091ae <_dtoa_r+0xb8e>
 80091b8:	e6d7      	b.n	8008f6a <_dtoa_r+0x94a>
 80091ba:	9a01      	ldr	r2, [sp, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d184      	bne.n	80090ca <_dtoa_r+0xaaa>
 80091c0:	9b00      	ldr	r3, [sp, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2331      	movs	r3, #49	; 0x31
 80091c8:	7013      	strb	r3, [r2, #0]
 80091ca:	e6ce      	b.n	8008f6a <_dtoa_r+0x94a>
 80091cc:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <_dtoa_r+0xbd4>)
 80091ce:	f7ff ba95 	b.w	80086fc <_dtoa_r+0xdc>
 80091d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f47f aa6e 	bne.w	80086b6 <_dtoa_r+0x96>
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <_dtoa_r+0xbd8>)
 80091dc:	f7ff ba8e 	b.w	80086fc <_dtoa_r+0xdc>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dcae      	bgt.n	8009144 <_dtoa_r+0xb24>
 80091e6:	9b06      	ldr	r3, [sp, #24]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	f73f aea8 	bgt.w	8008f3e <_dtoa_r+0x91e>
 80091ee:	e7a9      	b.n	8009144 <_dtoa_r+0xb24>
 80091f0:	0800b5d8 	.word	0x0800b5d8
 80091f4:	0800b3dc 	.word	0x0800b3dc
 80091f8:	0800b559 	.word	0x0800b559

080091fc <rshift>:
 80091fc:	6903      	ldr	r3, [r0, #16]
 80091fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009206:	ea4f 1261 	mov.w	r2, r1, asr #5
 800920a:	f100 0414 	add.w	r4, r0, #20
 800920e:	dd45      	ble.n	800929c <rshift+0xa0>
 8009210:	f011 011f 	ands.w	r1, r1, #31
 8009214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800921c:	d10c      	bne.n	8009238 <rshift+0x3c>
 800921e:	f100 0710 	add.w	r7, r0, #16
 8009222:	4629      	mov	r1, r5
 8009224:	42b1      	cmp	r1, r6
 8009226:	d334      	bcc.n	8009292 <rshift+0x96>
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	1eea      	subs	r2, r5, #3
 800922e:	4296      	cmp	r6, r2
 8009230:	bf38      	it	cc
 8009232:	2300      	movcc	r3, #0
 8009234:	4423      	add	r3, r4
 8009236:	e015      	b.n	8009264 <rshift+0x68>
 8009238:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800923c:	f1c1 0820 	rsb	r8, r1, #32
 8009240:	40cf      	lsrs	r7, r1
 8009242:	f105 0e04 	add.w	lr, r5, #4
 8009246:	46a1      	mov	r9, r4
 8009248:	4576      	cmp	r6, lr
 800924a:	46f4      	mov	ip, lr
 800924c:	d815      	bhi.n	800927a <rshift+0x7e>
 800924e:	1a9a      	subs	r2, r3, r2
 8009250:	0092      	lsls	r2, r2, #2
 8009252:	3a04      	subs	r2, #4
 8009254:	3501      	adds	r5, #1
 8009256:	42ae      	cmp	r6, r5
 8009258:	bf38      	it	cc
 800925a:	2200      	movcc	r2, #0
 800925c:	18a3      	adds	r3, r4, r2
 800925e:	50a7      	str	r7, [r4, r2]
 8009260:	b107      	cbz	r7, 8009264 <rshift+0x68>
 8009262:	3304      	adds	r3, #4
 8009264:	1b1a      	subs	r2, r3, r4
 8009266:	42a3      	cmp	r3, r4
 8009268:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800926c:	bf08      	it	eq
 800926e:	2300      	moveq	r3, #0
 8009270:	6102      	str	r2, [r0, #16]
 8009272:	bf08      	it	eq
 8009274:	6143      	streq	r3, [r0, #20]
 8009276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927a:	f8dc c000 	ldr.w	ip, [ip]
 800927e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009282:	ea4c 0707 	orr.w	r7, ip, r7
 8009286:	f849 7b04 	str.w	r7, [r9], #4
 800928a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800928e:	40cf      	lsrs	r7, r1
 8009290:	e7da      	b.n	8009248 <rshift+0x4c>
 8009292:	f851 cb04 	ldr.w	ip, [r1], #4
 8009296:	f847 cf04 	str.w	ip, [r7, #4]!
 800929a:	e7c3      	b.n	8009224 <rshift+0x28>
 800929c:	4623      	mov	r3, r4
 800929e:	e7e1      	b.n	8009264 <rshift+0x68>

080092a0 <__hexdig_fun>:
 80092a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092a4:	2b09      	cmp	r3, #9
 80092a6:	d802      	bhi.n	80092ae <__hexdig_fun+0xe>
 80092a8:	3820      	subs	r0, #32
 80092aa:	b2c0      	uxtb	r0, r0
 80092ac:	4770      	bx	lr
 80092ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d801      	bhi.n	80092ba <__hexdig_fun+0x1a>
 80092b6:	3847      	subs	r0, #71	; 0x47
 80092b8:	e7f7      	b.n	80092aa <__hexdig_fun+0xa>
 80092ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d801      	bhi.n	80092c6 <__hexdig_fun+0x26>
 80092c2:	3827      	subs	r0, #39	; 0x27
 80092c4:	e7f1      	b.n	80092aa <__hexdig_fun+0xa>
 80092c6:	2000      	movs	r0, #0
 80092c8:	4770      	bx	lr
	...

080092cc <__gethex>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	ed2d 8b02 	vpush	{d8}
 80092d4:	b089      	sub	sp, #36	; 0x24
 80092d6:	ee08 0a10 	vmov	s16, r0
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	4bb4      	ldr	r3, [pc, #720]	; (80095b0 <__gethex+0x2e4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	4618      	mov	r0, r3
 80092e4:	468b      	mov	fp, r1
 80092e6:	4690      	mov	r8, r2
 80092e8:	f7f6 ff7a 	bl	80001e0 <strlen>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	f8db 2000 	ldr.w	r2, [fp]
 80092f2:	4403      	add	r3, r0
 80092f4:	4682      	mov	sl, r0
 80092f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	1c93      	adds	r3, r2, #2
 80092fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009302:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009306:	32fe      	adds	r2, #254	; 0xfe
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	461f      	mov	r7, r3
 800930c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	2830      	cmp	r0, #48	; 0x30
 8009314:	d0f8      	beq.n	8009308 <__gethex+0x3c>
 8009316:	f7ff ffc3 	bl	80092a0 <__hexdig_fun>
 800931a:	4604      	mov	r4, r0
 800931c:	2800      	cmp	r0, #0
 800931e:	d13a      	bne.n	8009396 <__gethex+0xca>
 8009320:	9901      	ldr	r1, [sp, #4]
 8009322:	4652      	mov	r2, sl
 8009324:	4638      	mov	r0, r7
 8009326:	f001 fa23 	bl	800a770 <strncmp>
 800932a:	4605      	mov	r5, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d168      	bne.n	8009402 <__gethex+0x136>
 8009330:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009334:	eb07 060a 	add.w	r6, r7, sl
 8009338:	f7ff ffb2 	bl	80092a0 <__hexdig_fun>
 800933c:	2800      	cmp	r0, #0
 800933e:	d062      	beq.n	8009406 <__gethex+0x13a>
 8009340:	4633      	mov	r3, r6
 8009342:	7818      	ldrb	r0, [r3, #0]
 8009344:	2830      	cmp	r0, #48	; 0x30
 8009346:	461f      	mov	r7, r3
 8009348:	f103 0301 	add.w	r3, r3, #1
 800934c:	d0f9      	beq.n	8009342 <__gethex+0x76>
 800934e:	f7ff ffa7 	bl	80092a0 <__hexdig_fun>
 8009352:	2301      	movs	r3, #1
 8009354:	fab0 f480 	clz	r4, r0
 8009358:	0964      	lsrs	r4, r4, #5
 800935a:	4635      	mov	r5, r6
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	463a      	mov	r2, r7
 8009360:	4616      	mov	r6, r2
 8009362:	3201      	adds	r2, #1
 8009364:	7830      	ldrb	r0, [r6, #0]
 8009366:	f7ff ff9b 	bl	80092a0 <__hexdig_fun>
 800936a:	2800      	cmp	r0, #0
 800936c:	d1f8      	bne.n	8009360 <__gethex+0x94>
 800936e:	9901      	ldr	r1, [sp, #4]
 8009370:	4652      	mov	r2, sl
 8009372:	4630      	mov	r0, r6
 8009374:	f001 f9fc 	bl	800a770 <strncmp>
 8009378:	b980      	cbnz	r0, 800939c <__gethex+0xd0>
 800937a:	b94d      	cbnz	r5, 8009390 <__gethex+0xc4>
 800937c:	eb06 050a 	add.w	r5, r6, sl
 8009380:	462a      	mov	r2, r5
 8009382:	4616      	mov	r6, r2
 8009384:	3201      	adds	r2, #1
 8009386:	7830      	ldrb	r0, [r6, #0]
 8009388:	f7ff ff8a 	bl	80092a0 <__hexdig_fun>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1f8      	bne.n	8009382 <__gethex+0xb6>
 8009390:	1bad      	subs	r5, r5, r6
 8009392:	00ad      	lsls	r5, r5, #2
 8009394:	e004      	b.n	80093a0 <__gethex+0xd4>
 8009396:	2400      	movs	r4, #0
 8009398:	4625      	mov	r5, r4
 800939a:	e7e0      	b.n	800935e <__gethex+0x92>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d1f7      	bne.n	8009390 <__gethex+0xc4>
 80093a0:	7833      	ldrb	r3, [r6, #0]
 80093a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093a6:	2b50      	cmp	r3, #80	; 0x50
 80093a8:	d13b      	bne.n	8009422 <__gethex+0x156>
 80093aa:	7873      	ldrb	r3, [r6, #1]
 80093ac:	2b2b      	cmp	r3, #43	; 0x2b
 80093ae:	d02c      	beq.n	800940a <__gethex+0x13e>
 80093b0:	2b2d      	cmp	r3, #45	; 0x2d
 80093b2:	d02e      	beq.n	8009412 <__gethex+0x146>
 80093b4:	1c71      	adds	r1, r6, #1
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	7808      	ldrb	r0, [r1, #0]
 80093bc:	f7ff ff70 	bl	80092a0 <__hexdig_fun>
 80093c0:	1e43      	subs	r3, r0, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b18      	cmp	r3, #24
 80093c6:	d82c      	bhi.n	8009422 <__gethex+0x156>
 80093c8:	f1a0 0210 	sub.w	r2, r0, #16
 80093cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093d0:	f7ff ff66 	bl	80092a0 <__hexdig_fun>
 80093d4:	1e43      	subs	r3, r0, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b18      	cmp	r3, #24
 80093da:	d91d      	bls.n	8009418 <__gethex+0x14c>
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	d000      	beq.n	80093e4 <__gethex+0x118>
 80093e2:	4252      	negs	r2, r2
 80093e4:	4415      	add	r5, r2
 80093e6:	f8cb 1000 	str.w	r1, [fp]
 80093ea:	b1e4      	cbz	r4, 8009426 <__gethex+0x15a>
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2700      	movne	r7, #0
 80093f4:	2706      	moveq	r7, #6
 80093f6:	4638      	mov	r0, r7
 80093f8:	b009      	add	sp, #36	; 0x24
 80093fa:	ecbd 8b02 	vpop	{d8}
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	463e      	mov	r6, r7
 8009404:	4625      	mov	r5, r4
 8009406:	2401      	movs	r4, #1
 8009408:	e7ca      	b.n	80093a0 <__gethex+0xd4>
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	1cb1      	adds	r1, r6, #2
 8009410:	e7d3      	b.n	80093ba <__gethex+0xee>
 8009412:	f04f 0901 	mov.w	r9, #1
 8009416:	e7fa      	b.n	800940e <__gethex+0x142>
 8009418:	230a      	movs	r3, #10
 800941a:	fb03 0202 	mla	r2, r3, r2, r0
 800941e:	3a10      	subs	r2, #16
 8009420:	e7d4      	b.n	80093cc <__gethex+0x100>
 8009422:	4631      	mov	r1, r6
 8009424:	e7df      	b.n	80093e6 <__gethex+0x11a>
 8009426:	1bf3      	subs	r3, r6, r7
 8009428:	3b01      	subs	r3, #1
 800942a:	4621      	mov	r1, r4
 800942c:	2b07      	cmp	r3, #7
 800942e:	dc0b      	bgt.n	8009448 <__gethex+0x17c>
 8009430:	ee18 0a10 	vmov	r0, s16
 8009434:	f000 fa70 	bl	8009918 <_Balloc>
 8009438:	4604      	mov	r4, r0
 800943a:	b940      	cbnz	r0, 800944e <__gethex+0x182>
 800943c:	4b5d      	ldr	r3, [pc, #372]	; (80095b4 <__gethex+0x2e8>)
 800943e:	4602      	mov	r2, r0
 8009440:	21de      	movs	r1, #222	; 0xde
 8009442:	485d      	ldr	r0, [pc, #372]	; (80095b8 <__gethex+0x2ec>)
 8009444:	f001 f9b6 	bl	800a7b4 <__assert_func>
 8009448:	3101      	adds	r1, #1
 800944a:	105b      	asrs	r3, r3, #1
 800944c:	e7ee      	b.n	800942c <__gethex+0x160>
 800944e:	f100 0914 	add.w	r9, r0, #20
 8009452:	f04f 0b00 	mov.w	fp, #0
 8009456:	f1ca 0301 	rsb	r3, sl, #1
 800945a:	f8cd 9008 	str.w	r9, [sp, #8]
 800945e:	f8cd b000 	str.w	fp, [sp]
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	42b7      	cmp	r7, r6
 8009466:	d340      	bcc.n	80094ea <__gethex+0x21e>
 8009468:	9802      	ldr	r0, [sp, #8]
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	f840 3b04 	str.w	r3, [r0], #4
 8009470:	eba0 0009 	sub.w	r0, r0, r9
 8009474:	1080      	asrs	r0, r0, #2
 8009476:	0146      	lsls	r6, r0, #5
 8009478:	6120      	str	r0, [r4, #16]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fb3e 	bl	8009afc <__hi0bits>
 8009480:	1a30      	subs	r0, r6, r0
 8009482:	f8d8 6000 	ldr.w	r6, [r8]
 8009486:	42b0      	cmp	r0, r6
 8009488:	dd63      	ble.n	8009552 <__gethex+0x286>
 800948a:	1b87      	subs	r7, r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fee2 	bl	800a258 <__any_on>
 8009494:	4682      	mov	sl, r0
 8009496:	b1a8      	cbz	r0, 80094c4 <__gethex+0x1f8>
 8009498:	1e7b      	subs	r3, r7, #1
 800949a:	1159      	asrs	r1, r3, #5
 800949c:	f003 021f 	and.w	r2, r3, #31
 80094a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094a4:	f04f 0a01 	mov.w	sl, #1
 80094a8:	fa0a f202 	lsl.w	r2, sl, r2
 80094ac:	420a      	tst	r2, r1
 80094ae:	d009      	beq.n	80094c4 <__gethex+0x1f8>
 80094b0:	4553      	cmp	r3, sl
 80094b2:	dd05      	ble.n	80094c0 <__gethex+0x1f4>
 80094b4:	1eb9      	subs	r1, r7, #2
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fece 	bl	800a258 <__any_on>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d145      	bne.n	800954c <__gethex+0x280>
 80094c0:	f04f 0a02 	mov.w	sl, #2
 80094c4:	4639      	mov	r1, r7
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fe98 	bl	80091fc <rshift>
 80094cc:	443d      	add	r5, r7
 80094ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094d2:	42ab      	cmp	r3, r5
 80094d4:	da4c      	bge.n	8009570 <__gethex+0x2a4>
 80094d6:	ee18 0a10 	vmov	r0, s16
 80094da:	4621      	mov	r1, r4
 80094dc:	f000 fa5c 	bl	8009998 <_Bfree>
 80094e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094e2:	2300      	movs	r3, #0
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	27a3      	movs	r7, #163	; 0xa3
 80094e8:	e785      	b.n	80093f6 <__gethex+0x12a>
 80094ea:	1e73      	subs	r3, r6, #1
 80094ec:	9a05      	ldr	r2, [sp, #20]
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d019      	beq.n	800952c <__gethex+0x260>
 80094f8:	f1bb 0f20 	cmp.w	fp, #32
 80094fc:	d107      	bne.n	800950e <__gethex+0x242>
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	f843 2b04 	str.w	r2, [r3], #4
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	469b      	mov	fp, r3
 800950e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009512:	f7ff fec5 	bl	80092a0 <__hexdig_fun>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	f000 000f 	and.w	r0, r0, #15
 800951c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009520:	4303      	orrs	r3, r0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	f10b 0b04 	add.w	fp, fp, #4
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	e00d      	b.n	8009548 <__gethex+0x27c>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	9a06      	ldr	r2, [sp, #24]
 8009530:	4413      	add	r3, r2
 8009532:	42bb      	cmp	r3, r7
 8009534:	d3e0      	bcc.n	80094f8 <__gethex+0x22c>
 8009536:	4618      	mov	r0, r3
 8009538:	9901      	ldr	r1, [sp, #4]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	4652      	mov	r2, sl
 800953e:	f001 f917 	bl	800a770 <strncmp>
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2800      	cmp	r0, #0
 8009546:	d1d7      	bne.n	80094f8 <__gethex+0x22c>
 8009548:	461e      	mov	r6, r3
 800954a:	e78b      	b.n	8009464 <__gethex+0x198>
 800954c:	f04f 0a03 	mov.w	sl, #3
 8009550:	e7b8      	b.n	80094c4 <__gethex+0x1f8>
 8009552:	da0a      	bge.n	800956a <__gethex+0x29e>
 8009554:	1a37      	subs	r7, r6, r0
 8009556:	4621      	mov	r1, r4
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	463a      	mov	r2, r7
 800955e:	f000 fc37 	bl	8009dd0 <__lshift>
 8009562:	1bed      	subs	r5, r5, r7
 8009564:	4604      	mov	r4, r0
 8009566:	f100 0914 	add.w	r9, r0, #20
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	e7ae      	b.n	80094ce <__gethex+0x202>
 8009570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009574:	42a8      	cmp	r0, r5
 8009576:	dd72      	ble.n	800965e <__gethex+0x392>
 8009578:	1b45      	subs	r5, r0, r5
 800957a:	42ae      	cmp	r6, r5
 800957c:	dc36      	bgt.n	80095ec <__gethex+0x320>
 800957e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d02a      	beq.n	80095dc <__gethex+0x310>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d02c      	beq.n	80095e4 <__gethex+0x318>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d11c      	bne.n	80095c8 <__gethex+0x2fc>
 800958e:	42ae      	cmp	r6, r5
 8009590:	d11a      	bne.n	80095c8 <__gethex+0x2fc>
 8009592:	2e01      	cmp	r6, #1
 8009594:	d112      	bne.n	80095bc <__gethex+0x2f0>
 8009596:	9a04      	ldr	r2, [sp, #16]
 8009598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	2301      	movs	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	f8c9 3000 	str.w	r3, [r9]
 80095a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095a8:	2762      	movs	r7, #98	; 0x62
 80095aa:	601c      	str	r4, [r3, #0]
 80095ac:	e723      	b.n	80093f6 <__gethex+0x12a>
 80095ae:	bf00      	nop
 80095b0:	0800b650 	.word	0x0800b650
 80095b4:	0800b5d8 	.word	0x0800b5d8
 80095b8:	0800b5e9 	.word	0x0800b5e9
 80095bc:	1e71      	subs	r1, r6, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fe4a 	bl	800a258 <__any_on>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e6      	bne.n	8009596 <__gethex+0x2ca>
 80095c8:	ee18 0a10 	vmov	r0, s16
 80095cc:	4621      	mov	r1, r4
 80095ce:	f000 f9e3 	bl	8009998 <_Bfree>
 80095d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095d4:	2300      	movs	r3, #0
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	2750      	movs	r7, #80	; 0x50
 80095da:	e70c      	b.n	80093f6 <__gethex+0x12a>
 80095dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f2      	bne.n	80095c8 <__gethex+0x2fc>
 80095e2:	e7d8      	b.n	8009596 <__gethex+0x2ca>
 80095e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d5      	bne.n	8009596 <__gethex+0x2ca>
 80095ea:	e7ed      	b.n	80095c8 <__gethex+0x2fc>
 80095ec:	1e6f      	subs	r7, r5, #1
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d131      	bne.n	8009658 <__gethex+0x38c>
 80095f4:	b127      	cbz	r7, 8009600 <__gethex+0x334>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fe2d 	bl	800a258 <__any_on>
 80095fe:	4682      	mov	sl, r0
 8009600:	117b      	asrs	r3, r7, #5
 8009602:	2101      	movs	r1, #1
 8009604:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009608:	f007 071f 	and.w	r7, r7, #31
 800960c:	fa01 f707 	lsl.w	r7, r1, r7
 8009610:	421f      	tst	r7, r3
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	bf18      	it	ne
 8009618:	f04a 0a02 	orrne.w	sl, sl, #2
 800961c:	1b76      	subs	r6, r6, r5
 800961e:	f7ff fded 	bl	80091fc <rshift>
 8009622:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009626:	2702      	movs	r7, #2
 8009628:	f1ba 0f00 	cmp.w	sl, #0
 800962c:	d048      	beq.n	80096c0 <__gethex+0x3f4>
 800962e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d015      	beq.n	8009662 <__gethex+0x396>
 8009636:	2b03      	cmp	r3, #3
 8009638:	d017      	beq.n	800966a <__gethex+0x39e>
 800963a:	2b01      	cmp	r3, #1
 800963c:	d109      	bne.n	8009652 <__gethex+0x386>
 800963e:	f01a 0f02 	tst.w	sl, #2
 8009642:	d006      	beq.n	8009652 <__gethex+0x386>
 8009644:	f8d9 0000 	ldr.w	r0, [r9]
 8009648:	ea4a 0a00 	orr.w	sl, sl, r0
 800964c:	f01a 0f01 	tst.w	sl, #1
 8009650:	d10e      	bne.n	8009670 <__gethex+0x3a4>
 8009652:	f047 0710 	orr.w	r7, r7, #16
 8009656:	e033      	b.n	80096c0 <__gethex+0x3f4>
 8009658:	f04f 0a01 	mov.w	sl, #1
 800965c:	e7d0      	b.n	8009600 <__gethex+0x334>
 800965e:	2701      	movs	r7, #1
 8009660:	e7e2      	b.n	8009628 <__gethex+0x35c>
 8009662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009664:	f1c3 0301 	rsb	r3, r3, #1
 8009668:	9315      	str	r3, [sp, #84]	; 0x54
 800966a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <__gethex+0x386>
 8009670:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009674:	f104 0314 	add.w	r3, r4, #20
 8009678:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800967c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009680:	f04f 0c00 	mov.w	ip, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f853 2b04 	ldr.w	r2, [r3], #4
 800968a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800968e:	d01c      	beq.n	80096ca <__gethex+0x3fe>
 8009690:	3201      	adds	r2, #1
 8009692:	6002      	str	r2, [r0, #0]
 8009694:	2f02      	cmp	r7, #2
 8009696:	f104 0314 	add.w	r3, r4, #20
 800969a:	d13f      	bne.n	800971c <__gethex+0x450>
 800969c:	f8d8 2000 	ldr.w	r2, [r8]
 80096a0:	3a01      	subs	r2, #1
 80096a2:	42b2      	cmp	r2, r6
 80096a4:	d10a      	bne.n	80096bc <__gethex+0x3f0>
 80096a6:	1171      	asrs	r1, r6, #5
 80096a8:	2201      	movs	r2, #1
 80096aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ae:	f006 061f 	and.w	r6, r6, #31
 80096b2:	fa02 f606 	lsl.w	r6, r2, r6
 80096b6:	421e      	tst	r6, r3
 80096b8:	bf18      	it	ne
 80096ba:	4617      	movne	r7, r2
 80096bc:	f047 0720 	orr.w	r7, r7, #32
 80096c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c2:	601c      	str	r4, [r3, #0]
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	601d      	str	r5, [r3, #0]
 80096c8:	e695      	b.n	80093f6 <__gethex+0x12a>
 80096ca:	4299      	cmp	r1, r3
 80096cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80096d0:	d8d8      	bhi.n	8009684 <__gethex+0x3b8>
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	459b      	cmp	fp, r3
 80096d6:	db19      	blt.n	800970c <__gethex+0x440>
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	3101      	adds	r1, #1
 80096e0:	f000 f91a 	bl	8009918 <_Balloc>
 80096e4:	4681      	mov	r9, r0
 80096e6:	b918      	cbnz	r0, 80096f0 <__gethex+0x424>
 80096e8:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <__gethex+0x488>)
 80096ea:	4602      	mov	r2, r0
 80096ec:	2184      	movs	r1, #132	; 0x84
 80096ee:	e6a8      	b.n	8009442 <__gethex+0x176>
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	3202      	adds	r2, #2
 80096f4:	f104 010c 	add.w	r1, r4, #12
 80096f8:	0092      	lsls	r2, r2, #2
 80096fa:	300c      	adds	r0, #12
 80096fc:	f7fd f9a2 	bl	8006a44 <memcpy>
 8009700:	4621      	mov	r1, r4
 8009702:	ee18 0a10 	vmov	r0, s16
 8009706:	f000 f947 	bl	8009998 <_Bfree>
 800970a:	464c      	mov	r4, r9
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009714:	6122      	str	r2, [r4, #16]
 8009716:	2201      	movs	r2, #1
 8009718:	615a      	str	r2, [r3, #20]
 800971a:	e7bb      	b.n	8009694 <__gethex+0x3c8>
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	455a      	cmp	r2, fp
 8009720:	dd0b      	ble.n	800973a <__gethex+0x46e>
 8009722:	2101      	movs	r1, #1
 8009724:	4620      	mov	r0, r4
 8009726:	f7ff fd69 	bl	80091fc <rshift>
 800972a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800972e:	3501      	adds	r5, #1
 8009730:	42ab      	cmp	r3, r5
 8009732:	f6ff aed0 	blt.w	80094d6 <__gethex+0x20a>
 8009736:	2701      	movs	r7, #1
 8009738:	e7c0      	b.n	80096bc <__gethex+0x3f0>
 800973a:	f016 061f 	ands.w	r6, r6, #31
 800973e:	d0fa      	beq.n	8009736 <__gethex+0x46a>
 8009740:	4453      	add	r3, sl
 8009742:	f1c6 0620 	rsb	r6, r6, #32
 8009746:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800974a:	f000 f9d7 	bl	8009afc <__hi0bits>
 800974e:	42b0      	cmp	r0, r6
 8009750:	dbe7      	blt.n	8009722 <__gethex+0x456>
 8009752:	e7f0      	b.n	8009736 <__gethex+0x46a>
 8009754:	0800b5d8 	.word	0x0800b5d8

08009758 <L_shift>:
 8009758:	f1c2 0208 	rsb	r2, r2, #8
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	b570      	push	{r4, r5, r6, lr}
 8009760:	f1c2 0620 	rsb	r6, r2, #32
 8009764:	6843      	ldr	r3, [r0, #4]
 8009766:	6804      	ldr	r4, [r0, #0]
 8009768:	fa03 f506 	lsl.w	r5, r3, r6
 800976c:	432c      	orrs	r4, r5
 800976e:	40d3      	lsrs	r3, r2
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	f840 3f04 	str.w	r3, [r0, #4]!
 8009776:	4288      	cmp	r0, r1
 8009778:	d3f4      	bcc.n	8009764 <L_shift+0xc>
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__match>:
 800977c:	b530      	push	{r4, r5, lr}
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	b914      	cbnz	r4, 800978e <__match+0x12>
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	2001      	movs	r0, #1
 800978c:	bd30      	pop	{r4, r5, pc}
 800978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009796:	2d19      	cmp	r5, #25
 8009798:	bf98      	it	ls
 800979a:	3220      	addls	r2, #32
 800979c:	42a2      	cmp	r2, r4
 800979e:	d0f0      	beq.n	8009782 <__match+0x6>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f3      	b.n	800978c <__match+0x10>

080097a4 <__hexnan>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	680b      	ldr	r3, [r1, #0]
 80097aa:	115e      	asrs	r6, r3, #5
 80097ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097b0:	f013 031f 	ands.w	r3, r3, #31
 80097b4:	b087      	sub	sp, #28
 80097b6:	bf18      	it	ne
 80097b8:	3604      	addne	r6, #4
 80097ba:	2500      	movs	r5, #0
 80097bc:	1f37      	subs	r7, r6, #4
 80097be:	4690      	mov	r8, r2
 80097c0:	6802      	ldr	r2, [r0, #0]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	4682      	mov	sl, r0
 80097c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ca:	46b9      	mov	r9, r7
 80097cc:	463c      	mov	r4, r7
 80097ce:	9502      	str	r5, [sp, #8]
 80097d0:	46ab      	mov	fp, r5
 80097d2:	7851      	ldrb	r1, [r2, #1]
 80097d4:	1c53      	adds	r3, r2, #1
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	b341      	cbz	r1, 800982c <__hexnan+0x88>
 80097da:	4608      	mov	r0, r1
 80097dc:	9205      	str	r2, [sp, #20]
 80097de:	9104      	str	r1, [sp, #16]
 80097e0:	f7ff fd5e 	bl	80092a0 <__hexdig_fun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d14f      	bne.n	8009888 <__hexnan+0xe4>
 80097e8:	9904      	ldr	r1, [sp, #16]
 80097ea:	9a05      	ldr	r2, [sp, #20]
 80097ec:	2920      	cmp	r1, #32
 80097ee:	d818      	bhi.n	8009822 <__hexnan+0x7e>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	459b      	cmp	fp, r3
 80097f4:	dd13      	ble.n	800981e <__hexnan+0x7a>
 80097f6:	454c      	cmp	r4, r9
 80097f8:	d206      	bcs.n	8009808 <__hexnan+0x64>
 80097fa:	2d07      	cmp	r5, #7
 80097fc:	dc04      	bgt.n	8009808 <__hexnan+0x64>
 80097fe:	462a      	mov	r2, r5
 8009800:	4649      	mov	r1, r9
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ffa8 	bl	8009758 <L_shift>
 8009808:	4544      	cmp	r4, r8
 800980a:	d950      	bls.n	80098ae <__hexnan+0x10a>
 800980c:	2300      	movs	r3, #0
 800980e:	f1a4 0904 	sub.w	r9, r4, #4
 8009812:	f844 3c04 	str.w	r3, [r4, #-4]
 8009816:	f8cd b008 	str.w	fp, [sp, #8]
 800981a:	464c      	mov	r4, r9
 800981c:	461d      	mov	r5, r3
 800981e:	9a03      	ldr	r2, [sp, #12]
 8009820:	e7d7      	b.n	80097d2 <__hexnan+0x2e>
 8009822:	2929      	cmp	r1, #41	; 0x29
 8009824:	d156      	bne.n	80098d4 <__hexnan+0x130>
 8009826:	3202      	adds	r2, #2
 8009828:	f8ca 2000 	str.w	r2, [sl]
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	d050      	beq.n	80098d4 <__hexnan+0x130>
 8009832:	454c      	cmp	r4, r9
 8009834:	d206      	bcs.n	8009844 <__hexnan+0xa0>
 8009836:	2d07      	cmp	r5, #7
 8009838:	dc04      	bgt.n	8009844 <__hexnan+0xa0>
 800983a:	462a      	mov	r2, r5
 800983c:	4649      	mov	r1, r9
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff ff8a 	bl	8009758 <L_shift>
 8009844:	4544      	cmp	r4, r8
 8009846:	d934      	bls.n	80098b2 <__hexnan+0x10e>
 8009848:	f1a8 0204 	sub.w	r2, r8, #4
 800984c:	4623      	mov	r3, r4
 800984e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009852:	f842 1f04 	str.w	r1, [r2, #4]!
 8009856:	429f      	cmp	r7, r3
 8009858:	d2f9      	bcs.n	800984e <__hexnan+0xaa>
 800985a:	1b3b      	subs	r3, r7, r4
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	3304      	adds	r3, #4
 8009862:	3401      	adds	r4, #1
 8009864:	3e03      	subs	r6, #3
 8009866:	42b4      	cmp	r4, r6
 8009868:	bf88      	it	hi
 800986a:	2304      	movhi	r3, #4
 800986c:	4443      	add	r3, r8
 800986e:	2200      	movs	r2, #0
 8009870:	f843 2b04 	str.w	r2, [r3], #4
 8009874:	429f      	cmp	r7, r3
 8009876:	d2fb      	bcs.n	8009870 <__hexnan+0xcc>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b91b      	cbnz	r3, 8009884 <__hexnan+0xe0>
 800987c:	4547      	cmp	r7, r8
 800987e:	d127      	bne.n	80098d0 <__hexnan+0x12c>
 8009880:	2301      	movs	r3, #1
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	2005      	movs	r0, #5
 8009886:	e026      	b.n	80098d6 <__hexnan+0x132>
 8009888:	3501      	adds	r5, #1
 800988a:	2d08      	cmp	r5, #8
 800988c:	f10b 0b01 	add.w	fp, fp, #1
 8009890:	dd06      	ble.n	80098a0 <__hexnan+0xfc>
 8009892:	4544      	cmp	r4, r8
 8009894:	d9c3      	bls.n	800981e <__hexnan+0x7a>
 8009896:	2300      	movs	r3, #0
 8009898:	f844 3c04 	str.w	r3, [r4, #-4]
 800989c:	2501      	movs	r5, #1
 800989e:	3c04      	subs	r4, #4
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	f000 000f 	and.w	r0, r0, #15
 80098a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	e7b7      	b.n	800981e <__hexnan+0x7a>
 80098ae:	2508      	movs	r5, #8
 80098b0:	e7b5      	b.n	800981e <__hexnan+0x7a>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0df      	beq.n	8009878 <__hexnan+0xd4>
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	f1c3 0320 	rsb	r3, r3, #32
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098c8:	401a      	ands	r2, r3
 80098ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80098ce:	e7d3      	b.n	8009878 <__hexnan+0xd4>
 80098d0:	3f04      	subs	r7, #4
 80098d2:	e7d1      	b.n	8009878 <__hexnan+0xd4>
 80098d4:	2004      	movs	r0, #4
 80098d6:	b007      	add	sp, #28
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098dc <_localeconv_r>:
 80098dc:	4800      	ldr	r0, [pc, #0]	; (80098e0 <_localeconv_r+0x4>)
 80098de:	4770      	bx	lr
 80098e0:	20000254 	.word	0x20000254

080098e4 <malloc>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <malloc+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f000 bd59 	b.w	800a3a0 <_malloc_r>
 80098ee:	bf00      	nop
 80098f0:	200000fc 	.word	0x200000fc

080098f4 <__ascii_mbtowc>:
 80098f4:	b082      	sub	sp, #8
 80098f6:	b901      	cbnz	r1, 80098fa <__ascii_mbtowc+0x6>
 80098f8:	a901      	add	r1, sp, #4
 80098fa:	b142      	cbz	r2, 800990e <__ascii_mbtowc+0x1a>
 80098fc:	b14b      	cbz	r3, 8009912 <__ascii_mbtowc+0x1e>
 80098fe:	7813      	ldrb	r3, [r2, #0]
 8009900:	600b      	str	r3, [r1, #0]
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	1e10      	subs	r0, r2, #0
 8009906:	bf18      	it	ne
 8009908:	2001      	movne	r0, #1
 800990a:	b002      	add	sp, #8
 800990c:	4770      	bx	lr
 800990e:	4610      	mov	r0, r2
 8009910:	e7fb      	b.n	800990a <__ascii_mbtowc+0x16>
 8009912:	f06f 0001 	mvn.w	r0, #1
 8009916:	e7f8      	b.n	800990a <__ascii_mbtowc+0x16>

08009918 <_Balloc>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	b976      	cbnz	r6, 8009940 <_Balloc+0x28>
 8009922:	2010      	movs	r0, #16
 8009924:	f7ff ffde 	bl	80098e4 <malloc>
 8009928:	4602      	mov	r2, r0
 800992a:	6260      	str	r0, [r4, #36]	; 0x24
 800992c:	b920      	cbnz	r0, 8009938 <_Balloc+0x20>
 800992e:	4b18      	ldr	r3, [pc, #96]	; (8009990 <_Balloc+0x78>)
 8009930:	4818      	ldr	r0, [pc, #96]	; (8009994 <_Balloc+0x7c>)
 8009932:	2166      	movs	r1, #102	; 0x66
 8009934:	f000 ff3e 	bl	800a7b4 <__assert_func>
 8009938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800993c:	6006      	str	r6, [r0, #0]
 800993e:	60c6      	str	r6, [r0, #12]
 8009940:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009942:	68f3      	ldr	r3, [r6, #12]
 8009944:	b183      	cbz	r3, 8009968 <_Balloc+0x50>
 8009946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800994e:	b9b8      	cbnz	r0, 8009980 <_Balloc+0x68>
 8009950:	2101      	movs	r1, #1
 8009952:	fa01 f605 	lsl.w	r6, r1, r5
 8009956:	1d72      	adds	r2, r6, #5
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fc9d 	bl	800a29a <_calloc_r>
 8009960:	b160      	cbz	r0, 800997c <_Balloc+0x64>
 8009962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009966:	e00e      	b.n	8009986 <_Balloc+0x6e>
 8009968:	2221      	movs	r2, #33	; 0x21
 800996a:	2104      	movs	r1, #4
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fc94 	bl	800a29a <_calloc_r>
 8009972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009974:	60f0      	str	r0, [r6, #12]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e4      	bne.n	8009946 <_Balloc+0x2e>
 800997c:	2000      	movs	r0, #0
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	6802      	ldr	r2, [r0, #0]
 8009982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009986:	2300      	movs	r3, #0
 8009988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800998c:	e7f7      	b.n	800997e <_Balloc+0x66>
 800998e:	bf00      	nop
 8009990:	0800b566 	.word	0x0800b566
 8009994:	0800b664 	.word	0x0800b664

08009998 <_Bfree>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Bfree+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff ff9e 	bl	80098e4 <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6268      	str	r0, [r5, #36]	; 0x24
 80099ac:	b920      	cbnz	r0, 80099b8 <_Bfree+0x20>
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <_Bfree+0x3c>)
 80099b0:	4809      	ldr	r0, [pc, #36]	; (80099d8 <_Bfree+0x40>)
 80099b2:	218a      	movs	r1, #138	; 0x8a
 80099b4:	f000 fefe 	bl	800a7b4 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	b13c      	cbz	r4, 80099d2 <_Bfree+0x3a>
 80099c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099c4:	6862      	ldr	r2, [r4, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099cc:	6021      	str	r1, [r4, #0]
 80099ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	0800b566 	.word	0x0800b566
 80099d8:	0800b664 	.word	0x0800b664

080099dc <__multadd>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	690d      	ldr	r5, [r1, #16]
 80099e2:	4607      	mov	r7, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	461e      	mov	r6, r3
 80099e8:	f101 0c14 	add.w	ip, r1, #20
 80099ec:	2000      	movs	r0, #0
 80099ee:	f8dc 3000 	ldr.w	r3, [ip]
 80099f2:	b299      	uxth	r1, r3
 80099f4:	fb02 6101 	mla	r1, r2, r1, r6
 80099f8:	0c1e      	lsrs	r6, r3, #16
 80099fa:	0c0b      	lsrs	r3, r1, #16
 80099fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009a00:	b289      	uxth	r1, r1
 8009a02:	3001      	adds	r0, #1
 8009a04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a08:	4285      	cmp	r5, r0
 8009a0a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a12:	dcec      	bgt.n	80099ee <__multadd+0x12>
 8009a14:	b30e      	cbz	r6, 8009a5a <__multadd+0x7e>
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	dc19      	bgt.n	8009a50 <__multadd+0x74>
 8009a1c:	6861      	ldr	r1, [r4, #4]
 8009a1e:	4638      	mov	r0, r7
 8009a20:	3101      	adds	r1, #1
 8009a22:	f7ff ff79 	bl	8009918 <_Balloc>
 8009a26:	4680      	mov	r8, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <__multadd+0x5a>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <__multadd+0x84>)
 8009a2e:	480d      	ldr	r0, [pc, #52]	; (8009a64 <__multadd+0x88>)
 8009a30:	21b5      	movs	r1, #181	; 0xb5
 8009a32:	f000 febf 	bl	800a7b4 <__assert_func>
 8009a36:	6922      	ldr	r2, [r4, #16]
 8009a38:	3202      	adds	r2, #2
 8009a3a:	f104 010c 	add.w	r1, r4, #12
 8009a3e:	0092      	lsls	r2, r2, #2
 8009a40:	300c      	adds	r0, #12
 8009a42:	f7fc ffff 	bl	8006a44 <memcpy>
 8009a46:	4621      	mov	r1, r4
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ffa5 	bl	8009998 <_Bfree>
 8009a4e:	4644      	mov	r4, r8
 8009a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a54:	3501      	adds	r5, #1
 8009a56:	615e      	str	r6, [r3, #20]
 8009a58:	6125      	str	r5, [r4, #16]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	0800b5d8 	.word	0x0800b5d8
 8009a64:	0800b664 	.word	0x0800b664

08009a68 <__s2b>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	4615      	mov	r5, r2
 8009a70:	461f      	mov	r7, r3
 8009a72:	2209      	movs	r2, #9
 8009a74:	3308      	adds	r3, #8
 8009a76:	4606      	mov	r6, r0
 8009a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	2201      	movs	r2, #1
 8009a80:	429a      	cmp	r2, r3
 8009a82:	db09      	blt.n	8009a98 <__s2b+0x30>
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7ff ff47 	bl	8009918 <_Balloc>
 8009a8a:	b940      	cbnz	r0, 8009a9e <__s2b+0x36>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	4b19      	ldr	r3, [pc, #100]	; (8009af4 <__s2b+0x8c>)
 8009a90:	4819      	ldr	r0, [pc, #100]	; (8009af8 <__s2b+0x90>)
 8009a92:	21ce      	movs	r1, #206	; 0xce
 8009a94:	f000 fe8e 	bl	800a7b4 <__assert_func>
 8009a98:	0052      	lsls	r2, r2, #1
 8009a9a:	3101      	adds	r1, #1
 8009a9c:	e7f0      	b.n	8009a80 <__s2b+0x18>
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	6143      	str	r3, [r0, #20]
 8009aa2:	2d09      	cmp	r5, #9
 8009aa4:	f04f 0301 	mov.w	r3, #1
 8009aa8:	6103      	str	r3, [r0, #16]
 8009aaa:	dd16      	ble.n	8009ada <__s2b+0x72>
 8009aac:	f104 0909 	add.w	r9, r4, #9
 8009ab0:	46c8      	mov	r8, r9
 8009ab2:	442c      	add	r4, r5
 8009ab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ab8:	4601      	mov	r1, r0
 8009aba:	3b30      	subs	r3, #48	; 0x30
 8009abc:	220a      	movs	r2, #10
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ff8c 	bl	80099dc <__multadd>
 8009ac4:	45a0      	cmp	r8, r4
 8009ac6:	d1f5      	bne.n	8009ab4 <__s2b+0x4c>
 8009ac8:	f1a5 0408 	sub.w	r4, r5, #8
 8009acc:	444c      	add	r4, r9
 8009ace:	1b2d      	subs	r5, r5, r4
 8009ad0:	1963      	adds	r3, r4, r5
 8009ad2:	42bb      	cmp	r3, r7
 8009ad4:	db04      	blt.n	8009ae0 <__s2b+0x78>
 8009ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ada:	340a      	adds	r4, #10
 8009adc:	2509      	movs	r5, #9
 8009ade:	e7f6      	b.n	8009ace <__s2b+0x66>
 8009ae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	3b30      	subs	r3, #48	; 0x30
 8009ae8:	220a      	movs	r2, #10
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ff76 	bl	80099dc <__multadd>
 8009af0:	e7ee      	b.n	8009ad0 <__s2b+0x68>
 8009af2:	bf00      	nop
 8009af4:	0800b5d8 	.word	0x0800b5d8
 8009af8:	0800b664 	.word	0x0800b664

08009afc <__hi0bits>:
 8009afc:	0c03      	lsrs	r3, r0, #16
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	b9d3      	cbnz	r3, 8009b38 <__hi0bits+0x3c>
 8009b02:	0400      	lsls	r0, r0, #16
 8009b04:	2310      	movs	r3, #16
 8009b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b0a:	bf04      	itt	eq
 8009b0c:	0200      	lsleq	r0, r0, #8
 8009b0e:	3308      	addeq	r3, #8
 8009b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b14:	bf04      	itt	eq
 8009b16:	0100      	lsleq	r0, r0, #4
 8009b18:	3304      	addeq	r3, #4
 8009b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b1e:	bf04      	itt	eq
 8009b20:	0080      	lsleq	r0, r0, #2
 8009b22:	3302      	addeq	r3, #2
 8009b24:	2800      	cmp	r0, #0
 8009b26:	db05      	blt.n	8009b34 <__hi0bits+0x38>
 8009b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b2c:	f103 0301 	add.w	r3, r3, #1
 8009b30:	bf08      	it	eq
 8009b32:	2320      	moveq	r3, #32
 8009b34:	4618      	mov	r0, r3
 8009b36:	4770      	bx	lr
 8009b38:	2300      	movs	r3, #0
 8009b3a:	e7e4      	b.n	8009b06 <__hi0bits+0xa>

08009b3c <__lo0bits>:
 8009b3c:	6803      	ldr	r3, [r0, #0]
 8009b3e:	f013 0207 	ands.w	r2, r3, #7
 8009b42:	4601      	mov	r1, r0
 8009b44:	d00b      	beq.n	8009b5e <__lo0bits+0x22>
 8009b46:	07da      	lsls	r2, r3, #31
 8009b48:	d423      	bmi.n	8009b92 <__lo0bits+0x56>
 8009b4a:	0798      	lsls	r0, r3, #30
 8009b4c:	bf49      	itett	mi
 8009b4e:	085b      	lsrmi	r3, r3, #1
 8009b50:	089b      	lsrpl	r3, r3, #2
 8009b52:	2001      	movmi	r0, #1
 8009b54:	600b      	strmi	r3, [r1, #0]
 8009b56:	bf5c      	itt	pl
 8009b58:	600b      	strpl	r3, [r1, #0]
 8009b5a:	2002      	movpl	r0, #2
 8009b5c:	4770      	bx	lr
 8009b5e:	b298      	uxth	r0, r3
 8009b60:	b9a8      	cbnz	r0, 8009b8e <__lo0bits+0x52>
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	2010      	movs	r0, #16
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	b90a      	cbnz	r2, 8009b6e <__lo0bits+0x32>
 8009b6a:	3008      	adds	r0, #8
 8009b6c:	0a1b      	lsrs	r3, r3, #8
 8009b6e:	071a      	lsls	r2, r3, #28
 8009b70:	bf04      	itt	eq
 8009b72:	091b      	lsreq	r3, r3, #4
 8009b74:	3004      	addeq	r0, #4
 8009b76:	079a      	lsls	r2, r3, #30
 8009b78:	bf04      	itt	eq
 8009b7a:	089b      	lsreq	r3, r3, #2
 8009b7c:	3002      	addeq	r0, #2
 8009b7e:	07da      	lsls	r2, r3, #31
 8009b80:	d403      	bmi.n	8009b8a <__lo0bits+0x4e>
 8009b82:	085b      	lsrs	r3, r3, #1
 8009b84:	f100 0001 	add.w	r0, r0, #1
 8009b88:	d005      	beq.n	8009b96 <__lo0bits+0x5a>
 8009b8a:	600b      	str	r3, [r1, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	4610      	mov	r0, r2
 8009b90:	e7e9      	b.n	8009b66 <__lo0bits+0x2a>
 8009b92:	2000      	movs	r0, #0
 8009b94:	4770      	bx	lr
 8009b96:	2020      	movs	r0, #32
 8009b98:	4770      	bx	lr
	...

08009b9c <__i2b>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	f7ff feb9 	bl	8009918 <_Balloc>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	b928      	cbnz	r0, 8009bb6 <__i2b+0x1a>
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <__i2b+0x24>)
 8009bac:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <__i2b+0x28>)
 8009bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bb2:	f000 fdff 	bl	800a7b4 <__assert_func>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	6144      	str	r4, [r0, #20]
 8009bba:	6103      	str	r3, [r0, #16]
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800b5d8 	.word	0x0800b5d8
 8009bc4:	0800b664 	.word	0x0800b664

08009bc8 <__multiply>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	4691      	mov	r9, r2
 8009bce:	690a      	ldr	r2, [r1, #16]
 8009bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	bfb8      	it	lt
 8009bd8:	460b      	movlt	r3, r1
 8009bda:	460c      	mov	r4, r1
 8009bdc:	bfbc      	itt	lt
 8009bde:	464c      	movlt	r4, r9
 8009be0:	4699      	movlt	r9, r3
 8009be2:	6927      	ldr	r7, [r4, #16]
 8009be4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009be8:	68a3      	ldr	r3, [r4, #8]
 8009bea:	6861      	ldr	r1, [r4, #4]
 8009bec:	eb07 060a 	add.w	r6, r7, sl
 8009bf0:	42b3      	cmp	r3, r6
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	bfb8      	it	lt
 8009bf6:	3101      	addlt	r1, #1
 8009bf8:	f7ff fe8e 	bl	8009918 <_Balloc>
 8009bfc:	b930      	cbnz	r0, 8009c0c <__multiply+0x44>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	4b44      	ldr	r3, [pc, #272]	; (8009d14 <__multiply+0x14c>)
 8009c02:	4845      	ldr	r0, [pc, #276]	; (8009d18 <__multiply+0x150>)
 8009c04:	f240 115d 	movw	r1, #349	; 0x15d
 8009c08:	f000 fdd4 	bl	800a7b4 <__assert_func>
 8009c0c:	f100 0514 	add.w	r5, r0, #20
 8009c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c14:	462b      	mov	r3, r5
 8009c16:	2200      	movs	r2, #0
 8009c18:	4543      	cmp	r3, r8
 8009c1a:	d321      	bcc.n	8009c60 <__multiply+0x98>
 8009c1c:	f104 0314 	add.w	r3, r4, #20
 8009c20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c24:	f109 0314 	add.w	r3, r9, #20
 8009c28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c2c:	9202      	str	r2, [sp, #8]
 8009c2e:	1b3a      	subs	r2, r7, r4
 8009c30:	3a15      	subs	r2, #21
 8009c32:	f022 0203 	bic.w	r2, r2, #3
 8009c36:	3204      	adds	r2, #4
 8009c38:	f104 0115 	add.w	r1, r4, #21
 8009c3c:	428f      	cmp	r7, r1
 8009c3e:	bf38      	it	cc
 8009c40:	2204      	movcc	r2, #4
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	9a02      	ldr	r2, [sp, #8]
 8009c46:	9303      	str	r3, [sp, #12]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d80c      	bhi.n	8009c66 <__multiply+0x9e>
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	dd03      	ble.n	8009c58 <__multiply+0x90>
 8009c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d05a      	beq.n	8009d0e <__multiply+0x146>
 8009c58:	6106      	str	r6, [r0, #16]
 8009c5a:	b005      	add	sp, #20
 8009c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c60:	f843 2b04 	str.w	r2, [r3], #4
 8009c64:	e7d8      	b.n	8009c18 <__multiply+0x50>
 8009c66:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c6a:	f1ba 0f00 	cmp.w	sl, #0
 8009c6e:	d024      	beq.n	8009cba <__multiply+0xf2>
 8009c70:	f104 0e14 	add.w	lr, r4, #20
 8009c74:	46a9      	mov	r9, r5
 8009c76:	f04f 0c00 	mov.w	ip, #0
 8009c7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c82:	fa1f fb82 	uxth.w	fp, r2
 8009c86:	b289      	uxth	r1, r1
 8009c88:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c90:	f8d9 2000 	ldr.w	r2, [r9]
 8009c94:	4461      	add	r1, ip
 8009c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ca2:	b289      	uxth	r1, r1
 8009ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ca8:	4577      	cmp	r7, lr
 8009caa:	f849 1b04 	str.w	r1, [r9], #4
 8009cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cb2:	d8e2      	bhi.n	8009c7a <__multiply+0xb2>
 8009cb4:	9a01      	ldr	r2, [sp, #4]
 8009cb6:	f845 c002 	str.w	ip, [r5, r2]
 8009cba:	9a03      	ldr	r2, [sp, #12]
 8009cbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	f1b9 0f00 	cmp.w	r9, #0
 8009cc6:	d020      	beq.n	8009d0a <__multiply+0x142>
 8009cc8:	6829      	ldr	r1, [r5, #0]
 8009cca:	f104 0c14 	add.w	ip, r4, #20
 8009cce:	46ae      	mov	lr, r5
 8009cd0:	f04f 0a00 	mov.w	sl, #0
 8009cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8009cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cdc:	fb09 220b 	mla	r2, r9, fp, r2
 8009ce0:	4492      	add	sl, r2
 8009ce2:	b289      	uxth	r1, r1
 8009ce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8009cec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cf0:	f8be 1000 	ldrh.w	r1, [lr]
 8009cf4:	0c12      	lsrs	r2, r2, #16
 8009cf6:	fb09 1102 	mla	r1, r9, r2, r1
 8009cfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cfe:	4567      	cmp	r7, ip
 8009d00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d04:	d8e6      	bhi.n	8009cd4 <__multiply+0x10c>
 8009d06:	9a01      	ldr	r2, [sp, #4]
 8009d08:	50a9      	str	r1, [r5, r2]
 8009d0a:	3504      	adds	r5, #4
 8009d0c:	e79a      	b.n	8009c44 <__multiply+0x7c>
 8009d0e:	3e01      	subs	r6, #1
 8009d10:	e79c      	b.n	8009c4c <__multiply+0x84>
 8009d12:	bf00      	nop
 8009d14:	0800b5d8 	.word	0x0800b5d8
 8009d18:	0800b664 	.word	0x0800b664

08009d1c <__pow5mult>:
 8009d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d20:	4615      	mov	r5, r2
 8009d22:	f012 0203 	ands.w	r2, r2, #3
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	d007      	beq.n	8009d3c <__pow5mult+0x20>
 8009d2c:	4c25      	ldr	r4, [pc, #148]	; (8009dc4 <__pow5mult+0xa8>)
 8009d2e:	3a01      	subs	r2, #1
 8009d30:	2300      	movs	r3, #0
 8009d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d36:	f7ff fe51 	bl	80099dc <__multadd>
 8009d3a:	4607      	mov	r7, r0
 8009d3c:	10ad      	asrs	r5, r5, #2
 8009d3e:	d03d      	beq.n	8009dbc <__pow5mult+0xa0>
 8009d40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d42:	b97c      	cbnz	r4, 8009d64 <__pow5mult+0x48>
 8009d44:	2010      	movs	r0, #16
 8009d46:	f7ff fdcd 	bl	80098e4 <malloc>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d4e:	b928      	cbnz	r0, 8009d5c <__pow5mult+0x40>
 8009d50:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <__pow5mult+0xac>)
 8009d52:	481e      	ldr	r0, [pc, #120]	; (8009dcc <__pow5mult+0xb0>)
 8009d54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d58:	f000 fd2c 	bl	800a7b4 <__assert_func>
 8009d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d60:	6004      	str	r4, [r0, #0]
 8009d62:	60c4      	str	r4, [r0, #12]
 8009d64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d6c:	b94c      	cbnz	r4, 8009d82 <__pow5mult+0x66>
 8009d6e:	f240 2171 	movw	r1, #625	; 0x271
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7ff ff12 	bl	8009b9c <__i2b>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d7e:	4604      	mov	r4, r0
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	f04f 0900 	mov.w	r9, #0
 8009d86:	07eb      	lsls	r3, r5, #31
 8009d88:	d50a      	bpl.n	8009da0 <__pow5mult+0x84>
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7ff ff1a 	bl	8009bc8 <__multiply>
 8009d94:	4639      	mov	r1, r7
 8009d96:	4680      	mov	r8, r0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff fdfd 	bl	8009998 <_Bfree>
 8009d9e:	4647      	mov	r7, r8
 8009da0:	106d      	asrs	r5, r5, #1
 8009da2:	d00b      	beq.n	8009dbc <__pow5mult+0xa0>
 8009da4:	6820      	ldr	r0, [r4, #0]
 8009da6:	b938      	cbnz	r0, 8009db8 <__pow5mult+0x9c>
 8009da8:	4622      	mov	r2, r4
 8009daa:	4621      	mov	r1, r4
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7ff ff0b 	bl	8009bc8 <__multiply>
 8009db2:	6020      	str	r0, [r4, #0]
 8009db4:	f8c0 9000 	str.w	r9, [r0]
 8009db8:	4604      	mov	r4, r0
 8009dba:	e7e4      	b.n	8009d86 <__pow5mult+0x6a>
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	bf00      	nop
 8009dc4:	0800b7b0 	.word	0x0800b7b0
 8009dc8:	0800b566 	.word	0x0800b566
 8009dcc:	0800b664 	.word	0x0800b664

08009dd0 <__lshift>:
 8009dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	6849      	ldr	r1, [r1, #4]
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dde:	68a3      	ldr	r3, [r4, #8]
 8009de0:	4607      	mov	r7, r0
 8009de2:	4691      	mov	r9, r2
 8009de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009de8:	f108 0601 	add.w	r6, r8, #1
 8009dec:	42b3      	cmp	r3, r6
 8009dee:	db0b      	blt.n	8009e08 <__lshift+0x38>
 8009df0:	4638      	mov	r0, r7
 8009df2:	f7ff fd91 	bl	8009918 <_Balloc>
 8009df6:	4605      	mov	r5, r0
 8009df8:	b948      	cbnz	r0, 8009e0e <__lshift+0x3e>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b2a      	ldr	r3, [pc, #168]	; (8009ea8 <__lshift+0xd8>)
 8009dfe:	482b      	ldr	r0, [pc, #172]	; (8009eac <__lshift+0xdc>)
 8009e00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e04:	f000 fcd6 	bl	800a7b4 <__assert_func>
 8009e08:	3101      	adds	r1, #1
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	e7ee      	b.n	8009dec <__lshift+0x1c>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f100 0114 	add.w	r1, r0, #20
 8009e14:	f100 0210 	add.w	r2, r0, #16
 8009e18:	4618      	mov	r0, r3
 8009e1a:	4553      	cmp	r3, sl
 8009e1c:	db37      	blt.n	8009e8e <__lshift+0xbe>
 8009e1e:	6920      	ldr	r0, [r4, #16]
 8009e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e24:	f104 0314 	add.w	r3, r4, #20
 8009e28:	f019 091f 	ands.w	r9, r9, #31
 8009e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e34:	d02f      	beq.n	8009e96 <__lshift+0xc6>
 8009e36:	f1c9 0e20 	rsb	lr, r9, #32
 8009e3a:	468a      	mov	sl, r1
 8009e3c:	f04f 0c00 	mov.w	ip, #0
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	fa02 f209 	lsl.w	r2, r2, r9
 8009e46:	ea42 020c 	orr.w	r2, r2, ip
 8009e4a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e52:	4298      	cmp	r0, r3
 8009e54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e58:	d8f2      	bhi.n	8009e40 <__lshift+0x70>
 8009e5a:	1b03      	subs	r3, r0, r4
 8009e5c:	3b15      	subs	r3, #21
 8009e5e:	f023 0303 	bic.w	r3, r3, #3
 8009e62:	3304      	adds	r3, #4
 8009e64:	f104 0215 	add.w	r2, r4, #21
 8009e68:	4290      	cmp	r0, r2
 8009e6a:	bf38      	it	cc
 8009e6c:	2304      	movcc	r3, #4
 8009e6e:	f841 c003 	str.w	ip, [r1, r3]
 8009e72:	f1bc 0f00 	cmp.w	ip, #0
 8009e76:	d001      	beq.n	8009e7c <__lshift+0xac>
 8009e78:	f108 0602 	add.w	r6, r8, #2
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	4638      	mov	r0, r7
 8009e80:	612e      	str	r6, [r5, #16]
 8009e82:	4621      	mov	r1, r4
 8009e84:	f7ff fd88 	bl	8009998 <_Bfree>
 8009e88:	4628      	mov	r0, r5
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e92:	3301      	adds	r3, #1
 8009e94:	e7c1      	b.n	8009e1a <__lshift+0x4a>
 8009e96:	3904      	subs	r1, #4
 8009e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea0:	4298      	cmp	r0, r3
 8009ea2:	d8f9      	bhi.n	8009e98 <__lshift+0xc8>
 8009ea4:	e7ea      	b.n	8009e7c <__lshift+0xac>
 8009ea6:	bf00      	nop
 8009ea8:	0800b5d8 	.word	0x0800b5d8
 8009eac:	0800b664 	.word	0x0800b664

08009eb0 <__mcmp>:
 8009eb0:	b530      	push	{r4, r5, lr}
 8009eb2:	6902      	ldr	r2, [r0, #16]
 8009eb4:	690c      	ldr	r4, [r1, #16]
 8009eb6:	1b12      	subs	r2, r2, r4
 8009eb8:	d10e      	bne.n	8009ed8 <__mcmp+0x28>
 8009eba:	f100 0314 	add.w	r3, r0, #20
 8009ebe:	3114      	adds	r1, #20
 8009ec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ed0:	42a5      	cmp	r5, r4
 8009ed2:	d003      	beq.n	8009edc <__mcmp+0x2c>
 8009ed4:	d305      	bcc.n	8009ee2 <__mcmp+0x32>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4610      	mov	r0, r2
 8009eda:	bd30      	pop	{r4, r5, pc}
 8009edc:	4283      	cmp	r3, r0
 8009ede:	d3f3      	bcc.n	8009ec8 <__mcmp+0x18>
 8009ee0:	e7fa      	b.n	8009ed8 <__mcmp+0x28>
 8009ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee6:	e7f7      	b.n	8009ed8 <__mcmp+0x28>

08009ee8 <__mdiff>:
 8009ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	460c      	mov	r4, r1
 8009eee:	4606      	mov	r6, r0
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4690      	mov	r8, r2
 8009ef6:	f7ff ffdb 	bl	8009eb0 <__mcmp>
 8009efa:	1e05      	subs	r5, r0, #0
 8009efc:	d110      	bne.n	8009f20 <__mdiff+0x38>
 8009efe:	4629      	mov	r1, r5
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7ff fd09 	bl	8009918 <_Balloc>
 8009f06:	b930      	cbnz	r0, 8009f16 <__mdiff+0x2e>
 8009f08:	4b3a      	ldr	r3, [pc, #232]	; (8009ff4 <__mdiff+0x10c>)
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	f240 2132 	movw	r1, #562	; 0x232
 8009f10:	4839      	ldr	r0, [pc, #228]	; (8009ff8 <__mdiff+0x110>)
 8009f12:	f000 fc4f 	bl	800a7b4 <__assert_func>
 8009f16:	2301      	movs	r3, #1
 8009f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	bfa4      	itt	ge
 8009f22:	4643      	movge	r3, r8
 8009f24:	46a0      	movge	r8, r4
 8009f26:	4630      	mov	r0, r6
 8009f28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f2c:	bfa6      	itte	ge
 8009f2e:	461c      	movge	r4, r3
 8009f30:	2500      	movge	r5, #0
 8009f32:	2501      	movlt	r5, #1
 8009f34:	f7ff fcf0 	bl	8009918 <_Balloc>
 8009f38:	b920      	cbnz	r0, 8009f44 <__mdiff+0x5c>
 8009f3a:	4b2e      	ldr	r3, [pc, #184]	; (8009ff4 <__mdiff+0x10c>)
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f42:	e7e5      	b.n	8009f10 <__mdiff+0x28>
 8009f44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f48:	6926      	ldr	r6, [r4, #16]
 8009f4a:	60c5      	str	r5, [r0, #12]
 8009f4c:	f104 0914 	add.w	r9, r4, #20
 8009f50:	f108 0514 	add.w	r5, r8, #20
 8009f54:	f100 0e14 	add.w	lr, r0, #20
 8009f58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f60:	f108 0210 	add.w	r2, r8, #16
 8009f64:	46f2      	mov	sl, lr
 8009f66:	2100      	movs	r1, #0
 8009f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f70:	fa1f f883 	uxth.w	r8, r3
 8009f74:	fa11 f18b 	uxtah	r1, r1, fp
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	eba1 0808 	sub.w	r8, r1, r8
 8009f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f86:	fa1f f888 	uxth.w	r8, r8
 8009f8a:	1419      	asrs	r1, r3, #16
 8009f8c:	454e      	cmp	r6, r9
 8009f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f92:	f84a 3b04 	str.w	r3, [sl], #4
 8009f96:	d8e7      	bhi.n	8009f68 <__mdiff+0x80>
 8009f98:	1b33      	subs	r3, r6, r4
 8009f9a:	3b15      	subs	r3, #21
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	3415      	adds	r4, #21
 8009fa4:	42a6      	cmp	r6, r4
 8009fa6:	bf38      	it	cc
 8009fa8:	2304      	movcc	r3, #4
 8009faa:	441d      	add	r5, r3
 8009fac:	4473      	add	r3, lr
 8009fae:	469e      	mov	lr, r3
 8009fb0:	462e      	mov	r6, r5
 8009fb2:	4566      	cmp	r6, ip
 8009fb4:	d30e      	bcc.n	8009fd4 <__mdiff+0xec>
 8009fb6:	f10c 0203 	add.w	r2, ip, #3
 8009fba:	1b52      	subs	r2, r2, r5
 8009fbc:	f022 0203 	bic.w	r2, r2, #3
 8009fc0:	3d03      	subs	r5, #3
 8009fc2:	45ac      	cmp	ip, r5
 8009fc4:	bf38      	it	cc
 8009fc6:	2200      	movcc	r2, #0
 8009fc8:	441a      	add	r2, r3
 8009fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fce:	b17b      	cbz	r3, 8009ff0 <__mdiff+0x108>
 8009fd0:	6107      	str	r7, [r0, #16]
 8009fd2:	e7a3      	b.n	8009f1c <__mdiff+0x34>
 8009fd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fd8:	fa11 f288 	uxtah	r2, r1, r8
 8009fdc:	1414      	asrs	r4, r2, #16
 8009fde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fe8:	f84e 2b04 	str.w	r2, [lr], #4
 8009fec:	1421      	asrs	r1, r4, #16
 8009fee:	e7e0      	b.n	8009fb2 <__mdiff+0xca>
 8009ff0:	3f01      	subs	r7, #1
 8009ff2:	e7ea      	b.n	8009fca <__mdiff+0xe2>
 8009ff4:	0800b5d8 	.word	0x0800b5d8
 8009ff8:	0800b664 	.word	0x0800b664

08009ffc <__ulp>:
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	ed8d 0b00 	vstr	d0, [sp]
 800a002:	9b01      	ldr	r3, [sp, #4]
 800a004:	4912      	ldr	r1, [pc, #72]	; (800a050 <__ulp+0x54>)
 800a006:	4019      	ands	r1, r3
 800a008:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a00c:	2900      	cmp	r1, #0
 800a00e:	dd05      	ble.n	800a01c <__ulp+0x20>
 800a010:	2200      	movs	r2, #0
 800a012:	460b      	mov	r3, r1
 800a014:	ec43 2b10 	vmov	d0, r2, r3
 800a018:	b002      	add	sp, #8
 800a01a:	4770      	bx	lr
 800a01c:	4249      	negs	r1, r1
 800a01e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a022:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	da04      	bge.n	800a03a <__ulp+0x3e>
 800a030:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a034:	fa41 f300 	asr.w	r3, r1, r0
 800a038:	e7ec      	b.n	800a014 <__ulp+0x18>
 800a03a:	f1a0 0114 	sub.w	r1, r0, #20
 800a03e:	291e      	cmp	r1, #30
 800a040:	bfda      	itte	le
 800a042:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a046:	fa20 f101 	lsrle.w	r1, r0, r1
 800a04a:	2101      	movgt	r1, #1
 800a04c:	460a      	mov	r2, r1
 800a04e:	e7e1      	b.n	800a014 <__ulp+0x18>
 800a050:	7ff00000 	.word	0x7ff00000

0800a054 <__b2d>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	6905      	ldr	r5, [r0, #16]
 800a058:	f100 0714 	add.w	r7, r0, #20
 800a05c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a060:	1f2e      	subs	r6, r5, #4
 800a062:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff fd48 	bl	8009afc <__hi0bits>
 800a06c:	f1c0 0320 	rsb	r3, r0, #32
 800a070:	280a      	cmp	r0, #10
 800a072:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0f0 <__b2d+0x9c>
 800a076:	600b      	str	r3, [r1, #0]
 800a078:	dc14      	bgt.n	800a0a4 <__b2d+0x50>
 800a07a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a07e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a082:	42b7      	cmp	r7, r6
 800a084:	ea41 030c 	orr.w	r3, r1, ip
 800a088:	bf34      	ite	cc
 800a08a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a08e:	2100      	movcs	r1, #0
 800a090:	3015      	adds	r0, #21
 800a092:	fa04 f000 	lsl.w	r0, r4, r0
 800a096:	fa21 f10e 	lsr.w	r1, r1, lr
 800a09a:	ea40 0201 	orr.w	r2, r0, r1
 800a09e:	ec43 2b10 	vmov	d0, r2, r3
 800a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a4:	42b7      	cmp	r7, r6
 800a0a6:	bf3a      	itte	cc
 800a0a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0b0:	2100      	movcs	r1, #0
 800a0b2:	380b      	subs	r0, #11
 800a0b4:	d017      	beq.n	800a0e6 <__b2d+0x92>
 800a0b6:	f1c0 0c20 	rsb	ip, r0, #32
 800a0ba:	fa04 f500 	lsl.w	r5, r4, r0
 800a0be:	42be      	cmp	r6, r7
 800a0c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0c4:	ea45 0504 	orr.w	r5, r5, r4
 800a0c8:	bf8c      	ite	hi
 800a0ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0ce:	2400      	movls	r4, #0
 800a0d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a0d4:	fa01 f000 	lsl.w	r0, r1, r0
 800a0d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a0dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0e0:	ea40 0204 	orr.w	r2, r0, r4
 800a0e4:	e7db      	b.n	800a09e <__b2d+0x4a>
 800a0e6:	ea44 030c 	orr.w	r3, r4, ip
 800a0ea:	460a      	mov	r2, r1
 800a0ec:	e7d7      	b.n	800a09e <__b2d+0x4a>
 800a0ee:	bf00      	nop
 800a0f0:	3ff00000 	.word	0x3ff00000

0800a0f4 <__d2b>:
 800a0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	ec57 6b10 	vmov	r6, r7, d0
 800a100:	4690      	mov	r8, r2
 800a102:	f7ff fc09 	bl	8009918 <_Balloc>
 800a106:	4604      	mov	r4, r0
 800a108:	b930      	cbnz	r0, 800a118 <__d2b+0x24>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <__d2b+0xb0>)
 800a10e:	4826      	ldr	r0, [pc, #152]	; (800a1a8 <__d2b+0xb4>)
 800a110:	f240 310a 	movw	r1, #778	; 0x30a
 800a114:	f000 fb4e 	bl	800a7b4 <__assert_func>
 800a118:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a11c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a120:	bb35      	cbnz	r5, 800a170 <__d2b+0x7c>
 800a122:	2e00      	cmp	r6, #0
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	d028      	beq.n	800a17a <__d2b+0x86>
 800a128:	4668      	mov	r0, sp
 800a12a:	9600      	str	r6, [sp, #0]
 800a12c:	f7ff fd06 	bl	8009b3c <__lo0bits>
 800a130:	9900      	ldr	r1, [sp, #0]
 800a132:	b300      	cbz	r0, 800a176 <__d2b+0x82>
 800a134:	9a01      	ldr	r2, [sp, #4]
 800a136:	f1c0 0320 	rsb	r3, r0, #32
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	430b      	orrs	r3, r1
 800a140:	40c2      	lsrs	r2, r0
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	9201      	str	r2, [sp, #4]
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	61a3      	str	r3, [r4, #24]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bf14      	ite	ne
 800a14e:	2202      	movne	r2, #2
 800a150:	2201      	moveq	r2, #1
 800a152:	6122      	str	r2, [r4, #16]
 800a154:	b1d5      	cbz	r5, 800a18c <__d2b+0x98>
 800a156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a15a:	4405      	add	r5, r0
 800a15c:	f8c9 5000 	str.w	r5, [r9]
 800a160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a164:	f8c8 0000 	str.w	r0, [r8]
 800a168:	4620      	mov	r0, r4
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a174:	e7d5      	b.n	800a122 <__d2b+0x2e>
 800a176:	6161      	str	r1, [r4, #20]
 800a178:	e7e5      	b.n	800a146 <__d2b+0x52>
 800a17a:	a801      	add	r0, sp, #4
 800a17c:	f7ff fcde 	bl	8009b3c <__lo0bits>
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	6163      	str	r3, [r4, #20]
 800a184:	2201      	movs	r2, #1
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	3020      	adds	r0, #32
 800a18a:	e7e3      	b.n	800a154 <__d2b+0x60>
 800a18c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a194:	f8c9 0000 	str.w	r0, [r9]
 800a198:	6918      	ldr	r0, [r3, #16]
 800a19a:	f7ff fcaf 	bl	8009afc <__hi0bits>
 800a19e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1a2:	e7df      	b.n	800a164 <__d2b+0x70>
 800a1a4:	0800b5d8 	.word	0x0800b5d8
 800a1a8:	0800b664 	.word	0x0800b664

0800a1ac <__ratio>:
 800a1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	4688      	mov	r8, r1
 800a1b2:	4669      	mov	r1, sp
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	f7ff ff4d 	bl	800a054 <__b2d>
 800a1ba:	a901      	add	r1, sp, #4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	ec55 4b10 	vmov	r4, r5, d0
 800a1c2:	f7ff ff47 	bl	800a054 <__b2d>
 800a1c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1ce:	eba3 0c02 	sub.w	ip, r3, r2
 800a1d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1dc:	ec51 0b10 	vmov	r0, r1, d0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bfd6      	itet	le
 800a1e4:	460a      	movle	r2, r1
 800a1e6:	462a      	movgt	r2, r5
 800a1e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1ec:	468b      	mov	fp, r1
 800a1ee:	462f      	mov	r7, r5
 800a1f0:	bfd4      	ite	le
 800a1f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	ee10 2a10 	vmov	r2, s0
 800a200:	465b      	mov	r3, fp
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 fb2a 	bl	800085c <__aeabi_ddiv>
 800a208:	ec41 0b10 	vmov	d0, r0, r1
 800a20c:	b003      	add	sp, #12
 800a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a212 <__copybits>:
 800a212:	3901      	subs	r1, #1
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	1149      	asrs	r1, r1, #5
 800a218:	6914      	ldr	r4, [r2, #16]
 800a21a:	3101      	adds	r1, #1
 800a21c:	f102 0314 	add.w	r3, r2, #20
 800a220:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a224:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a228:	1f05      	subs	r5, r0, #4
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	d30c      	bcc.n	800a248 <__copybits+0x36>
 800a22e:	1aa3      	subs	r3, r4, r2
 800a230:	3b11      	subs	r3, #17
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	3211      	adds	r2, #17
 800a238:	42a2      	cmp	r2, r4
 800a23a:	bf88      	it	hi
 800a23c:	2300      	movhi	r3, #0
 800a23e:	4418      	add	r0, r3
 800a240:	2300      	movs	r3, #0
 800a242:	4288      	cmp	r0, r1
 800a244:	d305      	bcc.n	800a252 <__copybits+0x40>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f853 6b04 	ldr.w	r6, [r3], #4
 800a24c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a250:	e7eb      	b.n	800a22a <__copybits+0x18>
 800a252:	f840 3b04 	str.w	r3, [r0], #4
 800a256:	e7f4      	b.n	800a242 <__copybits+0x30>

0800a258 <__any_on>:
 800a258:	f100 0214 	add.w	r2, r0, #20
 800a25c:	6900      	ldr	r0, [r0, #16]
 800a25e:	114b      	asrs	r3, r1, #5
 800a260:	4298      	cmp	r0, r3
 800a262:	b510      	push	{r4, lr}
 800a264:	db11      	blt.n	800a28a <__any_on+0x32>
 800a266:	dd0a      	ble.n	800a27e <__any_on+0x26>
 800a268:	f011 011f 	ands.w	r1, r1, #31
 800a26c:	d007      	beq.n	800a27e <__any_on+0x26>
 800a26e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a272:	fa24 f001 	lsr.w	r0, r4, r1
 800a276:	fa00 f101 	lsl.w	r1, r0, r1
 800a27a:	428c      	cmp	r4, r1
 800a27c:	d10b      	bne.n	800a296 <__any_on+0x3e>
 800a27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a282:	4293      	cmp	r3, r2
 800a284:	d803      	bhi.n	800a28e <__any_on+0x36>
 800a286:	2000      	movs	r0, #0
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	4603      	mov	r3, r0
 800a28c:	e7f7      	b.n	800a27e <__any_on+0x26>
 800a28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a292:	2900      	cmp	r1, #0
 800a294:	d0f5      	beq.n	800a282 <__any_on+0x2a>
 800a296:	2001      	movs	r0, #1
 800a298:	e7f6      	b.n	800a288 <__any_on+0x30>

0800a29a <_calloc_r>:
 800a29a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a29c:	fba1 2402 	umull	r2, r4, r1, r2
 800a2a0:	b94c      	cbnz	r4, 800a2b6 <_calloc_r+0x1c>
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	9201      	str	r2, [sp, #4]
 800a2a6:	f000 f87b 	bl	800a3a0 <_malloc_r>
 800a2aa:	9a01      	ldr	r2, [sp, #4]
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	b930      	cbnz	r0, 800a2be <_calloc_r+0x24>
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	b003      	add	sp, #12
 800a2b4:	bd30      	pop	{r4, r5, pc}
 800a2b6:	220c      	movs	r2, #12
 800a2b8:	6002      	str	r2, [r0, #0]
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	e7f8      	b.n	800a2b0 <_calloc_r+0x16>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	f7fc fbce 	bl	8006a60 <memset>
 800a2c4:	e7f4      	b.n	800a2b0 <_calloc_r+0x16>
	...

0800a2c8 <_free_r>:
 800a2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d044      	beq.n	800a358 <_free_r+0x90>
 800a2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d2:	9001      	str	r0, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2da:	bfb8      	it	lt
 800a2dc:	18e4      	addlt	r4, r4, r3
 800a2de:	f000 fab3 	bl	800a848 <__malloc_lock>
 800a2e2:	4a1e      	ldr	r2, [pc, #120]	; (800a35c <_free_r+0x94>)
 800a2e4:	9801      	ldr	r0, [sp, #4]
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	b933      	cbnz	r3, 800a2f8 <_free_r+0x30>
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	6014      	str	r4, [r2, #0]
 800a2ee:	b003      	add	sp, #12
 800a2f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f4:	f000 baae 	b.w	800a854 <__malloc_unlock>
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	d908      	bls.n	800a30e <_free_r+0x46>
 800a2fc:	6825      	ldr	r5, [r4, #0]
 800a2fe:	1961      	adds	r1, r4, r5
 800a300:	428b      	cmp	r3, r1
 800a302:	bf01      	itttt	eq
 800a304:	6819      	ldreq	r1, [r3, #0]
 800a306:	685b      	ldreq	r3, [r3, #4]
 800a308:	1949      	addeq	r1, r1, r5
 800a30a:	6021      	streq	r1, [r4, #0]
 800a30c:	e7ed      	b.n	800a2ea <_free_r+0x22>
 800a30e:	461a      	mov	r2, r3
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	b10b      	cbz	r3, 800a318 <_free_r+0x50>
 800a314:	42a3      	cmp	r3, r4
 800a316:	d9fa      	bls.n	800a30e <_free_r+0x46>
 800a318:	6811      	ldr	r1, [r2, #0]
 800a31a:	1855      	adds	r5, r2, r1
 800a31c:	42a5      	cmp	r5, r4
 800a31e:	d10b      	bne.n	800a338 <_free_r+0x70>
 800a320:	6824      	ldr	r4, [r4, #0]
 800a322:	4421      	add	r1, r4
 800a324:	1854      	adds	r4, r2, r1
 800a326:	42a3      	cmp	r3, r4
 800a328:	6011      	str	r1, [r2, #0]
 800a32a:	d1e0      	bne.n	800a2ee <_free_r+0x26>
 800a32c:	681c      	ldr	r4, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	6053      	str	r3, [r2, #4]
 800a332:	4421      	add	r1, r4
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	e7da      	b.n	800a2ee <_free_r+0x26>
 800a338:	d902      	bls.n	800a340 <_free_r+0x78>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6003      	str	r3, [r0, #0]
 800a33e:	e7d6      	b.n	800a2ee <_free_r+0x26>
 800a340:	6825      	ldr	r5, [r4, #0]
 800a342:	1961      	adds	r1, r4, r5
 800a344:	428b      	cmp	r3, r1
 800a346:	bf04      	itt	eq
 800a348:	6819      	ldreq	r1, [r3, #0]
 800a34a:	685b      	ldreq	r3, [r3, #4]
 800a34c:	6063      	str	r3, [r4, #4]
 800a34e:	bf04      	itt	eq
 800a350:	1949      	addeq	r1, r1, r5
 800a352:	6021      	streq	r1, [r4, #0]
 800a354:	6054      	str	r4, [r2, #4]
 800a356:	e7ca      	b.n	800a2ee <_free_r+0x26>
 800a358:	b003      	add	sp, #12
 800a35a:	bd30      	pop	{r4, r5, pc}
 800a35c:	200045c8 	.word	0x200045c8

0800a360 <sbrk_aligned>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	4e0e      	ldr	r6, [pc, #56]	; (800a39c <sbrk_aligned+0x3c>)
 800a364:	460c      	mov	r4, r1
 800a366:	6831      	ldr	r1, [r6, #0]
 800a368:	4605      	mov	r5, r0
 800a36a:	b911      	cbnz	r1, 800a372 <sbrk_aligned+0x12>
 800a36c:	f000 f9f0 	bl	800a750 <_sbrk_r>
 800a370:	6030      	str	r0, [r6, #0]
 800a372:	4621      	mov	r1, r4
 800a374:	4628      	mov	r0, r5
 800a376:	f000 f9eb 	bl	800a750 <_sbrk_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d00a      	beq.n	800a394 <sbrk_aligned+0x34>
 800a37e:	1cc4      	adds	r4, r0, #3
 800a380:	f024 0403 	bic.w	r4, r4, #3
 800a384:	42a0      	cmp	r0, r4
 800a386:	d007      	beq.n	800a398 <sbrk_aligned+0x38>
 800a388:	1a21      	subs	r1, r4, r0
 800a38a:	4628      	mov	r0, r5
 800a38c:	f000 f9e0 	bl	800a750 <_sbrk_r>
 800a390:	3001      	adds	r0, #1
 800a392:	d101      	bne.n	800a398 <sbrk_aligned+0x38>
 800a394:	f04f 34ff 	mov.w	r4, #4294967295
 800a398:	4620      	mov	r0, r4
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	200045cc 	.word	0x200045cc

0800a3a0 <_malloc_r>:
 800a3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a4:	1ccd      	adds	r5, r1, #3
 800a3a6:	f025 0503 	bic.w	r5, r5, #3
 800a3aa:	3508      	adds	r5, #8
 800a3ac:	2d0c      	cmp	r5, #12
 800a3ae:	bf38      	it	cc
 800a3b0:	250c      	movcc	r5, #12
 800a3b2:	2d00      	cmp	r5, #0
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	db01      	blt.n	800a3bc <_malloc_r+0x1c>
 800a3b8:	42a9      	cmp	r1, r5
 800a3ba:	d905      	bls.n	800a3c8 <_malloc_r+0x28>
 800a3bc:	230c      	movs	r3, #12
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	2600      	movs	r6, #0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	4e2e      	ldr	r6, [pc, #184]	; (800a484 <_malloc_r+0xe4>)
 800a3ca:	f000 fa3d 	bl	800a848 <__malloc_lock>
 800a3ce:	6833      	ldr	r3, [r6, #0]
 800a3d0:	461c      	mov	r4, r3
 800a3d2:	bb34      	cbnz	r4, 800a422 <_malloc_r+0x82>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7ff ffc2 	bl	800a360 <sbrk_aligned>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	4604      	mov	r4, r0
 800a3e0:	d14d      	bne.n	800a47e <_malloc_r+0xde>
 800a3e2:	6834      	ldr	r4, [r6, #0]
 800a3e4:	4626      	mov	r6, r4
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	d140      	bne.n	800a46c <_malloc_r+0xcc>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	eb04 0803 	add.w	r8, r4, r3
 800a3f4:	f000 f9ac 	bl	800a750 <_sbrk_r>
 800a3f8:	4580      	cmp	r8, r0
 800a3fa:	d13a      	bne.n	800a472 <_malloc_r+0xd2>
 800a3fc:	6821      	ldr	r1, [r4, #0]
 800a3fe:	3503      	adds	r5, #3
 800a400:	1a6d      	subs	r5, r5, r1
 800a402:	f025 0503 	bic.w	r5, r5, #3
 800a406:	3508      	adds	r5, #8
 800a408:	2d0c      	cmp	r5, #12
 800a40a:	bf38      	it	cc
 800a40c:	250c      	movcc	r5, #12
 800a40e:	4629      	mov	r1, r5
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff ffa5 	bl	800a360 <sbrk_aligned>
 800a416:	3001      	adds	r0, #1
 800a418:	d02b      	beq.n	800a472 <_malloc_r+0xd2>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	442b      	add	r3, r5
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	e00e      	b.n	800a440 <_malloc_r+0xa0>
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	1b52      	subs	r2, r2, r5
 800a426:	d41e      	bmi.n	800a466 <_malloc_r+0xc6>
 800a428:	2a0b      	cmp	r2, #11
 800a42a:	d916      	bls.n	800a45a <_malloc_r+0xba>
 800a42c:	1961      	adds	r1, r4, r5
 800a42e:	42a3      	cmp	r3, r4
 800a430:	6025      	str	r5, [r4, #0]
 800a432:	bf18      	it	ne
 800a434:	6059      	strne	r1, [r3, #4]
 800a436:	6863      	ldr	r3, [r4, #4]
 800a438:	bf08      	it	eq
 800a43a:	6031      	streq	r1, [r6, #0]
 800a43c:	5162      	str	r2, [r4, r5]
 800a43e:	604b      	str	r3, [r1, #4]
 800a440:	4638      	mov	r0, r7
 800a442:	f104 060b 	add.w	r6, r4, #11
 800a446:	f000 fa05 	bl	800a854 <__malloc_unlock>
 800a44a:	f026 0607 	bic.w	r6, r6, #7
 800a44e:	1d23      	adds	r3, r4, #4
 800a450:	1af2      	subs	r2, r6, r3
 800a452:	d0b6      	beq.n	800a3c2 <_malloc_r+0x22>
 800a454:	1b9b      	subs	r3, r3, r6
 800a456:	50a3      	str	r3, [r4, r2]
 800a458:	e7b3      	b.n	800a3c2 <_malloc_r+0x22>
 800a45a:	6862      	ldr	r2, [r4, #4]
 800a45c:	42a3      	cmp	r3, r4
 800a45e:	bf0c      	ite	eq
 800a460:	6032      	streq	r2, [r6, #0]
 800a462:	605a      	strne	r2, [r3, #4]
 800a464:	e7ec      	b.n	800a440 <_malloc_r+0xa0>
 800a466:	4623      	mov	r3, r4
 800a468:	6864      	ldr	r4, [r4, #4]
 800a46a:	e7b2      	b.n	800a3d2 <_malloc_r+0x32>
 800a46c:	4634      	mov	r4, r6
 800a46e:	6876      	ldr	r6, [r6, #4]
 800a470:	e7b9      	b.n	800a3e6 <_malloc_r+0x46>
 800a472:	230c      	movs	r3, #12
 800a474:	603b      	str	r3, [r7, #0]
 800a476:	4638      	mov	r0, r7
 800a478:	f000 f9ec 	bl	800a854 <__malloc_unlock>
 800a47c:	e7a1      	b.n	800a3c2 <_malloc_r+0x22>
 800a47e:	6025      	str	r5, [r4, #0]
 800a480:	e7de      	b.n	800a440 <_malloc_r+0xa0>
 800a482:	bf00      	nop
 800a484:	200045c8 	.word	0x200045c8

0800a488 <__ssputs_r>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	688e      	ldr	r6, [r1, #8]
 800a48e:	429e      	cmp	r6, r3
 800a490:	4682      	mov	sl, r0
 800a492:	460c      	mov	r4, r1
 800a494:	4690      	mov	r8, r2
 800a496:	461f      	mov	r7, r3
 800a498:	d838      	bhi.n	800a50c <__ssputs_r+0x84>
 800a49a:	898a      	ldrh	r2, [r1, #12]
 800a49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4a0:	d032      	beq.n	800a508 <__ssputs_r+0x80>
 800a4a2:	6825      	ldr	r5, [r4, #0]
 800a4a4:	6909      	ldr	r1, [r1, #16]
 800a4a6:	eba5 0901 	sub.w	r9, r5, r1
 800a4aa:	6965      	ldr	r5, [r4, #20]
 800a4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	444b      	add	r3, r9
 800a4b8:	106d      	asrs	r5, r5, #1
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	bf38      	it	cc
 800a4be:	461d      	movcc	r5, r3
 800a4c0:	0553      	lsls	r3, r2, #21
 800a4c2:	d531      	bpl.n	800a528 <__ssputs_r+0xa0>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	f7ff ff6b 	bl	800a3a0 <_malloc_r>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	b950      	cbnz	r0, 800a4e4 <__ssputs_r+0x5c>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	f8ca 3000 	str.w	r3, [sl]
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e4:	6921      	ldr	r1, [r4, #16]
 800a4e6:	464a      	mov	r2, r9
 800a4e8:	f7fc faac 	bl	8006a44 <memcpy>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	6126      	str	r6, [r4, #16]
 800a4fa:	6165      	str	r5, [r4, #20]
 800a4fc:	444e      	add	r6, r9
 800a4fe:	eba5 0509 	sub.w	r5, r5, r9
 800a502:	6026      	str	r6, [r4, #0]
 800a504:	60a5      	str	r5, [r4, #8]
 800a506:	463e      	mov	r6, r7
 800a508:	42be      	cmp	r6, r7
 800a50a:	d900      	bls.n	800a50e <__ssputs_r+0x86>
 800a50c:	463e      	mov	r6, r7
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	4632      	mov	r2, r6
 800a512:	4641      	mov	r1, r8
 800a514:	f000 f97e 	bl	800a814 <memmove>
 800a518:	68a3      	ldr	r3, [r4, #8]
 800a51a:	1b9b      	subs	r3, r3, r6
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	4433      	add	r3, r6
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	2000      	movs	r0, #0
 800a526:	e7db      	b.n	800a4e0 <__ssputs_r+0x58>
 800a528:	462a      	mov	r2, r5
 800a52a:	f000 f999 	bl	800a860 <_realloc_r>
 800a52e:	4606      	mov	r6, r0
 800a530:	2800      	cmp	r0, #0
 800a532:	d1e1      	bne.n	800a4f8 <__ssputs_r+0x70>
 800a534:	6921      	ldr	r1, [r4, #16]
 800a536:	4650      	mov	r0, sl
 800a538:	f7ff fec6 	bl	800a2c8 <_free_r>
 800a53c:	e7c7      	b.n	800a4ce <__ssputs_r+0x46>
	...

0800a540 <_svfiprintf_r>:
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	4698      	mov	r8, r3
 800a546:	898b      	ldrh	r3, [r1, #12]
 800a548:	061b      	lsls	r3, r3, #24
 800a54a:	b09d      	sub	sp, #116	; 0x74
 800a54c:	4607      	mov	r7, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	4614      	mov	r4, r2
 800a552:	d50e      	bpl.n	800a572 <_svfiprintf_r+0x32>
 800a554:	690b      	ldr	r3, [r1, #16]
 800a556:	b963      	cbnz	r3, 800a572 <_svfiprintf_r+0x32>
 800a558:	2140      	movs	r1, #64	; 0x40
 800a55a:	f7ff ff21 	bl	800a3a0 <_malloc_r>
 800a55e:	6028      	str	r0, [r5, #0]
 800a560:	6128      	str	r0, [r5, #16]
 800a562:	b920      	cbnz	r0, 800a56e <_svfiprintf_r+0x2e>
 800a564:	230c      	movs	r3, #12
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e0d1      	b.n	800a712 <_svfiprintf_r+0x1d2>
 800a56e:	2340      	movs	r3, #64	; 0x40
 800a570:	616b      	str	r3, [r5, #20]
 800a572:	2300      	movs	r3, #0
 800a574:	9309      	str	r3, [sp, #36]	; 0x24
 800a576:	2320      	movs	r3, #32
 800a578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a580:	2330      	movs	r3, #48	; 0x30
 800a582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a72c <_svfiprintf_r+0x1ec>
 800a586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a58a:	f04f 0901 	mov.w	r9, #1
 800a58e:	4623      	mov	r3, r4
 800a590:	469a      	mov	sl, r3
 800a592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a596:	b10a      	cbz	r2, 800a59c <_svfiprintf_r+0x5c>
 800a598:	2a25      	cmp	r2, #37	; 0x25
 800a59a:	d1f9      	bne.n	800a590 <_svfiprintf_r+0x50>
 800a59c:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a0:	d00b      	beq.n	800a5ba <_svfiprintf_r+0x7a>
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff ff6d 	bl	800a488 <__ssputs_r>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	f000 80aa 	beq.w	800a708 <_svfiprintf_r+0x1c8>
 800a5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5b6:	445a      	add	r2, fp
 800a5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 80a2 	beq.w	800a708 <_svfiprintf_r+0x1c8>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ce:	f10a 0a01 	add.w	sl, sl, #1
 800a5d2:	9304      	str	r3, [sp, #16]
 800a5d4:	9307      	str	r3, [sp, #28]
 800a5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5da:	931a      	str	r3, [sp, #104]	; 0x68
 800a5dc:	4654      	mov	r4, sl
 800a5de:	2205      	movs	r2, #5
 800a5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e4:	4851      	ldr	r0, [pc, #324]	; (800a72c <_svfiprintf_r+0x1ec>)
 800a5e6:	f7f5 fe03 	bl	80001f0 <memchr>
 800a5ea:	9a04      	ldr	r2, [sp, #16]
 800a5ec:	b9d8      	cbnz	r0, 800a626 <_svfiprintf_r+0xe6>
 800a5ee:	06d0      	lsls	r0, r2, #27
 800a5f0:	bf44      	itt	mi
 800a5f2:	2320      	movmi	r3, #32
 800a5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5f8:	0711      	lsls	r1, r2, #28
 800a5fa:	bf44      	itt	mi
 800a5fc:	232b      	movmi	r3, #43	; 0x2b
 800a5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a602:	f89a 3000 	ldrb.w	r3, [sl]
 800a606:	2b2a      	cmp	r3, #42	; 0x2a
 800a608:	d015      	beq.n	800a636 <_svfiprintf_r+0xf6>
 800a60a:	9a07      	ldr	r2, [sp, #28]
 800a60c:	4654      	mov	r4, sl
 800a60e:	2000      	movs	r0, #0
 800a610:	f04f 0c0a 	mov.w	ip, #10
 800a614:	4621      	mov	r1, r4
 800a616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61a:	3b30      	subs	r3, #48	; 0x30
 800a61c:	2b09      	cmp	r3, #9
 800a61e:	d94e      	bls.n	800a6be <_svfiprintf_r+0x17e>
 800a620:	b1b0      	cbz	r0, 800a650 <_svfiprintf_r+0x110>
 800a622:	9207      	str	r2, [sp, #28]
 800a624:	e014      	b.n	800a650 <_svfiprintf_r+0x110>
 800a626:	eba0 0308 	sub.w	r3, r0, r8
 800a62a:	fa09 f303 	lsl.w	r3, r9, r3
 800a62e:	4313      	orrs	r3, r2
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	46a2      	mov	sl, r4
 800a634:	e7d2      	b.n	800a5dc <_svfiprintf_r+0x9c>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	1d19      	adds	r1, r3, #4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	9103      	str	r1, [sp, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfbb      	ittet	lt
 800a642:	425b      	neglt	r3, r3
 800a644:	f042 0202 	orrlt.w	r2, r2, #2
 800a648:	9307      	strge	r3, [sp, #28]
 800a64a:	9307      	strlt	r3, [sp, #28]
 800a64c:	bfb8      	it	lt
 800a64e:	9204      	strlt	r2, [sp, #16]
 800a650:	7823      	ldrb	r3, [r4, #0]
 800a652:	2b2e      	cmp	r3, #46	; 0x2e
 800a654:	d10c      	bne.n	800a670 <_svfiprintf_r+0x130>
 800a656:	7863      	ldrb	r3, [r4, #1]
 800a658:	2b2a      	cmp	r3, #42	; 0x2a
 800a65a:	d135      	bne.n	800a6c8 <_svfiprintf_r+0x188>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	1d1a      	adds	r2, r3, #4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	9203      	str	r2, [sp, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	bfb8      	it	lt
 800a668:	f04f 33ff 	movlt.w	r3, #4294967295
 800a66c:	3402      	adds	r4, #2
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a73c <_svfiprintf_r+0x1fc>
 800a674:	7821      	ldrb	r1, [r4, #0]
 800a676:	2203      	movs	r2, #3
 800a678:	4650      	mov	r0, sl
 800a67a:	f7f5 fdb9 	bl	80001f0 <memchr>
 800a67e:	b140      	cbz	r0, 800a692 <_svfiprintf_r+0x152>
 800a680:	2340      	movs	r3, #64	; 0x40
 800a682:	eba0 000a 	sub.w	r0, r0, sl
 800a686:	fa03 f000 	lsl.w	r0, r3, r0
 800a68a:	9b04      	ldr	r3, [sp, #16]
 800a68c:	4303      	orrs	r3, r0
 800a68e:	3401      	adds	r4, #1
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a696:	4826      	ldr	r0, [pc, #152]	; (800a730 <_svfiprintf_r+0x1f0>)
 800a698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a69c:	2206      	movs	r2, #6
 800a69e:	f7f5 fda7 	bl	80001f0 <memchr>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d038      	beq.n	800a718 <_svfiprintf_r+0x1d8>
 800a6a6:	4b23      	ldr	r3, [pc, #140]	; (800a734 <_svfiprintf_r+0x1f4>)
 800a6a8:	bb1b      	cbnz	r3, 800a6f2 <_svfiprintf_r+0x1b2>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	3307      	adds	r3, #7
 800a6ae:	f023 0307 	bic.w	r3, r3, #7
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b8:	4433      	add	r3, r6
 800a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a6bc:	e767      	b.n	800a58e <_svfiprintf_r+0x4e>
 800a6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	e7a5      	b.n	800a614 <_svfiprintf_r+0xd4>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	3401      	adds	r4, #1
 800a6cc:	9305      	str	r3, [sp, #20]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	f04f 0c0a 	mov.w	ip, #10
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6da:	3a30      	subs	r2, #48	; 0x30
 800a6dc:	2a09      	cmp	r2, #9
 800a6de:	d903      	bls.n	800a6e8 <_svfiprintf_r+0x1a8>
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0c5      	beq.n	800a670 <_svfiprintf_r+0x130>
 800a6e4:	9105      	str	r1, [sp, #20]
 800a6e6:	e7c3      	b.n	800a670 <_svfiprintf_r+0x130>
 800a6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e7f0      	b.n	800a6d4 <_svfiprintf_r+0x194>
 800a6f2:	ab03      	add	r3, sp, #12
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4b0f      	ldr	r3, [pc, #60]	; (800a738 <_svfiprintf_r+0x1f8>)
 800a6fa:	a904      	add	r1, sp, #16
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f7fc fa57 	bl	8006bb0 <_printf_float>
 800a702:	1c42      	adds	r2, r0, #1
 800a704:	4606      	mov	r6, r0
 800a706:	d1d6      	bne.n	800a6b6 <_svfiprintf_r+0x176>
 800a708:	89ab      	ldrh	r3, [r5, #12]
 800a70a:	065b      	lsls	r3, r3, #25
 800a70c:	f53f af2c 	bmi.w	800a568 <_svfiprintf_r+0x28>
 800a710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a712:	b01d      	add	sp, #116	; 0x74
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	ab03      	add	r3, sp, #12
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	462a      	mov	r2, r5
 800a71e:	4b06      	ldr	r3, [pc, #24]	; (800a738 <_svfiprintf_r+0x1f8>)
 800a720:	a904      	add	r1, sp, #16
 800a722:	4638      	mov	r0, r7
 800a724:	f7fc fce8 	bl	80070f8 <_printf_i>
 800a728:	e7eb      	b.n	800a702 <_svfiprintf_r+0x1c2>
 800a72a:	bf00      	nop
 800a72c:	0800b7bc 	.word	0x0800b7bc
 800a730:	0800b7c6 	.word	0x0800b7c6
 800a734:	08006bb1 	.word	0x08006bb1
 800a738:	0800a489 	.word	0x0800a489
 800a73c:	0800b7c2 	.word	0x0800b7c2

0800a740 <nan>:
 800a740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a748 <nan+0x8>
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	00000000 	.word	0x00000000
 800a74c:	7ff80000 	.word	0x7ff80000

0800a750 <_sbrk_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d06      	ldr	r5, [pc, #24]	; (800a76c <_sbrk_r+0x1c>)
 800a754:	2300      	movs	r3, #0
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	f7f7 fa56 	bl	8001c0c <_sbrk>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_sbrk_r+0x1a>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_sbrk_r+0x1a>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	200045d0 	.word	0x200045d0

0800a770 <strncmp>:
 800a770:	b510      	push	{r4, lr}
 800a772:	b17a      	cbz	r2, 800a794 <strncmp+0x24>
 800a774:	4603      	mov	r3, r0
 800a776:	3901      	subs	r1, #1
 800a778:	1884      	adds	r4, r0, r2
 800a77a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a77e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a782:	4290      	cmp	r0, r2
 800a784:	d101      	bne.n	800a78a <strncmp+0x1a>
 800a786:	42a3      	cmp	r3, r4
 800a788:	d101      	bne.n	800a78e <strncmp+0x1e>
 800a78a:	1a80      	subs	r0, r0, r2
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1f3      	bne.n	800a77a <strncmp+0xa>
 800a792:	e7fa      	b.n	800a78a <strncmp+0x1a>
 800a794:	4610      	mov	r0, r2
 800a796:	e7f9      	b.n	800a78c <strncmp+0x1c>

0800a798 <__ascii_wctomb>:
 800a798:	b149      	cbz	r1, 800a7ae <__ascii_wctomb+0x16>
 800a79a:	2aff      	cmp	r2, #255	; 0xff
 800a79c:	bf85      	ittet	hi
 800a79e:	238a      	movhi	r3, #138	; 0x8a
 800a7a0:	6003      	strhi	r3, [r0, #0]
 800a7a2:	700a      	strbls	r2, [r1, #0]
 800a7a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7a8:	bf98      	it	ls
 800a7aa:	2001      	movls	r0, #1
 800a7ac:	4770      	bx	lr
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <__assert_func>:
 800a7b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7b6:	4614      	mov	r4, r2
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <__assert_func+0x2c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4605      	mov	r5, r0
 800a7c0:	68d8      	ldr	r0, [r3, #12]
 800a7c2:	b14c      	cbz	r4, 800a7d8 <__assert_func+0x24>
 800a7c4:	4b07      	ldr	r3, [pc, #28]	; (800a7e4 <__assert_func+0x30>)
 800a7c6:	9100      	str	r1, [sp, #0]
 800a7c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7cc:	4906      	ldr	r1, [pc, #24]	; (800a7e8 <__assert_func+0x34>)
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f000 f80e 	bl	800a7f0 <fiprintf>
 800a7d4:	f000 fa8c 	bl	800acf0 <abort>
 800a7d8:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <__assert_func+0x38>)
 800a7da:	461c      	mov	r4, r3
 800a7dc:	e7f3      	b.n	800a7c6 <__assert_func+0x12>
 800a7de:	bf00      	nop
 800a7e0:	200000fc 	.word	0x200000fc
 800a7e4:	0800b7cd 	.word	0x0800b7cd
 800a7e8:	0800b7da 	.word	0x0800b7da
 800a7ec:	0800b808 	.word	0x0800b808

0800a7f0 <fiprintf>:
 800a7f0:	b40e      	push	{r1, r2, r3}
 800a7f2:	b503      	push	{r0, r1, lr}
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	ab03      	add	r3, sp, #12
 800a7f8:	4805      	ldr	r0, [pc, #20]	; (800a810 <fiprintf+0x20>)
 800a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f000 f885 	bl	800a910 <_vfiprintf_r>
 800a806:	b002      	add	sp, #8
 800a808:	f85d eb04 	ldr.w	lr, [sp], #4
 800a80c:	b003      	add	sp, #12
 800a80e:	4770      	bx	lr
 800a810:	200000fc 	.word	0x200000fc

0800a814 <memmove>:
 800a814:	4288      	cmp	r0, r1
 800a816:	b510      	push	{r4, lr}
 800a818:	eb01 0402 	add.w	r4, r1, r2
 800a81c:	d902      	bls.n	800a824 <memmove+0x10>
 800a81e:	4284      	cmp	r4, r0
 800a820:	4623      	mov	r3, r4
 800a822:	d807      	bhi.n	800a834 <memmove+0x20>
 800a824:	1e43      	subs	r3, r0, #1
 800a826:	42a1      	cmp	r1, r4
 800a828:	d008      	beq.n	800a83c <memmove+0x28>
 800a82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a832:	e7f8      	b.n	800a826 <memmove+0x12>
 800a834:	4402      	add	r2, r0
 800a836:	4601      	mov	r1, r0
 800a838:	428a      	cmp	r2, r1
 800a83a:	d100      	bne.n	800a83e <memmove+0x2a>
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a846:	e7f7      	b.n	800a838 <memmove+0x24>

0800a848 <__malloc_lock>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__malloc_lock+0x8>)
 800a84a:	f000 bc11 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800a84e:	bf00      	nop
 800a850:	200045d4 	.word	0x200045d4

0800a854 <__malloc_unlock>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__malloc_unlock+0x8>)
 800a856:	f000 bc0c 	b.w	800b072 <__retarget_lock_release_recursive>
 800a85a:	bf00      	nop
 800a85c:	200045d4 	.word	0x200045d4

0800a860 <_realloc_r>:
 800a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a864:	4680      	mov	r8, r0
 800a866:	4614      	mov	r4, r2
 800a868:	460e      	mov	r6, r1
 800a86a:	b921      	cbnz	r1, 800a876 <_realloc_r+0x16>
 800a86c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	4611      	mov	r1, r2
 800a872:	f7ff bd95 	b.w	800a3a0 <_malloc_r>
 800a876:	b92a      	cbnz	r2, 800a884 <_realloc_r+0x24>
 800a878:	f7ff fd26 	bl	800a2c8 <_free_r>
 800a87c:	4625      	mov	r5, r4
 800a87e:	4628      	mov	r0, r5
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	f000 fc5c 	bl	800b140 <_malloc_usable_size_r>
 800a888:	4284      	cmp	r4, r0
 800a88a:	4607      	mov	r7, r0
 800a88c:	d802      	bhi.n	800a894 <_realloc_r+0x34>
 800a88e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a892:	d812      	bhi.n	800a8ba <_realloc_r+0x5a>
 800a894:	4621      	mov	r1, r4
 800a896:	4640      	mov	r0, r8
 800a898:	f7ff fd82 	bl	800a3a0 <_malloc_r>
 800a89c:	4605      	mov	r5, r0
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d0ed      	beq.n	800a87e <_realloc_r+0x1e>
 800a8a2:	42bc      	cmp	r4, r7
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	bf28      	it	cs
 800a8aa:	463a      	movcs	r2, r7
 800a8ac:	f7fc f8ca 	bl	8006a44 <memcpy>
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	f7ff fd08 	bl	800a2c8 <_free_r>
 800a8b8:	e7e1      	b.n	800a87e <_realloc_r+0x1e>
 800a8ba:	4635      	mov	r5, r6
 800a8bc:	e7df      	b.n	800a87e <_realloc_r+0x1e>

0800a8be <__sfputc_r>:
 800a8be:	6893      	ldr	r3, [r2, #8]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	b410      	push	{r4}
 800a8c6:	6093      	str	r3, [r2, #8]
 800a8c8:	da08      	bge.n	800a8dc <__sfputc_r+0x1e>
 800a8ca:	6994      	ldr	r4, [r2, #24]
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	db01      	blt.n	800a8d4 <__sfputc_r+0x16>
 800a8d0:	290a      	cmp	r1, #10
 800a8d2:	d103      	bne.n	800a8dc <__sfputc_r+0x1e>
 800a8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d8:	f000 b94a 	b.w	800ab70 <__swbuf_r>
 800a8dc:	6813      	ldr	r3, [r2, #0]
 800a8de:	1c58      	adds	r0, r3, #1
 800a8e0:	6010      	str	r0, [r2, #0]
 800a8e2:	7019      	strb	r1, [r3, #0]
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <__sfputs_r>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	18d5      	adds	r5, r2, r3
 800a8f6:	42ac      	cmp	r4, r5
 800a8f8:	d101      	bne.n	800a8fe <__sfputs_r+0x12>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e007      	b.n	800a90e <__sfputs_r+0x22>
 800a8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a902:	463a      	mov	r2, r7
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff ffda 	bl	800a8be <__sfputc_r>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d1f3      	bne.n	800a8f6 <__sfputs_r+0xa>
 800a90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a910 <_vfiprintf_r>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	460d      	mov	r5, r1
 800a916:	b09d      	sub	sp, #116	; 0x74
 800a918:	4614      	mov	r4, r2
 800a91a:	4698      	mov	r8, r3
 800a91c:	4606      	mov	r6, r0
 800a91e:	b118      	cbz	r0, 800a928 <_vfiprintf_r+0x18>
 800a920:	6983      	ldr	r3, [r0, #24]
 800a922:	b90b      	cbnz	r3, 800a928 <_vfiprintf_r+0x18>
 800a924:	f000 fb06 	bl	800af34 <__sinit>
 800a928:	4b89      	ldr	r3, [pc, #548]	; (800ab50 <_vfiprintf_r+0x240>)
 800a92a:	429d      	cmp	r5, r3
 800a92c:	d11b      	bne.n	800a966 <_vfiprintf_r+0x56>
 800a92e:	6875      	ldr	r5, [r6, #4]
 800a930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a932:	07d9      	lsls	r1, r3, #31
 800a934:	d405      	bmi.n	800a942 <_vfiprintf_r+0x32>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	059a      	lsls	r2, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_vfiprintf_r+0x32>
 800a93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a93e:	f000 fb97 	bl	800b070 <__retarget_lock_acquire_recursive>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	071b      	lsls	r3, r3, #28
 800a946:	d501      	bpl.n	800a94c <_vfiprintf_r+0x3c>
 800a948:	692b      	ldr	r3, [r5, #16]
 800a94a:	b9eb      	cbnz	r3, 800a988 <_vfiprintf_r+0x78>
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 f960 	bl	800ac14 <__swsetup_r>
 800a954:	b1c0      	cbz	r0, 800a988 <_vfiprintf_r+0x78>
 800a956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a958:	07dc      	lsls	r4, r3, #31
 800a95a:	d50e      	bpl.n	800a97a <_vfiprintf_r+0x6a>
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	b01d      	add	sp, #116	; 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	4b7b      	ldr	r3, [pc, #492]	; (800ab54 <_vfiprintf_r+0x244>)
 800a968:	429d      	cmp	r5, r3
 800a96a:	d101      	bne.n	800a970 <_vfiprintf_r+0x60>
 800a96c:	68b5      	ldr	r5, [r6, #8]
 800a96e:	e7df      	b.n	800a930 <_vfiprintf_r+0x20>
 800a970:	4b79      	ldr	r3, [pc, #484]	; (800ab58 <_vfiprintf_r+0x248>)
 800a972:	429d      	cmp	r5, r3
 800a974:	bf08      	it	eq
 800a976:	68f5      	ldreq	r5, [r6, #12]
 800a978:	e7da      	b.n	800a930 <_vfiprintf_r+0x20>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	0598      	lsls	r0, r3, #22
 800a97e:	d4ed      	bmi.n	800a95c <_vfiprintf_r+0x4c>
 800a980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a982:	f000 fb76 	bl	800b072 <__retarget_lock_release_recursive>
 800a986:	e7e9      	b.n	800a95c <_vfiprintf_r+0x4c>
 800a988:	2300      	movs	r3, #0
 800a98a:	9309      	str	r3, [sp, #36]	; 0x24
 800a98c:	2320      	movs	r3, #32
 800a98e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a992:	f8cd 800c 	str.w	r8, [sp, #12]
 800a996:	2330      	movs	r3, #48	; 0x30
 800a998:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab5c <_vfiprintf_r+0x24c>
 800a99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a0:	f04f 0901 	mov.w	r9, #1
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	469a      	mov	sl, r3
 800a9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ac:	b10a      	cbz	r2, 800a9b2 <_vfiprintf_r+0xa2>
 800a9ae:	2a25      	cmp	r2, #37	; 0x25
 800a9b0:	d1f9      	bne.n	800a9a6 <_vfiprintf_r+0x96>
 800a9b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9b6:	d00b      	beq.n	800a9d0 <_vfiprintf_r+0xc0>
 800a9b8:	465b      	mov	r3, fp
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7ff ff94 	bl	800a8ec <__sfputs_r>
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f000 80aa 	beq.w	800ab1e <_vfiprintf_r+0x20e>
 800a9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9cc:	445a      	add	r2, fp
 800a9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80a2 	beq.w	800ab1e <_vfiprintf_r+0x20e>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e4:	f10a 0a01 	add.w	sl, sl, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	9307      	str	r3, [sp, #28]
 800a9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f2:	4654      	mov	r4, sl
 800a9f4:	2205      	movs	r2, #5
 800a9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fa:	4858      	ldr	r0, [pc, #352]	; (800ab5c <_vfiprintf_r+0x24c>)
 800a9fc:	f7f5 fbf8 	bl	80001f0 <memchr>
 800aa00:	9a04      	ldr	r2, [sp, #16]
 800aa02:	b9d8      	cbnz	r0, 800aa3c <_vfiprintf_r+0x12c>
 800aa04:	06d1      	lsls	r1, r2, #27
 800aa06:	bf44      	itt	mi
 800aa08:	2320      	movmi	r3, #32
 800aa0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa0e:	0713      	lsls	r3, r2, #28
 800aa10:	bf44      	itt	mi
 800aa12:	232b      	movmi	r3, #43	; 0x2b
 800aa14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa18:	f89a 3000 	ldrb.w	r3, [sl]
 800aa1c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa1e:	d015      	beq.n	800aa4c <_vfiprintf_r+0x13c>
 800aa20:	9a07      	ldr	r2, [sp, #28]
 800aa22:	4654      	mov	r4, sl
 800aa24:	2000      	movs	r0, #0
 800aa26:	f04f 0c0a 	mov.w	ip, #10
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa30:	3b30      	subs	r3, #48	; 0x30
 800aa32:	2b09      	cmp	r3, #9
 800aa34:	d94e      	bls.n	800aad4 <_vfiprintf_r+0x1c4>
 800aa36:	b1b0      	cbz	r0, 800aa66 <_vfiprintf_r+0x156>
 800aa38:	9207      	str	r2, [sp, #28]
 800aa3a:	e014      	b.n	800aa66 <_vfiprintf_r+0x156>
 800aa3c:	eba0 0308 	sub.w	r3, r0, r8
 800aa40:	fa09 f303 	lsl.w	r3, r9, r3
 800aa44:	4313      	orrs	r3, r2
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	46a2      	mov	sl, r4
 800aa4a:	e7d2      	b.n	800a9f2 <_vfiprintf_r+0xe2>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	1d19      	adds	r1, r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	9103      	str	r1, [sp, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	bfbb      	ittet	lt
 800aa58:	425b      	neglt	r3, r3
 800aa5a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa5e:	9307      	strge	r3, [sp, #28]
 800aa60:	9307      	strlt	r3, [sp, #28]
 800aa62:	bfb8      	it	lt
 800aa64:	9204      	strlt	r2, [sp, #16]
 800aa66:	7823      	ldrb	r3, [r4, #0]
 800aa68:	2b2e      	cmp	r3, #46	; 0x2e
 800aa6a:	d10c      	bne.n	800aa86 <_vfiprintf_r+0x176>
 800aa6c:	7863      	ldrb	r3, [r4, #1]
 800aa6e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa70:	d135      	bne.n	800aade <_vfiprintf_r+0x1ce>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	1d1a      	adds	r2, r3, #4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	9203      	str	r2, [sp, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bfb8      	it	lt
 800aa7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa82:	3402      	adds	r4, #2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab6c <_vfiprintf_r+0x25c>
 800aa8a:	7821      	ldrb	r1, [r4, #0]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7f5 fbae 	bl	80001f0 <memchr>
 800aa94:	b140      	cbz	r0, 800aaa8 <_vfiprintf_r+0x198>
 800aa96:	2340      	movs	r3, #64	; 0x40
 800aa98:	eba0 000a 	sub.w	r0, r0, sl
 800aa9c:	fa03 f000 	lsl.w	r0, r3, r0
 800aaa0:	9b04      	ldr	r3, [sp, #16]
 800aaa2:	4303      	orrs	r3, r0
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	482c      	ldr	r0, [pc, #176]	; (800ab60 <_vfiprintf_r+0x250>)
 800aaae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab2:	2206      	movs	r2, #6
 800aab4:	f7f5 fb9c 	bl	80001f0 <memchr>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d03f      	beq.n	800ab3c <_vfiprintf_r+0x22c>
 800aabc:	4b29      	ldr	r3, [pc, #164]	; (800ab64 <_vfiprintf_r+0x254>)
 800aabe:	bb1b      	cbnz	r3, 800ab08 <_vfiprintf_r+0x1f8>
 800aac0:	9b03      	ldr	r3, [sp, #12]
 800aac2:	3307      	adds	r3, #7
 800aac4:	f023 0307 	bic.w	r3, r3, #7
 800aac8:	3308      	adds	r3, #8
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aace:	443b      	add	r3, r7
 800aad0:	9309      	str	r3, [sp, #36]	; 0x24
 800aad2:	e767      	b.n	800a9a4 <_vfiprintf_r+0x94>
 800aad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad8:	460c      	mov	r4, r1
 800aada:	2001      	movs	r0, #1
 800aadc:	e7a5      	b.n	800aa2a <_vfiprintf_r+0x11a>
 800aade:	2300      	movs	r3, #0
 800aae0:	3401      	adds	r4, #1
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f04f 0c0a 	mov.w	ip, #10
 800aaea:	4620      	mov	r0, r4
 800aaec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf0:	3a30      	subs	r2, #48	; 0x30
 800aaf2:	2a09      	cmp	r2, #9
 800aaf4:	d903      	bls.n	800aafe <_vfiprintf_r+0x1ee>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0c5      	beq.n	800aa86 <_vfiprintf_r+0x176>
 800aafa:	9105      	str	r1, [sp, #20]
 800aafc:	e7c3      	b.n	800aa86 <_vfiprintf_r+0x176>
 800aafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab02:	4604      	mov	r4, r0
 800ab04:	2301      	movs	r3, #1
 800ab06:	e7f0      	b.n	800aaea <_vfiprintf_r+0x1da>
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	4b16      	ldr	r3, [pc, #88]	; (800ab68 <_vfiprintf_r+0x258>)
 800ab10:	a904      	add	r1, sp, #16
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7fc f84c 	bl	8006bb0 <_printf_float>
 800ab18:	4607      	mov	r7, r0
 800ab1a:	1c78      	adds	r0, r7, #1
 800ab1c:	d1d6      	bne.n	800aacc <_vfiprintf_r+0x1bc>
 800ab1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab20:	07d9      	lsls	r1, r3, #31
 800ab22:	d405      	bmi.n	800ab30 <_vfiprintf_r+0x220>
 800ab24:	89ab      	ldrh	r3, [r5, #12]
 800ab26:	059a      	lsls	r2, r3, #22
 800ab28:	d402      	bmi.n	800ab30 <_vfiprintf_r+0x220>
 800ab2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab2c:	f000 faa1 	bl	800b072 <__retarget_lock_release_recursive>
 800ab30:	89ab      	ldrh	r3, [r5, #12]
 800ab32:	065b      	lsls	r3, r3, #25
 800ab34:	f53f af12 	bmi.w	800a95c <_vfiprintf_r+0x4c>
 800ab38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3a:	e711      	b.n	800a960 <_vfiprintf_r+0x50>
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	462a      	mov	r2, r5
 800ab42:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <_vfiprintf_r+0x258>)
 800ab44:	a904      	add	r1, sp, #16
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7fc fad6 	bl	80070f8 <_printf_i>
 800ab4c:	e7e4      	b.n	800ab18 <_vfiprintf_r+0x208>
 800ab4e:	bf00      	nop
 800ab50:	0800b82c 	.word	0x0800b82c
 800ab54:	0800b84c 	.word	0x0800b84c
 800ab58:	0800b80c 	.word	0x0800b80c
 800ab5c:	0800b7bc 	.word	0x0800b7bc
 800ab60:	0800b7c6 	.word	0x0800b7c6
 800ab64:	08006bb1 	.word	0x08006bb1
 800ab68:	0800a8ed 	.word	0x0800a8ed
 800ab6c:	0800b7c2 	.word	0x0800b7c2

0800ab70 <__swbuf_r>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	460e      	mov	r6, r1
 800ab74:	4614      	mov	r4, r2
 800ab76:	4605      	mov	r5, r0
 800ab78:	b118      	cbz	r0, 800ab82 <__swbuf_r+0x12>
 800ab7a:	6983      	ldr	r3, [r0, #24]
 800ab7c:	b90b      	cbnz	r3, 800ab82 <__swbuf_r+0x12>
 800ab7e:	f000 f9d9 	bl	800af34 <__sinit>
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <__swbuf_r+0x98>)
 800ab84:	429c      	cmp	r4, r3
 800ab86:	d12b      	bne.n	800abe0 <__swbuf_r+0x70>
 800ab88:	686c      	ldr	r4, [r5, #4]
 800ab8a:	69a3      	ldr	r3, [r4, #24]
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	071a      	lsls	r2, r3, #28
 800ab92:	d52f      	bpl.n	800abf4 <__swbuf_r+0x84>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	b36b      	cbz	r3, 800abf4 <__swbuf_r+0x84>
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	1ac0      	subs	r0, r0, r3
 800ab9e:	6963      	ldr	r3, [r4, #20]
 800aba0:	b2f6      	uxtb	r6, r6
 800aba2:	4283      	cmp	r3, r0
 800aba4:	4637      	mov	r7, r6
 800aba6:	dc04      	bgt.n	800abb2 <__swbuf_r+0x42>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 f92e 	bl	800ae0c <_fflush_r>
 800abb0:	bb30      	cbnz	r0, 800ac00 <__swbuf_r+0x90>
 800abb2:	68a3      	ldr	r3, [r4, #8]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	701e      	strb	r6, [r3, #0]
 800abc0:	6963      	ldr	r3, [r4, #20]
 800abc2:	3001      	adds	r0, #1
 800abc4:	4283      	cmp	r3, r0
 800abc6:	d004      	beq.n	800abd2 <__swbuf_r+0x62>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	07db      	lsls	r3, r3, #31
 800abcc:	d506      	bpl.n	800abdc <__swbuf_r+0x6c>
 800abce:	2e0a      	cmp	r6, #10
 800abd0:	d104      	bne.n	800abdc <__swbuf_r+0x6c>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f919 	bl	800ae0c <_fflush_r>
 800abda:	b988      	cbnz	r0, 800ac00 <__swbuf_r+0x90>
 800abdc:	4638      	mov	r0, r7
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <__swbuf_r+0x9c>)
 800abe2:	429c      	cmp	r4, r3
 800abe4:	d101      	bne.n	800abea <__swbuf_r+0x7a>
 800abe6:	68ac      	ldr	r4, [r5, #8]
 800abe8:	e7cf      	b.n	800ab8a <__swbuf_r+0x1a>
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <__swbuf_r+0xa0>)
 800abec:	429c      	cmp	r4, r3
 800abee:	bf08      	it	eq
 800abf0:	68ec      	ldreq	r4, [r5, #12]
 800abf2:	e7ca      	b.n	800ab8a <__swbuf_r+0x1a>
 800abf4:	4621      	mov	r1, r4
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f80c 	bl	800ac14 <__swsetup_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d0cb      	beq.n	800ab98 <__swbuf_r+0x28>
 800ac00:	f04f 37ff 	mov.w	r7, #4294967295
 800ac04:	e7ea      	b.n	800abdc <__swbuf_r+0x6c>
 800ac06:	bf00      	nop
 800ac08:	0800b82c 	.word	0x0800b82c
 800ac0c:	0800b84c 	.word	0x0800b84c
 800ac10:	0800b80c 	.word	0x0800b80c

0800ac14 <__swsetup_r>:
 800ac14:	4b32      	ldr	r3, [pc, #200]	; (800ace0 <__swsetup_r+0xcc>)
 800ac16:	b570      	push	{r4, r5, r6, lr}
 800ac18:	681d      	ldr	r5, [r3, #0]
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	b125      	cbz	r5, 800ac2a <__swsetup_r+0x16>
 800ac20:	69ab      	ldr	r3, [r5, #24]
 800ac22:	b913      	cbnz	r3, 800ac2a <__swsetup_r+0x16>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 f985 	bl	800af34 <__sinit>
 800ac2a:	4b2e      	ldr	r3, [pc, #184]	; (800ace4 <__swsetup_r+0xd0>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	d10f      	bne.n	800ac50 <__swsetup_r+0x3c>
 800ac30:	686c      	ldr	r4, [r5, #4]
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac38:	0719      	lsls	r1, r3, #28
 800ac3a:	d42c      	bmi.n	800ac96 <__swsetup_r+0x82>
 800ac3c:	06dd      	lsls	r5, r3, #27
 800ac3e:	d411      	bmi.n	800ac64 <__swsetup_r+0x50>
 800ac40:	2309      	movs	r3, #9
 800ac42:	6033      	str	r3, [r6, #0]
 800ac44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4e:	e03e      	b.n	800acce <__swsetup_r+0xba>
 800ac50:	4b25      	ldr	r3, [pc, #148]	; (800ace8 <__swsetup_r+0xd4>)
 800ac52:	429c      	cmp	r4, r3
 800ac54:	d101      	bne.n	800ac5a <__swsetup_r+0x46>
 800ac56:	68ac      	ldr	r4, [r5, #8]
 800ac58:	e7eb      	b.n	800ac32 <__swsetup_r+0x1e>
 800ac5a:	4b24      	ldr	r3, [pc, #144]	; (800acec <__swsetup_r+0xd8>)
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	bf08      	it	eq
 800ac60:	68ec      	ldreq	r4, [r5, #12]
 800ac62:	e7e6      	b.n	800ac32 <__swsetup_r+0x1e>
 800ac64:	0758      	lsls	r0, r3, #29
 800ac66:	d512      	bpl.n	800ac8e <__swsetup_r+0x7a>
 800ac68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac6a:	b141      	cbz	r1, 800ac7e <__swsetup_r+0x6a>
 800ac6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <__swsetup_r+0x66>
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff fb27 	bl	800a2c8 <_free_r>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	2300      	movs	r3, #0
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f043 0308 	orr.w	r3, r3, #8
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	b94b      	cbnz	r3, 800acae <__swsetup_r+0x9a>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca4:	d003      	beq.n	800acae <__swsetup_r+0x9a>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 fa09 	bl	800b0c0 <__smakebuf_r>
 800acae:	89a0      	ldrh	r0, [r4, #12]
 800acb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acb4:	f010 0301 	ands.w	r3, r0, #1
 800acb8:	d00a      	beq.n	800acd0 <__swsetup_r+0xbc>
 800acba:	2300      	movs	r3, #0
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	6963      	ldr	r3, [r4, #20]
 800acc0:	425b      	negs	r3, r3
 800acc2:	61a3      	str	r3, [r4, #24]
 800acc4:	6923      	ldr	r3, [r4, #16]
 800acc6:	b943      	cbnz	r3, 800acda <__swsetup_r+0xc6>
 800acc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800accc:	d1ba      	bne.n	800ac44 <__swsetup_r+0x30>
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	0781      	lsls	r1, r0, #30
 800acd2:	bf58      	it	pl
 800acd4:	6963      	ldrpl	r3, [r4, #20]
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	e7f4      	b.n	800acc4 <__swsetup_r+0xb0>
 800acda:	2000      	movs	r0, #0
 800acdc:	e7f7      	b.n	800acce <__swsetup_r+0xba>
 800acde:	bf00      	nop
 800ace0:	200000fc 	.word	0x200000fc
 800ace4:	0800b82c 	.word	0x0800b82c
 800ace8:	0800b84c 	.word	0x0800b84c
 800acec:	0800b80c 	.word	0x0800b80c

0800acf0 <abort>:
 800acf0:	b508      	push	{r3, lr}
 800acf2:	2006      	movs	r0, #6
 800acf4:	f000 fa54 	bl	800b1a0 <raise>
 800acf8:	2001      	movs	r0, #1
 800acfa:	f7f6 ff2b 	bl	8001b54 <_exit>
	...

0800ad00 <__sflush_r>:
 800ad00:	898a      	ldrh	r2, [r1, #12]
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad06:	4605      	mov	r5, r0
 800ad08:	0710      	lsls	r0, r2, #28
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	d458      	bmi.n	800adc0 <__sflush_r+0xc0>
 800ad0e:	684b      	ldr	r3, [r1, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc05      	bgt.n	800ad20 <__sflush_r+0x20>
 800ad14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc02      	bgt.n	800ad20 <__sflush_r+0x20>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	d0f9      	beq.n	800ad1a <__sflush_r+0x1a>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad2c:	682f      	ldr	r7, [r5, #0]
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	d032      	beq.n	800ad98 <__sflush_r+0x98>
 800ad32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	075a      	lsls	r2, r3, #29
 800ad38:	d505      	bpl.n	800ad46 <__sflush_r+0x46>
 800ad3a:	6863      	ldr	r3, [r4, #4]
 800ad3c:	1ac0      	subs	r0, r0, r3
 800ad3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad40:	b10b      	cbz	r3, 800ad46 <__sflush_r+0x46>
 800ad42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad44:	1ac0      	subs	r0, r0, r3
 800ad46:	2300      	movs	r3, #0
 800ad48:	4602      	mov	r2, r0
 800ad4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad4c:	6a21      	ldr	r1, [r4, #32]
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b0      	blx	r6
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	d106      	bne.n	800ad66 <__sflush_r+0x66>
 800ad58:	6829      	ldr	r1, [r5, #0]
 800ad5a:	291d      	cmp	r1, #29
 800ad5c:	d82c      	bhi.n	800adb8 <__sflush_r+0xb8>
 800ad5e:	4a2a      	ldr	r2, [pc, #168]	; (800ae08 <__sflush_r+0x108>)
 800ad60:	40ca      	lsrs	r2, r1
 800ad62:	07d6      	lsls	r6, r2, #31
 800ad64:	d528      	bpl.n	800adb8 <__sflush_r+0xb8>
 800ad66:	2200      	movs	r2, #0
 800ad68:	6062      	str	r2, [r4, #4]
 800ad6a:	04d9      	lsls	r1, r3, #19
 800ad6c:	6922      	ldr	r2, [r4, #16]
 800ad6e:	6022      	str	r2, [r4, #0]
 800ad70:	d504      	bpl.n	800ad7c <__sflush_r+0x7c>
 800ad72:	1c42      	adds	r2, r0, #1
 800ad74:	d101      	bne.n	800ad7a <__sflush_r+0x7a>
 800ad76:	682b      	ldr	r3, [r5, #0]
 800ad78:	b903      	cbnz	r3, 800ad7c <__sflush_r+0x7c>
 800ad7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ad7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7e:	602f      	str	r7, [r5, #0]
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d0ca      	beq.n	800ad1a <__sflush_r+0x1a>
 800ad84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d002      	beq.n	800ad92 <__sflush_r+0x92>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f7ff fa9b 	bl	800a2c8 <_free_r>
 800ad92:	2000      	movs	r0, #0
 800ad94:	6360      	str	r0, [r4, #52]	; 0x34
 800ad96:	e7c1      	b.n	800ad1c <__sflush_r+0x1c>
 800ad98:	6a21      	ldr	r1, [r4, #32]
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b0      	blx	r6
 800ada0:	1c41      	adds	r1, r0, #1
 800ada2:	d1c7      	bne.n	800ad34 <__sflush_r+0x34>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0c4      	beq.n	800ad34 <__sflush_r+0x34>
 800adaa:	2b1d      	cmp	r3, #29
 800adac:	d001      	beq.n	800adb2 <__sflush_r+0xb2>
 800adae:	2b16      	cmp	r3, #22
 800adb0:	d101      	bne.n	800adb6 <__sflush_r+0xb6>
 800adb2:	602f      	str	r7, [r5, #0]
 800adb4:	e7b1      	b.n	800ad1a <__sflush_r+0x1a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	e7ad      	b.n	800ad1c <__sflush_r+0x1c>
 800adc0:	690f      	ldr	r7, [r1, #16]
 800adc2:	2f00      	cmp	r7, #0
 800adc4:	d0a9      	beq.n	800ad1a <__sflush_r+0x1a>
 800adc6:	0793      	lsls	r3, r2, #30
 800adc8:	680e      	ldr	r6, [r1, #0]
 800adca:	bf08      	it	eq
 800adcc:	694b      	ldreq	r3, [r1, #20]
 800adce:	600f      	str	r7, [r1, #0]
 800add0:	bf18      	it	ne
 800add2:	2300      	movne	r3, #0
 800add4:	eba6 0807 	sub.w	r8, r6, r7
 800add8:	608b      	str	r3, [r1, #8]
 800adda:	f1b8 0f00 	cmp.w	r8, #0
 800adde:	dd9c      	ble.n	800ad1a <__sflush_r+0x1a>
 800ade0:	6a21      	ldr	r1, [r4, #32]
 800ade2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ade4:	4643      	mov	r3, r8
 800ade6:	463a      	mov	r2, r7
 800ade8:	4628      	mov	r0, r5
 800adea:	47b0      	blx	r6
 800adec:	2800      	cmp	r0, #0
 800adee:	dc06      	bgt.n	800adfe <__sflush_r+0xfe>
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e78e      	b.n	800ad1c <__sflush_r+0x1c>
 800adfe:	4407      	add	r7, r0
 800ae00:	eba8 0800 	sub.w	r8, r8, r0
 800ae04:	e7e9      	b.n	800adda <__sflush_r+0xda>
 800ae06:	bf00      	nop
 800ae08:	20400001 	.word	0x20400001

0800ae0c <_fflush_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b913      	cbnz	r3, 800ae1c <_fflush_r+0x10>
 800ae16:	2500      	movs	r5, #0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	b118      	cbz	r0, 800ae26 <_fflush_r+0x1a>
 800ae1e:	6983      	ldr	r3, [r0, #24]
 800ae20:	b90b      	cbnz	r3, 800ae26 <_fflush_r+0x1a>
 800ae22:	f000 f887 	bl	800af34 <__sinit>
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <_fflush_r+0x6c>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d11b      	bne.n	800ae64 <_fflush_r+0x58>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0ef      	beq.n	800ae16 <_fflush_r+0xa>
 800ae36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae38:	07d0      	lsls	r0, r2, #31
 800ae3a:	d404      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae3c:	0599      	lsls	r1, r3, #22
 800ae3e:	d402      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae42:	f000 f915 	bl	800b070 <__retarget_lock_acquire_recursive>
 800ae46:	4628      	mov	r0, r5
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f7ff ff59 	bl	800ad00 <__sflush_r>
 800ae4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae50:	07da      	lsls	r2, r3, #31
 800ae52:	4605      	mov	r5, r0
 800ae54:	d4e0      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	059b      	lsls	r3, r3, #22
 800ae5a:	d4dd      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f000 f908 	bl	800b072 <__retarget_lock_release_recursive>
 800ae62:	e7d9      	b.n	800ae18 <_fflush_r+0xc>
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <_fflush_r+0x70>)
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d101      	bne.n	800ae6e <_fflush_r+0x62>
 800ae6a:	68ac      	ldr	r4, [r5, #8]
 800ae6c:	e7df      	b.n	800ae2e <_fflush_r+0x22>
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <_fflush_r+0x74>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	bf08      	it	eq
 800ae74:	68ec      	ldreq	r4, [r5, #12]
 800ae76:	e7da      	b.n	800ae2e <_fflush_r+0x22>
 800ae78:	0800b82c 	.word	0x0800b82c
 800ae7c:	0800b84c 	.word	0x0800b84c
 800ae80:	0800b80c 	.word	0x0800b80c

0800ae84 <std>:
 800ae84:	2300      	movs	r3, #0
 800ae86:	b510      	push	{r4, lr}
 800ae88:	4604      	mov	r4, r0
 800ae8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae92:	6083      	str	r3, [r0, #8]
 800ae94:	8181      	strh	r1, [r0, #12]
 800ae96:	6643      	str	r3, [r0, #100]	; 0x64
 800ae98:	81c2      	strh	r2, [r0, #14]
 800ae9a:	6183      	str	r3, [r0, #24]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	2208      	movs	r2, #8
 800aea0:	305c      	adds	r0, #92	; 0x5c
 800aea2:	f7fb fddd 	bl	8006a60 <memset>
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <std+0x38>)
 800aea8:	6263      	str	r3, [r4, #36]	; 0x24
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <std+0x3c>)
 800aeac:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <std+0x40>)
 800aeb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <std+0x44>)
 800aeb4:	6224      	str	r4, [r4, #32]
 800aeb6:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	bf00      	nop
 800aebc:	0800b1d9 	.word	0x0800b1d9
 800aec0:	0800b1fb 	.word	0x0800b1fb
 800aec4:	0800b233 	.word	0x0800b233
 800aec8:	0800b257 	.word	0x0800b257

0800aecc <_cleanup_r>:
 800aecc:	4901      	ldr	r1, [pc, #4]	; (800aed4 <_cleanup_r+0x8>)
 800aece:	f000 b8af 	b.w	800b030 <_fwalk_reent>
 800aed2:	bf00      	nop
 800aed4:	0800ae0d 	.word	0x0800ae0d

0800aed8 <__sfmoreglue>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	2268      	movs	r2, #104	; 0x68
 800aedc:	1e4d      	subs	r5, r1, #1
 800aede:	4355      	muls	r5, r2
 800aee0:	460e      	mov	r6, r1
 800aee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aee6:	f7ff fa5b 	bl	800a3a0 <_malloc_r>
 800aeea:	4604      	mov	r4, r0
 800aeec:	b140      	cbz	r0, 800af00 <__sfmoreglue+0x28>
 800aeee:	2100      	movs	r1, #0
 800aef0:	e9c0 1600 	strd	r1, r6, [r0]
 800aef4:	300c      	adds	r0, #12
 800aef6:	60a0      	str	r0, [r4, #8]
 800aef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aefc:	f7fb fdb0 	bl	8006a60 <memset>
 800af00:	4620      	mov	r0, r4
 800af02:	bd70      	pop	{r4, r5, r6, pc}

0800af04 <__sfp_lock_acquire>:
 800af04:	4801      	ldr	r0, [pc, #4]	; (800af0c <__sfp_lock_acquire+0x8>)
 800af06:	f000 b8b3 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af0a:	bf00      	nop
 800af0c:	200045d5 	.word	0x200045d5

0800af10 <__sfp_lock_release>:
 800af10:	4801      	ldr	r0, [pc, #4]	; (800af18 <__sfp_lock_release+0x8>)
 800af12:	f000 b8ae 	b.w	800b072 <__retarget_lock_release_recursive>
 800af16:	bf00      	nop
 800af18:	200045d5 	.word	0x200045d5

0800af1c <__sinit_lock_acquire>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__sinit_lock_acquire+0x8>)
 800af1e:	f000 b8a7 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af22:	bf00      	nop
 800af24:	200045d6 	.word	0x200045d6

0800af28 <__sinit_lock_release>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sinit_lock_release+0x8>)
 800af2a:	f000 b8a2 	b.w	800b072 <__retarget_lock_release_recursive>
 800af2e:	bf00      	nop
 800af30:	200045d6 	.word	0x200045d6

0800af34 <__sinit>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	f7ff fff0 	bl	800af1c <__sinit_lock_acquire>
 800af3c:	69a3      	ldr	r3, [r4, #24]
 800af3e:	b11b      	cbz	r3, 800af48 <__sinit+0x14>
 800af40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af44:	f7ff bff0 	b.w	800af28 <__sinit_lock_release>
 800af48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af4c:	6523      	str	r3, [r4, #80]	; 0x50
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <__sinit+0x68>)
 800af50:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <__sinit+0x6c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	62a2      	str	r2, [r4, #40]	; 0x28
 800af56:	42a3      	cmp	r3, r4
 800af58:	bf04      	itt	eq
 800af5a:	2301      	moveq	r3, #1
 800af5c:	61a3      	streq	r3, [r4, #24]
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f820 	bl	800afa4 <__sfp>
 800af64:	6060      	str	r0, [r4, #4]
 800af66:	4620      	mov	r0, r4
 800af68:	f000 f81c 	bl	800afa4 <__sfp>
 800af6c:	60a0      	str	r0, [r4, #8]
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f818 	bl	800afa4 <__sfp>
 800af74:	2200      	movs	r2, #0
 800af76:	60e0      	str	r0, [r4, #12]
 800af78:	2104      	movs	r1, #4
 800af7a:	6860      	ldr	r0, [r4, #4]
 800af7c:	f7ff ff82 	bl	800ae84 <std>
 800af80:	68a0      	ldr	r0, [r4, #8]
 800af82:	2201      	movs	r2, #1
 800af84:	2109      	movs	r1, #9
 800af86:	f7ff ff7d 	bl	800ae84 <std>
 800af8a:	68e0      	ldr	r0, [r4, #12]
 800af8c:	2202      	movs	r2, #2
 800af8e:	2112      	movs	r1, #18
 800af90:	f7ff ff78 	bl	800ae84 <std>
 800af94:	2301      	movs	r3, #1
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	e7d2      	b.n	800af40 <__sinit+0xc>
 800af9a:	bf00      	nop
 800af9c:	0800b3c8 	.word	0x0800b3c8
 800afa0:	0800aecd 	.word	0x0800aecd

0800afa4 <__sfp>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	4607      	mov	r7, r0
 800afa8:	f7ff ffac 	bl	800af04 <__sfp_lock_acquire>
 800afac:	4b1e      	ldr	r3, [pc, #120]	; (800b028 <__sfp+0x84>)
 800afae:	681e      	ldr	r6, [r3, #0]
 800afb0:	69b3      	ldr	r3, [r6, #24]
 800afb2:	b913      	cbnz	r3, 800afba <__sfp+0x16>
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff ffbd 	bl	800af34 <__sinit>
 800afba:	3648      	adds	r6, #72	; 0x48
 800afbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	d503      	bpl.n	800afcc <__sfp+0x28>
 800afc4:	6833      	ldr	r3, [r6, #0]
 800afc6:	b30b      	cbz	r3, 800b00c <__sfp+0x68>
 800afc8:	6836      	ldr	r6, [r6, #0]
 800afca:	e7f7      	b.n	800afbc <__sfp+0x18>
 800afcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afd0:	b9d5      	cbnz	r5, 800b008 <__sfp+0x64>
 800afd2:	4b16      	ldr	r3, [pc, #88]	; (800b02c <__sfp+0x88>)
 800afd4:	60e3      	str	r3, [r4, #12]
 800afd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afda:	6665      	str	r5, [r4, #100]	; 0x64
 800afdc:	f000 f847 	bl	800b06e <__retarget_lock_init_recursive>
 800afe0:	f7ff ff96 	bl	800af10 <__sfp_lock_release>
 800afe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afec:	6025      	str	r5, [r4, #0]
 800afee:	61a5      	str	r5, [r4, #24]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4629      	mov	r1, r5
 800aff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aff8:	f7fb fd32 	bl	8006a60 <memset>
 800affc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b004:	4620      	mov	r0, r4
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	3468      	adds	r4, #104	; 0x68
 800b00a:	e7d9      	b.n	800afc0 <__sfp+0x1c>
 800b00c:	2104      	movs	r1, #4
 800b00e:	4638      	mov	r0, r7
 800b010:	f7ff ff62 	bl	800aed8 <__sfmoreglue>
 800b014:	4604      	mov	r4, r0
 800b016:	6030      	str	r0, [r6, #0]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1d5      	bne.n	800afc8 <__sfp+0x24>
 800b01c:	f7ff ff78 	bl	800af10 <__sfp_lock_release>
 800b020:	230c      	movs	r3, #12
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	e7ee      	b.n	800b004 <__sfp+0x60>
 800b026:	bf00      	nop
 800b028:	0800b3c8 	.word	0x0800b3c8
 800b02c:	ffff0001 	.word	0xffff0001

0800b030 <_fwalk_reent>:
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	4606      	mov	r6, r0
 800b036:	4688      	mov	r8, r1
 800b038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b03c:	2700      	movs	r7, #0
 800b03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b042:	f1b9 0901 	subs.w	r9, r9, #1
 800b046:	d505      	bpl.n	800b054 <_fwalk_reent+0x24>
 800b048:	6824      	ldr	r4, [r4, #0]
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d1f7      	bne.n	800b03e <_fwalk_reent+0xe>
 800b04e:	4638      	mov	r0, r7
 800b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b054:	89ab      	ldrh	r3, [r5, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d907      	bls.n	800b06a <_fwalk_reent+0x3a>
 800b05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b05e:	3301      	adds	r3, #1
 800b060:	d003      	beq.n	800b06a <_fwalk_reent+0x3a>
 800b062:	4629      	mov	r1, r5
 800b064:	4630      	mov	r0, r6
 800b066:	47c0      	blx	r8
 800b068:	4307      	orrs	r7, r0
 800b06a:	3568      	adds	r5, #104	; 0x68
 800b06c:	e7e9      	b.n	800b042 <_fwalk_reent+0x12>

0800b06e <__retarget_lock_init_recursive>:
 800b06e:	4770      	bx	lr

0800b070 <__retarget_lock_acquire_recursive>:
 800b070:	4770      	bx	lr

0800b072 <__retarget_lock_release_recursive>:
 800b072:	4770      	bx	lr

0800b074 <__swhatbuf_r>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	460e      	mov	r6, r1
 800b078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07c:	2900      	cmp	r1, #0
 800b07e:	b096      	sub	sp, #88	; 0x58
 800b080:	4614      	mov	r4, r2
 800b082:	461d      	mov	r5, r3
 800b084:	da08      	bge.n	800b098 <__swhatbuf_r+0x24>
 800b086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	602a      	str	r2, [r5, #0]
 800b08e:	061a      	lsls	r2, r3, #24
 800b090:	d410      	bmi.n	800b0b4 <__swhatbuf_r+0x40>
 800b092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b096:	e00e      	b.n	800b0b6 <__swhatbuf_r+0x42>
 800b098:	466a      	mov	r2, sp
 800b09a:	f000 f903 	bl	800b2a4 <_fstat_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	dbf1      	blt.n	800b086 <__swhatbuf_r+0x12>
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ac:	425a      	negs	r2, r3
 800b0ae:	415a      	adcs	r2, r3
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	e7ee      	b.n	800b092 <__swhatbuf_r+0x1e>
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	b016      	add	sp, #88	; 0x58
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0c0 <__smakebuf_r>:
 800b0c0:	898b      	ldrh	r3, [r1, #12]
 800b0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0c4:	079d      	lsls	r5, r3, #30
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	d507      	bpl.n	800b0dc <__smakebuf_r+0x1c>
 800b0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	6123      	str	r3, [r4, #16]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	b002      	add	sp, #8
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	ab01      	add	r3, sp, #4
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f7ff ffc8 	bl	800b074 <__swhatbuf_r>
 800b0e4:	9900      	ldr	r1, [sp, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff f959 	bl	800a3a0 <_malloc_r>
 800b0ee:	b948      	cbnz	r0, 800b104 <__smakebuf_r+0x44>
 800b0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f4:	059a      	lsls	r2, r3, #22
 800b0f6:	d4ef      	bmi.n	800b0d8 <__smakebuf_r+0x18>
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	f043 0302 	orr.w	r3, r3, #2
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	e7e3      	b.n	800b0cc <__smakebuf_r+0xc>
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <__smakebuf_r+0x7c>)
 800b106:	62b3      	str	r3, [r6, #40]	; 0x28
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	6020      	str	r0, [r4, #0]
 800b10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	6163      	str	r3, [r4, #20]
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	6120      	str	r0, [r4, #16]
 800b11a:	b15b      	cbz	r3, 800b134 <__smakebuf_r+0x74>
 800b11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b120:	4630      	mov	r0, r6
 800b122:	f000 f8d1 	bl	800b2c8 <_isatty_r>
 800b126:	b128      	cbz	r0, 800b134 <__smakebuf_r+0x74>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	89a0      	ldrh	r0, [r4, #12]
 800b136:	4305      	orrs	r5, r0
 800b138:	81a5      	strh	r5, [r4, #12]
 800b13a:	e7cd      	b.n	800b0d8 <__smakebuf_r+0x18>
 800b13c:	0800aecd 	.word	0x0800aecd

0800b140 <_malloc_usable_size_r>:
 800b140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b144:	1f18      	subs	r0, r3, #4
 800b146:	2b00      	cmp	r3, #0
 800b148:	bfbc      	itt	lt
 800b14a:	580b      	ldrlt	r3, [r1, r0]
 800b14c:	18c0      	addlt	r0, r0, r3
 800b14e:	4770      	bx	lr

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4604      	mov	r4, r0
 800b156:	460d      	mov	r5, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	462a      	mov	r2, r5
 800b176:	4601      	mov	r1, r0
 800b178:	4620      	mov	r0, r4
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2400      	movs	r4, #0
 800b194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b198:	4628      	mov	r0, r5
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	200000fc 	.word	0x200000fc

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d07      	ldr	r5, [pc, #28]	; (800b1d0 <_kill_r+0x20>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f6 fcb9 	bl	8001b34 <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200045d0 	.word	0x200045d0

0800b1d4 <_getpid_r>:
 800b1d4:	f7f6 bca6 	b.w	8001b24 <_getpid>

0800b1d8 <__sread>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	f000 f894 	bl	800b30c <_read_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	bfab      	itete	ge
 800b1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b1ec:	181b      	addge	r3, r3, r0
 800b1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1f2:	bfac      	ite	ge
 800b1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1f6:	81a3      	strhlt	r3, [r4, #12]
 800b1f8:	bd10      	pop	{r4, pc}

0800b1fa <__swrite>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	461f      	mov	r7, r3
 800b200:	898b      	ldrh	r3, [r1, #12]
 800b202:	05db      	lsls	r3, r3, #23
 800b204:	4605      	mov	r5, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4616      	mov	r6, r2
 800b20a:	d505      	bpl.n	800b218 <__swrite+0x1e>
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2302      	movs	r3, #2
 800b212:	2200      	movs	r2, #0
 800b214:	f000 f868 	bl	800b2e8 <_lseek_r>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	4632      	mov	r2, r6
 800b226:	463b      	mov	r3, r7
 800b228:	4628      	mov	r0, r5
 800b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	f000 b817 	b.w	800b260 <_write_r>

0800b232 <__sseek>:
 800b232:	b510      	push	{r4, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23a:	f000 f855 	bl	800b2e8 <_lseek_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	bf15      	itete	ne
 800b244:	6560      	strne	r0, [r4, #84]	; 0x54
 800b246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b24e:	81a3      	strheq	r3, [r4, #12]
 800b250:	bf18      	it	ne
 800b252:	81a3      	strhne	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__sclose>:
 800b256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25a:	f000 b813 	b.w	800b284 <_close_r>
	...

0800b260 <_write_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d07      	ldr	r5, [pc, #28]	; (800b280 <_write_r+0x20>)
 800b264:	4604      	mov	r4, r0
 800b266:	4608      	mov	r0, r1
 800b268:	4611      	mov	r1, r2
 800b26a:	2200      	movs	r2, #0
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f7f5 ff7e 	bl	8001170 <_write>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_write_r+0x1e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_write_r+0x1e>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	200045d0 	.word	0x200045d0

0800b284 <_close_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d06      	ldr	r5, [pc, #24]	; (800b2a0 <_close_r+0x1c>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f6 fc87 	bl	8001ba2 <_close>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d102      	bne.n	800b29e <_close_r+0x1a>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	b103      	cbz	r3, 800b29e <_close_r+0x1a>
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	200045d0 	.word	0x200045d0

0800b2a4 <_fstat_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	; (800b2c4 <_fstat_r+0x20>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	602b      	str	r3, [r5, #0]
 800b2b2:	f7f6 fc82 	bl	8001bba <_fstat>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	d102      	bne.n	800b2c0 <_fstat_r+0x1c>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	b103      	cbz	r3, 800b2c0 <_fstat_r+0x1c>
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	bd38      	pop	{r3, r4, r5, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200045d0 	.word	0x200045d0

0800b2c8 <_isatty_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d06      	ldr	r5, [pc, #24]	; (800b2e4 <_isatty_r+0x1c>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	f7f6 fc81 	bl	8001bda <_isatty>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_isatty_r+0x1a>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_isatty_r+0x1a>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	200045d0 	.word	0x200045d0

0800b2e8 <_lseek_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	; (800b308 <_lseek_r+0x20>)
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	602a      	str	r2, [r5, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f7f6 fc7a 	bl	8001bf0 <_lseek>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_lseek_r+0x1e>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_lseek_r+0x1e>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	200045d0 	.word	0x200045d0

0800b30c <_read_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_read_r+0x20>)
 800b310:	4604      	mov	r4, r0
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	2200      	movs	r2, #0
 800b318:	602a      	str	r2, [r5, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f7f6 fc24 	bl	8001b68 <_read>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_read_r+0x1e>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_read_r+0x1e>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	200045d0 	.word	0x200045d0

0800b330 <_init>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr

0800b33c <_fini>:
 800b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33e:	bf00      	nop
 800b340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b342:	bc08      	pop	{r3}
 800b344:	469e      	mov	lr, r3
 800b346:	4770      	bx	lr
