
RTOS_Stepper_RotatryEncoder_UART_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000894c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008af0  08008af0  00018af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f74  08008f74  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f7c  08008f7c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f7c  08008f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f80  08008f80  00018f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004124  200001ec  08009170  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004310  08009170  00024310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014549  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6d  00000000  00000000  00034765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000376d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa9  00000000  00000000  00039a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001422d  00000000  00000000  000529f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009822c  00000000  00000000  00066c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fee52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  000feea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ad4 	.word	0x08008ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008ad4 	.word	0x08008ad4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000208 	.word	0x20000208
 8000eec:	2000025c 	.word	0x2000025c

08000ef0 <updateEncoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void updateEncoder(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
  int MSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_A_Pin);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	481f      	ldr	r0, [pc, #124]	; (8000f78 <updateEncoder+0x88>)
 8000efa:	f001 f8d3 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	60fb      	str	r3, [r7, #12]
  int LSB = HAL_GPIO_ReadPin(GPIOB, ENCODER_B_Pin);
 8000f02:	2102      	movs	r1, #2
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <updateEncoder+0x88>)
 8000f06:	f001 f8cd 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60bb      	str	r3, [r7, #8]

  int encoded = (MSB << 1) | LSB;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	607b      	str	r3, [r7, #4]
  int sum = (lastEncoded << 2) | encoded;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <updateEncoder+0x8c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	603b      	str	r3, [r7, #0]

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b0d      	cmp	r3, #13
 8000f28:	d008      	beq.n	8000f3c <updateEncoder+0x4c>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d005      	beq.n	8000f3c <updateEncoder+0x4c>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d002      	beq.n	8000f3c <updateEncoder+0x4c>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b0b      	cmp	r3, #11
 8000f3a:	d104      	bne.n	8000f46 <updateEncoder+0x56>
    encoderValue++;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <updateEncoder+0x90>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <updateEncoder+0x90>)
 8000f44:	6013      	str	r3, [r2, #0]
  if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b0e      	cmp	r3, #14
 8000f4a:	d008      	beq.n	8000f5e <updateEncoder+0x6e>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d005      	beq.n	8000f5e <updateEncoder+0x6e>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d002      	beq.n	8000f5e <updateEncoder+0x6e>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d104      	bne.n	8000f68 <updateEncoder+0x78>
    encoderValue--;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <updateEncoder+0x90>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <updateEncoder+0x90>)
 8000f66:	6013      	str	r3, [r2, #0]

  lastEncoded = encoded;
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <updateEncoder+0x8c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	2000045c 	.word	0x2000045c
 8000f80:	20000460 	.word	0x20000460

08000f84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin)
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d002      	beq.n	8000f9a <HAL_GPIO_EXTI_Callback+0x16>
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x1a>
  {
    updateEncoder();
 8000f9a:	f7ff ffa9 	bl	8000ef0 <updateEncoder>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_UART_RxCpltCallback>:


char RxString[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_UART_RxCpltCallback+0x78>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12e      	bne.n	8001018 <HAL_UART_RxCpltCallback+0x70>
    {
        if (received_char == '/')
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_UART_RxCpltCallback+0x7c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc0:	d108      	bne.n	8000fd4 <HAL_UART_RxCpltCallback+0x2c>
        {
            // Initialize the received string buffer
            received_index = 0;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_UART_RxCpltCallback+0x80>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
            memset(received_string, 0, sizeof(received_string));
 8000fc8:	2232      	movs	r2, #50	; 0x32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4817      	ldr	r0, [pc, #92]	; (800102c <HAL_UART_RxCpltCallback+0x84>)
 8000fce:	f004 fe05 	bl	8005bdc <memset>
 8000fd2:	e01c      	b.n	800100e <HAL_UART_RxCpltCallback+0x66>
        }
        else if (received_char == '*')
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_UART_RxCpltCallback+0x7c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8000fda:	d10b      	bne.n	8000ff4 <HAL_UART_RxCpltCallback+0x4c>
        {
            // Null-terminate the string
            received_string[received_index] = '\0';
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_UART_RxCpltCallback+0x80>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_UART_RxCpltCallback+0x84>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	54d1      	strb	r1, [r2, r3]
            // Parse the received string to an integer
            input_steps = atoi(received_string);
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <HAL_UART_RxCpltCallback+0x84>)
 8000fe8:	f004 fdbc 	bl	8005b64 <atoi>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_RxCpltCallback+0x88>)
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e00c      	b.n	800100e <HAL_UART_RxCpltCallback+0x66>
//            motor_run = 1; // Set flag to start motor
        }
        else
        {
            // Store the received character in the buffer
            if (received_index < sizeof(received_string) - 1)
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_UART_RxCpltCallback+0x80>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b30      	cmp	r3, #48	; 0x30
 8000ffa:	d808      	bhi.n	800100e <HAL_UART_RxCpltCallback+0x66>
            {
                received_string[received_index++] = received_char;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_UART_RxCpltCallback+0x80>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	4909      	ldr	r1, [pc, #36]	; (8001028 <HAL_UART_RxCpltCallback+0x80>)
 8001004:	600a      	str	r2, [r1, #0]
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_UART_RxCpltCallback+0x7c>)
 8001008:	7811      	ldrb	r1, [r2, #0]
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_UART_RxCpltCallback+0x84>)
 800100c:	54d1      	strb	r1, [r2, r3]
            }
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	4904      	ldr	r1, [pc, #16]	; (8001024 <HAL_UART_RxCpltCallback+0x7c>)
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <HAL_UART_RxCpltCallback+0x8c>)
 8001014:	f002 fad9 	bl	80035ca <HAL_UART_Receive_IT>
    }
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004400 	.word	0x40004400
 8001024:	20000464 	.word	0x20000464
 8001028:	200004a0 	.word	0x200004a0
 800102c:	2000046c 	.word	0x2000046c
 8001030:	20000468 	.word	0x20000468
 8001034:	20000500 	.word	0x20000500

08001038 <UART_StartReceive>:



// Function to start UART reception
void UART_StartReceive(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	4903      	ldr	r1, [pc, #12]	; (800104c <UART_StartReceive+0x14>)
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <UART_StartReceive+0x18>)
 8001042:	f002 fac2 	bl	80035ca <HAL_UART_Receive_IT>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000464 	.word	0x20000464
 8001050:	20000500 	.word	0x20000500

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f000 fce9 	bl	8001a30 <HAL_Init>

  /* USER CODE BEGIN Init */
  	  // Enable the UART receive interrupt
  	  //HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char, 1);
  	  // Start UART reception
      UART_StartReceive();
 800105e:	f7ff ffeb 	bl	8001038 <UART_StartReceive>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f83b 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 f921 	bl	80012ac <MX_GPIO_Init>
  MX_TIM1_Init();
 800106a:	f000 f89f 	bl	80011ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800106e:	f000 f8ed 	bl	800124c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <main+0x74>)
 8001074:	f001 fd7a 	bl	8002b6c <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <main+0x78>)
 800107a:	f107 041c 	add.w	r4, r7, #28
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fa51 	bl	800453a <osThreadCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <main+0x7c>)
 800109c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, StartMotorTask, osPriorityBelowNormal, 0, 128);
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <main+0x80>)
 80010a0:	463c      	mov	r4, r7
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 80010b0:	463b      	mov	r3, r7
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fa40 	bl	800453a <osThreadCreate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <main+0x84>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f003 fa34 	bl	800452c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0x70>
 80010c6:	bf00      	nop
 80010c8:	200004b8 	.word	0x200004b8
 80010cc:	08008b08 	.word	0x08008b08
 80010d0:	20000544 	.word	0x20000544
 80010d4:	08008b24 	.word	0x08008b24
 80010d8:	20000548 	.word	0x20000548

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fd76 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <SystemClock_Config+0xc8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <SystemClock_Config+0xc8>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <SystemClock_Config+0xc8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <SystemClock_Config+0xcc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <SystemClock_Config+0xcc>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <SystemClock_Config+0xcc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800114c:	2308      	movs	r3, #8
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f000 ffe9 	bl	8002138 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800116c:	f000 fa07 	bl	800157e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2103      	movs	r1, #3
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fa4b 	bl	8002628 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001198:	f000 f9f1 	bl	800157e <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3750      	adds	r7, #80	; 0x50
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_TIM1_Init+0x98>)
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM1_Init+0x98>)
 80011d0:	225a      	movs	r2, #90	; 0x5a
 80011d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_TIM1_Init+0x98>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_TIM1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_TIM1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_TIM1_Init+0x98>)
 80011f6:	f001 fc69 	bl	8002acc <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f9bd 	bl	800157e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM1_Init+0x98>)
 8001212:	f001 fe6f 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800121c:	f000 f9af 	bl	800157e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM1_Init+0x98>)
 800122e:	f002 f86b 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001238:	f000 f9a1 	bl	800157e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200004b8 	.word	0x200004b8
 8001248:	40010000 	.word	0x40010000

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001284:	f002 f8c2 	bl	800340c <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f976 	bl	800157e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  	  // Enable the UART receive interrupt
  	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&received_char, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	4904      	ldr	r1, [pc, #16]	; (80012a8 <MX_USART2_UART_Init+0x5c>)
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <MX_USART2_UART_Init+0x54>)
 8001298:	f002 f997 	bl	80035ca <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000500 	.word	0x20000500
 80012a4:	40004400 	.word	0x40004400
 80012a8:	20000464 	.word	0x20000464

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <MX_GPIO_Init+0xf0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <MX_GPIO_Init+0xf0>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <MX_GPIO_Init+0xf0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_GPIO_Init+0xf0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2d      	ldr	r2, [pc, #180]	; (800139c <MX_GPIO_Init+0xf0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_GPIO_Init+0xf0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_GPIO_Init+0xf0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <MX_GPIO_Init+0xf0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <MX_GPIO_Init+0xf0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2103      	movs	r1, #3
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <MX_GPIO_Init+0xf4>)
 800131c:	f000 feda 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STEP_Pin */
  GPIO_InitStruct.Pin = STEP_Pin;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4619      	mov	r1, r3
 8001336:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_GPIO_Init+0xf4>)
 8001338:	f000 fd30 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800133c:	2302      	movs	r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_GPIO_Init+0xf4>)
 8001354:	f000 fd22 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001358:	2303      	movs	r3, #3
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800135c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4619      	mov	r1, r3
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_GPIO_Init+0xf8>)
 800136e:	f000 fd15 	bl	8001d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2006      	movs	r0, #6
 8001378:	f000 fc54 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800137c:	2006      	movs	r0, #6
 800137e:	f000 fc6d 	bl	8001c5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fc4c 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800138c:	2007      	movs	r0, #7
 800138e:	f000 fc65 	bl	8001c5c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400

080013a8 <StartEncoderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void const * argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  __disable_irq();
	  updatedEncoderValue = encoderValue;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <StartEncoderTask+0x78>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <StartEncoderTask+0x7c>)
 80013ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013bc:	b662      	cpsie	i
}
 80013be:	bf00      	nop
	  __enable_irq();
	  char msg[50];
	  snprintf(msg, sizeof(msg), "Value: %d     ", ((int)(updatedEncoderValue*0.15)));
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <StartEncoderTask+0x7c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8b5 	bl	8000534 <__aeabi_i2d>
 80013ca:	a313      	add	r3, pc, #76	; (adr r3, 8001418 <StartEncoderTask+0x70>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f91a 	bl	8000608 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fbc4 	bl	8000b68 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f107 000c 	add.w	r0, r7, #12
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <StartEncoderTask+0x80>)
 80013e8:	2132      	movs	r1, #50	; 0x32
 80013ea:	f005 f869 	bl	80064c0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe fef4 	bl	80001e0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f107 010c 	add.w	r1, r7, #12
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <StartEncoderTask+0x84>)
 8001406:	f002 f84e 	bl	80034a6 <HAL_UART_Transmit>
	  osDelay(100);
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	f003 f8e1 	bl	80045d2 <osDelay>
  {
 8001410:	e7ce      	b.n	80013b0 <StartEncoderTask+0x8>
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	33333333 	.word	0x33333333
 800141c:	3fc33333 	.word	0x3fc33333
 8001420:	20000460 	.word	0x20000460
 8001424:	200004a4 	.word	0x200004a4
 8001428:	08008b40 	.word	0x08008b40
 800142c:	20000500 	.word	0x20000500

08001430 <StartMotorTask>:
}


/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b095      	sub	sp, #84	; 0x54
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */

  // Define motor configurations
  MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 8001438:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <StartMotorTask+0xf8>)
 800143a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Setup stepper motor parameters
  setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <StartMotorTask+0xfc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <StartMotorTask+0x100>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	f004 fac9 	bl	80059f0 <setRPM>
  setAcceleration(50.0f); // Set acceleration in steps per second^2
 800145e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001534 <StartMotorTask+0x104>
 8001462:	f004 fab5 	bl	80059d0 <setAcceleration>
  /* Infinite loop */
  for(;;)
  {
	  // Display input steps
	 char msg[50];
	 snprintf(msg, sizeof(msg), "debug input_steps: %d\r\n", input_steps);
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <StartMotorTask+0x108>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f107 000c 	add.w	r0, r7, #12
 800146e:	4a33      	ldr	r2, [pc, #204]	; (800153c <StartMotorTask+0x10c>)
 8001470:	2132      	movs	r1, #50	; 0x32
 8001472:	f005 f825 	bl	80064c0 <sniprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe feb0 	bl	80001e0 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f107 010c 	add.w	r1, r7, #12
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	482c      	ldr	r0, [pc, #176]	; (8001540 <StartMotorTask+0x110>)
 800148e:	f002 f80a 	bl	80034a6 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 8001492:	b672      	cpsid	i
}
 8001494:	bf00      	nop
//	 osDelay(500);
    // Disable interrupts and read the encoder value
    __disable_irq();
    currentPosition = updatedEncoderValue; // Read the latest encoder value
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <StartMotorTask+0x114>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <StartMotorTask+0x118>)
 800149c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800149e:	b662      	cpsie	i
}
 80014a0:	bf00      	nop
    __enable_irq();

	// Calculate target position with floating-point division
	targetPosition = input_steps * ((float)encoderPulseValue / 360.0f); // in encoder value
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <StartMotorTask+0x108>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <StartMotorTask+0x11c>)
 80014b0:	edd3 6a00 	vldr	s13, [r3]
 80014b4:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001550 <StartMotorTask+0x120>
 80014b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <StartMotorTask+0x124>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]

	// Calculate position to move
	positionToMove = (long int)targetPosition - currentPosition; // in encoder value
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <StartMotorTask+0x124>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d0:	ee17 2a90 	vmov	r2, s15
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <StartMotorTask+0x118>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <StartMotorTask+0x128>)
 80014dc:	6013      	str	r3, [r2, #0]

	// Calculate steps to move
	stepsToMove = positionToMove * (motorSetSteps / (float)encoderPulseValue);
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <StartMotorTask+0x128>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <StartMotorTask+0x100>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <StartMotorTask+0x11c>)
 80014f8:	edd3 6a00 	vldr	s13, [r3]
 80014fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001508:	ee17 2a90 	vmov	r2, s15
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <StartMotorTask+0x12c>)
 800150e:	601a      	str	r2, [r3, #0]

	// Move motor
	motorMove(&motor1, stepsToMove);
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <StartMotorTask+0x12c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fad8 	bl	8005ad0 <motorMove>

	osDelay(100);
 8001520:	2064      	movs	r0, #100	; 0x64
 8001522:	f003 f856 	bl	80045d2 <osDelay>
  {
 8001526:	e79e      	b.n	8001466 <StartMotorTask+0x36>
 8001528:	08008b68 	.word	0x08008b68
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	42480000 	.word	0x42480000
 8001538:	20000468 	.word	0x20000468
 800153c:	08008b50 	.word	0x08008b50
 8001540:	20000500 	.word	0x20000500
 8001544:	200004a4 	.word	0x200004a4
 8001548:	200004a8 	.word	0x200004a8
 800154c:	20000008 	.word	0x20000008
 8001550:	43b40000 	.word	0x43b40000
 8001554:	200004ac 	.word	0x200004ac
 8001558:	200004b0 	.word	0x200004b0
 800155c:	200004b4 	.word	0x200004b4

08001560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001570:	d101      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001572:	f000 fa7f 	bl	8001a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001586:	e7fe      	b.n	8001586 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_MspInit+0x54>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_MspInit+0x54>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x54>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_MspInit+0x54>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_MspInit+0x54>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_MspInit+0x54>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210f      	movs	r1, #15
 80015ca:	f06f 0001 	mvn.w	r0, #1
 80015ce:	f000 fb29 	bl	8001c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_TIM_Base_MspInit+0x3c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10d      	bne.n	800160e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_TIM_Base_MspInit+0x40>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0x40>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_TIM_Base_MspInit+0x40>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40010000 	.word	0x40010000
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d133      	bne.n	80016ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800167e:	230c      	movs	r3, #12
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168e:	2307      	movs	r3, #7
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169a:	f000 fb7f 	bl	8001d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2105      	movs	r1, #5
 80016a2:	2026      	movs	r0, #38	; 0x26
 80016a4:	f000 fabe 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a8:	2026      	movs	r0, #38	; 0x26
 80016aa:	f000 fad7 	bl	8001c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_InitTick+0xe8>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a33      	ldr	r2, [pc, #204]	; (80017ac <HAL_InitTick+0xe8>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_InitTick+0xe8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 f9b4 	bl	8002a68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800170a:	f001 f985 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800170e:	6378      	str	r0, [r7, #52]	; 0x34
 8001710:	e004      	b.n	800171c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001712:	f001 f981 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8001716:	4603      	mov	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_InitTick+0xec>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	3b01      	subs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_InitTick+0xf0>)
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_InitTick+0xf0>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_InitTick+0xf0>)
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_InitTick+0xf0>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_InitTick+0xf0>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_InitTick+0xf0>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001752:	4818      	ldr	r0, [pc, #96]	; (80017b4 <HAL_InitTick+0xf0>)
 8001754:	f001 f9ba 	bl	8002acc <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800175e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11b      	bne.n	800179e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <HAL_InitTick+0xf0>)
 8001768:	f001 fa5a 	bl	8002c20 <HAL_TIM_Base_Start_IT>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177a:	201c      	movs	r0, #28
 800177c:	f000 fa6e 	bl	8001c5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d808      	bhi.n	8001798 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	201c      	movs	r0, #28
 800178c:	f000 fa4a 	bl	8001c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_InitTick+0xf4>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e002      	b.n	800179e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800179e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3738      	adds	r7, #56	; 0x38
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	2000054c 	.word	0x2000054c
 80017b8:	20000010 	.word	0x20000010

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f000 fc8b 	bl	8002108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 80017fa:	2002      	movs	r0, #2
 80017fc:	f000 fc84 	bl	8002108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM2_IRQHandler+0x10>)
 800180a:	f001 fa6b 	bl	8002ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000054c 	.word	0x2000054c

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f001 ff05 	bl	800362c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000500 	.word	0x20000500

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001846:	f004 f991 	bl	8005b6c <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
  return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
  while (1) {}    /* Make sure we hang here */
 800186e:	e7fe      	b.n	800186e <_exit+0x12>

08001870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001882:	f3af 8000 	nop.w
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
  }

  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e009      	b.n	80018d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf1      	blt.n	80018bc <_write+0x12>
  }
  return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_close>:

int _close(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_isatty>:

int _isatty(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f004 f8f6 	bl	8005b6c <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20020000 	.word	0x20020000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	20000594 	.word	0x20000594
 80019b4:	20004310 	.word	0x20004310

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd7 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f004 f8b5 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fb21 	bl	8001054 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a20:	08008f84 	.word	0x08008f84
  ldr r2, =_sbss
 8001a24:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a28:	20004310 	.word	0x20004310

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f8d8 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f7ff fe30 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd90 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000014 	.word	0x20000014
 8001a98:	20000598 	.word	0x20000598

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000598 	.word	0x20000598

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c36:	f7ff ff61 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7ff ffb1 	bl	8001ba8 <NVIC_EncodePriority>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff80 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c86:	f7ff ff09 	bl	8001a9c <HAL_GetTick>
 8001c8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d008      	beq.n	8001caa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e052      	b.n	8001d50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0216 	bic.w	r2, r2, #22
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_DMA_Abort+0x62>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0208 	bic.w	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfa:	e013      	b.n	8001d24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfc:	f7ff fece 	bl	8001a9c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d90c      	bls.n	8001d24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e015      	b.n	8001d50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1e4      	bne.n	8001cfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	223f      	movs	r2, #63	; 0x3f
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d004      	beq.n	8001d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00c      	b.n	8001d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2205      	movs	r2, #5
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e159      	b.n	800206c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8148 	bne.w	8002066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a2 	beq.w	8002066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x2f0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x202>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x1fe>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_GPIO_Init+0x2f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <HAL_GPIO_Init+0x2fc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x1f2>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e008      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f92:	2303      	movs	r3, #3
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	f67f aea2 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40021000 	.word	0x40021000
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ff2c 	bl	8000f84 <HAL_GPIO_EXTI_Callback>
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e267      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d075      	beq.n	8002242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d00c      	beq.n	800217c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b85      	ldr	r3, [pc, #532]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216a:	2b08      	cmp	r3, #8
 800216c:	d112      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217a:	d10b      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d05b      	beq.n	8002240 <HAL_RCC_OscConfig+0x108>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d157      	bne.n	8002240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e242      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d106      	bne.n	80021ac <HAL_RCC_OscConfig+0x74>
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a75      	ldr	r2, [pc, #468]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xb0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x98>
 80021b6:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6c      	ldr	r2, [pc, #432]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xb0>
 80021d0:	4b69      	ldr	r3, [pc, #420]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a68      	ldr	r2, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fc54 	bl	8001a9c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fc50 	bl	8001a9c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e207      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xc0>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fc40 	bl	8001a9c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fc3c 	bl	8001a9c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1f3      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0xe8>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x152>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c7      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4937      	ldr	r1, [pc, #220]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0x244>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff fbf5 	bl	8001a9c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fbf1 	bl	8001a9c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a8      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4925      	ldr	r1, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x244>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fbd4 	bl	8001a9c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f8:	f7ff fbd0 	bl	8001a9c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e187      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d036      	beq.n	8002390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_RCC_OscConfig+0x248>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7ff fbb4 	bl	8001a9c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fbb0 	bl	8001a9c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e167      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x240>)
 800234c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x200>
 8002356:	e01b      	b.n	8002390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_OscConfig+0x248>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fb9d 	bl	8001a9c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	e00e      	b.n	8002384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002366:	f7ff fb99 	bl	8001a9c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d907      	bls.n	8002384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e150      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
 8002378:	40023800 	.word	0x40023800
 800237c:	42470000 	.word	0x42470000
 8002380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ea      	bne.n	8002366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8097 	beq.w	80024cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a2:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b7d      	ldr	r3, [pc, #500]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a7c      	ldr	r2, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b77      	ldr	r3, [pc, #476]	; (80025ac <HAL_RCC_OscConfig+0x474>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d118      	bne.n	800240c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023da:	4b74      	ldr	r3, [pc, #464]	; (80025ac <HAL_RCC_OscConfig+0x474>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a73      	ldr	r2, [pc, #460]	; (80025ac <HAL_RCC_OscConfig+0x474>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fb59 	bl	8001a9c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7ff fb55 	bl	8001a9c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e10c      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x474>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x2ea>
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x324>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x30c>
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5e      	ldr	r2, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0x324>
 8002444:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a54      	ldr	r2, [pc, #336]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fb1a 	bl	8001a9c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7ff fb16 	bl	8001a9c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0cb      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ee      	beq.n	800246c <HAL_RCC_OscConfig+0x334>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7ff fb04 	bl	8001a9c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7ff fb00 	bl	8001a9c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0b5      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ee      	bne.n	8002498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a1 	beq.w	8002618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d6:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d05c      	beq.n	800259c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d141      	bne.n	800256e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_OscConfig+0x478>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fad4 	bl	8001a9c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff fad0 	bl	8001a9c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e087      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x478>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff faa9 	bl	8001a9c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff faa5 	bl	8001a9c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e05c      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x416>
 800256c:	e054      	b.n	8002618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x478>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa92 	bl	8001a9c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fa8e 	bl	8001a9c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e045      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x470>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x444>
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e038      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x4ec>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d028      	beq.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d121      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11a      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e067      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4934      	ldr	r1, [pc, #208]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7ff f9c0 	bl	8001a9c <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7ff f9bc 	bl	8001a9c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe ff78 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08008b80 	.word	0x08008b80
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	20000010 	.word	0x20000010

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b094      	sub	sp, #80	; 0x50
 80027fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002800:	2300      	movs	r3, #0
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280c:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d00d      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 8002818:	2b08      	cmp	r3, #8
 800281a:	f200 80e1 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x34>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x3a>
 8002826:	e0db      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800282c:	e0db      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002832:	e0d8      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800283c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
 8002854:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
 8002862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4621      	mov	r1, r4
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	6139      	str	r1, [r7, #16]
 8002884:	4629      	mov	r1, r5
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002898:	4659      	mov	r1, fp
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4651      	mov	r1, sl
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4651      	mov	r1, sl
 80028a8:	ebb2 0801 	subs.w	r8, r2, r1
 80028ac:	4659      	mov	r1, fp
 80028ae:	eb63 0901 	sbc.w	r9, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb18 0303 	adds.w	r3, r8, r3
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	462b      	mov	r3, r5
 80028d4:	eb49 0303 	adc.w	r3, r9, r3
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028e6:	4629      	mov	r1, r5
 80028e8:	024b      	lsls	r3, r1, #9
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f0:	4621      	mov	r1, r4
 80028f2:	024a      	lsls	r2, r1, #9
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002904:	f7fe f958 	bl	8000bb8 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	e058      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	4618      	mov	r0, r3
 800291c:	4611      	mov	r1, r2
 800291e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0159      	lsls	r1, r3, #5
 800293a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293e:	0150      	lsls	r0, r2, #5
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4641      	mov	r1, r8
 8002946:	ebb2 0a01 	subs.w	sl, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800295c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002964:	ebb2 040a 	subs.w	r4, r2, sl
 8002968:	eb63 050b 	sbc.w	r5, r3, fp
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	00eb      	lsls	r3, r5, #3
 8002976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297a:	00e2      	lsls	r2, r4, #3
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	4643      	mov	r3, r8
 8002982:	18e3      	adds	r3, r4, r3
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	464b      	mov	r3, r9
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299a:	4629      	mov	r1, r5
 800299c:	028b      	lsls	r3, r1, #10
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a4:	4621      	mov	r1, r4
 80029a6:	028a      	lsls	r2, r1, #10
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	61fa      	str	r2, [r7, #28]
 80029b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b8:	f7fe f8fe 	bl	8000bb8 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3750      	adds	r7, #80	; 0x50
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08008b90 	.word	0x08008b90

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0b5b      	lsrs	r3, r3, #13
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08008b90 	.word	0x08008b90

08002a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	220f      	movs	r2, #15
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_RCC_GetClockConfig+0x60>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0207 	and.w	r2, r3, #7
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e041      	b.n	8002b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fd74 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f000 fae2 	bl	80030d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e03c      	b.n	8002bfe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_TIM_Base_Start+0xa0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x5c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d013      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x5c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <HAL_TIM_Base_Start+0xa4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x5c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <HAL_TIM_Base_Start+0xa8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x5c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_TIM_Base_Start+0xac>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x5c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_TIM_Base_Start+0xb0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d111      	bne.n	8002bec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d010      	beq.n	8002bfc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	e007      	b.n	8002bfc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40014000 	.word	0x40014000

08002c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e044      	b.n	8002cc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x6c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d013      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x6c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x6c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x6c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x6c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d111      	bne.n	8002cb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d010      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	e007      	b.n	8002cc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	40014000 	.word	0x40014000

08002ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0202 	mvn.w	r2, #2
 8002d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9b5 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9a7 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f9b8 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0204 	mvn.w	r2, #4
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f98b 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f97d 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f98e 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0208 	mvn.w	r2, #8
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f961 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f953 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f964 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2208      	movs	r2, #8
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f937 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f929 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f93a 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10e      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0201 	mvn.w	r2, #1
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fb7c 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d107      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fab2 	bl	80033f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d107      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8ff 	bl	80030be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d10e      	bne.n	8002eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d107      	bne.n	8002eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0220 	mvn.w	r2, #32
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa7c 	bl	80033e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0b4      	b.n	800307a <HAL_TIM_ConfigClockSource+0x186>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f48:	d03e      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	f200 8087 	bhi.w	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	f000 8086 	beq.w	8003066 <HAL_TIM_ConfigClockSource+0x172>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d87f      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d01a      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xa6>
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d87b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b60      	cmp	r3, #96	; 0x60
 8002f6a:	d050      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x11a>
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d877      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b50      	cmp	r3, #80	; 0x50
 8002f72:	d03c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0xfa>
 8002f74:	2b50      	cmp	r3, #80	; 0x50
 8002f76:	d873      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d058      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x13a>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d86f      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b30      	cmp	r3, #48	; 0x30
 8002f82:	d064      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d86b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d060      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d867      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05c      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d05a      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	e062      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6899      	ldr	r1, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f000 f98d 	bl	80032c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	609a      	str	r2, [r3, #8]
      break;
 8002fc6:	e04f      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f000 f976 	bl	80032c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fea:	609a      	str	r2, [r3, #8]
      break;
 8002fec:	e03c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f8ea 	bl	80031d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2150      	movs	r1, #80	; 0x50
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f943 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 800300c:	e02c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f909 	bl	8003232 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2160      	movs	r1, #96	; 0x60
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f933 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 800302c:	e01c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	461a      	mov	r2, r3
 800303c:	f000 f8ca 	bl	80031d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f923 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 800304c:	e00c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f000 f91a 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 800305e:	e003      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e000      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a31      	ldr	r2, [pc, #196]	; (80031bc <TIM_Base_SetConfig+0xe8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <TIM_Base_SetConfig+0xec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <TIM_Base_SetConfig+0xf0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01b      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d017      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <TIM_Base_SetConfig+0xe8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <TIM_Base_SetConfig+0xec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00f      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <TIM_Base_SetConfig+0xf0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <TIM_Base_SetConfig+0xf4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <TIM_Base_SetConfig+0xf8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <TIM_Base_SetConfig+0xfc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 030a 	bic.w	r3, r3, #10
 8003210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003232:	b480      	push	{r7}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0210 	bic.w	r2, r3, #16
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800325c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800326e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f043 0307 	orr.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e050      	b.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336c:	d013      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10c      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40014000 	.word	0x40014000

080033e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f8f6 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fddf 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d17c      	bne.n	80035c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Transmit+0x2c>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e075      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x3e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e06e      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	; 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fe facf 	bl	8001a9c <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x82>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fb1f 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 faef 	bl	8003b88 <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d11d      	bne.n	8003620 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_UART_Receive_IT+0x26>
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e016      	b.n	8003622 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Receive_IT+0x38>
 80035fe:	2302      	movs	r3, #2
 8003600:	e00f      	b.n	8003622 <HAL_UART_Receive_IT+0x58>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	461a      	mov	r2, r3
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fb24 	bl	8003c64 <UART_Start_Receive_IT>
 800361c:	4603      	mov	r3, r0
 800361e:	e000      	b.n	8003622 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0ba      	sub	sp, #232	; 0xe8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800366a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x66>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fc07 	bl	8003e9e <UART_Receive_IT>
      return;
 8003690:	e256      	b.n	8003b40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80de 	beq.w	8003858 <HAL_UART_IRQHandler+0x22c>
 800369c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80d1 	beq.w	8003858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0xae>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xd2>
 80036e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xf6>
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0204 	orr.w	r2, r3, #4
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_UART_IRQHandler+0x126>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800373a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0208 	orr.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 81ed 	beq.w	8003b36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_UART_IRQHandler+0x14e>
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fb92 	bl	8003e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <HAL_UART_IRQHandler+0x17a>
 800379e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d04f      	beq.n	8003846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa9a 	bl	8003ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d141      	bne.n	800383e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3314      	adds	r3, #20
 80037c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1d9      	bne.n	80037ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d013      	beq.n	8003836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <HAL_UART_IRQHandler+0x3dc>)
 8003814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fa9c 	bl	8001d58 <HAL_DMA_Abort_IT>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003830:	4610      	mov	r0, r2
 8003832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e00e      	b.n	8003854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f990 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	e00a      	b.n	8003854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f98c 	bl	8003b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	e006      	b.n	8003854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f988 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003852:	e170      	b.n	8003b36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	bf00      	nop
    return;
 8003856:	e16e      	b.n	8003b36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 814a 	bne.w	8003af6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8143 	beq.w	8003af6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 813c 	beq.w	8003af6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	f040 80b4 	bne.w	8003a0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8140 	beq.w	8003b3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038c2:	429a      	cmp	r2, r3
 80038c4:	f080 8139 	bcs.w	8003b3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	f000 8088 	beq.w	80039ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800390a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800390e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1d9      	bne.n	80038de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800393a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800394e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e1      	bne.n	800392a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800398a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800398c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80039d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e3      	bne.n	80039ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe f945 	bl	8001c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8b6 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a04:	e099      	b.n	8003b3a <HAL_UART_IRQHandler+0x50e>
 8003a06:	bf00      	nop
 8003a08:	08003da7 	.word	0x08003da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808b 	beq.w	8003b3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a56:	647a      	str	r2, [r7, #68]	; 0x44
 8003a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e3      	bne.n	8003a32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	623b      	str	r3, [r7, #32]
   return(result);
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e3      	bne.n	8003a6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0310 	bic.w	r3, r3, #16
 8003ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ad4:	61fa      	str	r2, [r7, #28]
 8003ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	69b9      	ldr	r1, [r7, #24]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e3      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f83e 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af4:	e023      	b.n	8003b3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_UART_IRQHandler+0x4ea>
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f95d 	bl	8003dce <UART_Transmit_IT>
    return;
 8003b14:	e014      	b.n	8003b40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <HAL_UART_IRQHandler+0x514>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f99d 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 8003b34:	e004      	b.n	8003b40 <HAL_UART_IRQHandler+0x514>
    return;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <HAL_UART_IRQHandler+0x514>
      return;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <HAL_UART_IRQHandler+0x514>
      return;
 8003b3e:	bf00      	nop
  }
}
 8003b40:	37e8      	adds	r7, #232	; 0xe8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop

08003b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b090      	sub	sp, #64	; 0x40
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	e050      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d04c      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba8:	f7fd ff78 	bl	8001a9c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d241      	bcs.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bd8:	637a      	str	r2, [r7, #52]	; 0x34
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0c:	623a      	str	r2, [r7, #32]
 8003c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e00f      	b.n	8003c5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d09f      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3740      	adds	r7, #64	; 0x40
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2222      	movs	r2, #34	; 0x22
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b095      	sub	sp, #84	; 0x54
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d08:	643a      	str	r2, [r7, #64]	; 0x40
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d119      	bne.n	8003d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	613b      	str	r3, [r7, #16]
   return(result);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9a:	bf00      	nop
 8003d9c:	3754      	adds	r7, #84	; 0x54
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff fecb 	bl	8003b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b21      	cmp	r3, #33	; 0x21
 8003de0:	d13e      	bne.n	8003e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d114      	bne.n	8003e16 <UART_Transmit_IT+0x48>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d110      	bne.n	8003e16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]
 8003e14:	e008      	b.n	8003e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6211      	str	r1, [r2, #32]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4619      	mov	r1, r3
 8003e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fe5a 	bl	8003b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08c      	sub	sp, #48	; 0x30
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b22      	cmp	r3, #34	; 0x22
 8003eb0:	f040 80ab 	bne.w	800400a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d117      	bne.n	8003eee <UART_Receive_IT+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e026      	b.n	8003f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d007      	beq.n	8003f12 <UART_Receive_IT+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <UART_Receive_IT+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e008      	b.n	8003f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15a      	bne.n	8004006 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d135      	bne.n	8003ffc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 0310 	bic.w	r3, r3, #16
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	623a      	str	r2, [r7, #32]
 8003fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	69f9      	ldr	r1, [r7, #28]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d10a      	bne.n	8003fee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fdbb 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 8003ffa:	e002      	b.n	8004002 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fc ffd3 	bl	8000fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e002      	b.n	800400c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3730      	adds	r7, #48	; 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b0c0      	sub	sp, #256	; 0x100
 800401a:	af00      	add	r7, sp, #0
 800401c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	ea40 0301 	orr.w	r3, r0, r1
 800403c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406c:	f021 010c 	bic.w	r1, r1, #12
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	6999      	ldr	r1, [r3, #24]
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	ea40 0301 	orr.w	r3, r0, r1
 800409a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <UART_SetConfig+0x2cc>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <UART_SetConfig+0xa0>
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8d      	ldr	r3, [pc, #564]	; (80042e4 <UART_SetConfig+0x2d0>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7fe fcc4 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80040b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040bc:	e003      	b.n	80040c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7fe fcab 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80040c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	f040 810c 	bne.w	80042ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ee:	415b      	adcs	r3, r3
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f6:	4621      	mov	r1, r4
 80040f8:	eb12 0801 	adds.w	r8, r2, r1
 80040fc:	4629      	mov	r1, r5
 80040fe:	eb43 0901 	adc.w	r9, r3, r1
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004116:	4690      	mov	r8, r2
 8004118:	4699      	mov	r9, r3
 800411a:	4623      	mov	r3, r4
 800411c:	eb18 0303 	adds.w	r3, r8, r3
 8004120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004124:	462b      	mov	r3, r5
 8004126:	eb49 0303 	adc.w	r3, r9, r3
 800412a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800413e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004142:	460b      	mov	r3, r1
 8004144:	18db      	adds	r3, r3, r3
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
 8004148:	4613      	mov	r3, r2
 800414a:	eb42 0303 	adc.w	r3, r2, r3
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004158:	f7fc fd2e 	bl	8000bb8 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	64b9      	str	r1, [r7, #72]	; 0x48
 8004184:	415b      	adcs	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800418c:	4641      	mov	r1, r8
 800418e:	eb12 0a01 	adds.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb43 0b01 	adc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	4692      	mov	sl, r2
 80041ae:	469b      	mov	fp, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	eb1a 0303 	adds.w	r3, sl, r3
 80041b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb4b 0303 	adc.w	r3, fp, r3
 80041c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041d8:	460b      	mov	r3, r1
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
 80041de:	4613      	mov	r3, r2
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ee:	f7fc fce3 	bl	8000bb8 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <UART_SetConfig+0x2d4>)
 80041fa:	fba3 2301 	umull	r2, r3, r3, r1
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004210:	fba3 2302 	umull	r2, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800422c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	63b9      	str	r1, [r7, #56]	; 0x38
 8004238:	415b      	adcs	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6339      	str	r1, [r7, #48]	; 0x30
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800428c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004294:	460b      	mov	r3, r1
 8004296:	18db      	adds	r3, r3, r3
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	4613      	mov	r3, r2
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042aa:	f7fc fc85 	bl	8000bb8 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0207 	and.w	r2, r3, #7
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4422      	add	r2, r4
 80042da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042dc:	e105      	b.n	80044ea <UART_SetConfig+0x4d6>
 80042de:	bf00      	nop
 80042e0:	40011000 	.word	0x40011000
 80042e4:	40011400 	.word	0x40011400
 80042e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	1891      	adds	r1, r2, r2
 8004304:	6239      	str	r1, [r7, #32]
 8004306:	415b      	adcs	r3, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430e:	4641      	mov	r1, r8
 8004310:	1854      	adds	r4, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb43 0501 	adc.w	r5, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004334:	464b      	mov	r3, r9
 8004336:	eb45 0303 	adc.w	r3, r5, r3
 800433a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435a:	4629      	mov	r1, r5
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004364:	4621      	mov	r1, r4
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800436c:	f7fc fc24 	bl	8000bb8 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011c      	lsls	r4, r3, #4
 800437e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800438c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	61b9      	str	r1, [r7, #24]
 8004398:	415b      	adcs	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	6139      	str	r1, [r7, #16]
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d4:	464b      	mov	r3, r9
 80043d6:	460a      	mov	r2, r1
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043f8:	4649      	mov	r1, r9
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004402:	4641      	mov	r1, r8
 8004404:	008a      	lsls	r2, r1, #2
 8004406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440a:	f7fc fbd5 	bl	8000bb8 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2164      	movs	r1, #100	; 0x64
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	3332      	adds	r3, #50	; 0x32
 8004426:	4a34      	ldr	r2, [pc, #208]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004432:	441c      	add	r4, r3
 8004434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004438:	2200      	movs	r2, #0
 800443a:	673b      	str	r3, [r7, #112]	; 0x70
 800443c:	677a      	str	r2, [r7, #116]	; 0x74
 800443e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004442:	4642      	mov	r2, r8
 8004444:	464b      	mov	r3, r9
 8004446:	1891      	adds	r1, r2, r2
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	415b      	adcs	r3, r3
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004452:	4641      	mov	r1, r8
 8004454:	1851      	adds	r1, r2, r1
 8004456:	6039      	str	r1, [r7, #0]
 8004458:	4649      	mov	r1, r9
 800445a:	414b      	adcs	r3, r1
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800446a:	4659      	mov	r1, fp
 800446c:	00cb      	lsls	r3, r1, #3
 800446e:	4651      	mov	r1, sl
 8004470:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004474:	4651      	mov	r1, sl
 8004476:	00ca      	lsls	r2, r1, #3
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	4603      	mov	r3, r0
 800447e:	4642      	mov	r2, r8
 8004480:	189b      	adds	r3, r3, r2
 8004482:	66bb      	str	r3, [r7, #104]	; 0x68
 8004484:	464b      	mov	r3, r9
 8004486:	460a      	mov	r2, r1
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	663b      	str	r3, [r7, #96]	; 0x60
 8004498:	667a      	str	r2, [r7, #100]	; 0x64
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044a6:	4649      	mov	r1, r9
 80044a8:	008b      	lsls	r3, r1, #2
 80044aa:	4641      	mov	r1, r8
 80044ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b0:	4641      	mov	r1, r8
 80044b2:	008a      	lsls	r2, r1, #2
 80044b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044b8:	f7fc fb7e 	bl	8000bb8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2164      	movs	r1, #100	; 0x64
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4422      	add	r2, r4
 80044e8:	609a      	str	r2, [r3, #8]
}
 80044ea:	bf00      	nop
 80044ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	51eb851f 	.word	0x51eb851f

080044fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800450a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450e:	2b84      	cmp	r3, #132	; 0x84
 8004510:	d005      	beq.n	800451e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004512:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	3303      	adds	r3, #3
 800451c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004530:	f000 fade 	bl	8004af0 <vTaskStartScheduler>
  
  return osOK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}

0800453a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800453a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453c:	b089      	sub	sp, #36	; 0x24
 800453e:	af04      	add	r7, sp, #16
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <osThreadCreate+0x54>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01c      	beq.n	800458e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685c      	ldr	r4, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681d      	ldr	r5, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691e      	ldr	r6, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ffc8 	bl	80044fc <makeFreeRtosPriority>
 800456c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	9100      	str	r1, [sp, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4632      	mov	r2, r6
 8004580:	4629      	mov	r1, r5
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f8ed 	bl	8004762 <xTaskCreateStatic>
 8004588:	4603      	mov	r3, r0
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e01c      	b.n	80045c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685c      	ldr	r4, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800459a:	b29e      	uxth	r6, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ffaa 	bl	80044fc <makeFreeRtosPriority>
 80045a8:	4602      	mov	r2, r0
 80045aa:	f107 030c 	add.w	r3, r7, #12
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	9200      	str	r2, [sp, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4632      	mov	r2, r6
 80045b6:	4629      	mov	r1, r5
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f92f 	bl	800481c <xTaskCreate>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045c8:	68fb      	ldr	r3, [r7, #12]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <osDelay+0x16>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	e000      	b.n	80045ea <osDelay+0x18>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fa4c 	bl	8004a88 <vTaskDelay>
  
  return osOK;
 80045f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f103 0208 	add.w	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f103 0208 	add.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f103 0208 	add.w	r2, r3, #8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d103      	bne.n	80046bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e00c      	b.n	80046d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3308      	adds	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e002      	b.n	80046ca <vListInsert+0x2e>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d2f6      	bcs.n	80046c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
 8004724:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6852      	ldr	r2, [r2, #4]
 800472e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d103      	bne.n	8004742 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004762:	b580      	push	{r7, lr}
 8004764:	b08e      	sub	sp, #56	; 0x38
 8004766:	af04      	add	r7, sp, #16
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61fb      	str	r3, [r7, #28]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047a8:	2354      	movs	r3, #84	; 0x54
 80047aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b54      	cmp	r3, #84	; 0x54
 80047b0:	d00a      	beq.n	80047c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61bb      	str	r3, [r7, #24]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01e      	beq.n	800480e <xTaskCreateStatic+0xac>
 80047d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01b      	beq.n	800480e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047e8:	2300      	movs	r3, #0
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f850 	bl	80048a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004808:	f000 f8d4 	bl	80049b4 <prvAddNewTaskToReadyList>
 800480c:	e001      	b.n	8004812 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004812:	697b      	ldr	r3, [r7, #20]
	}
 8004814:	4618      	mov	r0, r3
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af04      	add	r7, sp, #16
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fec9 	bl	80055c8 <pvPortMalloc>
 8004836:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00e      	beq.n	800485c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800483e:	2054      	movs	r0, #84	; 0x54
 8004840:	f000 fec2 	bl	80055c8 <pvPortMalloc>
 8004844:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
 8004852:	e005      	b.n	8004860 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004854:	6978      	ldr	r0, [r7, #20]
 8004856:	f000 ff83 	bl	8005760 <vPortFree>
 800485a:	e001      	b.n	8004860 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d017      	beq.n	8004896 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	2300      	movs	r3, #0
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f80e 	bl	80048a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800488a:	69f8      	ldr	r0, [r7, #28]
 800488c:	f000 f892 	bl	80049b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004890:	2301      	movs	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e002      	b.n	800489c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800489c:	69bb      	ldr	r3, [r7, #24]
	}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b088      	sub	sp, #32
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048be:	3b01      	subs	r3, #1
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <prvInitialiseNewTask+0x48>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	617b      	str	r3, [r7, #20]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01f      	beq.n	8004934 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e012      	b.n	8004920 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	7819      	ldrb	r1, [r3, #0]
 8004902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	3334      	adds	r3, #52	; 0x34
 800490a:	460a      	mov	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3301      	adds	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d9e9      	bls.n	80048fa <prvInitialiseNewTask+0x54>
 8004926:	e000      	b.n	800492a <prvInitialiseNewTask+0x84>
			{
				break;
 8004928:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004932:	e003      	b.n	800493c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2b06      	cmp	r3, #6
 8004940:	d901      	bls.n	8004946 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004942:	2306      	movs	r3, #6
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2200      	movs	r2, #0
 8004956:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fe6c 	bl	800463a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	3318      	adds	r3, #24
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fe67 	bl	800463a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	f1c3 0207 	rsb	r2, r3, #7
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004980:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	2200      	movs	r2, #0
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	69b8      	ldr	r0, [r7, #24]
 8004996:	f000 fc05 	bl	80051a4 <pxPortInitialiseStack>
 800499a:	4602      	mov	r2, r0
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049bc:	f000 fd22 	bl	8005404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049c0:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049d2:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <prvAddNewTaskToReadyList+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d110      	bne.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049e0:	f000 fabc 	bl	8004f5c <prvInitialiseTaskLists>
 80049e4:	e00d      	b.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049e6:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <prvAddNewTaskToReadyList+0xc0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d802      	bhi.n	8004a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <prvAddNewTaskToReadyList+0xc4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <prvAddNewTaskToReadyList+0xc4>)
 8004a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <prvAddNewTaskToReadyList+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <prvAddNewTaskToReadyList+0xc8>)
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <prvAddNewTaskToReadyList+0xcc>)
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7ff fe0d 	bl	8004654 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a3a:	f000 fd13 	bl	8005464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <prvAddNewTaskToReadyList+0xc0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00e      	beq.n	8004a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <prvAddNewTaskToReadyList+0xbc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d207      	bcs.n	8004a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <prvAddNewTaskToReadyList+0xd0>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000069c 	.word	0x2000069c
 8004a70:	2000059c 	.word	0x2000059c
 8004a74:	200006a8 	.word	0x200006a8
 8004a78:	200006b8 	.word	0x200006b8
 8004a7c:	200006a4 	.word	0x200006a4
 8004a80:	200005a0 	.word	0x200005a0
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <vTaskDelay+0x60>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <vTaskDelay+0x30>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ab8:	f000 f87a 	bl	8004bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004abc:	2100      	movs	r1, #0
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fb0a 	bl	80050d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ac4:	f000 f882 	bl	8004bcc <xTaskResumeAll>
 8004ac8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <vTaskDelay+0x64>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	200006c4 	.word	0x200006c4
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004afe:	463a      	mov	r2, r7
 8004b00:	1d39      	adds	r1, r7, #4
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fc f9d8 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	9202      	str	r2, [sp, #8]
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	2300      	movs	r3, #0
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	491e      	ldr	r1, [pc, #120]	; (8004b98 <vTaskStartScheduler+0xa8>)
 8004b20:	481e      	ldr	r0, [pc, #120]	; (8004b9c <vTaskStartScheduler+0xac>)
 8004b22:	f7ff fe1e 	bl	8004762 <xTaskCreateStatic>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <vTaskStartScheduler+0xb0>)
 8004b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <vTaskStartScheduler+0xb0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e001      	b.n	8004b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d116      	bne.n	8004b72 <vTaskStartScheduler+0x82>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	613b      	str	r3, [r7, #16]
}
 8004b56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <vTaskStartScheduler+0xb4>)
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <vTaskStartScheduler+0xb8>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <vTaskStartScheduler+0xbc>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b6c:	f000 fba8 	bl	80052c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b70:	e00e      	b.n	8004b90 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d10a      	bne.n	8004b90 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60fb      	str	r3, [r7, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vTaskStartScheduler+0x9e>
}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08008b78 	.word	0x08008b78
 8004b9c:	08004f2d 	.word	0x08004f2d
 8004ba0:	200006c0 	.word	0x200006c0
 8004ba4:	200006bc 	.word	0x200006bc
 8004ba8:	200006a8 	.word	0x200006a8
 8004bac:	200006a0 	.word	0x200006a0

08004bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <vTaskSuspendAll+0x18>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a03      	ldr	r2, [pc, #12]	; (8004bc8 <vTaskSuspendAll+0x18>)
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	200006c4 	.word	0x200006c4

08004bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	603b      	str	r3, [r7, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bf8:	f000 fc04 	bl	8005404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bfc:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	4a37      	ldr	r2, [pc, #220]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d161      	bne.n	8004cd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c0e:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <xTaskResumeAll+0x118>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d05d      	beq.n	8004cd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c16:	e02e      	b.n	8004c76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c18:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <xTaskResumeAll+0x11c>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3318      	adds	r3, #24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fd72 	bl	800470e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd6d 	bl	800470e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	2201      	movs	r2, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <xTaskResumeAll+0x120>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <xTaskResumeAll+0x120>)
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <xTaskResumeAll+0x124>)
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7ff fcf9 	bl	8004654 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <xTaskResumeAll+0x128>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <xTaskResumeAll+0x11c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1cc      	bne.n	8004c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c84:	f000 fa08 	bl	8005098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c88:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <xTaskResumeAll+0x130>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c94:	f000 f836 	bl	8004d04 <xTaskIncrementTick>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c9e:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f1      	bne.n	8004c94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <xTaskResumeAll+0x130>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <xTaskResumeAll+0x134>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cd2:	f000 fbc7 	bl	8005464 <vPortExitCritical>

	return xAlreadyYielded;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	200006c4 	.word	0x200006c4
 8004ce4:	2000069c 	.word	0x2000069c
 8004ce8:	2000065c 	.word	0x2000065c
 8004cec:	200006a4 	.word	0x200006a4
 8004cf0:	200005a0 	.word	0x200005a0
 8004cf4:	2000059c 	.word	0x2000059c
 8004cf8:	200006b0 	.word	0x200006b0
 8004cfc:	200006ac 	.word	0x200006ac
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <xTaskIncrementTick+0x144>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 808e 	bne.w	8004e34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d18:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <xTaskIncrementTick+0x148>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d20:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <xTaskIncrementTick+0x148>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d120      	bne.n	8004d6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d2c:	4b48      	ldr	r3, [pc, #288]	; (8004e50 <xTaskIncrementTick+0x14c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <xTaskIncrementTick+0x48>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	603b      	str	r3, [r7, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <xTaskIncrementTick+0x46>
 8004d4c:	4b40      	ldr	r3, [pc, #256]	; (8004e50 <xTaskIncrementTick+0x14c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	4b40      	ldr	r3, [pc, #256]	; (8004e54 <xTaskIncrementTick+0x150>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3e      	ldr	r2, [pc, #248]	; (8004e50 <xTaskIncrementTick+0x14c>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4a3e      	ldr	r2, [pc, #248]	; (8004e54 <xTaskIncrementTick+0x150>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <xTaskIncrementTick+0x154>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <xTaskIncrementTick+0x154>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	f000 f995 	bl	8005098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <xTaskIncrementTick+0x158>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d348      	bcc.n	8004e0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <xTaskIncrementTick+0x14c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <xTaskIncrementTick+0x158>)
 8004d84:	f04f 32ff 	mov.w	r2, #4294967295
 8004d88:	601a      	str	r2, [r3, #0]
					break;
 8004d8a:	e03e      	b.n	8004e0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8c:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <xTaskIncrementTick+0x14c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d203      	bcs.n	8004dac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004da4:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <xTaskIncrementTick+0x158>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004daa:	e02e      	b.n	8004e0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fcac 	bl	800470e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fca3 	bl	800470e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	2201      	movs	r2, #1
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <xTaskIncrementTick+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <xTaskIncrementTick+0x15c>)
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <xTaskIncrementTick+0x160>)
 8004de8:	441a      	add	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7ff fc2f 	bl	8004654 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <xTaskIncrementTick+0x164>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3b9      	bcc.n	8004d78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e08:	e7b6      	b.n	8004d78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <xTaskIncrementTick+0x164>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4914      	ldr	r1, [pc, #80]	; (8004e64 <xTaskIncrementTick+0x160>)
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d901      	bls.n	8004e26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <xTaskIncrementTick+0x168>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e004      	b.n	8004e3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <xTaskIncrementTick+0x16c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <xTaskIncrementTick+0x16c>)
 8004e3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	200006c4 	.word	0x200006c4
 8004e4c:	200006a0 	.word	0x200006a0
 8004e50:	20000654 	.word	0x20000654
 8004e54:	20000658 	.word	0x20000658
 8004e58:	200006b4 	.word	0x200006b4
 8004e5c:	200006bc 	.word	0x200006bc
 8004e60:	200006a4 	.word	0x200006a4
 8004e64:	200005a0 	.word	0x200005a0
 8004e68:	2000059c 	.word	0x2000059c
 8004e6c:	200006b0 	.word	0x200006b0
 8004e70:	200006ac 	.word	0x200006ac

08004e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e7a:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <vTaskSwitchContext+0xa4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <vTaskSwitchContext+0xa8>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e88:	e03f      	b.n	8004f0a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <vTaskSwitchContext+0xa8>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e90:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <vTaskSwitchContext+0xac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e9e:	7afb      	ldrb	r3, [r7, #11]
 8004ea0:	f1c3 031f 	rsb	r3, r3, #31
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	491f      	ldr	r1, [pc, #124]	; (8004f24 <vTaskSwitchContext+0xb0>)
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	607b      	str	r3, [r7, #4]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <vTaskSwitchContext+0x5a>
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <vTaskSwitchContext+0xb0>)
 8004edc:	4413      	add	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d104      	bne.n	8004f00 <vTaskSwitchContext+0x8c>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <vTaskSwitchContext+0xb4>)
 8004f08:	6013      	str	r3, [r2, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200006c4 	.word	0x200006c4
 8004f1c:	200006b0 	.word	0x200006b0
 8004f20:	200006a4 	.word	0x200006a4
 8004f24:	200005a0 	.word	0x200005a0
 8004f28:	2000059c 	.word	0x2000059c

08004f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f34:	f000 f852 	bl	8004fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <prvIdleTask+0x28>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d9f9      	bls.n	8004f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <prvIdleTask+0x2c>)
 8004f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f50:	e7f0      	b.n	8004f34 <prvIdleTask+0x8>
 8004f52:	bf00      	nop
 8004f54:	200005a0 	.word	0x200005a0
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	e00c      	b.n	8004f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <prvInitialiseTaskLists+0x60>)
 8004f74:	4413      	add	r3, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fb3f 	bl	80045fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d9ef      	bls.n	8004f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f88:	480d      	ldr	r0, [pc, #52]	; (8004fc0 <prvInitialiseTaskLists+0x64>)
 8004f8a:	f7ff fb36 	bl	80045fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f8e:	480d      	ldr	r0, [pc, #52]	; (8004fc4 <prvInitialiseTaskLists+0x68>)
 8004f90:	f7ff fb33 	bl	80045fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f94:	480c      	ldr	r0, [pc, #48]	; (8004fc8 <prvInitialiseTaskLists+0x6c>)
 8004f96:	f7ff fb30 	bl	80045fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f9a:	480c      	ldr	r0, [pc, #48]	; (8004fcc <prvInitialiseTaskLists+0x70>)
 8004f9c:	f7ff fb2d 	bl	80045fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fa0:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <prvInitialiseTaskLists+0x74>)
 8004fa2:	f7ff fb2a 	bl	80045fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <prvInitialiseTaskLists+0x78>)
 8004fa8:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <prvInitialiseTaskLists+0x64>)
 8004faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <prvInitialiseTaskLists+0x7c>)
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <prvInitialiseTaskLists+0x68>)
 8004fb0:	601a      	str	r2, [r3, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200005a0 	.word	0x200005a0
 8004fc0:	2000062c 	.word	0x2000062c
 8004fc4:	20000640 	.word	0x20000640
 8004fc8:	2000065c 	.word	0x2000065c
 8004fcc:	20000670 	.word	0x20000670
 8004fd0:	20000688 	.word	0x20000688
 8004fd4:	20000654 	.word	0x20000654
 8004fd8:	20000658 	.word	0x20000658

08004fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fe2:	e019      	b.n	8005018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fe4:	f000 fa0e 	bl	8005404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <prvCheckTasksWaitingTermination+0x50>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fb8a 	bl	800470e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <prvCheckTasksWaitingTermination+0x54>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <prvCheckTasksWaitingTermination+0x54>)
 8005002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <prvCheckTasksWaitingTermination+0x58>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <prvCheckTasksWaitingTermination+0x58>)
 800500c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800500e:	f000 fa29 	bl	8005464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f810 	bl	8005038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <prvCheckTasksWaitingTermination+0x58>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e1      	bne.n	8004fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000670 	.word	0x20000670
 8005030:	2000069c 	.word	0x2000069c
 8005034:	20000684 	.word	0x20000684

08005038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005046:	2b00      	cmp	r3, #0
 8005048:	d108      	bne.n	800505c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb86 	bl	8005760 <vPortFree>
				vPortFree( pxTCB );
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb83 	bl	8005760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800505a:	e018      	b.n	800508e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005062:	2b01      	cmp	r3, #1
 8005064:	d103      	bne.n	800506e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fb7a 	bl	8005760 <vPortFree>
	}
 800506c:	e00f      	b.n	800508e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005074:	2b02      	cmp	r3, #2
 8005076:	d00a      	beq.n	800508e <prvDeleteTCB+0x56>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvDeleteTCB+0x54>
	}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <prvResetNextTaskUnblockTime+0x38>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <prvResetNextTaskUnblockTime+0x3c>)
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050b0:	e008      	b.n	80050c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <prvResetNextTaskUnblockTime+0x38>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <prvResetNextTaskUnblockTime+0x3c>)
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000654 	.word	0x20000654
 80050d4:	200006bc 	.word	0x200006bc

080050d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fb0d 	bl	800470e <uxListRemove>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	2201      	movs	r2, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <prvAddCurrentTaskToDelayedList+0xb8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4013      	ands	r3, r2
 800510e:	4a20      	ldr	r2, [pc, #128]	; (8005190 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005110:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d10a      	bne.n	8005130 <prvAddCurrentTaskToDelayedList+0x58>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3304      	adds	r3, #4
 8005126:	4619      	mov	r1, r3
 8005128:	481a      	ldr	r0, [pc, #104]	; (8005194 <prvAddCurrentTaskToDelayedList+0xbc>)
 800512a:	f7ff fa93 	bl	8004654 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800512e:	e026      	b.n	800517e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d209      	bcs.n	800515c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <prvAddCurrentTaskToDelayedList+0xc0>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7ff faa1 	bl	800469c <vListInsert>
}
 800515a:	e010      	b.n	800517e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <prvAddCurrentTaskToDelayedList+0xc4>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7ff fa97 	bl	800469c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	d202      	bcs.n	800517e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6013      	str	r3, [r2, #0]
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	200006a0 	.word	0x200006a0
 800518c:	2000059c 	.word	0x2000059c
 8005190:	200006a4 	.word	0x200006a4
 8005194:	20000688 	.word	0x20000688
 8005198:	20000658 	.word	0x20000658
 800519c:	20000654 	.word	0x20000654
 80051a0:	200006bc 	.word	0x200006bc

080051a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b04      	subs	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b04      	subs	r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0201 	bic.w	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051d4:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <pxPortInitialiseStack+0x64>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b14      	subs	r3, #20
 80051de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f06f 0202 	mvn.w	r2, #2
 80051f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b20      	subs	r3, #32
 80051f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	0800520d 	.word	0x0800520d

0800520c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <prvTaskExitError+0x54>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d00a      	beq.n	8005236 <prvTaskExitError+0x2a>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <prvTaskExitError+0x28>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800524a:	bf00      	nop
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0fc      	beq.n	800524c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000018 	.word	0x20000018
	...

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	4770      	bx	lr
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst2>:
 8005290:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005298:	4808      	ldr	r0, [pc, #32]	; (80052bc <prvPortStartFirstTask+0x24>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8814 	msr	CONTROL, r0
 80052aa:	b662      	cpsie	i
 80052ac:	b661      	cpsie	f
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	df00      	svc	0
 80052b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ba:	bf00      	nop
 80052bc:	e000ed08 	.word	0xe000ed08

080052c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052c6:	4b46      	ldr	r3, [pc, #280]	; (80053e0 <xPortStartScheduler+0x120>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a46      	ldr	r2, [pc, #280]	; (80053e4 <xPortStartScheduler+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10a      	bne.n	80052e6 <xPortStartScheduler+0x26>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <xPortStartScheduler+0x120>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3f      	ldr	r2, [pc, #252]	; (80053e8 <xPortStartScheduler+0x128>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10a      	bne.n	8005306 <xPortStartScheduler+0x46>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005306:	4b39      	ldr	r3, [pc, #228]	; (80053ec <xPortStartScheduler+0x12c>)
 8005308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <xPortStartScheduler+0x130>)
 800532c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <xPortStartScheduler+0x134>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005334:	e009      	b.n	800534a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005336:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <xPortStartScheduler+0x134>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3b01      	subs	r3, #1
 800533c:	4a2d      	ldr	r2, [pc, #180]	; (80053f4 <xPortStartScheduler+0x134>)
 800533e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
 8005348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d0ef      	beq.n	8005336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <xPortStartScheduler+0x134>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1c3 0307 	rsb	r3, r3, #7
 800535e:	2b04      	cmp	r3, #4
 8005360:	d00a      	beq.n	8005378 <xPortStartScheduler+0xb8>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005378:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <xPortStartScheduler+0x134>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <xPortStartScheduler+0x134>)
 8005380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005382:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <xPortStartScheduler+0x134>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <xPortStartScheduler+0x134>)
 800538c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005396:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <xPortStartScheduler+0x138>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <xPortStartScheduler+0x138>)
 800539c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <xPortStartScheduler+0x138>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <xPortStartScheduler+0x138>)
 80053a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053ae:	f000 f8dd 	bl	800556c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <xPortStartScheduler+0x13c>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053b8:	f000 f8fc 	bl	80055b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <xPortStartScheduler+0x140>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <xPortStartScheduler+0x140>)
 80053c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053c8:	f7ff ff66 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053cc:	f7ff fd52 	bl	8004e74 <vTaskSwitchContext>
	prvTaskExitError();
 80053d0:	f7ff ff1c 	bl	800520c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	410fc271 	.word	0x410fc271
 80053e8:	410fc270 	.word	0x410fc270
 80053ec:	e000e400 	.word	0xe000e400
 80053f0:	200006c8 	.word	0x200006c8
 80053f4:	200006cc 	.word	0x200006cc
 80053f8:	e000ed20 	.word	0xe000ed20
 80053fc:	20000018 	.word	0x20000018
 8005400:	e000ef34 	.word	0xe000ef34

08005404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	607b      	str	r3, [r7, #4]
}
 800541c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <vPortEnterCritical+0x58>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	4a0d      	ldr	r2, [pc, #52]	; (800545c <vPortEnterCritical+0x58>)
 8005426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <vPortEnterCritical+0x58>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10f      	bne.n	8005450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <vPortEnterCritical+0x5c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <vPortEnterCritical+0x4c>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	603b      	str	r3, [r7, #0]
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <vPortEnterCritical+0x4a>
	}
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000018 	.word	0x20000018
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <vPortExitCritical+0x50>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <vPortExitCritical+0x24>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <vPortExitCritical+0x50>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3b01      	subs	r3, #1
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <vPortExitCritical+0x50>)
 8005490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <vPortExitCritical+0x50>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d105      	bne.n	80054a6 <vPortExitCritical+0x42>
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000018 	.word	0x20000018
	...

080054c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054c0:	f3ef 8009 	mrs	r0, PSP
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <pxCurrentTCBConst>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f01e 0f10 	tst.w	lr, #16
 80054d0:	bf08      	it	eq
 80054d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054e4:	f380 8811 	msr	BASEPRI, r0
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f7ff fcc0 	bl	8004e74 <vTaskSwitchContext>
 80054f4:	f04f 0000 	mov.w	r0, #0
 80054f8:	f380 8811 	msr	BASEPRI, r0
 80054fc:	bc09      	pop	{r0, r3}
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	6808      	ldr	r0, [r1, #0]
 8005502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005506:	f01e 0f10 	tst.w	lr, #16
 800550a:	bf08      	it	eq
 800550c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005510:	f380 8809 	msr	PSP, r0
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst>:
 8005520:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
}
 8005540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005542:	f7ff fbdf 	bl	8004d04 <xTaskIncrementTick>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <SysTick_Handler+0x40>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f383 8811 	msr	BASEPRI, r3
}
 800555e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortSetupTimerInterrupt+0x34>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <vPortSetupTimerInterrupt+0x38>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <vPortSetupTimerInterrupt+0x3c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <vPortSetupTimerInterrupt+0x40>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	099b      	lsrs	r3, r3, #6
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <vPortSetupTimerInterrupt+0x44>)
 800558a:	3b01      	subs	r3, #1
 800558c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <vPortSetupTimerInterrupt+0x34>)
 8005590:	2207      	movs	r2, #7
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000e010 	.word	0xe000e010
 80055a4:	e000e018 	.word	0xe000e018
 80055a8:	2000000c 	.word	0x2000000c
 80055ac:	10624dd3 	.word	0x10624dd3
 80055b0:	e000e014 	.word	0xe000e014

080055b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055c4 <vPortEnableVFP+0x10>
 80055b8:	6801      	ldr	r1, [r0, #0]
 80055ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055be:	6001      	str	r1, [r0, #0]
 80055c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055c2:	bf00      	nop
 80055c4:	e000ed88 	.word	0xe000ed88

080055c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055d4:	f7ff faec 	bl	8004bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <pvPortMalloc+0x180>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055e0:	f000 f920 	bl	8005824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <pvPortMalloc+0x184>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 8093 	bne.w	8005718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01d      	beq.n	8005634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055f8:	2208      	movs	r2, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f023 0307 	bic.w	r3, r3, #7
 8005610:	3308      	adds	r3, #8
 8005612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <pvPortMalloc+0x6c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	617b      	str	r3, [r7, #20]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d06e      	beq.n	8005718 <pvPortMalloc+0x150>
 800563a:	4b45      	ldr	r3, [pc, #276]	; (8005750 <pvPortMalloc+0x188>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d869      	bhi.n	8005718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005644:	4b43      	ldr	r3, [pc, #268]	; (8005754 <pvPortMalloc+0x18c>)
 8005646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005648:	4b42      	ldr	r3, [pc, #264]	; (8005754 <pvPortMalloc+0x18c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564e:	e004      	b.n	800565a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <pvPortMalloc+0xa4>
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f1      	bne.n	8005650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800566c:	4b36      	ldr	r3, [pc, #216]	; (8005748 <pvPortMalloc+0x180>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	429a      	cmp	r2, r3
 8005674:	d050      	beq.n	8005718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2208      	movs	r2, #8
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	2308      	movs	r3, #8
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	429a      	cmp	r2, r3
 8005696:	d91f      	bls.n	80056d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <pvPortMalloc+0xf8>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	613b      	str	r3, [r7, #16]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056d2:	69b8      	ldr	r0, [r7, #24]
 80056d4:	f000 f908 	bl	80058e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <pvPortMalloc+0x188>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <pvPortMalloc+0x188>)
 80056e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <pvPortMalloc+0x188>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <pvPortMalloc+0x190>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <pvPortMalloc+0x188>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <pvPortMalloc+0x190>)
 80056f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <pvPortMalloc+0x184>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	431a      	orrs	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <pvPortMalloc+0x194>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <pvPortMalloc+0x194>)
 8005716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005718:	f7ff fa58 	bl	8004bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <pvPortMalloc+0x174>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60fb      	str	r3, [r7, #12]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <pvPortMalloc+0x172>
	return pvReturn;
 800573c:	69fb      	ldr	r3, [r7, #28]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200042d8 	.word	0x200042d8
 800574c:	200042ec 	.word	0x200042ec
 8005750:	200042dc 	.word	0x200042dc
 8005754:	200042d0 	.word	0x200042d0
 8005758:	200042e0 	.word	0x200042e0
 800575c:	200042e4 	.word	0x200042e4

08005760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04d      	beq.n	800580e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005772:	2308      	movs	r3, #8
 8005774:	425b      	negs	r3, r3
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <vPortFree+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <vPortFree+0x44>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60fb      	str	r3, [r7, #12]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <vPortFree+0x62>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <vPortFree+0xb8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01e      	beq.n	800580e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11a      	bne.n	800580e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <vPortFree+0xb8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057e8:	f7ff f9e2 	bl	8004bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <vPortFree+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <vPortFree+0xbc>)
 80057f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057fa:	6938      	ldr	r0, [r7, #16]
 80057fc:	f000 f874 	bl	80058e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <vPortFree+0xc0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <vPortFree+0xc0>)
 8005808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800580a:	f7ff f9df 	bl	8004bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200042ec 	.word	0x200042ec
 800581c:	200042dc 	.word	0x200042dc
 8005820:	200042e8 	.word	0x200042e8

08005824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800582a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800582e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005830:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <prvHeapInit+0xac>)
 8005832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3307      	adds	r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <prvHeapInit+0xac>)
 8005854:	4413      	add	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <prvHeapInit+0xb0>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <prvHeapInit+0xb0>)
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005870:	2208      	movs	r2, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <prvHeapInit+0xb4>)
 8005884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <prvHeapInit+0xb4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <prvHeapInit+0xb4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <prvHeapInit+0xb4>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <prvHeapInit+0xb8>)
 80058b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <prvHeapInit+0xbc>)
 80058ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <prvHeapInit+0xc0>)
 80058be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	200006d0 	.word	0x200006d0
 80058d4:	200042d0 	.word	0x200042d0
 80058d8:	200042d8 	.word	0x200042d8
 80058dc:	200042e0 	.word	0x200042e0
 80058e0:	200042dc 	.word	0x200042dc
 80058e4:	200042ec 	.word	0x200042ec

080058e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <prvInsertBlockIntoFreeList+0xac>)
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <prvInsertBlockIntoFreeList+0x14>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d8f7      	bhi.n	80058f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d108      	bne.n	800592a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	441a      	add	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d118      	bne.n	8005970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <prvInsertBlockIntoFreeList+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d00d      	beq.n	8005966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	441a      	add	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e008      	b.n	8005978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvInsertBlockIntoFreeList+0xb0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e003      	b.n	8005978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d002      	beq.n	8005986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	200042d0 	.word	0x200042d0
 8005998:	200042d8 	.word	0x200042d8

0800599c <microDelay>:
static float _speed = 0.0;
static float _acceleration = 0.0;
static float _maxSpeed = 0.0;
static long _stepInterval = 0;

void microDelay(uint16_t delay) {
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <microDelay+0x30>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80059ae:	bf00      	nop
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <microDelay+0x30>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3f9      	bcc.n	80059b0 <microDelay+0x14>
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	200004b8 	.word	0x200004b8

080059d0 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 80059da:	4a04      	ldr	r2, [pc, #16]	; (80059ec <setAcceleration+0x1c>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	200042f4 	.word	0x200042f4

080059f0 <setRPM>:

void setRPM(float rpm, int steps) {
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80059fa:	6038      	str	r0, [r7, #0]
    float speed = (rpm * (float)steps) / 60;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a0e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005a2c <setRPM+0x3c>
 8005a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a16:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 8005a1a:	4a05      	ldr	r2, [pc, #20]	; (8005a30 <setRPM+0x40>)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6013      	str	r3, [r2, #0]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	42700000 	.word	0x42700000
 8005a30:	200042f8 	.word	0x200042f8
 8005a34:	00000000 	.word	0x00000000

08005a38 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 8005a3c:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a3e:	ed93 7a00 	vldr	s14, [r3]
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <computeNewSpeed+0x8c>)
 8005a44:	edd3 7a00 	vldr	s15, [r3]
 8005a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a50:	d519      	bpl.n	8005a86 <computeNewSpeed+0x4e>
        _speed += _acceleration;
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a54:	ed93 7a00 	vldr	s14, [r3]
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <computeNewSpeed+0x90>)
 8005a5a:	edd3 7a00 	vldr	s15, [r3]
 8005a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a62:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a64:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a6a:	ed93 7a00 	vldr	s14, [r3]
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <computeNewSpeed+0x8c>)
 8005a70:	edd3 7a00 	vldr	s15, [r3]
 8005a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7c:	dd03      	ble.n	8005a86 <computeNewSpeed+0x4e>
            _speed = _maxSpeed;
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <computeNewSpeed+0x8c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a84:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <computeNewSpeed+0x88>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fa fd64 	bl	8000558 <__aeabi_f2d>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	a108      	add	r1, pc, #32	; (adr r1, 8005ab8 <computeNewSpeed+0x80>)
 8005a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9a:	f7fa fedf 	bl	800085c <__aeabi_ddiv>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fb f85f 	bl	8000b68 <__aeabi_d2iz>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4a07      	ldr	r2, [pc, #28]	; (8005acc <computeNewSpeed+0x94>)
 8005aae:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <computeNewSpeed+0x94>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	412e8480 	.word	0x412e8480
 8005ac0:	200042f0 	.word	0x200042f0
 8005ac4:	200042f8 	.word	0x200042f8
 8005ac8:	200042f4 	.word	0x200042f4
 8005acc:	200042fc 	.word	0x200042fc

08005ad0 <motorMove>:

        // Optional: Implement a way to exit the loop if necessary
    }
}

void motorMove(MotorConfig* motor, int steps_to_move) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]

	if (steps_to_move >0)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd08      	ble.n	8005af2 <motorMove+0x22>
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_SET);  // Set direction pin for forward movement
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	889b      	ldrh	r3, [r3, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4619      	mov	r1, r3
 8005aec:	f7fc faf2 	bl	80020d4 <HAL_GPIO_WritePin>
 8005af0:	e00a      	b.n	8005b08 <motorMove+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);  // Set direction pin for backward movement
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	4619      	mov	r1, r3
 8005afe:	f7fc fae9 	bl	80020d4 <HAL_GPIO_WritePin>
		steps_to_move = steps_to_move * (-1); // converting steps to positive value
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	425b      	negs	r3, r3
 8005b06:	603b      	str	r3, [r7, #0]
	}



    for(int i = 0; i < steps_to_move; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e021      	b.n	8005b52 <motorMove+0x82>
    {
        // Calculate the new speed and step interval
        unsigned long stepInterval = computeNewSpeed();
 8005b0e:	f7ff ff93 	bl	8005a38 <computeNewSpeed>
 8005b12:	60b8      	str	r0, [r7, #8]

        // Generate a step pulse with the calculated interval
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_SET);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6898      	ldr	r0, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	899b      	ldrh	r3, [r3, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f7fc fad8 	bl	80020d4 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ff36 	bl	800599c <microDelay>
        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6898      	ldr	r0, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	899b      	ldrh	r3, [r3, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7fc faca 	bl	80020d4 <HAL_GPIO_WritePin>
        microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff ff28 	bl	800599c <microDelay>
    for(int i = 0; i < steps_to_move; i++)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	dbd9      	blt.n	8005b0e <motorMove+0x3e>

        // Optional: Implement a way to exit the loop if necessary
    }
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <atoi>:
 8005b64:	220a      	movs	r2, #10
 8005b66:	2100      	movs	r1, #0
 8005b68:	f000 bd60 	b.w	800662c <strtol>

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000001c 	.word	0x2000001c

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	; (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	; (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	; (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	; (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f002 ffa2 	bl	8008ad4 <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08008f7c 	.word	0x08008f7c
 8005bb4:	08008f7c 	.word	0x08008f7c
 8005bb8:	08008f7c 	.word	0x08008f7c
 8005bbc:	08008f80 	.word	0x08008f80

08005bc0 <memcpy>:
 8005bc0:	440a      	add	r2, r1
 8005bc2:	4291      	cmp	r1, r2
 8005bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc8:	d100      	bne.n	8005bcc <memcpy+0xc>
 8005bca:	4770      	bx	lr
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d1f9      	bne.n	8005bce <memcpy+0xe>
 8005bda:	bd10      	pop	{r4, pc}

08005bdc <memset>:
 8005bdc:	4402      	add	r2, r0
 8005bde:	4603      	mov	r3, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <__cvt>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	ec55 4b10 	vmov	r4, r5, d0
 8005bf4:	2d00      	cmp	r5, #0
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	bfbb      	ittet	lt
 8005bfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c02:	461d      	movlt	r5, r3
 8005c04:	2300      	movge	r3, #0
 8005c06:	232d      	movlt	r3, #45	; 0x2d
 8005c08:	700b      	strb	r3, [r1, #0]
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c10:	4691      	mov	r9, r2
 8005c12:	f023 0820 	bic.w	r8, r3, #32
 8005c16:	bfbc      	itt	lt
 8005c18:	4622      	movlt	r2, r4
 8005c1a:	4614      	movlt	r4, r2
 8005c1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c20:	d005      	beq.n	8005c2e <__cvt+0x42>
 8005c22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c26:	d100      	bne.n	8005c2a <__cvt+0x3e>
 8005c28:	3601      	adds	r6, #1
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	e000      	b.n	8005c30 <__cvt+0x44>
 8005c2e:	2103      	movs	r1, #3
 8005c30:	ab03      	add	r3, sp, #12
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	ab02      	add	r3, sp, #8
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	ec45 4b10 	vmov	d0, r4, r5
 8005c3c:	4653      	mov	r3, sl
 8005c3e:	4632      	mov	r2, r6
 8005c40:	f000 fd8a 	bl	8006758 <_dtoa_r>
 8005c44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c48:	4607      	mov	r7, r0
 8005c4a:	d102      	bne.n	8005c52 <__cvt+0x66>
 8005c4c:	f019 0f01 	tst.w	r9, #1
 8005c50:	d022      	beq.n	8005c98 <__cvt+0xac>
 8005c52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c56:	eb07 0906 	add.w	r9, r7, r6
 8005c5a:	d110      	bne.n	8005c7e <__cvt+0x92>
 8005c5c:	783b      	ldrb	r3, [r7, #0]
 8005c5e:	2b30      	cmp	r3, #48	; 0x30
 8005c60:	d10a      	bne.n	8005c78 <__cvt+0x8c>
 8005c62:	2200      	movs	r2, #0
 8005c64:	2300      	movs	r3, #0
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa ff35 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c6e:	b918      	cbnz	r0, 8005c78 <__cvt+0x8c>
 8005c70:	f1c6 0601 	rsb	r6, r6, #1
 8005c74:	f8ca 6000 	str.w	r6, [sl]
 8005c78:	f8da 3000 	ldr.w	r3, [sl]
 8005c7c:	4499      	add	r9, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2300      	movs	r3, #0
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c8a:	b108      	cbz	r0, 8005c90 <__cvt+0xa4>
 8005c8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c90:	2230      	movs	r2, #48	; 0x30
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	454b      	cmp	r3, r9
 8005c96:	d307      	bcc.n	8005ca8 <__cvt+0xbc>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c9c:	1bdb      	subs	r3, r3, r7
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	b004      	add	sp, #16
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	1c59      	adds	r1, r3, #1
 8005caa:	9103      	str	r1, [sp, #12]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e7f0      	b.n	8005c92 <__cvt+0xa6>

08005cb0 <__exponent>:
 8005cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	bfb8      	it	lt
 8005cb8:	4249      	neglt	r1, r1
 8005cba:	f803 2b02 	strb.w	r2, [r3], #2
 8005cbe:	bfb4      	ite	lt
 8005cc0:	222d      	movlt	r2, #45	; 0x2d
 8005cc2:	222b      	movge	r2, #43	; 0x2b
 8005cc4:	2909      	cmp	r1, #9
 8005cc6:	7042      	strb	r2, [r0, #1]
 8005cc8:	dd2a      	ble.n	8005d20 <__exponent+0x70>
 8005cca:	f10d 0407 	add.w	r4, sp, #7
 8005cce:	46a4      	mov	ip, r4
 8005cd0:	270a      	movs	r7, #10
 8005cd2:	46a6      	mov	lr, r4
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cda:	fb07 1516 	mls	r5, r7, r6, r1
 8005cde:	3530      	adds	r5, #48	; 0x30
 8005ce0:	2a63      	cmp	r2, #99	; 0x63
 8005ce2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ce6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cea:	4631      	mov	r1, r6
 8005cec:	dcf1      	bgt.n	8005cd2 <__exponent+0x22>
 8005cee:	3130      	adds	r1, #48	; 0x30
 8005cf0:	f1ae 0502 	sub.w	r5, lr, #2
 8005cf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cf8:	1c44      	adds	r4, r0, #1
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4561      	cmp	r1, ip
 8005cfe:	d30a      	bcc.n	8005d16 <__exponent+0x66>
 8005d00:	f10d 0209 	add.w	r2, sp, #9
 8005d04:	eba2 020e 	sub.w	r2, r2, lr
 8005d08:	4565      	cmp	r5, ip
 8005d0a:	bf88      	it	hi
 8005d0c:	2200      	movhi	r2, #0
 8005d0e:	4413      	add	r3, r2
 8005d10:	1a18      	subs	r0, r3, r0
 8005d12:	b003      	add	sp, #12
 8005d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d1e:	e7ed      	b.n	8005cfc <__exponent+0x4c>
 8005d20:	2330      	movs	r3, #48	; 0x30
 8005d22:	3130      	adds	r1, #48	; 0x30
 8005d24:	7083      	strb	r3, [r0, #2]
 8005d26:	70c1      	strb	r1, [r0, #3]
 8005d28:	1d03      	adds	r3, r0, #4
 8005d2a:	e7f1      	b.n	8005d10 <__exponent+0x60>

08005d2c <_printf_float>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	ed2d 8b02 	vpush	{d8}
 8005d34:	b08d      	sub	sp, #52	; 0x34
 8005d36:	460c      	mov	r4, r1
 8005d38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	461f      	mov	r7, r3
 8005d40:	4605      	mov	r5, r0
 8005d42:	f001 faf7 	bl	8007334 <_localeconv_r>
 8005d46:	f8d0 a000 	ldr.w	sl, [r0]
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fa fa48 	bl	80001e0 <strlen>
 8005d50:	2300      	movs	r3, #0
 8005d52:	930a      	str	r3, [sp, #40]	; 0x28
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	f8d8 3000 	ldr.w	r3, [r8]
 8005d5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d60:	3307      	adds	r3, #7
 8005d62:	f023 0307 	bic.w	r3, r3, #7
 8005d66:	f103 0208 	add.w	r2, r3, #8
 8005d6a:	f8c8 2000 	str.w	r2, [r8]
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d84:	ee08 0a10 	vmov	s16, r0
 8005d88:	4b9f      	ldr	r3, [pc, #636]	; (8006008 <_printf_float+0x2dc>)
 8005d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	f7fa fed3 	bl	8000b3c <__aeabi_dcmpun>
 8005d96:	bb88      	cbnz	r0, 8005dfc <_printf_float+0xd0>
 8005d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9c:	4b9a      	ldr	r3, [pc, #616]	; (8006008 <_printf_float+0x2dc>)
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	f7fa fead 	bl	8000b00 <__aeabi_dcmple>
 8005da6:	bb48      	cbnz	r0, 8005dfc <_printf_float+0xd0>
 8005da8:	2200      	movs	r2, #0
 8005daa:	2300      	movs	r3, #0
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fe9c 	bl	8000aec <__aeabi_dcmplt>
 8005db4:	b110      	cbz	r0, 8005dbc <_printf_float+0x90>
 8005db6:	232d      	movs	r3, #45	; 0x2d
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	4b93      	ldr	r3, [pc, #588]	; (800600c <_printf_float+0x2e0>)
 8005dbe:	4894      	ldr	r0, [pc, #592]	; (8006010 <_printf_float+0x2e4>)
 8005dc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dc4:	bf94      	ite	ls
 8005dc6:	4698      	movls	r8, r3
 8005dc8:	4680      	movhi	r8, r0
 8005dca:	2303      	movs	r3, #3
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	f023 0204 	bic.w	r2, r3, #4
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	f04f 0900 	mov.w	r9, #0
 8005dda:	9700      	str	r7, [sp, #0]
 8005ddc:	4633      	mov	r3, r6
 8005dde:	aa0b      	add	r2, sp, #44	; 0x2c
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f9d8 	bl	8006198 <_printf_common>
 8005de8:	3001      	adds	r0, #1
 8005dea:	f040 8090 	bne.w	8005f0e <_printf_float+0x1e2>
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	b00d      	add	sp, #52	; 0x34
 8005df4:	ecbd 8b02 	vpop	{d8}
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe9a 	bl	8000b3c <__aeabi_dcmpun>
 8005e08:	b140      	cbz	r0, 8005e1c <_printf_float+0xf0>
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bfbc      	itt	lt
 8005e10:	232d      	movlt	r3, #45	; 0x2d
 8005e12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e16:	487f      	ldr	r0, [pc, #508]	; (8006014 <_printf_float+0x2e8>)
 8005e18:	4b7f      	ldr	r3, [pc, #508]	; (8006018 <_printf_float+0x2ec>)
 8005e1a:	e7d1      	b.n	8005dc0 <_printf_float+0x94>
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e22:	9206      	str	r2, [sp, #24]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	d13f      	bne.n	8005ea8 <_printf_float+0x17c>
 8005e28:	2306      	movs	r3, #6
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	9b05      	ldr	r3, [sp, #20]
 8005e2e:	6861      	ldr	r1, [r4, #4]
 8005e30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e34:	2300      	movs	r3, #0
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	ab0a      	add	r3, sp, #40	; 0x28
 8005e3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e3e:	ab09      	add	r3, sp, #36	; 0x24
 8005e40:	ec49 8b10 	vmov	d0, r8, r9
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f7ff fecd 	bl	8005bec <__cvt>
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e56:	2b47      	cmp	r3, #71	; 0x47
 8005e58:	4680      	mov	r8, r0
 8005e5a:	d108      	bne.n	8005e6e <_printf_float+0x142>
 8005e5c:	1cc8      	adds	r0, r1, #3
 8005e5e:	db02      	blt.n	8005e66 <_printf_float+0x13a>
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	4299      	cmp	r1, r3
 8005e64:	dd41      	ble.n	8005eea <_printf_float+0x1be>
 8005e66:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e6a:	fa5f fb8b 	uxtb.w	fp, fp
 8005e6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e72:	d820      	bhi.n	8005eb6 <_printf_float+0x18a>
 8005e74:	3901      	subs	r1, #1
 8005e76:	465a      	mov	r2, fp
 8005e78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e7c:	9109      	str	r1, [sp, #36]	; 0x24
 8005e7e:	f7ff ff17 	bl	8005cb0 <__exponent>
 8005e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e84:	1813      	adds	r3, r2, r0
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	4681      	mov	r9, r0
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	dc02      	bgt.n	8005e94 <_printf_float+0x168>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	07d2      	lsls	r2, r2, #31
 8005e92:	d501      	bpl.n	8005e98 <_printf_float+0x16c>
 8005e94:	3301      	adds	r3, #1
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d09c      	beq.n	8005dda <_printf_float+0xae>
 8005ea0:	232d      	movs	r3, #45	; 0x2d
 8005ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea6:	e798      	b.n	8005dda <_printf_float+0xae>
 8005ea8:	9a06      	ldr	r2, [sp, #24]
 8005eaa:	2a47      	cmp	r2, #71	; 0x47
 8005eac:	d1be      	bne.n	8005e2c <_printf_float+0x100>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1bc      	bne.n	8005e2c <_printf_float+0x100>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7b9      	b.n	8005e2a <_printf_float+0xfe>
 8005eb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005eba:	d118      	bne.n	8005eee <_printf_float+0x1c2>
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	dd0b      	ble.n	8005eda <_printf_float+0x1ae>
 8005ec2:	6121      	str	r1, [r4, #16]
 8005ec4:	b913      	cbnz	r3, 8005ecc <_printf_float+0x1a0>
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	07d0      	lsls	r0, r2, #31
 8005eca:	d502      	bpl.n	8005ed2 <_printf_float+0x1a6>
 8005ecc:	3301      	adds	r3, #1
 8005ece:	440b      	add	r3, r1
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ed4:	f04f 0900 	mov.w	r9, #0
 8005ed8:	e7de      	b.n	8005e98 <_printf_float+0x16c>
 8005eda:	b913      	cbnz	r3, 8005ee2 <_printf_float+0x1b6>
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	07d2      	lsls	r2, r2, #31
 8005ee0:	d501      	bpl.n	8005ee6 <_printf_float+0x1ba>
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	e7f4      	b.n	8005ed0 <_printf_float+0x1a4>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e7f2      	b.n	8005ed0 <_printf_float+0x1a4>
 8005eea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef0:	4299      	cmp	r1, r3
 8005ef2:	db05      	blt.n	8005f00 <_printf_float+0x1d4>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	6121      	str	r1, [r4, #16]
 8005ef8:	07d8      	lsls	r0, r3, #31
 8005efa:	d5ea      	bpl.n	8005ed2 <_printf_float+0x1a6>
 8005efc:	1c4b      	adds	r3, r1, #1
 8005efe:	e7e7      	b.n	8005ed0 <_printf_float+0x1a4>
 8005f00:	2900      	cmp	r1, #0
 8005f02:	bfd4      	ite	le
 8005f04:	f1c1 0202 	rsble	r2, r1, #2
 8005f08:	2201      	movgt	r2, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	e7e0      	b.n	8005ed0 <_printf_float+0x1a4>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	055a      	lsls	r2, r3, #21
 8005f12:	d407      	bmi.n	8005f24 <_printf_float+0x1f8>
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	4642      	mov	r2, r8
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d12c      	bne.n	8005f7c <_printf_float+0x250>
 8005f22:	e764      	b.n	8005dee <_printf_float+0xc2>
 8005f24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f28:	f240 80e0 	bls.w	80060ec <_printf_float+0x3c0>
 8005f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f30:	2200      	movs	r2, #0
 8005f32:	2300      	movs	r3, #0
 8005f34:	f7fa fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d034      	beq.n	8005fa6 <_printf_float+0x27a>
 8005f3c:	4a37      	ldr	r2, [pc, #220]	; (800601c <_printf_float+0x2f0>)
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f af51 	beq.w	8005dee <_printf_float+0xc2>
 8005f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f50:	429a      	cmp	r2, r3
 8005f52:	db02      	blt.n	8005f5a <_printf_float+0x22e>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	07d8      	lsls	r0, r3, #31
 8005f58:	d510      	bpl.n	8005f7c <_printf_float+0x250>
 8005f5a:	ee18 3a10 	vmov	r3, s16
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f af41 	beq.w	8005dee <_printf_float+0xc2>
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	f104 091a 	add.w	r9, r4, #26
 8005f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f76:	3b01      	subs	r3, #1
 8005f78:	4543      	cmp	r3, r8
 8005f7a:	dc09      	bgt.n	8005f90 <_printf_float+0x264>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	079b      	lsls	r3, r3, #30
 8005f80:	f100 8105 	bmi.w	800618e <_printf_float+0x462>
 8005f84:	68e0      	ldr	r0, [r4, #12]
 8005f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	bfb8      	it	lt
 8005f8c:	4618      	movlt	r0, r3
 8005f8e:	e730      	b.n	8005df2 <_printf_float+0xc6>
 8005f90:	2301      	movs	r3, #1
 8005f92:	464a      	mov	r2, r9
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af27 	beq.w	8005dee <_printf_float+0xc2>
 8005fa0:	f108 0801 	add.w	r8, r8, #1
 8005fa4:	e7e6      	b.n	8005f74 <_printf_float+0x248>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc39      	bgt.n	8006020 <_printf_float+0x2f4>
 8005fac:	4a1b      	ldr	r2, [pc, #108]	; (800601c <_printf_float+0x2f0>)
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f af19 	beq.w	8005dee <_printf_float+0xc2>
 8005fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	d102      	bne.n	8005fca <_printf_float+0x29e>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	07d9      	lsls	r1, r3, #31
 8005fc8:	d5d8      	bpl.n	8005f7c <_printf_float+0x250>
 8005fca:	ee18 3a10 	vmov	r3, s16
 8005fce:	4652      	mov	r2, sl
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f af09 	beq.w	8005dee <_printf_float+0xc2>
 8005fdc:	f04f 0900 	mov.w	r9, #0
 8005fe0:	f104 0a1a 	add.w	sl, r4, #26
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	425b      	negs	r3, r3
 8005fe8:	454b      	cmp	r3, r9
 8005fea:	dc01      	bgt.n	8005ff0 <_printf_float+0x2c4>
 8005fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fee:	e792      	b.n	8005f16 <_printf_float+0x1ea>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f aef7 	beq.w	8005dee <_printf_float+0xc2>
 8006000:	f109 0901 	add.w	r9, r9, #1
 8006004:	e7ee      	b.n	8005fe4 <_printf_float+0x2b8>
 8006006:	bf00      	nop
 8006008:	7fefffff 	.word	0x7fefffff
 800600c:	08008b9c 	.word	0x08008b9c
 8006010:	08008ba0 	.word	0x08008ba0
 8006014:	08008ba8 	.word	0x08008ba8
 8006018:	08008ba4 	.word	0x08008ba4
 800601c:	08008bac 	.word	0x08008bac
 8006020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006024:	429a      	cmp	r2, r3
 8006026:	bfa8      	it	ge
 8006028:	461a      	movge	r2, r3
 800602a:	2a00      	cmp	r2, #0
 800602c:	4691      	mov	r9, r2
 800602e:	dc37      	bgt.n	80060a0 <_printf_float+0x374>
 8006030:	f04f 0b00 	mov.w	fp, #0
 8006034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006038:	f104 021a 	add.w	r2, r4, #26
 800603c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800603e:	9305      	str	r3, [sp, #20]
 8006040:	eba3 0309 	sub.w	r3, r3, r9
 8006044:	455b      	cmp	r3, fp
 8006046:	dc33      	bgt.n	80060b0 <_printf_float+0x384>
 8006048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800604c:	429a      	cmp	r2, r3
 800604e:	db3b      	blt.n	80060c8 <_printf_float+0x39c>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	07da      	lsls	r2, r3, #31
 8006054:	d438      	bmi.n	80060c8 <_printf_float+0x39c>
 8006056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006058:	9a05      	ldr	r2, [sp, #20]
 800605a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800605c:	1a9a      	subs	r2, r3, r2
 800605e:	eba3 0901 	sub.w	r9, r3, r1
 8006062:	4591      	cmp	r9, r2
 8006064:	bfa8      	it	ge
 8006066:	4691      	movge	r9, r2
 8006068:	f1b9 0f00 	cmp.w	r9, #0
 800606c:	dc35      	bgt.n	80060da <_printf_float+0x3ae>
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006076:	f104 0a1a 	add.w	sl, r4, #26
 800607a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	eba3 0309 	sub.w	r3, r3, r9
 8006084:	4543      	cmp	r3, r8
 8006086:	f77f af79 	ble.w	8005f7c <_printf_float+0x250>
 800608a:	2301      	movs	r3, #1
 800608c:	4652      	mov	r2, sl
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	f43f aeaa 	beq.w	8005dee <_printf_float+0xc2>
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	e7ec      	b.n	800607a <_printf_float+0x34e>
 80060a0:	4613      	mov	r3, r2
 80060a2:	4631      	mov	r1, r6
 80060a4:	4642      	mov	r2, r8
 80060a6:	4628      	mov	r0, r5
 80060a8:	47b8      	blx	r7
 80060aa:	3001      	adds	r0, #1
 80060ac:	d1c0      	bne.n	8006030 <_printf_float+0x304>
 80060ae:	e69e      	b.n	8005dee <_printf_float+0xc2>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	9205      	str	r2, [sp, #20]
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	f43f ae97 	beq.w	8005dee <_printf_float+0xc2>
 80060c0:	9a05      	ldr	r2, [sp, #20]
 80060c2:	f10b 0b01 	add.w	fp, fp, #1
 80060c6:	e7b9      	b.n	800603c <_printf_float+0x310>
 80060c8:	ee18 3a10 	vmov	r3, s16
 80060cc:	4652      	mov	r2, sl
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1be      	bne.n	8006056 <_printf_float+0x32a>
 80060d8:	e689      	b.n	8005dee <_printf_float+0xc2>
 80060da:	9a05      	ldr	r2, [sp, #20]
 80060dc:	464b      	mov	r3, r9
 80060de:	4442      	add	r2, r8
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	d1c1      	bne.n	800606e <_printf_float+0x342>
 80060ea:	e680      	b.n	8005dee <_printf_float+0xc2>
 80060ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ee:	2a01      	cmp	r2, #1
 80060f0:	dc01      	bgt.n	80060f6 <_printf_float+0x3ca>
 80060f2:	07db      	lsls	r3, r3, #31
 80060f4:	d538      	bpl.n	8006168 <_printf_float+0x43c>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4642      	mov	r2, r8
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f ae74 	beq.w	8005dee <_printf_float+0xc2>
 8006106:	ee18 3a10 	vmov	r3, s16
 800610a:	4652      	mov	r2, sl
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f ae6b 	beq.w	8005dee <_printf_float+0xc2>
 8006118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	f7fa fcda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006124:	b9d8      	cbnz	r0, 800615e <_printf_float+0x432>
 8006126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006128:	f108 0201 	add.w	r2, r8, #1
 800612c:	3b01      	subs	r3, #1
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	d10e      	bne.n	8006156 <_printf_float+0x42a>
 8006138:	e659      	b.n	8005dee <_printf_float+0xc2>
 800613a:	2301      	movs	r3, #1
 800613c:	4652      	mov	r2, sl
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae52 	beq.w	8005dee <_printf_float+0xc2>
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	4543      	cmp	r3, r8
 8006154:	dcf1      	bgt.n	800613a <_printf_float+0x40e>
 8006156:	464b      	mov	r3, r9
 8006158:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800615c:	e6dc      	b.n	8005f18 <_printf_float+0x1ec>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	f104 0a1a 	add.w	sl, r4, #26
 8006166:	e7f2      	b.n	800614e <_printf_float+0x422>
 8006168:	2301      	movs	r3, #1
 800616a:	4642      	mov	r2, r8
 800616c:	e7df      	b.n	800612e <_printf_float+0x402>
 800616e:	2301      	movs	r3, #1
 8006170:	464a      	mov	r2, r9
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	f43f ae38 	beq.w	8005dee <_printf_float+0xc2>
 800617e:	f108 0801 	add.w	r8, r8, #1
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	4543      	cmp	r3, r8
 800618a:	dcf0      	bgt.n	800616e <_printf_float+0x442>
 800618c:	e6fa      	b.n	8005f84 <_printf_float+0x258>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	f104 0919 	add.w	r9, r4, #25
 8006196:	e7f4      	b.n	8006182 <_printf_float+0x456>

08006198 <_printf_common>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	4616      	mov	r6, r2
 800619e:	4699      	mov	r9, r3
 80061a0:	688a      	ldr	r2, [r1, #8]
 80061a2:	690b      	ldr	r3, [r1, #16]
 80061a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061a8:	4293      	cmp	r3, r2
 80061aa:	bfb8      	it	lt
 80061ac:	4613      	movlt	r3, r2
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061b4:	4607      	mov	r7, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	b10a      	cbz	r2, 80061be <_printf_common+0x26>
 80061ba:	3301      	adds	r3, #1
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	0699      	lsls	r1, r3, #26
 80061c2:	bf42      	ittt	mi
 80061c4:	6833      	ldrmi	r3, [r6, #0]
 80061c6:	3302      	addmi	r3, #2
 80061c8:	6033      	strmi	r3, [r6, #0]
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	f015 0506 	ands.w	r5, r5, #6
 80061d0:	d106      	bne.n	80061e0 <_printf_common+0x48>
 80061d2:	f104 0a19 	add.w	sl, r4, #25
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	6832      	ldr	r2, [r6, #0]
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	42ab      	cmp	r3, r5
 80061de:	dc26      	bgt.n	800622e <_printf_common+0x96>
 80061e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061e4:	1e13      	subs	r3, r2, #0
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	0692      	lsls	r2, r2, #26
 80061ee:	d42b      	bmi.n	8006248 <_printf_common+0xb0>
 80061f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061f4:	4649      	mov	r1, r9
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c0      	blx	r8
 80061fa:	3001      	adds	r0, #1
 80061fc:	d01e      	beq.n	800623c <_printf_common+0xa4>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	68e5      	ldr	r5, [r4, #12]
 8006202:	6832      	ldr	r2, [r6, #0]
 8006204:	f003 0306 	and.w	r3, r3, #6
 8006208:	2b04      	cmp	r3, #4
 800620a:	bf08      	it	eq
 800620c:	1aad      	subeq	r5, r5, r2
 800620e:	68a3      	ldr	r3, [r4, #8]
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	bf0c      	ite	eq
 8006214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006218:	2500      	movne	r5, #0
 800621a:	4293      	cmp	r3, r2
 800621c:	bfc4      	itt	gt
 800621e:	1a9b      	subgt	r3, r3, r2
 8006220:	18ed      	addgt	r5, r5, r3
 8006222:	2600      	movs	r6, #0
 8006224:	341a      	adds	r4, #26
 8006226:	42b5      	cmp	r5, r6
 8006228:	d11a      	bne.n	8006260 <_printf_common+0xc8>
 800622a:	2000      	movs	r0, #0
 800622c:	e008      	b.n	8006240 <_printf_common+0xa8>
 800622e:	2301      	movs	r3, #1
 8006230:	4652      	mov	r2, sl
 8006232:	4649      	mov	r1, r9
 8006234:	4638      	mov	r0, r7
 8006236:	47c0      	blx	r8
 8006238:	3001      	adds	r0, #1
 800623a:	d103      	bne.n	8006244 <_printf_common+0xac>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	3501      	adds	r5, #1
 8006246:	e7c6      	b.n	80061d6 <_printf_common+0x3e>
 8006248:	18e1      	adds	r1, r4, r3
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	2030      	movs	r0, #48	; 0x30
 800624e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006252:	4422      	add	r2, r4
 8006254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800625c:	3302      	adds	r3, #2
 800625e:	e7c7      	b.n	80061f0 <_printf_common+0x58>
 8006260:	2301      	movs	r3, #1
 8006262:	4622      	mov	r2, r4
 8006264:	4649      	mov	r1, r9
 8006266:	4638      	mov	r0, r7
 8006268:	47c0      	blx	r8
 800626a:	3001      	adds	r0, #1
 800626c:	d0e6      	beq.n	800623c <_printf_common+0xa4>
 800626e:	3601      	adds	r6, #1
 8006270:	e7d9      	b.n	8006226 <_printf_common+0x8e>
	...

08006274 <_printf_i>:
 8006274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	7e0f      	ldrb	r7, [r1, #24]
 800627a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800627c:	2f78      	cmp	r7, #120	; 0x78
 800627e:	4691      	mov	r9, r2
 8006280:	4680      	mov	r8, r0
 8006282:	460c      	mov	r4, r1
 8006284:	469a      	mov	sl, r3
 8006286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800628a:	d807      	bhi.n	800629c <_printf_i+0x28>
 800628c:	2f62      	cmp	r7, #98	; 0x62
 800628e:	d80a      	bhi.n	80062a6 <_printf_i+0x32>
 8006290:	2f00      	cmp	r7, #0
 8006292:	f000 80d8 	beq.w	8006446 <_printf_i+0x1d2>
 8006296:	2f58      	cmp	r7, #88	; 0x58
 8006298:	f000 80a3 	beq.w	80063e2 <_printf_i+0x16e>
 800629c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062a4:	e03a      	b.n	800631c <_printf_i+0xa8>
 80062a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062aa:	2b15      	cmp	r3, #21
 80062ac:	d8f6      	bhi.n	800629c <_printf_i+0x28>
 80062ae:	a101      	add	r1, pc, #4	; (adr r1, 80062b4 <_printf_i+0x40>)
 80062b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062b4:	0800630d 	.word	0x0800630d
 80062b8:	08006321 	.word	0x08006321
 80062bc:	0800629d 	.word	0x0800629d
 80062c0:	0800629d 	.word	0x0800629d
 80062c4:	0800629d 	.word	0x0800629d
 80062c8:	0800629d 	.word	0x0800629d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800629d 	.word	0x0800629d
 80062d4:	0800629d 	.word	0x0800629d
 80062d8:	0800629d 	.word	0x0800629d
 80062dc:	0800629d 	.word	0x0800629d
 80062e0:	0800642d 	.word	0x0800642d
 80062e4:	08006351 	.word	0x08006351
 80062e8:	0800640f 	.word	0x0800640f
 80062ec:	0800629d 	.word	0x0800629d
 80062f0:	0800629d 	.word	0x0800629d
 80062f4:	0800644f 	.word	0x0800644f
 80062f8:	0800629d 	.word	0x0800629d
 80062fc:	08006351 	.word	0x08006351
 8006300:	0800629d 	.word	0x0800629d
 8006304:	0800629d 	.word	0x0800629d
 8006308:	08006417 	.word	0x08006417
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	602a      	str	r2, [r5, #0]
 8006314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800631c:	2301      	movs	r3, #1
 800631e:	e0a3      	b.n	8006468 <_printf_i+0x1f4>
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	6829      	ldr	r1, [r5, #0]
 8006324:	0606      	lsls	r6, r0, #24
 8006326:	f101 0304 	add.w	r3, r1, #4
 800632a:	d50a      	bpl.n	8006342 <_printf_i+0xce>
 800632c:	680e      	ldr	r6, [r1, #0]
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	2e00      	cmp	r6, #0
 8006332:	da03      	bge.n	800633c <_printf_i+0xc8>
 8006334:	232d      	movs	r3, #45	; 0x2d
 8006336:	4276      	negs	r6, r6
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633c:	485e      	ldr	r0, [pc, #376]	; (80064b8 <_printf_i+0x244>)
 800633e:	230a      	movs	r3, #10
 8006340:	e019      	b.n	8006376 <_printf_i+0x102>
 8006342:	680e      	ldr	r6, [r1, #0]
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	f010 0f40 	tst.w	r0, #64	; 0x40
 800634a:	bf18      	it	ne
 800634c:	b236      	sxthne	r6, r6
 800634e:	e7ef      	b.n	8006330 <_printf_i+0xbc>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	1d19      	adds	r1, r3, #4
 8006356:	6029      	str	r1, [r5, #0]
 8006358:	0601      	lsls	r1, r0, #24
 800635a:	d501      	bpl.n	8006360 <_printf_i+0xec>
 800635c:	681e      	ldr	r6, [r3, #0]
 800635e:	e002      	b.n	8006366 <_printf_i+0xf2>
 8006360:	0646      	lsls	r6, r0, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0xe8>
 8006364:	881e      	ldrh	r6, [r3, #0]
 8006366:	4854      	ldr	r0, [pc, #336]	; (80064b8 <_printf_i+0x244>)
 8006368:	2f6f      	cmp	r7, #111	; 0x6f
 800636a:	bf0c      	ite	eq
 800636c:	2308      	moveq	r3, #8
 800636e:	230a      	movne	r3, #10
 8006370:	2100      	movs	r1, #0
 8006372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006376:	6865      	ldr	r5, [r4, #4]
 8006378:	60a5      	str	r5, [r4, #8]
 800637a:	2d00      	cmp	r5, #0
 800637c:	bfa2      	ittt	ge
 800637e:	6821      	ldrge	r1, [r4, #0]
 8006380:	f021 0104 	bicge.w	r1, r1, #4
 8006384:	6021      	strge	r1, [r4, #0]
 8006386:	b90e      	cbnz	r6, 800638c <_printf_i+0x118>
 8006388:	2d00      	cmp	r5, #0
 800638a:	d04d      	beq.n	8006428 <_printf_i+0x1b4>
 800638c:	4615      	mov	r5, r2
 800638e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006392:	fb03 6711 	mls	r7, r3, r1, r6
 8006396:	5dc7      	ldrb	r7, [r0, r7]
 8006398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800639c:	4637      	mov	r7, r6
 800639e:	42bb      	cmp	r3, r7
 80063a0:	460e      	mov	r6, r1
 80063a2:	d9f4      	bls.n	800638e <_printf_i+0x11a>
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d10b      	bne.n	80063c0 <_printf_i+0x14c>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	07de      	lsls	r6, r3, #31
 80063ac:	d508      	bpl.n	80063c0 <_printf_i+0x14c>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	6861      	ldr	r1, [r4, #4]
 80063b2:	4299      	cmp	r1, r3
 80063b4:	bfde      	ittt	le
 80063b6:	2330      	movle	r3, #48	; 0x30
 80063b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063c0:	1b52      	subs	r2, r2, r5
 80063c2:	6122      	str	r2, [r4, #16]
 80063c4:	f8cd a000 	str.w	sl, [sp]
 80063c8:	464b      	mov	r3, r9
 80063ca:	aa03      	add	r2, sp, #12
 80063cc:	4621      	mov	r1, r4
 80063ce:	4640      	mov	r0, r8
 80063d0:	f7ff fee2 	bl	8006198 <_printf_common>
 80063d4:	3001      	adds	r0, #1
 80063d6:	d14c      	bne.n	8006472 <_printf_i+0x1fe>
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	b004      	add	sp, #16
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	4835      	ldr	r0, [pc, #212]	; (80064b8 <_printf_i+0x244>)
 80063e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063e8:	6829      	ldr	r1, [r5, #0]
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80063f0:	6029      	str	r1, [r5, #0]
 80063f2:	061d      	lsls	r5, r3, #24
 80063f4:	d514      	bpl.n	8006420 <_printf_i+0x1ac>
 80063f6:	07df      	lsls	r7, r3, #31
 80063f8:	bf44      	itt	mi
 80063fa:	f043 0320 	orrmi.w	r3, r3, #32
 80063fe:	6023      	strmi	r3, [r4, #0]
 8006400:	b91e      	cbnz	r6, 800640a <_printf_i+0x196>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	f023 0320 	bic.w	r3, r3, #32
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	2310      	movs	r3, #16
 800640c:	e7b0      	b.n	8006370 <_printf_i+0xfc>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	f043 0320 	orr.w	r3, r3, #32
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	2378      	movs	r3, #120	; 0x78
 8006418:	4828      	ldr	r0, [pc, #160]	; (80064bc <_printf_i+0x248>)
 800641a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800641e:	e7e3      	b.n	80063e8 <_printf_i+0x174>
 8006420:	0659      	lsls	r1, r3, #25
 8006422:	bf48      	it	mi
 8006424:	b2b6      	uxthmi	r6, r6
 8006426:	e7e6      	b.n	80063f6 <_printf_i+0x182>
 8006428:	4615      	mov	r5, r2
 800642a:	e7bb      	b.n	80063a4 <_printf_i+0x130>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	6826      	ldr	r6, [r4, #0]
 8006430:	6961      	ldr	r1, [r4, #20]
 8006432:	1d18      	adds	r0, r3, #4
 8006434:	6028      	str	r0, [r5, #0]
 8006436:	0635      	lsls	r5, r6, #24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	d501      	bpl.n	8006440 <_printf_i+0x1cc>
 800643c:	6019      	str	r1, [r3, #0]
 800643e:	e002      	b.n	8006446 <_printf_i+0x1d2>
 8006440:	0670      	lsls	r0, r6, #25
 8006442:	d5fb      	bpl.n	800643c <_printf_i+0x1c8>
 8006444:	8019      	strh	r1, [r3, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	4615      	mov	r5, r2
 800644c:	e7ba      	b.n	80063c4 <_printf_i+0x150>
 800644e:	682b      	ldr	r3, [r5, #0]
 8006450:	1d1a      	adds	r2, r3, #4
 8006452:	602a      	str	r2, [r5, #0]
 8006454:	681d      	ldr	r5, [r3, #0]
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	2100      	movs	r1, #0
 800645a:	4628      	mov	r0, r5
 800645c:	f7f9 fec8 	bl	80001f0 <memchr>
 8006460:	b108      	cbz	r0, 8006466 <_printf_i+0x1f2>
 8006462:	1b40      	subs	r0, r0, r5
 8006464:	6060      	str	r0, [r4, #4]
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	2300      	movs	r3, #0
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006470:	e7a8      	b.n	80063c4 <_printf_i+0x150>
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	462a      	mov	r2, r5
 8006476:	4649      	mov	r1, r9
 8006478:	4640      	mov	r0, r8
 800647a:	47d0      	blx	sl
 800647c:	3001      	adds	r0, #1
 800647e:	d0ab      	beq.n	80063d8 <_printf_i+0x164>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	079b      	lsls	r3, r3, #30
 8006484:	d413      	bmi.n	80064ae <_printf_i+0x23a>
 8006486:	68e0      	ldr	r0, [r4, #12]
 8006488:	9b03      	ldr	r3, [sp, #12]
 800648a:	4298      	cmp	r0, r3
 800648c:	bfb8      	it	lt
 800648e:	4618      	movlt	r0, r3
 8006490:	e7a4      	b.n	80063dc <_printf_i+0x168>
 8006492:	2301      	movs	r3, #1
 8006494:	4632      	mov	r2, r6
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d09b      	beq.n	80063d8 <_printf_i+0x164>
 80064a0:	3501      	adds	r5, #1
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	9903      	ldr	r1, [sp, #12]
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	42ab      	cmp	r3, r5
 80064aa:	dcf2      	bgt.n	8006492 <_printf_i+0x21e>
 80064ac:	e7eb      	b.n	8006486 <_printf_i+0x212>
 80064ae:	2500      	movs	r5, #0
 80064b0:	f104 0619 	add.w	r6, r4, #25
 80064b4:	e7f5      	b.n	80064a2 <_printf_i+0x22e>
 80064b6:	bf00      	nop
 80064b8:	08008bae 	.word	0x08008bae
 80064bc:	08008bbf 	.word	0x08008bbf

080064c0 <sniprintf>:
 80064c0:	b40c      	push	{r2, r3}
 80064c2:	b530      	push	{r4, r5, lr}
 80064c4:	4b17      	ldr	r3, [pc, #92]	; (8006524 <sniprintf+0x64>)
 80064c6:	1e0c      	subs	r4, r1, #0
 80064c8:	681d      	ldr	r5, [r3, #0]
 80064ca:	b09d      	sub	sp, #116	; 0x74
 80064cc:	da08      	bge.n	80064e0 <sniprintf+0x20>
 80064ce:	238b      	movs	r3, #139	; 0x8b
 80064d0:	602b      	str	r3, [r5, #0]
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	b01d      	add	sp, #116	; 0x74
 80064d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064dc:	b002      	add	sp, #8
 80064de:	4770      	bx	lr
 80064e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064e8:	bf14      	ite	ne
 80064ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064ee:	4623      	moveq	r3, r4
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f8:	9002      	str	r0, [sp, #8]
 80064fa:	9006      	str	r0, [sp, #24]
 80064fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006500:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006502:	ab21      	add	r3, sp, #132	; 0x84
 8006504:	a902      	add	r1, sp, #8
 8006506:	4628      	mov	r0, r5
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f001 fbf5 	bl	8007cf8 <_svfiprintf_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	bfbc      	itt	lt
 8006512:	238b      	movlt	r3, #139	; 0x8b
 8006514:	602b      	strlt	r3, [r5, #0]
 8006516:	2c00      	cmp	r4, #0
 8006518:	d0dd      	beq.n	80064d6 <sniprintf+0x16>
 800651a:	9b02      	ldr	r3, [sp, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e7d9      	b.n	80064d6 <sniprintf+0x16>
 8006522:	bf00      	nop
 8006524:	2000001c 	.word	0x2000001c

08006528 <_strtol_l.constprop.0>:
 8006528:	2b01      	cmp	r3, #1
 800652a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652e:	d001      	beq.n	8006534 <_strtol_l.constprop.0+0xc>
 8006530:	2b24      	cmp	r3, #36	; 0x24
 8006532:	d906      	bls.n	8006542 <_strtol_l.constprop.0+0x1a>
 8006534:	f7ff fb1a 	bl	8005b6c <__errno>
 8006538:	2316      	movs	r3, #22
 800653a:	6003      	str	r3, [r0, #0]
 800653c:	2000      	movs	r0, #0
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006628 <_strtol_l.constprop.0+0x100>
 8006546:	460d      	mov	r5, r1
 8006548:	462e      	mov	r6, r5
 800654a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800654e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006552:	f017 0708 	ands.w	r7, r7, #8
 8006556:	d1f7      	bne.n	8006548 <_strtol_l.constprop.0+0x20>
 8006558:	2c2d      	cmp	r4, #45	; 0x2d
 800655a:	d132      	bne.n	80065c2 <_strtol_l.constprop.0+0x9a>
 800655c:	782c      	ldrb	r4, [r5, #0]
 800655e:	2701      	movs	r7, #1
 8006560:	1cb5      	adds	r5, r6, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d05b      	beq.n	800661e <_strtol_l.constprop.0+0xf6>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d109      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800656a:	2c30      	cmp	r4, #48	; 0x30
 800656c:	d107      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800656e:	782c      	ldrb	r4, [r5, #0]
 8006570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006574:	2c58      	cmp	r4, #88	; 0x58
 8006576:	d14d      	bne.n	8006614 <_strtol_l.constprop.0+0xec>
 8006578:	786c      	ldrb	r4, [r5, #1]
 800657a:	2310      	movs	r3, #16
 800657c:	3502      	adds	r5, #2
 800657e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006582:	f108 38ff 	add.w	r8, r8, #4294967295
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	fbb8 f9f3 	udiv	r9, r8, r3
 800658e:	4666      	mov	r6, ip
 8006590:	fb03 8a19 	mls	sl, r3, r9, r8
 8006594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006598:	f1be 0f09 	cmp.w	lr, #9
 800659c:	d816      	bhi.n	80065cc <_strtol_l.constprop.0+0xa4>
 800659e:	4674      	mov	r4, lr
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	dd24      	ble.n	80065ee <_strtol_l.constprop.0+0xc6>
 80065a4:	f1bc 0f00 	cmp.w	ip, #0
 80065a8:	db1e      	blt.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065aa:	45b1      	cmp	r9, r6
 80065ac:	d31c      	bcc.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065ae:	d101      	bne.n	80065b4 <_strtol_l.constprop.0+0x8c>
 80065b0:	45a2      	cmp	sl, r4
 80065b2:	db19      	blt.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065b4:	fb06 4603 	mla	r6, r6, r3, r4
 80065b8:	f04f 0c01 	mov.w	ip, #1
 80065bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c0:	e7e8      	b.n	8006594 <_strtol_l.constprop.0+0x6c>
 80065c2:	2c2b      	cmp	r4, #43	; 0x2b
 80065c4:	bf04      	itt	eq
 80065c6:	782c      	ldrbeq	r4, [r5, #0]
 80065c8:	1cb5      	addeq	r5, r6, #2
 80065ca:	e7ca      	b.n	8006562 <_strtol_l.constprop.0+0x3a>
 80065cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80065d0:	f1be 0f19 	cmp.w	lr, #25
 80065d4:	d801      	bhi.n	80065da <_strtol_l.constprop.0+0xb2>
 80065d6:	3c37      	subs	r4, #55	; 0x37
 80065d8:	e7e2      	b.n	80065a0 <_strtol_l.constprop.0+0x78>
 80065da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80065de:	f1be 0f19 	cmp.w	lr, #25
 80065e2:	d804      	bhi.n	80065ee <_strtol_l.constprop.0+0xc6>
 80065e4:	3c57      	subs	r4, #87	; 0x57
 80065e6:	e7db      	b.n	80065a0 <_strtol_l.constprop.0+0x78>
 80065e8:	f04f 3cff 	mov.w	ip, #4294967295
 80065ec:	e7e6      	b.n	80065bc <_strtol_l.constprop.0+0x94>
 80065ee:	f1bc 0f00 	cmp.w	ip, #0
 80065f2:	da05      	bge.n	8006600 <_strtol_l.constprop.0+0xd8>
 80065f4:	2322      	movs	r3, #34	; 0x22
 80065f6:	6003      	str	r3, [r0, #0]
 80065f8:	4646      	mov	r6, r8
 80065fa:	b942      	cbnz	r2, 800660e <_strtol_l.constprop.0+0xe6>
 80065fc:	4630      	mov	r0, r6
 80065fe:	e79e      	b.n	800653e <_strtol_l.constprop.0+0x16>
 8006600:	b107      	cbz	r7, 8006604 <_strtol_l.constprop.0+0xdc>
 8006602:	4276      	negs	r6, r6
 8006604:	2a00      	cmp	r2, #0
 8006606:	d0f9      	beq.n	80065fc <_strtol_l.constprop.0+0xd4>
 8006608:	f1bc 0f00 	cmp.w	ip, #0
 800660c:	d000      	beq.n	8006610 <_strtol_l.constprop.0+0xe8>
 800660e:	1e69      	subs	r1, r5, #1
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	e7f3      	b.n	80065fc <_strtol_l.constprop.0+0xd4>
 8006614:	2430      	movs	r4, #48	; 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1b1      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800661a:	2308      	movs	r3, #8
 800661c:	e7af      	b.n	800657e <_strtol_l.constprop.0+0x56>
 800661e:	2c30      	cmp	r4, #48	; 0x30
 8006620:	d0a5      	beq.n	800656e <_strtol_l.constprop.0+0x46>
 8006622:	230a      	movs	r3, #10
 8006624:	e7ab      	b.n	800657e <_strtol_l.constprop.0+0x56>
 8006626:	bf00      	nop
 8006628:	08008bd1 	.word	0x08008bd1

0800662c <strtol>:
 800662c:	4613      	mov	r3, r2
 800662e:	460a      	mov	r2, r1
 8006630:	4601      	mov	r1, r0
 8006632:	4802      	ldr	r0, [pc, #8]	; (800663c <strtol+0x10>)
 8006634:	6800      	ldr	r0, [r0, #0]
 8006636:	f7ff bf77 	b.w	8006528 <_strtol_l.constprop.0>
 800663a:	bf00      	nop
 800663c:	2000001c 	.word	0x2000001c

08006640 <quorem>:
 8006640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	6903      	ldr	r3, [r0, #16]
 8006646:	690c      	ldr	r4, [r1, #16]
 8006648:	42a3      	cmp	r3, r4
 800664a:	4607      	mov	r7, r0
 800664c:	f2c0 8081 	blt.w	8006752 <quorem+0x112>
 8006650:	3c01      	subs	r4, #1
 8006652:	f101 0814 	add.w	r8, r1, #20
 8006656:	f100 0514 	add.w	r5, r0, #20
 800665a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006668:	3301      	adds	r3, #1
 800666a:	429a      	cmp	r2, r3
 800666c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006674:	fbb2 f6f3 	udiv	r6, r2, r3
 8006678:	d331      	bcc.n	80066de <quorem+0x9e>
 800667a:	f04f 0e00 	mov.w	lr, #0
 800667e:	4640      	mov	r0, r8
 8006680:	46ac      	mov	ip, r5
 8006682:	46f2      	mov	sl, lr
 8006684:	f850 2b04 	ldr.w	r2, [r0], #4
 8006688:	b293      	uxth	r3, r2
 800668a:	fb06 e303 	mla	r3, r6, r3, lr
 800668e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006692:	b29b      	uxth	r3, r3
 8006694:	ebaa 0303 	sub.w	r3, sl, r3
 8006698:	f8dc a000 	ldr.w	sl, [ip]
 800669c:	0c12      	lsrs	r2, r2, #16
 800669e:	fa13 f38a 	uxtah	r3, r3, sl
 80066a2:	fb06 e202 	mla	r2, r6, r2, lr
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	9b00      	ldr	r3, [sp, #0]
 80066aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ae:	b292      	uxth	r2, r2
 80066b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80066bc:	4581      	cmp	r9, r0
 80066be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c2:	f84c 3b04 	str.w	r3, [ip], #4
 80066c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066ca:	d2db      	bcs.n	8006684 <quorem+0x44>
 80066cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80066d0:	b92b      	cbnz	r3, 80066de <quorem+0x9e>
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	3b04      	subs	r3, #4
 80066d6:	429d      	cmp	r5, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	d32e      	bcc.n	800673a <quorem+0xfa>
 80066dc:	613c      	str	r4, [r7, #16]
 80066de:	4638      	mov	r0, r7
 80066e0:	f001 f8b6 	bl	8007850 <__mcmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	db24      	blt.n	8006732 <quorem+0xf2>
 80066e8:	3601      	adds	r6, #1
 80066ea:	4628      	mov	r0, r5
 80066ec:	f04f 0c00 	mov.w	ip, #0
 80066f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80066f4:	f8d0 e000 	ldr.w	lr, [r0]
 80066f8:	b293      	uxth	r3, r2
 80066fa:	ebac 0303 	sub.w	r3, ip, r3
 80066fe:	0c12      	lsrs	r2, r2, #16
 8006700:	fa13 f38e 	uxtah	r3, r3, lr
 8006704:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006712:	45c1      	cmp	r9, r8
 8006714:	f840 3b04 	str.w	r3, [r0], #4
 8006718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800671c:	d2e8      	bcs.n	80066f0 <quorem+0xb0>
 800671e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006726:	b922      	cbnz	r2, 8006732 <quorem+0xf2>
 8006728:	3b04      	subs	r3, #4
 800672a:	429d      	cmp	r5, r3
 800672c:	461a      	mov	r2, r3
 800672e:	d30a      	bcc.n	8006746 <quorem+0x106>
 8006730:	613c      	str	r4, [r7, #16]
 8006732:	4630      	mov	r0, r6
 8006734:	b003      	add	sp, #12
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	3b04      	subs	r3, #4
 800673e:	2a00      	cmp	r2, #0
 8006740:	d1cc      	bne.n	80066dc <quorem+0x9c>
 8006742:	3c01      	subs	r4, #1
 8006744:	e7c7      	b.n	80066d6 <quorem+0x96>
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	3b04      	subs	r3, #4
 800674a:	2a00      	cmp	r2, #0
 800674c:	d1f0      	bne.n	8006730 <quorem+0xf0>
 800674e:	3c01      	subs	r4, #1
 8006750:	e7eb      	b.n	800672a <quorem+0xea>
 8006752:	2000      	movs	r0, #0
 8006754:	e7ee      	b.n	8006734 <quorem+0xf4>
	...

08006758 <_dtoa_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	ed2d 8b04 	vpush	{d8-d9}
 8006760:	ec57 6b10 	vmov	r6, r7, d0
 8006764:	b093      	sub	sp, #76	; 0x4c
 8006766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800676c:	9106      	str	r1, [sp, #24]
 800676e:	ee10 aa10 	vmov	sl, s0
 8006772:	4604      	mov	r4, r0
 8006774:	9209      	str	r2, [sp, #36]	; 0x24
 8006776:	930c      	str	r3, [sp, #48]	; 0x30
 8006778:	46bb      	mov	fp, r7
 800677a:	b975      	cbnz	r5, 800679a <_dtoa_r+0x42>
 800677c:	2010      	movs	r0, #16
 800677e:	f000 fddd 	bl	800733c <malloc>
 8006782:	4602      	mov	r2, r0
 8006784:	6260      	str	r0, [r4, #36]	; 0x24
 8006786:	b920      	cbnz	r0, 8006792 <_dtoa_r+0x3a>
 8006788:	4ba7      	ldr	r3, [pc, #668]	; (8006a28 <_dtoa_r+0x2d0>)
 800678a:	21ea      	movs	r1, #234	; 0xea
 800678c:	48a7      	ldr	r0, [pc, #668]	; (8006a2c <_dtoa_r+0x2d4>)
 800678e:	f001 fbc3 	bl	8007f18 <__assert_func>
 8006792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006796:	6005      	str	r5, [r0, #0]
 8006798:	60c5      	str	r5, [r0, #12]
 800679a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800679c:	6819      	ldr	r1, [r3, #0]
 800679e:	b151      	cbz	r1, 80067b6 <_dtoa_r+0x5e>
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	604a      	str	r2, [r1, #4]
 80067a4:	2301      	movs	r3, #1
 80067a6:	4093      	lsls	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fe0e 	bl	80073cc <_Bfree>
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	1e3b      	subs	r3, r7, #0
 80067b8:	bfaa      	itet	ge
 80067ba:	2300      	movge	r3, #0
 80067bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067c0:	f8c8 3000 	strge.w	r3, [r8]
 80067c4:	4b9a      	ldr	r3, [pc, #616]	; (8006a30 <_dtoa_r+0x2d8>)
 80067c6:	bfbc      	itt	lt
 80067c8:	2201      	movlt	r2, #1
 80067ca:	f8c8 2000 	strlt.w	r2, [r8]
 80067ce:	ea33 030b 	bics.w	r3, r3, fp
 80067d2:	d11b      	bne.n	800680c <_dtoa_r+0xb4>
 80067d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067e0:	4333      	orrs	r3, r6
 80067e2:	f000 8592 	beq.w	800730a <_dtoa_r+0xbb2>
 80067e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e8:	b963      	cbnz	r3, 8006804 <_dtoa_r+0xac>
 80067ea:	4b92      	ldr	r3, [pc, #584]	; (8006a34 <_dtoa_r+0x2dc>)
 80067ec:	e022      	b.n	8006834 <_dtoa_r+0xdc>
 80067ee:	4b92      	ldr	r3, [pc, #584]	; (8006a38 <_dtoa_r+0x2e0>)
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	3308      	adds	r3, #8
 80067f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	9801      	ldr	r0, [sp, #4]
 80067fa:	b013      	add	sp, #76	; 0x4c
 80067fc:	ecbd 8b04 	vpop	{d8-d9}
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	4b8b      	ldr	r3, [pc, #556]	; (8006a34 <_dtoa_r+0x2dc>)
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	3303      	adds	r3, #3
 800680a:	e7f3      	b.n	80067f4 <_dtoa_r+0x9c>
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	4650      	mov	r0, sl
 8006812:	4659      	mov	r1, fp
 8006814:	f7fa f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8006818:	ec4b ab19 	vmov	d9, sl, fp
 800681c:	4680      	mov	r8, r0
 800681e:	b158      	cbz	r0, 8006838 <_dtoa_r+0xe0>
 8006820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006822:	2301      	movs	r3, #1
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 856b 	beq.w	8007304 <_dtoa_r+0xbac>
 800682e:	4883      	ldr	r0, [pc, #524]	; (8006a3c <_dtoa_r+0x2e4>)
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	1e43      	subs	r3, r0, #1
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	e7df      	b.n	80067f8 <_dtoa_r+0xa0>
 8006838:	ec4b ab10 	vmov	d0, sl, fp
 800683c:	aa10      	add	r2, sp, #64	; 0x40
 800683e:	a911      	add	r1, sp, #68	; 0x44
 8006840:	4620      	mov	r0, r4
 8006842:	f001 f8ab 	bl	800799c <__d2b>
 8006846:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800684a:	ee08 0a10 	vmov	s16, r0
 800684e:	2d00      	cmp	r5, #0
 8006850:	f000 8084 	beq.w	800695c <_dtoa_r+0x204>
 8006854:	ee19 3a90 	vmov	r3, s19
 8006858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800685c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006860:	4656      	mov	r6, sl
 8006862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800686a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800686e:	4b74      	ldr	r3, [pc, #464]	; (8006a40 <_dtoa_r+0x2e8>)
 8006870:	2200      	movs	r2, #0
 8006872:	4630      	mov	r0, r6
 8006874:	4639      	mov	r1, r7
 8006876:	f7f9 fd0f 	bl	8000298 <__aeabi_dsub>
 800687a:	a365      	add	r3, pc, #404	; (adr r3, 8006a10 <_dtoa_r+0x2b8>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7f9 fec2 	bl	8000608 <__aeabi_dmul>
 8006884:	a364      	add	r3, pc, #400	; (adr r3, 8006a18 <_dtoa_r+0x2c0>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fd07 	bl	800029c <__adddf3>
 800688e:	4606      	mov	r6, r0
 8006890:	4628      	mov	r0, r5
 8006892:	460f      	mov	r7, r1
 8006894:	f7f9 fe4e 	bl	8000534 <__aeabi_i2d>
 8006898:	a361      	add	r3, pc, #388	; (adr r3, 8006a20 <_dtoa_r+0x2c8>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f7f9 feb3 	bl	8000608 <__aeabi_dmul>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4630      	mov	r0, r6
 80068a8:	4639      	mov	r1, r7
 80068aa:	f7f9 fcf7 	bl	800029c <__adddf3>
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	f7fa f959 	bl	8000b68 <__aeabi_d2iz>
 80068b6:	2200      	movs	r2, #0
 80068b8:	9000      	str	r0, [sp, #0]
 80068ba:	2300      	movs	r3, #0
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f7fa f914 	bl	8000aec <__aeabi_dcmplt>
 80068c4:	b150      	cbz	r0, 80068dc <_dtoa_r+0x184>
 80068c6:	9800      	ldr	r0, [sp, #0]
 80068c8:	f7f9 fe34 	bl	8000534 <__aeabi_i2d>
 80068cc:	4632      	mov	r2, r6
 80068ce:	463b      	mov	r3, r7
 80068d0:	f7fa f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80068d4:	b910      	cbnz	r0, 80068dc <_dtoa_r+0x184>
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	2b16      	cmp	r3, #22
 80068e0:	d85a      	bhi.n	8006998 <_dtoa_r+0x240>
 80068e2:	9a00      	ldr	r2, [sp, #0]
 80068e4:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <_dtoa_r+0x2ec>)
 80068e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	ec51 0b19 	vmov	r0, r1, d9
 80068f2:	f7fa f8fb 	bl	8000aec <__aeabi_dcmplt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d050      	beq.n	800699c <_dtoa_r+0x244>
 80068fa:	9b00      	ldr	r3, [sp, #0]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2300      	movs	r3, #0
 8006902:	930b      	str	r3, [sp, #44]	; 0x2c
 8006904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006906:	1b5d      	subs	r5, r3, r5
 8006908:	1e6b      	subs	r3, r5, #1
 800690a:	9305      	str	r3, [sp, #20]
 800690c:	bf45      	ittet	mi
 800690e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006912:	9304      	strmi	r3, [sp, #16]
 8006914:	2300      	movpl	r3, #0
 8006916:	2300      	movmi	r3, #0
 8006918:	bf4c      	ite	mi
 800691a:	9305      	strmi	r3, [sp, #20]
 800691c:	9304      	strpl	r3, [sp, #16]
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	db3d      	blt.n	80069a0 <_dtoa_r+0x248>
 8006924:	9b05      	ldr	r3, [sp, #20]
 8006926:	9a00      	ldr	r2, [sp, #0]
 8006928:	920a      	str	r2, [sp, #40]	; 0x28
 800692a:	4413      	add	r3, r2
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	2300      	movs	r3, #0
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	9b06      	ldr	r3, [sp, #24]
 8006934:	2b09      	cmp	r3, #9
 8006936:	f200 8089 	bhi.w	8006a4c <_dtoa_r+0x2f4>
 800693a:	2b05      	cmp	r3, #5
 800693c:	bfc4      	itt	gt
 800693e:	3b04      	subgt	r3, #4
 8006940:	9306      	strgt	r3, [sp, #24]
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	f1a3 0302 	sub.w	r3, r3, #2
 8006948:	bfcc      	ite	gt
 800694a:	2500      	movgt	r5, #0
 800694c:	2501      	movle	r5, #1
 800694e:	2b03      	cmp	r3, #3
 8006950:	f200 8087 	bhi.w	8006a62 <_dtoa_r+0x30a>
 8006954:	e8df f003 	tbb	[pc, r3]
 8006958:	59383a2d 	.word	0x59383a2d
 800695c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006960:	441d      	add	r5, r3
 8006962:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006966:	2b20      	cmp	r3, #32
 8006968:	bfc1      	itttt	gt
 800696a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800696e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006972:	fa0b f303 	lslgt.w	r3, fp, r3
 8006976:	fa26 f000 	lsrgt.w	r0, r6, r0
 800697a:	bfda      	itte	le
 800697c:	f1c3 0320 	rsble	r3, r3, #32
 8006980:	fa06 f003 	lslle.w	r0, r6, r3
 8006984:	4318      	orrgt	r0, r3
 8006986:	f7f9 fdc5 	bl	8000514 <__aeabi_ui2d>
 800698a:	2301      	movs	r3, #1
 800698c:	4606      	mov	r6, r0
 800698e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006992:	3d01      	subs	r5, #1
 8006994:	930e      	str	r3, [sp, #56]	; 0x38
 8006996:	e76a      	b.n	800686e <_dtoa_r+0x116>
 8006998:	2301      	movs	r3, #1
 800699a:	e7b2      	b.n	8006902 <_dtoa_r+0x1aa>
 800699c:	900b      	str	r0, [sp, #44]	; 0x2c
 800699e:	e7b1      	b.n	8006904 <_dtoa_r+0x1ac>
 80069a0:	9b04      	ldr	r3, [sp, #16]
 80069a2:	9a00      	ldr	r2, [sp, #0]
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	9304      	str	r3, [sp, #16]
 80069a8:	4253      	negs	r3, r2
 80069aa:	9307      	str	r3, [sp, #28]
 80069ac:	2300      	movs	r3, #0
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
 80069b0:	e7bf      	b.n	8006932 <_dtoa_r+0x1da>
 80069b2:	2300      	movs	r3, #0
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dc55      	bgt.n	8006a68 <_dtoa_r+0x310>
 80069bc:	2301      	movs	r3, #1
 80069be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069c2:	461a      	mov	r2, r3
 80069c4:	9209      	str	r2, [sp, #36]	; 0x24
 80069c6:	e00c      	b.n	80069e2 <_dtoa_r+0x28a>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e7f3      	b.n	80069b4 <_dtoa_r+0x25c>
 80069cc:	2300      	movs	r3, #0
 80069ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	9b00      	ldr	r3, [sp, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	9302      	str	r3, [sp, #8]
 80069d8:	3301      	adds	r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	bfb8      	it	lt
 80069e0:	2301      	movlt	r3, #1
 80069e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069e4:	2200      	movs	r2, #0
 80069e6:	6042      	str	r2, [r0, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	f102 0614 	add.w	r6, r2, #20
 80069ee:	429e      	cmp	r6, r3
 80069f0:	6841      	ldr	r1, [r0, #4]
 80069f2:	d93d      	bls.n	8006a70 <_dtoa_r+0x318>
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fca9 	bl	800734c <_Balloc>
 80069fa:	9001      	str	r0, [sp, #4]
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d13b      	bne.n	8006a78 <_dtoa_r+0x320>
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <_dtoa_r+0x2f0>)
 8006a02:	4602      	mov	r2, r0
 8006a04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a08:	e6c0      	b.n	800678c <_dtoa_r+0x34>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e7df      	b.n	80069ce <_dtoa_r+0x276>
 8006a0e:	bf00      	nop
 8006a10:	636f4361 	.word	0x636f4361
 8006a14:	3fd287a7 	.word	0x3fd287a7
 8006a18:	8b60c8b3 	.word	0x8b60c8b3
 8006a1c:	3fc68a28 	.word	0x3fc68a28
 8006a20:	509f79fb 	.word	0x509f79fb
 8006a24:	3fd34413 	.word	0x3fd34413
 8006a28:	08008cde 	.word	0x08008cde
 8006a2c:	08008cf5 	.word	0x08008cf5
 8006a30:	7ff00000 	.word	0x7ff00000
 8006a34:	08008cda 	.word	0x08008cda
 8006a38:	08008cd1 	.word	0x08008cd1
 8006a3c:	08008bad 	.word	0x08008bad
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	08008de8 	.word	0x08008de8
 8006a48:	08008d50 	.word	0x08008d50
 8006a4c:	2501      	movs	r5, #1
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9306      	str	r3, [sp, #24]
 8006a52:	9508      	str	r5, [sp, #32]
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2312      	movs	r3, #18
 8006a60:	e7b0      	b.n	80069c4 <_dtoa_r+0x26c>
 8006a62:	2301      	movs	r3, #1
 8006a64:	9308      	str	r3, [sp, #32]
 8006a66:	e7f5      	b.n	8006a54 <_dtoa_r+0x2fc>
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a6e:	e7b8      	b.n	80069e2 <_dtoa_r+0x28a>
 8006a70:	3101      	adds	r1, #1
 8006a72:	6041      	str	r1, [r0, #4]
 8006a74:	0052      	lsls	r2, r2, #1
 8006a76:	e7b8      	b.n	80069ea <_dtoa_r+0x292>
 8006a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	2b0e      	cmp	r3, #14
 8006a82:	f200 809d 	bhi.w	8006bc0 <_dtoa_r+0x468>
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	f000 809a 	beq.w	8006bc0 <_dtoa_r+0x468>
 8006a8c:	9b00      	ldr	r3, [sp, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	dd32      	ble.n	8006af8 <_dtoa_r+0x3a0>
 8006a92:	4ab7      	ldr	r2, [pc, #732]	; (8006d70 <_dtoa_r+0x618>)
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa0:	9b00      	ldr	r3, [sp, #0]
 8006aa2:	05d8      	lsls	r0, r3, #23
 8006aa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006aa8:	d516      	bpl.n	8006ad8 <_dtoa_r+0x380>
 8006aaa:	4bb2      	ldr	r3, [pc, #712]	; (8006d74 <_dtoa_r+0x61c>)
 8006aac:	ec51 0b19 	vmov	r0, r1, d9
 8006ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ab4:	f7f9 fed2 	bl	800085c <__aeabi_ddiv>
 8006ab8:	f007 070f 	and.w	r7, r7, #15
 8006abc:	4682      	mov	sl, r0
 8006abe:	468b      	mov	fp, r1
 8006ac0:	2503      	movs	r5, #3
 8006ac2:	4eac      	ldr	r6, [pc, #688]	; (8006d74 <_dtoa_r+0x61c>)
 8006ac4:	b957      	cbnz	r7, 8006adc <_dtoa_r+0x384>
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	464b      	mov	r3, r9
 8006aca:	4650      	mov	r0, sl
 8006acc:	4659      	mov	r1, fp
 8006ace:	f7f9 fec5 	bl	800085c <__aeabi_ddiv>
 8006ad2:	4682      	mov	sl, r0
 8006ad4:	468b      	mov	fp, r1
 8006ad6:	e028      	b.n	8006b2a <_dtoa_r+0x3d2>
 8006ad8:	2502      	movs	r5, #2
 8006ada:	e7f2      	b.n	8006ac2 <_dtoa_r+0x36a>
 8006adc:	07f9      	lsls	r1, r7, #31
 8006ade:	d508      	bpl.n	8006af2 <_dtoa_r+0x39a>
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ae8:	f7f9 fd8e 	bl	8000608 <__aeabi_dmul>
 8006aec:	3501      	adds	r5, #1
 8006aee:	4680      	mov	r8, r0
 8006af0:	4689      	mov	r9, r1
 8006af2:	107f      	asrs	r7, r7, #1
 8006af4:	3608      	adds	r6, #8
 8006af6:	e7e5      	b.n	8006ac4 <_dtoa_r+0x36c>
 8006af8:	f000 809b 	beq.w	8006c32 <_dtoa_r+0x4da>
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	4f9d      	ldr	r7, [pc, #628]	; (8006d74 <_dtoa_r+0x61c>)
 8006b00:	425e      	negs	r6, r3
 8006b02:	4b9b      	ldr	r3, [pc, #620]	; (8006d70 <_dtoa_r+0x618>)
 8006b04:	f006 020f 	and.w	r2, r6, #15
 8006b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	ec51 0b19 	vmov	r0, r1, d9
 8006b14:	f7f9 fd78 	bl	8000608 <__aeabi_dmul>
 8006b18:	1136      	asrs	r6, r6, #4
 8006b1a:	4682      	mov	sl, r0
 8006b1c:	468b      	mov	fp, r1
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2502      	movs	r5, #2
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	d17a      	bne.n	8006c1c <_dtoa_r+0x4c4>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1d3      	bne.n	8006ad2 <_dtoa_r+0x37a>
 8006b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8082 	beq.w	8006c36 <_dtoa_r+0x4de>
 8006b32:	4b91      	ldr	r3, [pc, #580]	; (8006d78 <_dtoa_r+0x620>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	4650      	mov	r0, sl
 8006b38:	4659      	mov	r1, fp
 8006b3a:	f7f9 ffd7 	bl	8000aec <__aeabi_dcmplt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d079      	beq.n	8006c36 <_dtoa_r+0x4de>
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d076      	beq.n	8006c36 <_dtoa_r+0x4de>
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dd36      	ble.n	8006bbc <_dtoa_r+0x464>
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	1e5f      	subs	r7, r3, #1
 8006b56:	2200      	movs	r2, #0
 8006b58:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <_dtoa_r+0x624>)
 8006b5a:	f7f9 fd55 	bl	8000608 <__aeabi_dmul>
 8006b5e:	9e02      	ldr	r6, [sp, #8]
 8006b60:	4682      	mov	sl, r0
 8006b62:	468b      	mov	fp, r1
 8006b64:	3501      	adds	r5, #1
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7f9 fce4 	bl	8000534 <__aeabi_i2d>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	465b      	mov	r3, fp
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	4b82      	ldr	r3, [pc, #520]	; (8006d80 <_dtoa_r+0x628>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	f7f9 fb90 	bl	800029c <__adddf3>
 8006b7c:	46d0      	mov	r8, sl
 8006b7e:	46d9      	mov	r9, fp
 8006b80:	4682      	mov	sl, r0
 8006b82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d158      	bne.n	8006c3c <_dtoa_r+0x4e4>
 8006b8a:	4b7e      	ldr	r3, [pc, #504]	; (8006d84 <_dtoa_r+0x62c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4649      	mov	r1, r9
 8006b92:	f7f9 fb81 	bl	8000298 <__aeabi_dsub>
 8006b96:	4652      	mov	r2, sl
 8006b98:	465b      	mov	r3, fp
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	4689      	mov	r9, r1
 8006b9e:	f7f9 ffc3 	bl	8000b28 <__aeabi_dcmpgt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f040 8295 	bne.w	80070d2 <_dtoa_r+0x97a>
 8006ba8:	4652      	mov	r2, sl
 8006baa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f040 8289 	bne.w	80070ce <_dtoa_r+0x976>
 8006bbc:	ec5b ab19 	vmov	sl, fp, d9
 8006bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f2c0 8148 	blt.w	8006e58 <_dtoa_r+0x700>
 8006bc8:	9a00      	ldr	r2, [sp, #0]
 8006bca:	2a0e      	cmp	r2, #14
 8006bcc:	f300 8144 	bgt.w	8006e58 <_dtoa_r+0x700>
 8006bd0:	4b67      	ldr	r3, [pc, #412]	; (8006d70 <_dtoa_r+0x618>)
 8006bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f280 80d5 	bge.w	8006d8c <_dtoa_r+0x634>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f300 80d1 	bgt.w	8006d8c <_dtoa_r+0x634>
 8006bea:	f040 826f 	bne.w	80070cc <_dtoa_r+0x974>
 8006bee:	4b65      	ldr	r3, [pc, #404]	; (8006d84 <_dtoa_r+0x62c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	f7f9 ff89 	bl	8000b14 <__aeabi_dcmpge>
 8006c02:	9e03      	ldr	r6, [sp, #12]
 8006c04:	4637      	mov	r7, r6
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 8245 	bne.w	8007096 <_dtoa_r+0x93e>
 8006c0c:	9d01      	ldr	r5, [sp, #4]
 8006c0e:	2331      	movs	r3, #49	; 0x31
 8006c10:	f805 3b01 	strb.w	r3, [r5], #1
 8006c14:	9b00      	ldr	r3, [sp, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	e240      	b.n	800709e <_dtoa_r+0x946>
 8006c1c:	07f2      	lsls	r2, r6, #31
 8006c1e:	d505      	bpl.n	8006c2c <_dtoa_r+0x4d4>
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	f7f9 fcf0 	bl	8000608 <__aeabi_dmul>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	1076      	asrs	r6, r6, #1
 8006c2e:	3708      	adds	r7, #8
 8006c30:	e777      	b.n	8006b22 <_dtoa_r+0x3ca>
 8006c32:	2502      	movs	r5, #2
 8006c34:	e779      	b.n	8006b2a <_dtoa_r+0x3d2>
 8006c36:	9f00      	ldr	r7, [sp, #0]
 8006c38:	9e03      	ldr	r6, [sp, #12]
 8006c3a:	e794      	b.n	8006b66 <_dtoa_r+0x40e>
 8006c3c:	9901      	ldr	r1, [sp, #4]
 8006c3e:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <_dtoa_r+0x618>)
 8006c40:	4431      	add	r1, r6
 8006c42:	910d      	str	r1, [sp, #52]	; 0x34
 8006c44:	9908      	ldr	r1, [sp, #32]
 8006c46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d043      	beq.n	8006cda <_dtoa_r+0x582>
 8006c52:	494d      	ldr	r1, [pc, #308]	; (8006d88 <_dtoa_r+0x630>)
 8006c54:	2000      	movs	r0, #0
 8006c56:	f7f9 fe01 	bl	800085c <__aeabi_ddiv>
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	f7f9 fb1b 	bl	8000298 <__aeabi_dsub>
 8006c62:	9d01      	ldr	r5, [sp, #4]
 8006c64:	4682      	mov	sl, r0
 8006c66:	468b      	mov	fp, r1
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7f9 ff7c 	bl	8000b68 <__aeabi_d2iz>
 8006c70:	4606      	mov	r6, r0
 8006c72:	f7f9 fc5f 	bl	8000534 <__aeabi_i2d>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fb0b 	bl	8000298 <__aeabi_dsub>
 8006c82:	3630      	adds	r6, #48	; 0x30
 8006c84:	f805 6b01 	strb.w	r6, [r5], #1
 8006c88:	4652      	mov	r2, sl
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	f7f9 ff2c 	bl	8000aec <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d163      	bne.n	8006d60 <_dtoa_r+0x608>
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4936      	ldr	r1, [pc, #216]	; (8006d78 <_dtoa_r+0x620>)
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f7f9 fafa 	bl	8000298 <__aeabi_dsub>
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	465b      	mov	r3, fp
 8006ca8:	f7f9 ff20 	bl	8000aec <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f040 80b5 	bne.w	8006e1c <_dtoa_r+0x6c4>
 8006cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb4:	429d      	cmp	r5, r3
 8006cb6:	d081      	beq.n	8006bbc <_dtoa_r+0x464>
 8006cb8:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <_dtoa_r+0x624>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <_dtoa_r+0x624>)
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	468b      	mov	fp, r1
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f7f9 fc9a 	bl	8000608 <__aeabi_dmul>
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	4689      	mov	r9, r1
 8006cd8:	e7c6      	b.n	8006c68 <_dtoa_r+0x510>
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4659      	mov	r1, fp
 8006cde:	f7f9 fc93 	bl	8000608 <__aeabi_dmul>
 8006ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ce4:	9d01      	ldr	r5, [sp, #4]
 8006ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ce8:	4682      	mov	sl, r0
 8006cea:	468b      	mov	fp, r1
 8006cec:	4649      	mov	r1, r9
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7f9 ff3a 	bl	8000b68 <__aeabi_d2iz>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	f7f9 fc1d 	bl	8000534 <__aeabi_i2d>
 8006cfa:	3630      	adds	r6, #48	; 0x30
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fac8 	bl	8000298 <__aeabi_dsub>
 8006d08:	f805 6b01 	strb.w	r6, [r5], #1
 8006d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	4680      	mov	r8, r0
 8006d12:	4689      	mov	r9, r1
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	d124      	bne.n	8006d64 <_dtoa_r+0x60c>
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <_dtoa_r+0x630>)
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	4659      	mov	r1, fp
 8006d20:	f7f9 fabc 	bl	800029c <__adddf3>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	f7f9 fefc 	bl	8000b28 <__aeabi_dcmpgt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d173      	bne.n	8006e1c <_dtoa_r+0x6c4>
 8006d34:	4652      	mov	r2, sl
 8006d36:	465b      	mov	r3, fp
 8006d38:	4913      	ldr	r1, [pc, #76]	; (8006d88 <_dtoa_r+0x630>)
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7f9 faac 	bl	8000298 <__aeabi_dsub>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4640      	mov	r0, r8
 8006d46:	4649      	mov	r1, r9
 8006d48:	f7f9 fed0 	bl	8000aec <__aeabi_dcmplt>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f43f af35 	beq.w	8006bbc <_dtoa_r+0x464>
 8006d52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d54:	1e6b      	subs	r3, r5, #1
 8006d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d0f8      	beq.n	8006d52 <_dtoa_r+0x5fa>
 8006d60:	9700      	str	r7, [sp, #0]
 8006d62:	e049      	b.n	8006df8 <_dtoa_r+0x6a0>
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <_dtoa_r+0x624>)
 8006d66:	f7f9 fc4f 	bl	8000608 <__aeabi_dmul>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	e7bd      	b.n	8006cec <_dtoa_r+0x594>
 8006d70:	08008de8 	.word	0x08008de8
 8006d74:	08008dc0 	.word	0x08008dc0
 8006d78:	3ff00000 	.word	0x3ff00000
 8006d7c:	40240000 	.word	0x40240000
 8006d80:	401c0000 	.word	0x401c0000
 8006d84:	40140000 	.word	0x40140000
 8006d88:	3fe00000 	.word	0x3fe00000
 8006d8c:	9d01      	ldr	r5, [sp, #4]
 8006d8e:	4656      	mov	r6, sl
 8006d90:	465f      	mov	r7, fp
 8006d92:	4642      	mov	r2, r8
 8006d94:	464b      	mov	r3, r9
 8006d96:	4630      	mov	r0, r6
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fd5f 	bl	800085c <__aeabi_ddiv>
 8006d9e:	f7f9 fee3 	bl	8000b68 <__aeabi_d2iz>
 8006da2:	4682      	mov	sl, r0
 8006da4:	f7f9 fbc6 	bl	8000534 <__aeabi_i2d>
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	f7f9 fc2c 	bl	8000608 <__aeabi_dmul>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006dbc:	f7f9 fa6c 	bl	8000298 <__aeabi_dsub>
 8006dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8006dc4:	9e01      	ldr	r6, [sp, #4]
 8006dc6:	9f03      	ldr	r7, [sp, #12]
 8006dc8:	1bae      	subs	r6, r5, r6
 8006dca:	42b7      	cmp	r7, r6
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	d135      	bne.n	8006e3e <_dtoa_r+0x6e6>
 8006dd2:	f7f9 fa63 	bl	800029c <__adddf3>
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	464b      	mov	r3, r9
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	f7f9 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 8006de2:	b9d0      	cbnz	r0, 8006e1a <_dtoa_r+0x6c2>
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	4630      	mov	r0, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	f7f9 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8006df0:	b110      	cbz	r0, 8006df8 <_dtoa_r+0x6a0>
 8006df2:	f01a 0f01 	tst.w	sl, #1
 8006df6:	d110      	bne.n	8006e1a <_dtoa_r+0x6c2>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	ee18 1a10 	vmov	r1, s16
 8006dfe:	f000 fae5 	bl	80073cc <_Bfree>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9800      	ldr	r0, [sp, #0]
 8006e06:	702b      	strb	r3, [r5, #0]
 8006e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	6018      	str	r0, [r3, #0]
 8006e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f43f acf1 	beq.w	80067f8 <_dtoa_r+0xa0>
 8006e16:	601d      	str	r5, [r3, #0]
 8006e18:	e4ee      	b.n	80067f8 <_dtoa_r+0xa0>
 8006e1a:	9f00      	ldr	r7, [sp, #0]
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	461d      	mov	r5, r3
 8006e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e24:	2a39      	cmp	r2, #57	; 0x39
 8006e26:	d106      	bne.n	8006e36 <_dtoa_r+0x6de>
 8006e28:	9a01      	ldr	r2, [sp, #4]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d1f7      	bne.n	8006e1e <_dtoa_r+0x6c6>
 8006e2e:	9901      	ldr	r1, [sp, #4]
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	3701      	adds	r7, #1
 8006e34:	700a      	strb	r2, [r1, #0]
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e790      	b.n	8006d60 <_dtoa_r+0x608>
 8006e3e:	4ba6      	ldr	r3, [pc, #664]	; (80070d8 <_dtoa_r+0x980>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fbe1 	bl	8000608 <__aeabi_dmul>
 8006e46:	2200      	movs	r2, #0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	f7f9 fe43 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d09d      	beq.n	8006d92 <_dtoa_r+0x63a>
 8006e56:	e7cf      	b.n	8006df8 <_dtoa_r+0x6a0>
 8006e58:	9a08      	ldr	r2, [sp, #32]
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	f000 80d7 	beq.w	800700e <_dtoa_r+0x8b6>
 8006e60:	9a06      	ldr	r2, [sp, #24]
 8006e62:	2a01      	cmp	r2, #1
 8006e64:	f300 80ba 	bgt.w	8006fdc <_dtoa_r+0x884>
 8006e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	f000 80b2 	beq.w	8006fd4 <_dtoa_r+0x87c>
 8006e70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e74:	9e07      	ldr	r6, [sp, #28]
 8006e76:	9d04      	ldr	r5, [sp, #16]
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	441a      	add	r2, r3
 8006e7c:	9204      	str	r2, [sp, #16]
 8006e7e:	9a05      	ldr	r2, [sp, #20]
 8006e80:	2101      	movs	r1, #1
 8006e82:	441a      	add	r2, r3
 8006e84:	4620      	mov	r0, r4
 8006e86:	9205      	str	r2, [sp, #20]
 8006e88:	f000 fb58 	bl	800753c <__i2b>
 8006e8c:	4607      	mov	r7, r0
 8006e8e:	2d00      	cmp	r5, #0
 8006e90:	dd0c      	ble.n	8006eac <_dtoa_r+0x754>
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dd09      	ble.n	8006eac <_dtoa_r+0x754>
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	9a04      	ldr	r2, [sp, #16]
 8006e9c:	bfa8      	it	ge
 8006e9e:	462b      	movge	r3, r5
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	9204      	str	r2, [sp, #16]
 8006ea4:	9a05      	ldr	r2, [sp, #20]
 8006ea6:	1aed      	subs	r5, r5, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	9305      	str	r3, [sp, #20]
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	b31b      	cbz	r3, 8006ef8 <_dtoa_r+0x7a0>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80af 	beq.w	8007016 <_dtoa_r+0x8be>
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	dd13      	ble.n	8006ee4 <_dtoa_r+0x78c>
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fbfb 	bl	80076bc <__pow5mult>
 8006ec6:	ee18 2a10 	vmov	r2, s16
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4607      	mov	r7, r0
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fb4a 	bl	8007568 <__multiply>
 8006ed4:	ee18 1a10 	vmov	r1, s16
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 fa76 	bl	80073cc <_Bfree>
 8006ee0:	ee08 8a10 	vmov	s16, r8
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	1b9a      	subs	r2, r3, r6
 8006ee8:	d006      	beq.n	8006ef8 <_dtoa_r+0x7a0>
 8006eea:	ee18 1a10 	vmov	r1, s16
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 fbe4 	bl	80076bc <__pow5mult>
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fb1e 	bl	800753c <__i2b>
 8006f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	4606      	mov	r6, r0
 8006f06:	f340 8088 	ble.w	800701a <_dtoa_r+0x8c2>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fbd4 	bl	80076bc <__pow5mult>
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	4606      	mov	r6, r0
 8006f1a:	f340 8081 	ble.w	8007020 <_dtoa_r+0x8c8>
 8006f1e:	f04f 0800 	mov.w	r8, #0
 8006f22:	6933      	ldr	r3, [r6, #16]
 8006f24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f28:	6918      	ldr	r0, [r3, #16]
 8006f2a:	f000 fab7 	bl	800749c <__hi0bits>
 8006f2e:	f1c0 0020 	rsb	r0, r0, #32
 8006f32:	9b05      	ldr	r3, [sp, #20]
 8006f34:	4418      	add	r0, r3
 8006f36:	f010 001f 	ands.w	r0, r0, #31
 8006f3a:	f000 8092 	beq.w	8007062 <_dtoa_r+0x90a>
 8006f3e:	f1c0 0320 	rsb	r3, r0, #32
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	f340 808a 	ble.w	800705c <_dtoa_r+0x904>
 8006f48:	f1c0 001c 	rsb	r0, r0, #28
 8006f4c:	9b04      	ldr	r3, [sp, #16]
 8006f4e:	4403      	add	r3, r0
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	4403      	add	r3, r0
 8006f56:	4405      	add	r5, r0
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd07      	ble.n	8006f70 <_dtoa_r+0x818>
 8006f60:	ee18 1a10 	vmov	r1, s16
 8006f64:	461a      	mov	r2, r3
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 fc02 	bl	8007770 <__lshift>
 8006f6c:	ee08 0a10 	vmov	s16, r0
 8006f70:	9b05      	ldr	r3, [sp, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd05      	ble.n	8006f82 <_dtoa_r+0x82a>
 8006f76:	4631      	mov	r1, r6
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fbf8 	bl	8007770 <__lshift>
 8006f80:	4606      	mov	r6, r0
 8006f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d06e      	beq.n	8007066 <_dtoa_r+0x90e>
 8006f88:	ee18 0a10 	vmov	r0, s16
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	f000 fc5f 	bl	8007850 <__mcmp>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	da67      	bge.n	8007066 <_dtoa_r+0x90e>
 8006f96:	9b00      	ldr	r3, [sp, #0]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	ee18 1a10 	vmov	r1, s16
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fa33 	bl	8007410 <__multadd>
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	ee08 0a10 	vmov	s16, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 81b1 	beq.w	8007318 <_dtoa_r+0xbc0>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4639      	mov	r1, r7
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fa27 	bl	8007410 <__multadd>
 8006fc2:	9b02      	ldr	r3, [sp, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f300 808e 	bgt.w	80070e8 <_dtoa_r+0x990>
 8006fcc:	9b06      	ldr	r3, [sp, #24]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	dc51      	bgt.n	8007076 <_dtoa_r+0x91e>
 8006fd2:	e089      	b.n	80070e8 <_dtoa_r+0x990>
 8006fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fda:	e74b      	b.n	8006e74 <_dtoa_r+0x71c>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	1e5e      	subs	r6, r3, #1
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	42b3      	cmp	r3, r6
 8006fe4:	bfbf      	itttt	lt
 8006fe6:	9b07      	ldrlt	r3, [sp, #28]
 8006fe8:	9607      	strlt	r6, [sp, #28]
 8006fea:	1af2      	sublt	r2, r6, r3
 8006fec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006fee:	bfb6      	itet	lt
 8006ff0:	189b      	addlt	r3, r3, r2
 8006ff2:	1b9e      	subge	r6, r3, r6
 8006ff4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	bfb8      	it	lt
 8006ffa:	2600      	movlt	r6, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfb7      	itett	lt
 8007000:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007004:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007008:	1a9d      	sublt	r5, r3, r2
 800700a:	2300      	movlt	r3, #0
 800700c:	e734      	b.n	8006e78 <_dtoa_r+0x720>
 800700e:	9e07      	ldr	r6, [sp, #28]
 8007010:	9d04      	ldr	r5, [sp, #16]
 8007012:	9f08      	ldr	r7, [sp, #32]
 8007014:	e73b      	b.n	8006e8e <_dtoa_r+0x736>
 8007016:	9a07      	ldr	r2, [sp, #28]
 8007018:	e767      	b.n	8006eea <_dtoa_r+0x792>
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	2b01      	cmp	r3, #1
 800701e:	dc18      	bgt.n	8007052 <_dtoa_r+0x8fa>
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	d115      	bne.n	8007052 <_dtoa_r+0x8fa>
 8007026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800702a:	b993      	cbnz	r3, 8007052 <_dtoa_r+0x8fa>
 800702c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	051b      	lsls	r3, r3, #20
 8007034:	b183      	cbz	r3, 8007058 <_dtoa_r+0x900>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	3301      	adds	r3, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	9b05      	ldr	r3, [sp, #20]
 800703e:	3301      	adds	r3, #1
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	f04f 0801 	mov.w	r8, #1
 8007046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	f47f af6a 	bne.w	8006f22 <_dtoa_r+0x7ca>
 800704e:	2001      	movs	r0, #1
 8007050:	e76f      	b.n	8006f32 <_dtoa_r+0x7da>
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	e7f6      	b.n	8007046 <_dtoa_r+0x8ee>
 8007058:	4698      	mov	r8, r3
 800705a:	e7f4      	b.n	8007046 <_dtoa_r+0x8ee>
 800705c:	f43f af7d 	beq.w	8006f5a <_dtoa_r+0x802>
 8007060:	4618      	mov	r0, r3
 8007062:	301c      	adds	r0, #28
 8007064:	e772      	b.n	8006f4c <_dtoa_r+0x7f4>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	dc37      	bgt.n	80070dc <_dtoa_r+0x984>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	2b02      	cmp	r3, #2
 8007070:	dd34      	ble.n	80070dc <_dtoa_r+0x984>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	b96b      	cbnz	r3, 8007096 <_dtoa_r+0x93e>
 800707a:	4631      	mov	r1, r6
 800707c:	2205      	movs	r2, #5
 800707e:	4620      	mov	r0, r4
 8007080:	f000 f9c6 	bl	8007410 <__multadd>
 8007084:	4601      	mov	r1, r0
 8007086:	4606      	mov	r6, r0
 8007088:	ee18 0a10 	vmov	r0, s16
 800708c:	f000 fbe0 	bl	8007850 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	f73f adbb 	bgt.w	8006c0c <_dtoa_r+0x4b4>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	9d01      	ldr	r5, [sp, #4]
 800709a:	43db      	mvns	r3, r3
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	4631      	mov	r1, r6
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 f991 	bl	80073cc <_Bfree>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	f43f aea4 	beq.w	8006df8 <_dtoa_r+0x6a0>
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	d005      	beq.n	80070c2 <_dtoa_r+0x96a>
 80070b6:	45b8      	cmp	r8, r7
 80070b8:	d003      	beq.n	80070c2 <_dtoa_r+0x96a>
 80070ba:	4641      	mov	r1, r8
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 f985 	bl	80073cc <_Bfree>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 f981 	bl	80073cc <_Bfree>
 80070ca:	e695      	b.n	8006df8 <_dtoa_r+0x6a0>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4637      	mov	r7, r6
 80070d0:	e7e1      	b.n	8007096 <_dtoa_r+0x93e>
 80070d2:	9700      	str	r7, [sp, #0]
 80070d4:	4637      	mov	r7, r6
 80070d6:	e599      	b.n	8006c0c <_dtoa_r+0x4b4>
 80070d8:	40240000 	.word	0x40240000
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80ca 	beq.w	8007278 <_dtoa_r+0xb20>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	9302      	str	r3, [sp, #8]
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x9a0>
 80070ec:	4639      	mov	r1, r7
 80070ee:	462a      	mov	r2, r5
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fb3d 	bl	8007770 <__lshift>
 80070f6:	4607      	mov	r7, r0
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	d05b      	beq.n	80071b6 <_dtoa_r+0xa5e>
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 f923 	bl	800734c <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b928      	cbnz	r0, 8007116 <_dtoa_r+0x9be>
 800710a:	4b87      	ldr	r3, [pc, #540]	; (8007328 <_dtoa_r+0xbd0>)
 800710c:	4602      	mov	r2, r0
 800710e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007112:	f7ff bb3b 	b.w	800678c <_dtoa_r+0x34>
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	f107 010c 	add.w	r1, r7, #12
 8007120:	300c      	adds	r0, #12
 8007122:	f7fe fd4d 	bl	8005bc0 <memcpy>
 8007126:	2201      	movs	r2, #1
 8007128:	4629      	mov	r1, r5
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fb20 	bl	8007770 <__lshift>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	f103 0901 	add.w	r9, r3, #1
 8007136:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800713a:	4413      	add	r3, r2
 800713c:	9305      	str	r3, [sp, #20]
 800713e:	f00a 0301 	and.w	r3, sl, #1
 8007142:	46b8      	mov	r8, r7
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	4607      	mov	r7, r0
 8007148:	4631      	mov	r1, r6
 800714a:	ee18 0a10 	vmov	r0, s16
 800714e:	f7ff fa77 	bl	8006640 <quorem>
 8007152:	4641      	mov	r1, r8
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800715a:	ee18 0a10 	vmov	r0, s16
 800715e:	f000 fb77 	bl	8007850 <__mcmp>
 8007162:	463a      	mov	r2, r7
 8007164:	9003      	str	r0, [sp, #12]
 8007166:	4631      	mov	r1, r6
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fb8d 	bl	8007888 <__mdiff>
 800716e:	68c2      	ldr	r2, [r0, #12]
 8007170:	f109 3bff 	add.w	fp, r9, #4294967295
 8007174:	4605      	mov	r5, r0
 8007176:	bb02      	cbnz	r2, 80071ba <_dtoa_r+0xa62>
 8007178:	4601      	mov	r1, r0
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	f000 fb67 	bl	8007850 <__mcmp>
 8007182:	4602      	mov	r2, r0
 8007184:	4629      	mov	r1, r5
 8007186:	4620      	mov	r0, r4
 8007188:	9207      	str	r2, [sp, #28]
 800718a:	f000 f91f 	bl	80073cc <_Bfree>
 800718e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007192:	ea43 0102 	orr.w	r1, r3, r2
 8007196:	9b04      	ldr	r3, [sp, #16]
 8007198:	430b      	orrs	r3, r1
 800719a:	464d      	mov	r5, r9
 800719c:	d10f      	bne.n	80071be <_dtoa_r+0xa66>
 800719e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071a2:	d02a      	beq.n	80071fa <_dtoa_r+0xaa2>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd02      	ble.n	80071b0 <_dtoa_r+0xa58>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071b0:	f88b a000 	strb.w	sl, [fp]
 80071b4:	e775      	b.n	80070a2 <_dtoa_r+0x94a>
 80071b6:	4638      	mov	r0, r7
 80071b8:	e7ba      	b.n	8007130 <_dtoa_r+0x9d8>
 80071ba:	2201      	movs	r2, #1
 80071bc:	e7e2      	b.n	8007184 <_dtoa_r+0xa2c>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	db04      	blt.n	80071ce <_dtoa_r+0xa76>
 80071c4:	9906      	ldr	r1, [sp, #24]
 80071c6:	430b      	orrs	r3, r1
 80071c8:	9904      	ldr	r1, [sp, #16]
 80071ca:	430b      	orrs	r3, r1
 80071cc:	d122      	bne.n	8007214 <_dtoa_r+0xabc>
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	ddee      	ble.n	80071b0 <_dtoa_r+0xa58>
 80071d2:	ee18 1a10 	vmov	r1, s16
 80071d6:	2201      	movs	r2, #1
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fac9 	bl	8007770 <__lshift>
 80071de:	4631      	mov	r1, r6
 80071e0:	ee08 0a10 	vmov	s16, r0
 80071e4:	f000 fb34 	bl	8007850 <__mcmp>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	dc03      	bgt.n	80071f4 <_dtoa_r+0xa9c>
 80071ec:	d1e0      	bne.n	80071b0 <_dtoa_r+0xa58>
 80071ee:	f01a 0f01 	tst.w	sl, #1
 80071f2:	d0dd      	beq.n	80071b0 <_dtoa_r+0xa58>
 80071f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071f8:	d1d7      	bne.n	80071aa <_dtoa_r+0xa52>
 80071fa:	2339      	movs	r3, #57	; 0x39
 80071fc:	f88b 3000 	strb.w	r3, [fp]
 8007200:	462b      	mov	r3, r5
 8007202:	461d      	mov	r5, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800720a:	2a39      	cmp	r2, #57	; 0x39
 800720c:	d071      	beq.n	80072f2 <_dtoa_r+0xb9a>
 800720e:	3201      	adds	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e746      	b.n	80070a2 <_dtoa_r+0x94a>
 8007214:	2a00      	cmp	r2, #0
 8007216:	dd07      	ble.n	8007228 <_dtoa_r+0xad0>
 8007218:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800721c:	d0ed      	beq.n	80071fa <_dtoa_r+0xaa2>
 800721e:	f10a 0301 	add.w	r3, sl, #1
 8007222:	f88b 3000 	strb.w	r3, [fp]
 8007226:	e73c      	b.n	80070a2 <_dtoa_r+0x94a>
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800722e:	4599      	cmp	r9, r3
 8007230:	d047      	beq.n	80072c2 <_dtoa_r+0xb6a>
 8007232:	ee18 1a10 	vmov	r1, s16
 8007236:	2300      	movs	r3, #0
 8007238:	220a      	movs	r2, #10
 800723a:	4620      	mov	r0, r4
 800723c:	f000 f8e8 	bl	8007410 <__multadd>
 8007240:	45b8      	cmp	r8, r7
 8007242:	ee08 0a10 	vmov	s16, r0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	f04f 020a 	mov.w	r2, #10
 800724e:	4641      	mov	r1, r8
 8007250:	4620      	mov	r0, r4
 8007252:	d106      	bne.n	8007262 <_dtoa_r+0xb0a>
 8007254:	f000 f8dc 	bl	8007410 <__multadd>
 8007258:	4680      	mov	r8, r0
 800725a:	4607      	mov	r7, r0
 800725c:	f109 0901 	add.w	r9, r9, #1
 8007260:	e772      	b.n	8007148 <_dtoa_r+0x9f0>
 8007262:	f000 f8d5 	bl	8007410 <__multadd>
 8007266:	4639      	mov	r1, r7
 8007268:	4680      	mov	r8, r0
 800726a:	2300      	movs	r3, #0
 800726c:	220a      	movs	r2, #10
 800726e:	4620      	mov	r0, r4
 8007270:	f000 f8ce 	bl	8007410 <__multadd>
 8007274:	4607      	mov	r7, r0
 8007276:	e7f1      	b.n	800725c <_dtoa_r+0xb04>
 8007278:	9b03      	ldr	r3, [sp, #12]
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	9d01      	ldr	r5, [sp, #4]
 800727e:	ee18 0a10 	vmov	r0, s16
 8007282:	4631      	mov	r1, r6
 8007284:	f7ff f9dc 	bl	8006640 <quorem>
 8007288:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	f805 ab01 	strb.w	sl, [r5], #1
 8007292:	1aea      	subs	r2, r5, r3
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	4293      	cmp	r3, r2
 8007298:	dd09      	ble.n	80072ae <_dtoa_r+0xb56>
 800729a:	ee18 1a10 	vmov	r1, s16
 800729e:	2300      	movs	r3, #0
 80072a0:	220a      	movs	r2, #10
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 f8b4 	bl	8007410 <__multadd>
 80072a8:	ee08 0a10 	vmov	s16, r0
 80072ac:	e7e7      	b.n	800727e <_dtoa_r+0xb26>
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bfc8      	it	gt
 80072b4:	461d      	movgt	r5, r3
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	bfd8      	it	le
 80072ba:	2501      	movle	r5, #1
 80072bc:	441d      	add	r5, r3
 80072be:	f04f 0800 	mov.w	r8, #0
 80072c2:	ee18 1a10 	vmov	r1, s16
 80072c6:	2201      	movs	r2, #1
 80072c8:	4620      	mov	r0, r4
 80072ca:	f000 fa51 	bl	8007770 <__lshift>
 80072ce:	4631      	mov	r1, r6
 80072d0:	ee08 0a10 	vmov	s16, r0
 80072d4:	f000 fabc 	bl	8007850 <__mcmp>
 80072d8:	2800      	cmp	r0, #0
 80072da:	dc91      	bgt.n	8007200 <_dtoa_r+0xaa8>
 80072dc:	d102      	bne.n	80072e4 <_dtoa_r+0xb8c>
 80072de:	f01a 0f01 	tst.w	sl, #1
 80072e2:	d18d      	bne.n	8007200 <_dtoa_r+0xaa8>
 80072e4:	462b      	mov	r3, r5
 80072e6:	461d      	mov	r5, r3
 80072e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ec:	2a30      	cmp	r2, #48	; 0x30
 80072ee:	d0fa      	beq.n	80072e6 <_dtoa_r+0xb8e>
 80072f0:	e6d7      	b.n	80070a2 <_dtoa_r+0x94a>
 80072f2:	9a01      	ldr	r2, [sp, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d184      	bne.n	8007202 <_dtoa_r+0xaaa>
 80072f8:	9b00      	ldr	r3, [sp, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	2331      	movs	r3, #49	; 0x31
 8007300:	7013      	strb	r3, [r2, #0]
 8007302:	e6ce      	b.n	80070a2 <_dtoa_r+0x94a>
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <_dtoa_r+0xbd4>)
 8007306:	f7ff ba95 	b.w	8006834 <_dtoa_r+0xdc>
 800730a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f aa6e 	bne.w	80067ee <_dtoa_r+0x96>
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <_dtoa_r+0xbd8>)
 8007314:	f7ff ba8e 	b.w	8006834 <_dtoa_r+0xdc>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	dcae      	bgt.n	800727c <_dtoa_r+0xb24>
 800731e:	9b06      	ldr	r3, [sp, #24]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f73f aea8 	bgt.w	8007076 <_dtoa_r+0x91e>
 8007326:	e7a9      	b.n	800727c <_dtoa_r+0xb24>
 8007328:	08008d50 	.word	0x08008d50
 800732c:	08008bac 	.word	0x08008bac
 8007330:	08008cd1 	.word	0x08008cd1

08007334 <_localeconv_r>:
 8007334:	4800      	ldr	r0, [pc, #0]	; (8007338 <_localeconv_r+0x4>)
 8007336:	4770      	bx	lr
 8007338:	20000170 	.word	0x20000170

0800733c <malloc>:
 800733c:	4b02      	ldr	r3, [pc, #8]	; (8007348 <malloc+0xc>)
 800733e:	4601      	mov	r1, r0
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	f000 bc09 	b.w	8007b58 <_malloc_r>
 8007346:	bf00      	nop
 8007348:	2000001c 	.word	0x2000001c

0800734c <_Balloc>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	b976      	cbnz	r6, 8007374 <_Balloc+0x28>
 8007356:	2010      	movs	r0, #16
 8007358:	f7ff fff0 	bl	800733c <malloc>
 800735c:	4602      	mov	r2, r0
 800735e:	6260      	str	r0, [r4, #36]	; 0x24
 8007360:	b920      	cbnz	r0, 800736c <_Balloc+0x20>
 8007362:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <_Balloc+0x78>)
 8007364:	4818      	ldr	r0, [pc, #96]	; (80073c8 <_Balloc+0x7c>)
 8007366:	2166      	movs	r1, #102	; 0x66
 8007368:	f000 fdd6 	bl	8007f18 <__assert_func>
 800736c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007370:	6006      	str	r6, [r0, #0]
 8007372:	60c6      	str	r6, [r0, #12]
 8007374:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007376:	68f3      	ldr	r3, [r6, #12]
 8007378:	b183      	cbz	r3, 800739c <_Balloc+0x50>
 800737a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007382:	b9b8      	cbnz	r0, 80073b4 <_Balloc+0x68>
 8007384:	2101      	movs	r1, #1
 8007386:	fa01 f605 	lsl.w	r6, r1, r5
 800738a:	1d72      	adds	r2, r6, #5
 800738c:	0092      	lsls	r2, r2, #2
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fb60 	bl	8007a54 <_calloc_r>
 8007394:	b160      	cbz	r0, 80073b0 <_Balloc+0x64>
 8007396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800739a:	e00e      	b.n	80073ba <_Balloc+0x6e>
 800739c:	2221      	movs	r2, #33	; 0x21
 800739e:	2104      	movs	r1, #4
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fb57 	bl	8007a54 <_calloc_r>
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	60f0      	str	r0, [r6, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e4      	bne.n	800737a <_Balloc+0x2e>
 80073b0:	2000      	movs	r0, #0
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	6802      	ldr	r2, [r0, #0]
 80073b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ba:	2300      	movs	r3, #0
 80073bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073c0:	e7f7      	b.n	80073b2 <_Balloc+0x66>
 80073c2:	bf00      	nop
 80073c4:	08008cde 	.word	0x08008cde
 80073c8:	08008d61 	.word	0x08008d61

080073cc <_Bfree>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d0:	4605      	mov	r5, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	b976      	cbnz	r6, 80073f4 <_Bfree+0x28>
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7ff ffb0 	bl	800733c <malloc>
 80073dc:	4602      	mov	r2, r0
 80073de:	6268      	str	r0, [r5, #36]	; 0x24
 80073e0:	b920      	cbnz	r0, 80073ec <_Bfree+0x20>
 80073e2:	4b09      	ldr	r3, [pc, #36]	; (8007408 <_Bfree+0x3c>)
 80073e4:	4809      	ldr	r0, [pc, #36]	; (800740c <_Bfree+0x40>)
 80073e6:	218a      	movs	r1, #138	; 0x8a
 80073e8:	f000 fd96 	bl	8007f18 <__assert_func>
 80073ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f0:	6006      	str	r6, [r0, #0]
 80073f2:	60c6      	str	r6, [r0, #12]
 80073f4:	b13c      	cbz	r4, 8007406 <_Bfree+0x3a>
 80073f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073f8:	6862      	ldr	r2, [r4, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007400:	6021      	str	r1, [r4, #0]
 8007402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	08008cde 	.word	0x08008cde
 800740c:	08008d61 	.word	0x08008d61

08007410 <__multadd>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	690d      	ldr	r5, [r1, #16]
 8007416:	4607      	mov	r7, r0
 8007418:	460c      	mov	r4, r1
 800741a:	461e      	mov	r6, r3
 800741c:	f101 0c14 	add.w	ip, r1, #20
 8007420:	2000      	movs	r0, #0
 8007422:	f8dc 3000 	ldr.w	r3, [ip]
 8007426:	b299      	uxth	r1, r3
 8007428:	fb02 6101 	mla	r1, r2, r1, r6
 800742c:	0c1e      	lsrs	r6, r3, #16
 800742e:	0c0b      	lsrs	r3, r1, #16
 8007430:	fb02 3306 	mla	r3, r2, r6, r3
 8007434:	b289      	uxth	r1, r1
 8007436:	3001      	adds	r0, #1
 8007438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800743c:	4285      	cmp	r5, r0
 800743e:	f84c 1b04 	str.w	r1, [ip], #4
 8007442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007446:	dcec      	bgt.n	8007422 <__multadd+0x12>
 8007448:	b30e      	cbz	r6, 800748e <__multadd+0x7e>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc19      	bgt.n	8007484 <__multadd+0x74>
 8007450:	6861      	ldr	r1, [r4, #4]
 8007452:	4638      	mov	r0, r7
 8007454:	3101      	adds	r1, #1
 8007456:	f7ff ff79 	bl	800734c <_Balloc>
 800745a:	4680      	mov	r8, r0
 800745c:	b928      	cbnz	r0, 800746a <__multadd+0x5a>
 800745e:	4602      	mov	r2, r0
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <__multadd+0x84>)
 8007462:	480d      	ldr	r0, [pc, #52]	; (8007498 <__multadd+0x88>)
 8007464:	21b5      	movs	r1, #181	; 0xb5
 8007466:	f000 fd57 	bl	8007f18 <__assert_func>
 800746a:	6922      	ldr	r2, [r4, #16]
 800746c:	3202      	adds	r2, #2
 800746e:	f104 010c 	add.w	r1, r4, #12
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	300c      	adds	r0, #12
 8007476:	f7fe fba3 	bl	8005bc0 <memcpy>
 800747a:	4621      	mov	r1, r4
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ffa5 	bl	80073cc <_Bfree>
 8007482:	4644      	mov	r4, r8
 8007484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007488:	3501      	adds	r5, #1
 800748a:	615e      	str	r6, [r3, #20]
 800748c:	6125      	str	r5, [r4, #16]
 800748e:	4620      	mov	r0, r4
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	08008d50 	.word	0x08008d50
 8007498:	08008d61 	.word	0x08008d61

0800749c <__hi0bits>:
 800749c:	0c03      	lsrs	r3, r0, #16
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	b9d3      	cbnz	r3, 80074d8 <__hi0bits+0x3c>
 80074a2:	0400      	lsls	r0, r0, #16
 80074a4:	2310      	movs	r3, #16
 80074a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074aa:	bf04      	itt	eq
 80074ac:	0200      	lsleq	r0, r0, #8
 80074ae:	3308      	addeq	r3, #8
 80074b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074b4:	bf04      	itt	eq
 80074b6:	0100      	lsleq	r0, r0, #4
 80074b8:	3304      	addeq	r3, #4
 80074ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074be:	bf04      	itt	eq
 80074c0:	0080      	lsleq	r0, r0, #2
 80074c2:	3302      	addeq	r3, #2
 80074c4:	2800      	cmp	r0, #0
 80074c6:	db05      	blt.n	80074d4 <__hi0bits+0x38>
 80074c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074cc:	f103 0301 	add.w	r3, r3, #1
 80074d0:	bf08      	it	eq
 80074d2:	2320      	moveq	r3, #32
 80074d4:	4618      	mov	r0, r3
 80074d6:	4770      	bx	lr
 80074d8:	2300      	movs	r3, #0
 80074da:	e7e4      	b.n	80074a6 <__hi0bits+0xa>

080074dc <__lo0bits>:
 80074dc:	6803      	ldr	r3, [r0, #0]
 80074de:	f013 0207 	ands.w	r2, r3, #7
 80074e2:	4601      	mov	r1, r0
 80074e4:	d00b      	beq.n	80074fe <__lo0bits+0x22>
 80074e6:	07da      	lsls	r2, r3, #31
 80074e8:	d423      	bmi.n	8007532 <__lo0bits+0x56>
 80074ea:	0798      	lsls	r0, r3, #30
 80074ec:	bf49      	itett	mi
 80074ee:	085b      	lsrmi	r3, r3, #1
 80074f0:	089b      	lsrpl	r3, r3, #2
 80074f2:	2001      	movmi	r0, #1
 80074f4:	600b      	strmi	r3, [r1, #0]
 80074f6:	bf5c      	itt	pl
 80074f8:	600b      	strpl	r3, [r1, #0]
 80074fa:	2002      	movpl	r0, #2
 80074fc:	4770      	bx	lr
 80074fe:	b298      	uxth	r0, r3
 8007500:	b9a8      	cbnz	r0, 800752e <__lo0bits+0x52>
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	2010      	movs	r0, #16
 8007506:	b2da      	uxtb	r2, r3
 8007508:	b90a      	cbnz	r2, 800750e <__lo0bits+0x32>
 800750a:	3008      	adds	r0, #8
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	071a      	lsls	r2, r3, #28
 8007510:	bf04      	itt	eq
 8007512:	091b      	lsreq	r3, r3, #4
 8007514:	3004      	addeq	r0, #4
 8007516:	079a      	lsls	r2, r3, #30
 8007518:	bf04      	itt	eq
 800751a:	089b      	lsreq	r3, r3, #2
 800751c:	3002      	addeq	r0, #2
 800751e:	07da      	lsls	r2, r3, #31
 8007520:	d403      	bmi.n	800752a <__lo0bits+0x4e>
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	f100 0001 	add.w	r0, r0, #1
 8007528:	d005      	beq.n	8007536 <__lo0bits+0x5a>
 800752a:	600b      	str	r3, [r1, #0]
 800752c:	4770      	bx	lr
 800752e:	4610      	mov	r0, r2
 8007530:	e7e9      	b.n	8007506 <__lo0bits+0x2a>
 8007532:	2000      	movs	r0, #0
 8007534:	4770      	bx	lr
 8007536:	2020      	movs	r0, #32
 8007538:	4770      	bx	lr
	...

0800753c <__i2b>:
 800753c:	b510      	push	{r4, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	2101      	movs	r1, #1
 8007542:	f7ff ff03 	bl	800734c <_Balloc>
 8007546:	4602      	mov	r2, r0
 8007548:	b928      	cbnz	r0, 8007556 <__i2b+0x1a>
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <__i2b+0x24>)
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <__i2b+0x28>)
 800754e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007552:	f000 fce1 	bl	8007f18 <__assert_func>
 8007556:	2301      	movs	r3, #1
 8007558:	6144      	str	r4, [r0, #20]
 800755a:	6103      	str	r3, [r0, #16]
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	08008d50 	.word	0x08008d50
 8007564:	08008d61 	.word	0x08008d61

08007568 <__multiply>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	4691      	mov	r9, r2
 800756e:	690a      	ldr	r2, [r1, #16]
 8007570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	bfb8      	it	lt
 8007578:	460b      	movlt	r3, r1
 800757a:	460c      	mov	r4, r1
 800757c:	bfbc      	itt	lt
 800757e:	464c      	movlt	r4, r9
 8007580:	4699      	movlt	r9, r3
 8007582:	6927      	ldr	r7, [r4, #16]
 8007584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	6861      	ldr	r1, [r4, #4]
 800758c:	eb07 060a 	add.w	r6, r7, sl
 8007590:	42b3      	cmp	r3, r6
 8007592:	b085      	sub	sp, #20
 8007594:	bfb8      	it	lt
 8007596:	3101      	addlt	r1, #1
 8007598:	f7ff fed8 	bl	800734c <_Balloc>
 800759c:	b930      	cbnz	r0, 80075ac <__multiply+0x44>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b44      	ldr	r3, [pc, #272]	; (80076b4 <__multiply+0x14c>)
 80075a2:	4845      	ldr	r0, [pc, #276]	; (80076b8 <__multiply+0x150>)
 80075a4:	f240 115d 	movw	r1, #349	; 0x15d
 80075a8:	f000 fcb6 	bl	8007f18 <__assert_func>
 80075ac:	f100 0514 	add.w	r5, r0, #20
 80075b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075b4:	462b      	mov	r3, r5
 80075b6:	2200      	movs	r2, #0
 80075b8:	4543      	cmp	r3, r8
 80075ba:	d321      	bcc.n	8007600 <__multiply+0x98>
 80075bc:	f104 0314 	add.w	r3, r4, #20
 80075c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075c4:	f109 0314 	add.w	r3, r9, #20
 80075c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075cc:	9202      	str	r2, [sp, #8]
 80075ce:	1b3a      	subs	r2, r7, r4
 80075d0:	3a15      	subs	r2, #21
 80075d2:	f022 0203 	bic.w	r2, r2, #3
 80075d6:	3204      	adds	r2, #4
 80075d8:	f104 0115 	add.w	r1, r4, #21
 80075dc:	428f      	cmp	r7, r1
 80075de:	bf38      	it	cc
 80075e0:	2204      	movcc	r2, #4
 80075e2:	9201      	str	r2, [sp, #4]
 80075e4:	9a02      	ldr	r2, [sp, #8]
 80075e6:	9303      	str	r3, [sp, #12]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d80c      	bhi.n	8007606 <__multiply+0x9e>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	dd03      	ble.n	80075f8 <__multiply+0x90>
 80075f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d05a      	beq.n	80076ae <__multiply+0x146>
 80075f8:	6106      	str	r6, [r0, #16]
 80075fa:	b005      	add	sp, #20
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	f843 2b04 	str.w	r2, [r3], #4
 8007604:	e7d8      	b.n	80075b8 <__multiply+0x50>
 8007606:	f8b3 a000 	ldrh.w	sl, [r3]
 800760a:	f1ba 0f00 	cmp.w	sl, #0
 800760e:	d024      	beq.n	800765a <__multiply+0xf2>
 8007610:	f104 0e14 	add.w	lr, r4, #20
 8007614:	46a9      	mov	r9, r5
 8007616:	f04f 0c00 	mov.w	ip, #0
 800761a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800761e:	f8d9 1000 	ldr.w	r1, [r9]
 8007622:	fa1f fb82 	uxth.w	fp, r2
 8007626:	b289      	uxth	r1, r1
 8007628:	fb0a 110b 	mla	r1, sl, fp, r1
 800762c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007630:	f8d9 2000 	ldr.w	r2, [r9]
 8007634:	4461      	add	r1, ip
 8007636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800763a:	fb0a c20b 	mla	r2, sl, fp, ip
 800763e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007642:	b289      	uxth	r1, r1
 8007644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007648:	4577      	cmp	r7, lr
 800764a:	f849 1b04 	str.w	r1, [r9], #4
 800764e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007652:	d8e2      	bhi.n	800761a <__multiply+0xb2>
 8007654:	9a01      	ldr	r2, [sp, #4]
 8007656:	f845 c002 	str.w	ip, [r5, r2]
 800765a:	9a03      	ldr	r2, [sp, #12]
 800765c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007660:	3304      	adds	r3, #4
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	d020      	beq.n	80076aa <__multiply+0x142>
 8007668:	6829      	ldr	r1, [r5, #0]
 800766a:	f104 0c14 	add.w	ip, r4, #20
 800766e:	46ae      	mov	lr, r5
 8007670:	f04f 0a00 	mov.w	sl, #0
 8007674:	f8bc b000 	ldrh.w	fp, [ip]
 8007678:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800767c:	fb09 220b 	mla	r2, r9, fp, r2
 8007680:	4492      	add	sl, r2
 8007682:	b289      	uxth	r1, r1
 8007684:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007688:	f84e 1b04 	str.w	r1, [lr], #4
 800768c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007690:	f8be 1000 	ldrh.w	r1, [lr]
 8007694:	0c12      	lsrs	r2, r2, #16
 8007696:	fb09 1102 	mla	r1, r9, r2, r1
 800769a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800769e:	4567      	cmp	r7, ip
 80076a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076a4:	d8e6      	bhi.n	8007674 <__multiply+0x10c>
 80076a6:	9a01      	ldr	r2, [sp, #4]
 80076a8:	50a9      	str	r1, [r5, r2]
 80076aa:	3504      	adds	r5, #4
 80076ac:	e79a      	b.n	80075e4 <__multiply+0x7c>
 80076ae:	3e01      	subs	r6, #1
 80076b0:	e79c      	b.n	80075ec <__multiply+0x84>
 80076b2:	bf00      	nop
 80076b4:	08008d50 	.word	0x08008d50
 80076b8:	08008d61 	.word	0x08008d61

080076bc <__pow5mult>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	4615      	mov	r5, r2
 80076c2:	f012 0203 	ands.w	r2, r2, #3
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	d007      	beq.n	80076dc <__pow5mult+0x20>
 80076cc:	4c25      	ldr	r4, [pc, #148]	; (8007764 <__pow5mult+0xa8>)
 80076ce:	3a01      	subs	r2, #1
 80076d0:	2300      	movs	r3, #0
 80076d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076d6:	f7ff fe9b 	bl	8007410 <__multadd>
 80076da:	4607      	mov	r7, r0
 80076dc:	10ad      	asrs	r5, r5, #2
 80076de:	d03d      	beq.n	800775c <__pow5mult+0xa0>
 80076e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076e2:	b97c      	cbnz	r4, 8007704 <__pow5mult+0x48>
 80076e4:	2010      	movs	r0, #16
 80076e6:	f7ff fe29 	bl	800733c <malloc>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6270      	str	r0, [r6, #36]	; 0x24
 80076ee:	b928      	cbnz	r0, 80076fc <__pow5mult+0x40>
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <__pow5mult+0xac>)
 80076f2:	481e      	ldr	r0, [pc, #120]	; (800776c <__pow5mult+0xb0>)
 80076f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076f8:	f000 fc0e 	bl	8007f18 <__assert_func>
 80076fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007700:	6004      	str	r4, [r0, #0]
 8007702:	60c4      	str	r4, [r0, #12]
 8007704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800770c:	b94c      	cbnz	r4, 8007722 <__pow5mult+0x66>
 800770e:	f240 2171 	movw	r1, #625	; 0x271
 8007712:	4630      	mov	r0, r6
 8007714:	f7ff ff12 	bl	800753c <__i2b>
 8007718:	2300      	movs	r3, #0
 800771a:	f8c8 0008 	str.w	r0, [r8, #8]
 800771e:	4604      	mov	r4, r0
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	07eb      	lsls	r3, r5, #31
 8007728:	d50a      	bpl.n	8007740 <__pow5mult+0x84>
 800772a:	4639      	mov	r1, r7
 800772c:	4622      	mov	r2, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff ff1a 	bl	8007568 <__multiply>
 8007734:	4639      	mov	r1, r7
 8007736:	4680      	mov	r8, r0
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff fe47 	bl	80073cc <_Bfree>
 800773e:	4647      	mov	r7, r8
 8007740:	106d      	asrs	r5, r5, #1
 8007742:	d00b      	beq.n	800775c <__pow5mult+0xa0>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	b938      	cbnz	r0, 8007758 <__pow5mult+0x9c>
 8007748:	4622      	mov	r2, r4
 800774a:	4621      	mov	r1, r4
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff ff0b 	bl	8007568 <__multiply>
 8007752:	6020      	str	r0, [r4, #0]
 8007754:	f8c0 9000 	str.w	r9, [r0]
 8007758:	4604      	mov	r4, r0
 800775a:	e7e4      	b.n	8007726 <__pow5mult+0x6a>
 800775c:	4638      	mov	r0, r7
 800775e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007762:	bf00      	nop
 8007764:	08008eb0 	.word	0x08008eb0
 8007768:	08008cde 	.word	0x08008cde
 800776c:	08008d61 	.word	0x08008d61

08007770 <__lshift>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	460c      	mov	r4, r1
 8007776:	6849      	ldr	r1, [r1, #4]
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800777e:	68a3      	ldr	r3, [r4, #8]
 8007780:	4607      	mov	r7, r0
 8007782:	4691      	mov	r9, r2
 8007784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007788:	f108 0601 	add.w	r6, r8, #1
 800778c:	42b3      	cmp	r3, r6
 800778e:	db0b      	blt.n	80077a8 <__lshift+0x38>
 8007790:	4638      	mov	r0, r7
 8007792:	f7ff fddb 	bl	800734c <_Balloc>
 8007796:	4605      	mov	r5, r0
 8007798:	b948      	cbnz	r0, 80077ae <__lshift+0x3e>
 800779a:	4602      	mov	r2, r0
 800779c:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <__lshift+0xd8>)
 800779e:	482b      	ldr	r0, [pc, #172]	; (800784c <__lshift+0xdc>)
 80077a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077a4:	f000 fbb8 	bl	8007f18 <__assert_func>
 80077a8:	3101      	adds	r1, #1
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	e7ee      	b.n	800778c <__lshift+0x1c>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f100 0114 	add.w	r1, r0, #20
 80077b4:	f100 0210 	add.w	r2, r0, #16
 80077b8:	4618      	mov	r0, r3
 80077ba:	4553      	cmp	r3, sl
 80077bc:	db37      	blt.n	800782e <__lshift+0xbe>
 80077be:	6920      	ldr	r0, [r4, #16]
 80077c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077c4:	f104 0314 	add.w	r3, r4, #20
 80077c8:	f019 091f 	ands.w	r9, r9, #31
 80077cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077d4:	d02f      	beq.n	8007836 <__lshift+0xc6>
 80077d6:	f1c9 0e20 	rsb	lr, r9, #32
 80077da:	468a      	mov	sl, r1
 80077dc:	f04f 0c00 	mov.w	ip, #0
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	fa02 f209 	lsl.w	r2, r2, r9
 80077e6:	ea42 020c 	orr.w	r2, r2, ip
 80077ea:	f84a 2b04 	str.w	r2, [sl], #4
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	4298      	cmp	r0, r3
 80077f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077f8:	d8f2      	bhi.n	80077e0 <__lshift+0x70>
 80077fa:	1b03      	subs	r3, r0, r4
 80077fc:	3b15      	subs	r3, #21
 80077fe:	f023 0303 	bic.w	r3, r3, #3
 8007802:	3304      	adds	r3, #4
 8007804:	f104 0215 	add.w	r2, r4, #21
 8007808:	4290      	cmp	r0, r2
 800780a:	bf38      	it	cc
 800780c:	2304      	movcc	r3, #4
 800780e:	f841 c003 	str.w	ip, [r1, r3]
 8007812:	f1bc 0f00 	cmp.w	ip, #0
 8007816:	d001      	beq.n	800781c <__lshift+0xac>
 8007818:	f108 0602 	add.w	r6, r8, #2
 800781c:	3e01      	subs	r6, #1
 800781e:	4638      	mov	r0, r7
 8007820:	612e      	str	r6, [r5, #16]
 8007822:	4621      	mov	r1, r4
 8007824:	f7ff fdd2 	bl	80073cc <_Bfree>
 8007828:	4628      	mov	r0, r5
 800782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007832:	3301      	adds	r3, #1
 8007834:	e7c1      	b.n	80077ba <__lshift+0x4a>
 8007836:	3904      	subs	r1, #4
 8007838:	f853 2b04 	ldr.w	r2, [r3], #4
 800783c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007840:	4298      	cmp	r0, r3
 8007842:	d8f9      	bhi.n	8007838 <__lshift+0xc8>
 8007844:	e7ea      	b.n	800781c <__lshift+0xac>
 8007846:	bf00      	nop
 8007848:	08008d50 	.word	0x08008d50
 800784c:	08008d61 	.word	0x08008d61

08007850 <__mcmp>:
 8007850:	b530      	push	{r4, r5, lr}
 8007852:	6902      	ldr	r2, [r0, #16]
 8007854:	690c      	ldr	r4, [r1, #16]
 8007856:	1b12      	subs	r2, r2, r4
 8007858:	d10e      	bne.n	8007878 <__mcmp+0x28>
 800785a:	f100 0314 	add.w	r3, r0, #20
 800785e:	3114      	adds	r1, #20
 8007860:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007868:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800786c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007870:	42a5      	cmp	r5, r4
 8007872:	d003      	beq.n	800787c <__mcmp+0x2c>
 8007874:	d305      	bcc.n	8007882 <__mcmp+0x32>
 8007876:	2201      	movs	r2, #1
 8007878:	4610      	mov	r0, r2
 800787a:	bd30      	pop	{r4, r5, pc}
 800787c:	4283      	cmp	r3, r0
 800787e:	d3f3      	bcc.n	8007868 <__mcmp+0x18>
 8007880:	e7fa      	b.n	8007878 <__mcmp+0x28>
 8007882:	f04f 32ff 	mov.w	r2, #4294967295
 8007886:	e7f7      	b.n	8007878 <__mcmp+0x28>

08007888 <__mdiff>:
 8007888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460c      	mov	r4, r1
 800788e:	4606      	mov	r6, r0
 8007890:	4611      	mov	r1, r2
 8007892:	4620      	mov	r0, r4
 8007894:	4690      	mov	r8, r2
 8007896:	f7ff ffdb 	bl	8007850 <__mcmp>
 800789a:	1e05      	subs	r5, r0, #0
 800789c:	d110      	bne.n	80078c0 <__mdiff+0x38>
 800789e:	4629      	mov	r1, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff fd53 	bl	800734c <_Balloc>
 80078a6:	b930      	cbnz	r0, 80078b6 <__mdiff+0x2e>
 80078a8:	4b3a      	ldr	r3, [pc, #232]	; (8007994 <__mdiff+0x10c>)
 80078aa:	4602      	mov	r2, r0
 80078ac:	f240 2132 	movw	r1, #562	; 0x232
 80078b0:	4839      	ldr	r0, [pc, #228]	; (8007998 <__mdiff+0x110>)
 80078b2:	f000 fb31 	bl	8007f18 <__assert_func>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	bfa4      	itt	ge
 80078c2:	4643      	movge	r3, r8
 80078c4:	46a0      	movge	r8, r4
 80078c6:	4630      	mov	r0, r6
 80078c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078cc:	bfa6      	itte	ge
 80078ce:	461c      	movge	r4, r3
 80078d0:	2500      	movge	r5, #0
 80078d2:	2501      	movlt	r5, #1
 80078d4:	f7ff fd3a 	bl	800734c <_Balloc>
 80078d8:	b920      	cbnz	r0, 80078e4 <__mdiff+0x5c>
 80078da:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <__mdiff+0x10c>)
 80078dc:	4602      	mov	r2, r0
 80078de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078e2:	e7e5      	b.n	80078b0 <__mdiff+0x28>
 80078e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078e8:	6926      	ldr	r6, [r4, #16]
 80078ea:	60c5      	str	r5, [r0, #12]
 80078ec:	f104 0914 	add.w	r9, r4, #20
 80078f0:	f108 0514 	add.w	r5, r8, #20
 80078f4:	f100 0e14 	add.w	lr, r0, #20
 80078f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007900:	f108 0210 	add.w	r2, r8, #16
 8007904:	46f2      	mov	sl, lr
 8007906:	2100      	movs	r1, #0
 8007908:	f859 3b04 	ldr.w	r3, [r9], #4
 800790c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007910:	fa1f f883 	uxth.w	r8, r3
 8007914:	fa11 f18b 	uxtah	r1, r1, fp
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	eba1 0808 	sub.w	r8, r1, r8
 800791e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007922:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007926:	fa1f f888 	uxth.w	r8, r8
 800792a:	1419      	asrs	r1, r3, #16
 800792c:	454e      	cmp	r6, r9
 800792e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007932:	f84a 3b04 	str.w	r3, [sl], #4
 8007936:	d8e7      	bhi.n	8007908 <__mdiff+0x80>
 8007938:	1b33      	subs	r3, r6, r4
 800793a:	3b15      	subs	r3, #21
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	3304      	adds	r3, #4
 8007942:	3415      	adds	r4, #21
 8007944:	42a6      	cmp	r6, r4
 8007946:	bf38      	it	cc
 8007948:	2304      	movcc	r3, #4
 800794a:	441d      	add	r5, r3
 800794c:	4473      	add	r3, lr
 800794e:	469e      	mov	lr, r3
 8007950:	462e      	mov	r6, r5
 8007952:	4566      	cmp	r6, ip
 8007954:	d30e      	bcc.n	8007974 <__mdiff+0xec>
 8007956:	f10c 0203 	add.w	r2, ip, #3
 800795a:	1b52      	subs	r2, r2, r5
 800795c:	f022 0203 	bic.w	r2, r2, #3
 8007960:	3d03      	subs	r5, #3
 8007962:	45ac      	cmp	ip, r5
 8007964:	bf38      	it	cc
 8007966:	2200      	movcc	r2, #0
 8007968:	441a      	add	r2, r3
 800796a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800796e:	b17b      	cbz	r3, 8007990 <__mdiff+0x108>
 8007970:	6107      	str	r7, [r0, #16]
 8007972:	e7a3      	b.n	80078bc <__mdiff+0x34>
 8007974:	f856 8b04 	ldr.w	r8, [r6], #4
 8007978:	fa11 f288 	uxtah	r2, r1, r8
 800797c:	1414      	asrs	r4, r2, #16
 800797e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007982:	b292      	uxth	r2, r2
 8007984:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007988:	f84e 2b04 	str.w	r2, [lr], #4
 800798c:	1421      	asrs	r1, r4, #16
 800798e:	e7e0      	b.n	8007952 <__mdiff+0xca>
 8007990:	3f01      	subs	r7, #1
 8007992:	e7ea      	b.n	800796a <__mdiff+0xe2>
 8007994:	08008d50 	.word	0x08008d50
 8007998:	08008d61 	.word	0x08008d61

0800799c <__d2b>:
 800799c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079a0:	4689      	mov	r9, r1
 80079a2:	2101      	movs	r1, #1
 80079a4:	ec57 6b10 	vmov	r6, r7, d0
 80079a8:	4690      	mov	r8, r2
 80079aa:	f7ff fccf 	bl	800734c <_Balloc>
 80079ae:	4604      	mov	r4, r0
 80079b0:	b930      	cbnz	r0, 80079c0 <__d2b+0x24>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b25      	ldr	r3, [pc, #148]	; (8007a4c <__d2b+0xb0>)
 80079b6:	4826      	ldr	r0, [pc, #152]	; (8007a50 <__d2b+0xb4>)
 80079b8:	f240 310a 	movw	r1, #778	; 0x30a
 80079bc:	f000 faac 	bl	8007f18 <__assert_func>
 80079c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079c8:	bb35      	cbnz	r5, 8007a18 <__d2b+0x7c>
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	d028      	beq.n	8007a22 <__d2b+0x86>
 80079d0:	4668      	mov	r0, sp
 80079d2:	9600      	str	r6, [sp, #0]
 80079d4:	f7ff fd82 	bl	80074dc <__lo0bits>
 80079d8:	9900      	ldr	r1, [sp, #0]
 80079da:	b300      	cbz	r0, 8007a1e <__d2b+0x82>
 80079dc:	9a01      	ldr	r2, [sp, #4]
 80079de:	f1c0 0320 	rsb	r3, r0, #32
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	430b      	orrs	r3, r1
 80079e8:	40c2      	lsrs	r2, r0
 80079ea:	6163      	str	r3, [r4, #20]
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9b01      	ldr	r3, [sp, #4]
 80079f0:	61a3      	str	r3, [r4, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2202      	movne	r2, #2
 80079f8:	2201      	moveq	r2, #1
 80079fa:	6122      	str	r2, [r4, #16]
 80079fc:	b1d5      	cbz	r5, 8007a34 <__d2b+0x98>
 80079fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a02:	4405      	add	r5, r0
 8007a04:	f8c9 5000 	str.w	r5, [r9]
 8007a08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a0c:	f8c8 0000 	str.w	r0, [r8]
 8007a10:	4620      	mov	r0, r4
 8007a12:	b003      	add	sp, #12
 8007a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a1c:	e7d5      	b.n	80079ca <__d2b+0x2e>
 8007a1e:	6161      	str	r1, [r4, #20]
 8007a20:	e7e5      	b.n	80079ee <__d2b+0x52>
 8007a22:	a801      	add	r0, sp, #4
 8007a24:	f7ff fd5a 	bl	80074dc <__lo0bits>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	6163      	str	r3, [r4, #20]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	6122      	str	r2, [r4, #16]
 8007a30:	3020      	adds	r0, #32
 8007a32:	e7e3      	b.n	80079fc <__d2b+0x60>
 8007a34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a3c:	f8c9 0000 	str.w	r0, [r9]
 8007a40:	6918      	ldr	r0, [r3, #16]
 8007a42:	f7ff fd2b 	bl	800749c <__hi0bits>
 8007a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a4a:	e7df      	b.n	8007a0c <__d2b+0x70>
 8007a4c:	08008d50 	.word	0x08008d50
 8007a50:	08008d61 	.word	0x08008d61

08007a54 <_calloc_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	fba1 2402 	umull	r2, r4, r1, r2
 8007a5a:	b94c      	cbnz	r4, 8007a70 <_calloc_r+0x1c>
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	9201      	str	r2, [sp, #4]
 8007a60:	f000 f87a 	bl	8007b58 <_malloc_r>
 8007a64:	9a01      	ldr	r2, [sp, #4]
 8007a66:	4605      	mov	r5, r0
 8007a68:	b930      	cbnz	r0, 8007a78 <_calloc_r+0x24>
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	b003      	add	sp, #12
 8007a6e:	bd30      	pop	{r4, r5, pc}
 8007a70:	220c      	movs	r2, #12
 8007a72:	6002      	str	r2, [r0, #0]
 8007a74:	2500      	movs	r5, #0
 8007a76:	e7f8      	b.n	8007a6a <_calloc_r+0x16>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7fe f8af 	bl	8005bdc <memset>
 8007a7e:	e7f4      	b.n	8007a6a <_calloc_r+0x16>

08007a80 <_free_r>:
 8007a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d044      	beq.n	8007b10 <_free_r+0x90>
 8007a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8a:	9001      	str	r0, [sp, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a92:	bfb8      	it	lt
 8007a94:	18e4      	addlt	r4, r4, r3
 8007a96:	f000 fa9b 	bl	8007fd0 <__malloc_lock>
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <_free_r+0x94>)
 8007a9c:	9801      	ldr	r0, [sp, #4]
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	b933      	cbnz	r3, 8007ab0 <_free_r+0x30>
 8007aa2:	6063      	str	r3, [r4, #4]
 8007aa4:	6014      	str	r4, [r2, #0]
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aac:	f000 ba96 	b.w	8007fdc <__malloc_unlock>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d908      	bls.n	8007ac6 <_free_r+0x46>
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	1961      	adds	r1, r4, r5
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf01      	itttt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	1949      	addeq	r1, r1, r5
 8007ac2:	6021      	streq	r1, [r4, #0]
 8007ac4:	e7ed      	b.n	8007aa2 <_free_r+0x22>
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b10b      	cbz	r3, 8007ad0 <_free_r+0x50>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d9fa      	bls.n	8007ac6 <_free_r+0x46>
 8007ad0:	6811      	ldr	r1, [r2, #0]
 8007ad2:	1855      	adds	r5, r2, r1
 8007ad4:	42a5      	cmp	r5, r4
 8007ad6:	d10b      	bne.n	8007af0 <_free_r+0x70>
 8007ad8:	6824      	ldr	r4, [r4, #0]
 8007ada:	4421      	add	r1, r4
 8007adc:	1854      	adds	r4, r2, r1
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	d1e0      	bne.n	8007aa6 <_free_r+0x26>
 8007ae4:	681c      	ldr	r4, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	6053      	str	r3, [r2, #4]
 8007aea:	4421      	add	r1, r4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	e7da      	b.n	8007aa6 <_free_r+0x26>
 8007af0:	d902      	bls.n	8007af8 <_free_r+0x78>
 8007af2:	230c      	movs	r3, #12
 8007af4:	6003      	str	r3, [r0, #0]
 8007af6:	e7d6      	b.n	8007aa6 <_free_r+0x26>
 8007af8:	6825      	ldr	r5, [r4, #0]
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf04      	itt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	bf04      	itt	eq
 8007b08:	1949      	addeq	r1, r1, r5
 8007b0a:	6021      	streq	r1, [r4, #0]
 8007b0c:	6054      	str	r4, [r2, #4]
 8007b0e:	e7ca      	b.n	8007aa6 <_free_r+0x26>
 8007b10:	b003      	add	sp, #12
 8007b12:	bd30      	pop	{r4, r5, pc}
 8007b14:	20004300 	.word	0x20004300

08007b18 <sbrk_aligned>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4e0e      	ldr	r6, [pc, #56]	; (8007b54 <sbrk_aligned+0x3c>)
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	6831      	ldr	r1, [r6, #0]
 8007b20:	4605      	mov	r5, r0
 8007b22:	b911      	cbnz	r1, 8007b2a <sbrk_aligned+0x12>
 8007b24:	f000 f9e8 	bl	8007ef8 <_sbrk_r>
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 f9e3 	bl	8007ef8 <_sbrk_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d00a      	beq.n	8007b4c <sbrk_aligned+0x34>
 8007b36:	1cc4      	adds	r4, r0, #3
 8007b38:	f024 0403 	bic.w	r4, r4, #3
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d007      	beq.n	8007b50 <sbrk_aligned+0x38>
 8007b40:	1a21      	subs	r1, r4, r0
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 f9d8 	bl	8007ef8 <_sbrk_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d101      	bne.n	8007b50 <sbrk_aligned+0x38>
 8007b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b50:	4620      	mov	r0, r4
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	20004304 	.word	0x20004304

08007b58 <_malloc_r>:
 8007b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	1ccd      	adds	r5, r1, #3
 8007b5e:	f025 0503 	bic.w	r5, r5, #3
 8007b62:	3508      	adds	r5, #8
 8007b64:	2d0c      	cmp	r5, #12
 8007b66:	bf38      	it	cc
 8007b68:	250c      	movcc	r5, #12
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	db01      	blt.n	8007b74 <_malloc_r+0x1c>
 8007b70:	42a9      	cmp	r1, r5
 8007b72:	d905      	bls.n	8007b80 <_malloc_r+0x28>
 8007b74:	230c      	movs	r3, #12
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	2600      	movs	r6, #0
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	4e2e      	ldr	r6, [pc, #184]	; (8007c3c <_malloc_r+0xe4>)
 8007b82:	f000 fa25 	bl	8007fd0 <__malloc_lock>
 8007b86:	6833      	ldr	r3, [r6, #0]
 8007b88:	461c      	mov	r4, r3
 8007b8a:	bb34      	cbnz	r4, 8007bda <_malloc_r+0x82>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f7ff ffc2 	bl	8007b18 <sbrk_aligned>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	4604      	mov	r4, r0
 8007b98:	d14d      	bne.n	8007c36 <_malloc_r+0xde>
 8007b9a:	6834      	ldr	r4, [r6, #0]
 8007b9c:	4626      	mov	r6, r4
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d140      	bne.n	8007c24 <_malloc_r+0xcc>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	eb04 0803 	add.w	r8, r4, r3
 8007bac:	f000 f9a4 	bl	8007ef8 <_sbrk_r>
 8007bb0:	4580      	cmp	r8, r0
 8007bb2:	d13a      	bne.n	8007c2a <_malloc_r+0xd2>
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	3503      	adds	r5, #3
 8007bb8:	1a6d      	subs	r5, r5, r1
 8007bba:	f025 0503 	bic.w	r5, r5, #3
 8007bbe:	3508      	adds	r5, #8
 8007bc0:	2d0c      	cmp	r5, #12
 8007bc2:	bf38      	it	cc
 8007bc4:	250c      	movcc	r5, #12
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ffa5 	bl	8007b18 <sbrk_aligned>
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d02b      	beq.n	8007c2a <_malloc_r+0xd2>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	442b      	add	r3, r5
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	e00e      	b.n	8007bf8 <_malloc_r+0xa0>
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	1b52      	subs	r2, r2, r5
 8007bde:	d41e      	bmi.n	8007c1e <_malloc_r+0xc6>
 8007be0:	2a0b      	cmp	r2, #11
 8007be2:	d916      	bls.n	8007c12 <_malloc_r+0xba>
 8007be4:	1961      	adds	r1, r4, r5
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	6025      	str	r5, [r4, #0]
 8007bea:	bf18      	it	ne
 8007bec:	6059      	strne	r1, [r3, #4]
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	bf08      	it	eq
 8007bf2:	6031      	streq	r1, [r6, #0]
 8007bf4:	5162      	str	r2, [r4, r5]
 8007bf6:	604b      	str	r3, [r1, #4]
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f104 060b 	add.w	r6, r4, #11
 8007bfe:	f000 f9ed 	bl	8007fdc <__malloc_unlock>
 8007c02:	f026 0607 	bic.w	r6, r6, #7
 8007c06:	1d23      	adds	r3, r4, #4
 8007c08:	1af2      	subs	r2, r6, r3
 8007c0a:	d0b6      	beq.n	8007b7a <_malloc_r+0x22>
 8007c0c:	1b9b      	subs	r3, r3, r6
 8007c0e:	50a3      	str	r3, [r4, r2]
 8007c10:	e7b3      	b.n	8007b7a <_malloc_r+0x22>
 8007c12:	6862      	ldr	r2, [r4, #4]
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	bf0c      	ite	eq
 8007c18:	6032      	streq	r2, [r6, #0]
 8007c1a:	605a      	strne	r2, [r3, #4]
 8007c1c:	e7ec      	b.n	8007bf8 <_malloc_r+0xa0>
 8007c1e:	4623      	mov	r3, r4
 8007c20:	6864      	ldr	r4, [r4, #4]
 8007c22:	e7b2      	b.n	8007b8a <_malloc_r+0x32>
 8007c24:	4634      	mov	r4, r6
 8007c26:	6876      	ldr	r6, [r6, #4]
 8007c28:	e7b9      	b.n	8007b9e <_malloc_r+0x46>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f000 f9d4 	bl	8007fdc <__malloc_unlock>
 8007c34:	e7a1      	b.n	8007b7a <_malloc_r+0x22>
 8007c36:	6025      	str	r5, [r4, #0]
 8007c38:	e7de      	b.n	8007bf8 <_malloc_r+0xa0>
 8007c3a:	bf00      	nop
 8007c3c:	20004300 	.word	0x20004300

08007c40 <__ssputs_r>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	688e      	ldr	r6, [r1, #8]
 8007c46:	429e      	cmp	r6, r3
 8007c48:	4682      	mov	sl, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4690      	mov	r8, r2
 8007c4e:	461f      	mov	r7, r3
 8007c50:	d838      	bhi.n	8007cc4 <__ssputs_r+0x84>
 8007c52:	898a      	ldrh	r2, [r1, #12]
 8007c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c58:	d032      	beq.n	8007cc0 <__ssputs_r+0x80>
 8007c5a:	6825      	ldr	r5, [r4, #0]
 8007c5c:	6909      	ldr	r1, [r1, #16]
 8007c5e:	eba5 0901 	sub.w	r9, r5, r1
 8007c62:	6965      	ldr	r5, [r4, #20]
 8007c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	444b      	add	r3, r9
 8007c70:	106d      	asrs	r5, r5, #1
 8007c72:	429d      	cmp	r5, r3
 8007c74:	bf38      	it	cc
 8007c76:	461d      	movcc	r5, r3
 8007c78:	0553      	lsls	r3, r2, #21
 8007c7a:	d531      	bpl.n	8007ce0 <__ssputs_r+0xa0>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7ff ff6b 	bl	8007b58 <_malloc_r>
 8007c82:	4606      	mov	r6, r0
 8007c84:	b950      	cbnz	r0, 8007c9c <__ssputs_r+0x5c>
 8007c86:	230c      	movs	r3, #12
 8007c88:	f8ca 3000 	str.w	r3, [sl]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	6921      	ldr	r1, [r4, #16]
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	f7fd ff8e 	bl	8005bc0 <memcpy>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	6126      	str	r6, [r4, #16]
 8007cb2:	6165      	str	r5, [r4, #20]
 8007cb4:	444e      	add	r6, r9
 8007cb6:	eba5 0509 	sub.w	r5, r5, r9
 8007cba:	6026      	str	r6, [r4, #0]
 8007cbc:	60a5      	str	r5, [r4, #8]
 8007cbe:	463e      	mov	r6, r7
 8007cc0:	42be      	cmp	r6, r7
 8007cc2:	d900      	bls.n	8007cc6 <__ssputs_r+0x86>
 8007cc4:	463e      	mov	r6, r7
 8007cc6:	6820      	ldr	r0, [r4, #0]
 8007cc8:	4632      	mov	r2, r6
 8007cca:	4641      	mov	r1, r8
 8007ccc:	f000 f966 	bl	8007f9c <memmove>
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	1b9b      	subs	r3, r3, r6
 8007cd4:	60a3      	str	r3, [r4, #8]
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	4433      	add	r3, r6
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e7db      	b.n	8007c98 <__ssputs_r+0x58>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f000 f981 	bl	8007fe8 <_realloc_r>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1e1      	bne.n	8007cb0 <__ssputs_r+0x70>
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f7ff fec6 	bl	8007a80 <_free_r>
 8007cf4:	e7c7      	b.n	8007c86 <__ssputs_r+0x46>
	...

08007cf8 <_svfiprintf_r>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	4698      	mov	r8, r3
 8007cfe:	898b      	ldrh	r3, [r1, #12]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	b09d      	sub	sp, #116	; 0x74
 8007d04:	4607      	mov	r7, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	d50e      	bpl.n	8007d2a <_svfiprintf_r+0x32>
 8007d0c:	690b      	ldr	r3, [r1, #16]
 8007d0e:	b963      	cbnz	r3, 8007d2a <_svfiprintf_r+0x32>
 8007d10:	2140      	movs	r1, #64	; 0x40
 8007d12:	f7ff ff21 	bl	8007b58 <_malloc_r>
 8007d16:	6028      	str	r0, [r5, #0]
 8007d18:	6128      	str	r0, [r5, #16]
 8007d1a:	b920      	cbnz	r0, 8007d26 <_svfiprintf_r+0x2e>
 8007d1c:	230c      	movs	r3, #12
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e0d1      	b.n	8007eca <_svfiprintf_r+0x1d2>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	616b      	str	r3, [r5, #20]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	2320      	movs	r3, #32
 8007d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d38:	2330      	movs	r3, #48	; 0x30
 8007d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ee4 <_svfiprintf_r+0x1ec>
 8007d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d42:	f04f 0901 	mov.w	r9, #1
 8007d46:	4623      	mov	r3, r4
 8007d48:	469a      	mov	sl, r3
 8007d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d4e:	b10a      	cbz	r2, 8007d54 <_svfiprintf_r+0x5c>
 8007d50:	2a25      	cmp	r2, #37	; 0x25
 8007d52:	d1f9      	bne.n	8007d48 <_svfiprintf_r+0x50>
 8007d54:	ebba 0b04 	subs.w	fp, sl, r4
 8007d58:	d00b      	beq.n	8007d72 <_svfiprintf_r+0x7a>
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ff6d 	bl	8007c40 <__ssputs_r>
 8007d66:	3001      	adds	r0, #1
 8007d68:	f000 80aa 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d6e:	445a      	add	r2, fp
 8007d70:	9209      	str	r2, [sp, #36]	; 0x24
 8007d72:	f89a 3000 	ldrb.w	r3, [sl]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80a2 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d86:	f10a 0a01 	add.w	sl, sl, #1
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	9307      	str	r3, [sp, #28]
 8007d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d92:	931a      	str	r3, [sp, #104]	; 0x68
 8007d94:	4654      	mov	r4, sl
 8007d96:	2205      	movs	r2, #5
 8007d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9c:	4851      	ldr	r0, [pc, #324]	; (8007ee4 <_svfiprintf_r+0x1ec>)
 8007d9e:	f7f8 fa27 	bl	80001f0 <memchr>
 8007da2:	9a04      	ldr	r2, [sp, #16]
 8007da4:	b9d8      	cbnz	r0, 8007dde <_svfiprintf_r+0xe6>
 8007da6:	06d0      	lsls	r0, r2, #27
 8007da8:	bf44      	itt	mi
 8007daa:	2320      	movmi	r3, #32
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	0711      	lsls	r1, r2, #28
 8007db2:	bf44      	itt	mi
 8007db4:	232b      	movmi	r3, #43	; 0x2b
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc0:	d015      	beq.n	8007dee <_svfiprintf_r+0xf6>
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4654      	mov	r4, sl
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f04f 0c0a 	mov.w	ip, #10
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd2:	3b30      	subs	r3, #48	; 0x30
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d94e      	bls.n	8007e76 <_svfiprintf_r+0x17e>
 8007dd8:	b1b0      	cbz	r0, 8007e08 <_svfiprintf_r+0x110>
 8007dda:	9207      	str	r2, [sp, #28]
 8007ddc:	e014      	b.n	8007e08 <_svfiprintf_r+0x110>
 8007dde:	eba0 0308 	sub.w	r3, r0, r8
 8007de2:	fa09 f303 	lsl.w	r3, r9, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	46a2      	mov	sl, r4
 8007dec:	e7d2      	b.n	8007d94 <_svfiprintf_r+0x9c>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	1d19      	adds	r1, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9103      	str	r1, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfbb      	ittet	lt
 8007dfa:	425b      	neglt	r3, r3
 8007dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8007e00:	9307      	strge	r3, [sp, #28]
 8007e02:	9307      	strlt	r3, [sp, #28]
 8007e04:	bfb8      	it	lt
 8007e06:	9204      	strlt	r2, [sp, #16]
 8007e08:	7823      	ldrb	r3, [r4, #0]
 8007e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e0c:	d10c      	bne.n	8007e28 <_svfiprintf_r+0x130>
 8007e0e:	7863      	ldrb	r3, [r4, #1]
 8007e10:	2b2a      	cmp	r3, #42	; 0x2a
 8007e12:	d135      	bne.n	8007e80 <_svfiprintf_r+0x188>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9203      	str	r2, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e24:	3402      	adds	r4, #2
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ef4 <_svfiprintf_r+0x1fc>
 8007e2c:	7821      	ldrb	r1, [r4, #0]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	4650      	mov	r0, sl
 8007e32:	f7f8 f9dd 	bl	80001f0 <memchr>
 8007e36:	b140      	cbz	r0, 8007e4a <_svfiprintf_r+0x152>
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	eba0 000a 	sub.w	r0, r0, sl
 8007e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	4303      	orrs	r3, r0
 8007e46:	3401      	adds	r4, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4826      	ldr	r0, [pc, #152]	; (8007ee8 <_svfiprintf_r+0x1f0>)
 8007e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e54:	2206      	movs	r2, #6
 8007e56:	f7f8 f9cb 	bl	80001f0 <memchr>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d038      	beq.n	8007ed0 <_svfiprintf_r+0x1d8>
 8007e5e:	4b23      	ldr	r3, [pc, #140]	; (8007eec <_svfiprintf_r+0x1f4>)
 8007e60:	bb1b      	cbnz	r3, 8007eaa <_svfiprintf_r+0x1b2>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	4433      	add	r3, r6
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	e767      	b.n	8007d46 <_svfiprintf_r+0x4e>
 8007e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	e7a5      	b.n	8007dcc <_svfiprintf_r+0xd4>
 8007e80:	2300      	movs	r3, #0
 8007e82:	3401      	adds	r4, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f04f 0c0a 	mov.w	ip, #10
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e92:	3a30      	subs	r2, #48	; 0x30
 8007e94:	2a09      	cmp	r2, #9
 8007e96:	d903      	bls.n	8007ea0 <_svfiprintf_r+0x1a8>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0c5      	beq.n	8007e28 <_svfiprintf_r+0x130>
 8007e9c:	9105      	str	r1, [sp, #20]
 8007e9e:	e7c3      	b.n	8007e28 <_svfiprintf_r+0x130>
 8007ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7f0      	b.n	8007e8c <_svfiprintf_r+0x194>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007eb2:	a904      	add	r1, sp, #16
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7fd ff39 	bl	8005d2c <_printf_float>
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	d1d6      	bne.n	8007e6e <_svfiprintf_r+0x176>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af2c 	bmi.w	8007d20 <_svfiprintf_r+0x28>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	b01d      	add	sp, #116	; 0x74
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7fe f9ca 	bl	8006274 <_printf_i>
 8007ee0:	e7eb      	b.n	8007eba <_svfiprintf_r+0x1c2>
 8007ee2:	bf00      	nop
 8007ee4:	08008ebc 	.word	0x08008ebc
 8007ee8:	08008ec6 	.word	0x08008ec6
 8007eec:	08005d2d 	.word	0x08005d2d
 8007ef0:	08007c41 	.word	0x08007c41
 8007ef4:	08008ec2 	.word	0x08008ec2

08007ef8 <_sbrk_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d06      	ldr	r5, [pc, #24]	; (8007f14 <_sbrk_r+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7f9 fd22 	bl	800194c <_sbrk>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_sbrk_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_sbrk_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20004308 	.word	0x20004308

08007f18 <__assert_func>:
 8007f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f1a:	4614      	mov	r4, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <__assert_func+0x2c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4605      	mov	r5, r0
 8007f24:	68d8      	ldr	r0, [r3, #12]
 8007f26:	b14c      	cbz	r4, 8007f3c <__assert_func+0x24>
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <__assert_func+0x30>)
 8007f2a:	9100      	str	r1, [sp, #0]
 8007f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f30:	4906      	ldr	r1, [pc, #24]	; (8007f4c <__assert_func+0x34>)
 8007f32:	462b      	mov	r3, r5
 8007f34:	f000 f80e 	bl	8007f54 <fiprintf>
 8007f38:	f000 faac 	bl	8008494 <abort>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <__assert_func+0x38>)
 8007f3e:	461c      	mov	r4, r3
 8007f40:	e7f3      	b.n	8007f2a <__assert_func+0x12>
 8007f42:	bf00      	nop
 8007f44:	2000001c 	.word	0x2000001c
 8007f48:	08008ecd 	.word	0x08008ecd
 8007f4c:	08008eda 	.word	0x08008eda
 8007f50:	08008f08 	.word	0x08008f08

08007f54 <fiprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b503      	push	{r0, r1, lr}
 8007f58:	4601      	mov	r1, r0
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <fiprintf+0x20>)
 8007f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f62:	6800      	ldr	r0, [r0, #0]
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	f000 f897 	bl	8008098 <_vfiprintf_r>
 8007f6a:	b002      	add	sp, #8
 8007f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f70:	b003      	add	sp, #12
 8007f72:	4770      	bx	lr
 8007f74:	2000001c 	.word	0x2000001c

08007f78 <__ascii_mbtowc>:
 8007f78:	b082      	sub	sp, #8
 8007f7a:	b901      	cbnz	r1, 8007f7e <__ascii_mbtowc+0x6>
 8007f7c:	a901      	add	r1, sp, #4
 8007f7e:	b142      	cbz	r2, 8007f92 <__ascii_mbtowc+0x1a>
 8007f80:	b14b      	cbz	r3, 8007f96 <__ascii_mbtowc+0x1e>
 8007f82:	7813      	ldrb	r3, [r2, #0]
 8007f84:	600b      	str	r3, [r1, #0]
 8007f86:	7812      	ldrb	r2, [r2, #0]
 8007f88:	1e10      	subs	r0, r2, #0
 8007f8a:	bf18      	it	ne
 8007f8c:	2001      	movne	r0, #1
 8007f8e:	b002      	add	sp, #8
 8007f90:	4770      	bx	lr
 8007f92:	4610      	mov	r0, r2
 8007f94:	e7fb      	b.n	8007f8e <__ascii_mbtowc+0x16>
 8007f96:	f06f 0001 	mvn.w	r0, #1
 8007f9a:	e7f8      	b.n	8007f8e <__ascii_mbtowc+0x16>

08007f9c <memmove>:
 8007f9c:	4288      	cmp	r0, r1
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	eb01 0402 	add.w	r4, r1, r2
 8007fa4:	d902      	bls.n	8007fac <memmove+0x10>
 8007fa6:	4284      	cmp	r4, r0
 8007fa8:	4623      	mov	r3, r4
 8007faa:	d807      	bhi.n	8007fbc <memmove+0x20>
 8007fac:	1e43      	subs	r3, r0, #1
 8007fae:	42a1      	cmp	r1, r4
 8007fb0:	d008      	beq.n	8007fc4 <memmove+0x28>
 8007fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fba:	e7f8      	b.n	8007fae <memmove+0x12>
 8007fbc:	4402      	add	r2, r0
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	428a      	cmp	r2, r1
 8007fc2:	d100      	bne.n	8007fc6 <memmove+0x2a>
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fce:	e7f7      	b.n	8007fc0 <memmove+0x24>

08007fd0 <__malloc_lock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__malloc_lock+0x8>)
 8007fd2:	f000 bc1f 	b.w	8008814 <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	2000430c 	.word	0x2000430c

08007fdc <__malloc_unlock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_unlock+0x8>)
 8007fde:	f000 bc1a 	b.w	8008816 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	2000430c 	.word	0x2000430c

08007fe8 <_realloc_r>:
 8007fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fec:	4680      	mov	r8, r0
 8007fee:	4614      	mov	r4, r2
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	b921      	cbnz	r1, 8007ffe <_realloc_r+0x16>
 8007ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	f7ff bdad 	b.w	8007b58 <_malloc_r>
 8007ffe:	b92a      	cbnz	r2, 800800c <_realloc_r+0x24>
 8008000:	f7ff fd3e 	bl	8007a80 <_free_r>
 8008004:	4625      	mov	r5, r4
 8008006:	4628      	mov	r0, r5
 8008008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800c:	f000 fc6a 	bl	80088e4 <_malloc_usable_size_r>
 8008010:	4284      	cmp	r4, r0
 8008012:	4607      	mov	r7, r0
 8008014:	d802      	bhi.n	800801c <_realloc_r+0x34>
 8008016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800801a:	d812      	bhi.n	8008042 <_realloc_r+0x5a>
 800801c:	4621      	mov	r1, r4
 800801e:	4640      	mov	r0, r8
 8008020:	f7ff fd9a 	bl	8007b58 <_malloc_r>
 8008024:	4605      	mov	r5, r0
 8008026:	2800      	cmp	r0, #0
 8008028:	d0ed      	beq.n	8008006 <_realloc_r+0x1e>
 800802a:	42bc      	cmp	r4, r7
 800802c:	4622      	mov	r2, r4
 800802e:	4631      	mov	r1, r6
 8008030:	bf28      	it	cs
 8008032:	463a      	movcs	r2, r7
 8008034:	f7fd fdc4 	bl	8005bc0 <memcpy>
 8008038:	4631      	mov	r1, r6
 800803a:	4640      	mov	r0, r8
 800803c:	f7ff fd20 	bl	8007a80 <_free_r>
 8008040:	e7e1      	b.n	8008006 <_realloc_r+0x1e>
 8008042:	4635      	mov	r5, r6
 8008044:	e7df      	b.n	8008006 <_realloc_r+0x1e>

08008046 <__sfputc_r>:
 8008046:	6893      	ldr	r3, [r2, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	b410      	push	{r4}
 800804e:	6093      	str	r3, [r2, #8]
 8008050:	da08      	bge.n	8008064 <__sfputc_r+0x1e>
 8008052:	6994      	ldr	r4, [r2, #24]
 8008054:	42a3      	cmp	r3, r4
 8008056:	db01      	blt.n	800805c <__sfputc_r+0x16>
 8008058:	290a      	cmp	r1, #10
 800805a:	d103      	bne.n	8008064 <__sfputc_r+0x1e>
 800805c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008060:	f000 b94a 	b.w	80082f8 <__swbuf_r>
 8008064:	6813      	ldr	r3, [r2, #0]
 8008066:	1c58      	adds	r0, r3, #1
 8008068:	6010      	str	r0, [r2, #0]
 800806a:	7019      	strb	r1, [r3, #0]
 800806c:	4608      	mov	r0, r1
 800806e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008072:	4770      	bx	lr

08008074 <__sfputs_r>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	4606      	mov	r6, r0
 8008078:	460f      	mov	r7, r1
 800807a:	4614      	mov	r4, r2
 800807c:	18d5      	adds	r5, r2, r3
 800807e:	42ac      	cmp	r4, r5
 8008080:	d101      	bne.n	8008086 <__sfputs_r+0x12>
 8008082:	2000      	movs	r0, #0
 8008084:	e007      	b.n	8008096 <__sfputs_r+0x22>
 8008086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808a:	463a      	mov	r2, r7
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ffda 	bl	8008046 <__sfputc_r>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d1f3      	bne.n	800807e <__sfputs_r+0xa>
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008098 <_vfiprintf_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	460d      	mov	r5, r1
 800809e:	b09d      	sub	sp, #116	; 0x74
 80080a0:	4614      	mov	r4, r2
 80080a2:	4698      	mov	r8, r3
 80080a4:	4606      	mov	r6, r0
 80080a6:	b118      	cbz	r0, 80080b0 <_vfiprintf_r+0x18>
 80080a8:	6983      	ldr	r3, [r0, #24]
 80080aa:	b90b      	cbnz	r3, 80080b0 <_vfiprintf_r+0x18>
 80080ac:	f000 fb14 	bl	80086d8 <__sinit>
 80080b0:	4b89      	ldr	r3, [pc, #548]	; (80082d8 <_vfiprintf_r+0x240>)
 80080b2:	429d      	cmp	r5, r3
 80080b4:	d11b      	bne.n	80080ee <_vfiprintf_r+0x56>
 80080b6:	6875      	ldr	r5, [r6, #4]
 80080b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_vfiprintf_r+0x32>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	059a      	lsls	r2, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_vfiprintf_r+0x32>
 80080c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c6:	f000 fba5 	bl	8008814 <__retarget_lock_acquire_recursive>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	071b      	lsls	r3, r3, #28
 80080ce:	d501      	bpl.n	80080d4 <_vfiprintf_r+0x3c>
 80080d0:	692b      	ldr	r3, [r5, #16]
 80080d2:	b9eb      	cbnz	r3, 8008110 <_vfiprintf_r+0x78>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 f96e 	bl	80083b8 <__swsetup_r>
 80080dc:	b1c0      	cbz	r0, 8008110 <_vfiprintf_r+0x78>
 80080de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e0:	07dc      	lsls	r4, r3, #31
 80080e2:	d50e      	bpl.n	8008102 <_vfiprintf_r+0x6a>
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	b01d      	add	sp, #116	; 0x74
 80080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ee:	4b7b      	ldr	r3, [pc, #492]	; (80082dc <_vfiprintf_r+0x244>)
 80080f0:	429d      	cmp	r5, r3
 80080f2:	d101      	bne.n	80080f8 <_vfiprintf_r+0x60>
 80080f4:	68b5      	ldr	r5, [r6, #8]
 80080f6:	e7df      	b.n	80080b8 <_vfiprintf_r+0x20>
 80080f8:	4b79      	ldr	r3, [pc, #484]	; (80082e0 <_vfiprintf_r+0x248>)
 80080fa:	429d      	cmp	r5, r3
 80080fc:	bf08      	it	eq
 80080fe:	68f5      	ldreq	r5, [r6, #12]
 8008100:	e7da      	b.n	80080b8 <_vfiprintf_r+0x20>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	0598      	lsls	r0, r3, #22
 8008106:	d4ed      	bmi.n	80080e4 <_vfiprintf_r+0x4c>
 8008108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810a:	f000 fb84 	bl	8008816 <__retarget_lock_release_recursive>
 800810e:	e7e9      	b.n	80080e4 <_vfiprintf_r+0x4c>
 8008110:	2300      	movs	r3, #0
 8008112:	9309      	str	r3, [sp, #36]	; 0x24
 8008114:	2320      	movs	r3, #32
 8008116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800811a:	f8cd 800c 	str.w	r8, [sp, #12]
 800811e:	2330      	movs	r3, #48	; 0x30
 8008120:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082e4 <_vfiprintf_r+0x24c>
 8008124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008128:	f04f 0901 	mov.w	r9, #1
 800812c:	4623      	mov	r3, r4
 800812e:	469a      	mov	sl, r3
 8008130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008134:	b10a      	cbz	r2, 800813a <_vfiprintf_r+0xa2>
 8008136:	2a25      	cmp	r2, #37	; 0x25
 8008138:	d1f9      	bne.n	800812e <_vfiprintf_r+0x96>
 800813a:	ebba 0b04 	subs.w	fp, sl, r4
 800813e:	d00b      	beq.n	8008158 <_vfiprintf_r+0xc0>
 8008140:	465b      	mov	r3, fp
 8008142:	4622      	mov	r2, r4
 8008144:	4629      	mov	r1, r5
 8008146:	4630      	mov	r0, r6
 8008148:	f7ff ff94 	bl	8008074 <__sfputs_r>
 800814c:	3001      	adds	r0, #1
 800814e:	f000 80aa 	beq.w	80082a6 <_vfiprintf_r+0x20e>
 8008152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008154:	445a      	add	r2, fp
 8008156:	9209      	str	r2, [sp, #36]	; 0x24
 8008158:	f89a 3000 	ldrb.w	r3, [sl]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 80a2 	beq.w	80082a6 <_vfiprintf_r+0x20e>
 8008162:	2300      	movs	r3, #0
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800816c:	f10a 0a01 	add.w	sl, sl, #1
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008178:	931a      	str	r3, [sp, #104]	; 0x68
 800817a:	4654      	mov	r4, sl
 800817c:	2205      	movs	r2, #5
 800817e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008182:	4858      	ldr	r0, [pc, #352]	; (80082e4 <_vfiprintf_r+0x24c>)
 8008184:	f7f8 f834 	bl	80001f0 <memchr>
 8008188:	9a04      	ldr	r2, [sp, #16]
 800818a:	b9d8      	cbnz	r0, 80081c4 <_vfiprintf_r+0x12c>
 800818c:	06d1      	lsls	r1, r2, #27
 800818e:	bf44      	itt	mi
 8008190:	2320      	movmi	r3, #32
 8008192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008196:	0713      	lsls	r3, r2, #28
 8008198:	bf44      	itt	mi
 800819a:	232b      	movmi	r3, #43	; 0x2b
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a0:	f89a 3000 	ldrb.w	r3, [sl]
 80081a4:	2b2a      	cmp	r3, #42	; 0x2a
 80081a6:	d015      	beq.n	80081d4 <_vfiprintf_r+0x13c>
 80081a8:	9a07      	ldr	r2, [sp, #28]
 80081aa:	4654      	mov	r4, sl
 80081ac:	2000      	movs	r0, #0
 80081ae:	f04f 0c0a 	mov.w	ip, #10
 80081b2:	4621      	mov	r1, r4
 80081b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b8:	3b30      	subs	r3, #48	; 0x30
 80081ba:	2b09      	cmp	r3, #9
 80081bc:	d94e      	bls.n	800825c <_vfiprintf_r+0x1c4>
 80081be:	b1b0      	cbz	r0, 80081ee <_vfiprintf_r+0x156>
 80081c0:	9207      	str	r2, [sp, #28]
 80081c2:	e014      	b.n	80081ee <_vfiprintf_r+0x156>
 80081c4:	eba0 0308 	sub.w	r3, r0, r8
 80081c8:	fa09 f303 	lsl.w	r3, r9, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	46a2      	mov	sl, r4
 80081d2:	e7d2      	b.n	800817a <_vfiprintf_r+0xe2>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1d19      	adds	r1, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9103      	str	r1, [sp, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbb      	ittet	lt
 80081e0:	425b      	neglt	r3, r3
 80081e2:	f042 0202 	orrlt.w	r2, r2, #2
 80081e6:	9307      	strge	r3, [sp, #28]
 80081e8:	9307      	strlt	r3, [sp, #28]
 80081ea:	bfb8      	it	lt
 80081ec:	9204      	strlt	r2, [sp, #16]
 80081ee:	7823      	ldrb	r3, [r4, #0]
 80081f0:	2b2e      	cmp	r3, #46	; 0x2e
 80081f2:	d10c      	bne.n	800820e <_vfiprintf_r+0x176>
 80081f4:	7863      	ldrb	r3, [r4, #1]
 80081f6:	2b2a      	cmp	r3, #42	; 0x2a
 80081f8:	d135      	bne.n	8008266 <_vfiprintf_r+0x1ce>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	1d1a      	adds	r2, r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	9203      	str	r2, [sp, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfb8      	it	lt
 8008206:	f04f 33ff 	movlt.w	r3, #4294967295
 800820a:	3402      	adds	r4, #2
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082f4 <_vfiprintf_r+0x25c>
 8008212:	7821      	ldrb	r1, [r4, #0]
 8008214:	2203      	movs	r2, #3
 8008216:	4650      	mov	r0, sl
 8008218:	f7f7 ffea 	bl	80001f0 <memchr>
 800821c:	b140      	cbz	r0, 8008230 <_vfiprintf_r+0x198>
 800821e:	2340      	movs	r3, #64	; 0x40
 8008220:	eba0 000a 	sub.w	r0, r0, sl
 8008224:	fa03 f000 	lsl.w	r0, r3, r0
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	4303      	orrs	r3, r0
 800822c:	3401      	adds	r4, #1
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008234:	482c      	ldr	r0, [pc, #176]	; (80082e8 <_vfiprintf_r+0x250>)
 8008236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800823a:	2206      	movs	r2, #6
 800823c:	f7f7 ffd8 	bl	80001f0 <memchr>
 8008240:	2800      	cmp	r0, #0
 8008242:	d03f      	beq.n	80082c4 <_vfiprintf_r+0x22c>
 8008244:	4b29      	ldr	r3, [pc, #164]	; (80082ec <_vfiprintf_r+0x254>)
 8008246:	bb1b      	cbnz	r3, 8008290 <_vfiprintf_r+0x1f8>
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	3307      	adds	r3, #7
 800824c:	f023 0307 	bic.w	r3, r3, #7
 8008250:	3308      	adds	r3, #8
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008256:	443b      	add	r3, r7
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	e767      	b.n	800812c <_vfiprintf_r+0x94>
 800825c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008260:	460c      	mov	r4, r1
 8008262:	2001      	movs	r0, #1
 8008264:	e7a5      	b.n	80081b2 <_vfiprintf_r+0x11a>
 8008266:	2300      	movs	r3, #0
 8008268:	3401      	adds	r4, #1
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	4619      	mov	r1, r3
 800826e:	f04f 0c0a 	mov.w	ip, #10
 8008272:	4620      	mov	r0, r4
 8008274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008278:	3a30      	subs	r2, #48	; 0x30
 800827a:	2a09      	cmp	r2, #9
 800827c:	d903      	bls.n	8008286 <_vfiprintf_r+0x1ee>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0c5      	beq.n	800820e <_vfiprintf_r+0x176>
 8008282:	9105      	str	r1, [sp, #20]
 8008284:	e7c3      	b.n	800820e <_vfiprintf_r+0x176>
 8008286:	fb0c 2101 	mla	r1, ip, r1, r2
 800828a:	4604      	mov	r4, r0
 800828c:	2301      	movs	r3, #1
 800828e:	e7f0      	b.n	8008272 <_vfiprintf_r+0x1da>
 8008290:	ab03      	add	r3, sp, #12
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	462a      	mov	r2, r5
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <_vfiprintf_r+0x258>)
 8008298:	a904      	add	r1, sp, #16
 800829a:	4630      	mov	r0, r6
 800829c:	f7fd fd46 	bl	8005d2c <_printf_float>
 80082a0:	4607      	mov	r7, r0
 80082a2:	1c78      	adds	r0, r7, #1
 80082a4:	d1d6      	bne.n	8008254 <_vfiprintf_r+0x1bc>
 80082a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a8:	07d9      	lsls	r1, r3, #31
 80082aa:	d405      	bmi.n	80082b8 <_vfiprintf_r+0x220>
 80082ac:	89ab      	ldrh	r3, [r5, #12]
 80082ae:	059a      	lsls	r2, r3, #22
 80082b0:	d402      	bmi.n	80082b8 <_vfiprintf_r+0x220>
 80082b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b4:	f000 faaf 	bl	8008816 <__retarget_lock_release_recursive>
 80082b8:	89ab      	ldrh	r3, [r5, #12]
 80082ba:	065b      	lsls	r3, r3, #25
 80082bc:	f53f af12 	bmi.w	80080e4 <_vfiprintf_r+0x4c>
 80082c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c2:	e711      	b.n	80080e8 <_vfiprintf_r+0x50>
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <_vfiprintf_r+0x258>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7fd ffd0 	bl	8006274 <_printf_i>
 80082d4:	e7e4      	b.n	80082a0 <_vfiprintf_r+0x208>
 80082d6:	bf00      	nop
 80082d8:	08008f34 	.word	0x08008f34
 80082dc:	08008f54 	.word	0x08008f54
 80082e0:	08008f14 	.word	0x08008f14
 80082e4:	08008ebc 	.word	0x08008ebc
 80082e8:	08008ec6 	.word	0x08008ec6
 80082ec:	08005d2d 	.word	0x08005d2d
 80082f0:	08008075 	.word	0x08008075
 80082f4:	08008ec2 	.word	0x08008ec2

080082f8 <__swbuf_r>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	460e      	mov	r6, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	4605      	mov	r5, r0
 8008300:	b118      	cbz	r0, 800830a <__swbuf_r+0x12>
 8008302:	6983      	ldr	r3, [r0, #24]
 8008304:	b90b      	cbnz	r3, 800830a <__swbuf_r+0x12>
 8008306:	f000 f9e7 	bl	80086d8 <__sinit>
 800830a:	4b21      	ldr	r3, [pc, #132]	; (8008390 <__swbuf_r+0x98>)
 800830c:	429c      	cmp	r4, r3
 800830e:	d12b      	bne.n	8008368 <__swbuf_r+0x70>
 8008310:	686c      	ldr	r4, [r5, #4]
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	071a      	lsls	r2, r3, #28
 800831a:	d52f      	bpl.n	800837c <__swbuf_r+0x84>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	b36b      	cbz	r3, 800837c <__swbuf_r+0x84>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	1ac0      	subs	r0, r0, r3
 8008326:	6963      	ldr	r3, [r4, #20]
 8008328:	b2f6      	uxtb	r6, r6
 800832a:	4283      	cmp	r3, r0
 800832c:	4637      	mov	r7, r6
 800832e:	dc04      	bgt.n	800833a <__swbuf_r+0x42>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f93c 	bl	80085b0 <_fflush_r>
 8008338:	bb30      	cbnz	r0, 8008388 <__swbuf_r+0x90>
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	3b01      	subs	r3, #1
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	701e      	strb	r6, [r3, #0]
 8008348:	6963      	ldr	r3, [r4, #20]
 800834a:	3001      	adds	r0, #1
 800834c:	4283      	cmp	r3, r0
 800834e:	d004      	beq.n	800835a <__swbuf_r+0x62>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d506      	bpl.n	8008364 <__swbuf_r+0x6c>
 8008356:	2e0a      	cmp	r6, #10
 8008358:	d104      	bne.n	8008364 <__swbuf_r+0x6c>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f927 	bl	80085b0 <_fflush_r>
 8008362:	b988      	cbnz	r0, 8008388 <__swbuf_r+0x90>
 8008364:	4638      	mov	r0, r7
 8008366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <__swbuf_r+0x9c>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d101      	bne.n	8008372 <__swbuf_r+0x7a>
 800836e:	68ac      	ldr	r4, [r5, #8]
 8008370:	e7cf      	b.n	8008312 <__swbuf_r+0x1a>
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <__swbuf_r+0xa0>)
 8008374:	429c      	cmp	r4, r3
 8008376:	bf08      	it	eq
 8008378:	68ec      	ldreq	r4, [r5, #12]
 800837a:	e7ca      	b.n	8008312 <__swbuf_r+0x1a>
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f000 f81a 	bl	80083b8 <__swsetup_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	d0cb      	beq.n	8008320 <__swbuf_r+0x28>
 8008388:	f04f 37ff 	mov.w	r7, #4294967295
 800838c:	e7ea      	b.n	8008364 <__swbuf_r+0x6c>
 800838e:	bf00      	nop
 8008390:	08008f34 	.word	0x08008f34
 8008394:	08008f54 	.word	0x08008f54
 8008398:	08008f14 	.word	0x08008f14

0800839c <__ascii_wctomb>:
 800839c:	b149      	cbz	r1, 80083b2 <__ascii_wctomb+0x16>
 800839e:	2aff      	cmp	r2, #255	; 0xff
 80083a0:	bf85      	ittet	hi
 80083a2:	238a      	movhi	r3, #138	; 0x8a
 80083a4:	6003      	strhi	r3, [r0, #0]
 80083a6:	700a      	strbls	r2, [r1, #0]
 80083a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80083ac:	bf98      	it	ls
 80083ae:	2001      	movls	r0, #1
 80083b0:	4770      	bx	lr
 80083b2:	4608      	mov	r0, r1
 80083b4:	4770      	bx	lr
	...

080083b8 <__swsetup_r>:
 80083b8:	4b32      	ldr	r3, [pc, #200]	; (8008484 <__swsetup_r+0xcc>)
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	681d      	ldr	r5, [r3, #0]
 80083be:	4606      	mov	r6, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	b125      	cbz	r5, 80083ce <__swsetup_r+0x16>
 80083c4:	69ab      	ldr	r3, [r5, #24]
 80083c6:	b913      	cbnz	r3, 80083ce <__swsetup_r+0x16>
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f985 	bl	80086d8 <__sinit>
 80083ce:	4b2e      	ldr	r3, [pc, #184]	; (8008488 <__swsetup_r+0xd0>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	d10f      	bne.n	80083f4 <__swsetup_r+0x3c>
 80083d4:	686c      	ldr	r4, [r5, #4]
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083dc:	0719      	lsls	r1, r3, #28
 80083de:	d42c      	bmi.n	800843a <__swsetup_r+0x82>
 80083e0:	06dd      	lsls	r5, r3, #27
 80083e2:	d411      	bmi.n	8008408 <__swsetup_r+0x50>
 80083e4:	2309      	movs	r3, #9
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	e03e      	b.n	8008472 <__swsetup_r+0xba>
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <__swsetup_r+0xd4>)
 80083f6:	429c      	cmp	r4, r3
 80083f8:	d101      	bne.n	80083fe <__swsetup_r+0x46>
 80083fa:	68ac      	ldr	r4, [r5, #8]
 80083fc:	e7eb      	b.n	80083d6 <__swsetup_r+0x1e>
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <__swsetup_r+0xd8>)
 8008400:	429c      	cmp	r4, r3
 8008402:	bf08      	it	eq
 8008404:	68ec      	ldreq	r4, [r5, #12]
 8008406:	e7e6      	b.n	80083d6 <__swsetup_r+0x1e>
 8008408:	0758      	lsls	r0, r3, #29
 800840a:	d512      	bpl.n	8008432 <__swsetup_r+0x7a>
 800840c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840e:	b141      	cbz	r1, 8008422 <__swsetup_r+0x6a>
 8008410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <__swsetup_r+0x66>
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff fb31 	bl	8007a80 <_free_r>
 800841e:	2300      	movs	r3, #0
 8008420:	6363      	str	r3, [r4, #52]	; 0x34
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	2300      	movs	r3, #0
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f043 0308 	orr.w	r3, r3, #8
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	b94b      	cbnz	r3, 8008452 <__swsetup_r+0x9a>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008448:	d003      	beq.n	8008452 <__swsetup_r+0x9a>
 800844a:	4621      	mov	r1, r4
 800844c:	4630      	mov	r0, r6
 800844e:	f000 fa09 	bl	8008864 <__smakebuf_r>
 8008452:	89a0      	ldrh	r0, [r4, #12]
 8008454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008458:	f010 0301 	ands.w	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <__swsetup_r+0xbc>
 800845e:	2300      	movs	r3, #0
 8008460:	60a3      	str	r3, [r4, #8]
 8008462:	6963      	ldr	r3, [r4, #20]
 8008464:	425b      	negs	r3, r3
 8008466:	61a3      	str	r3, [r4, #24]
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	b943      	cbnz	r3, 800847e <__swsetup_r+0xc6>
 800846c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008470:	d1ba      	bne.n	80083e8 <__swsetup_r+0x30>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	0781      	lsls	r1, r0, #30
 8008476:	bf58      	it	pl
 8008478:	6963      	ldrpl	r3, [r4, #20]
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	e7f4      	b.n	8008468 <__swsetup_r+0xb0>
 800847e:	2000      	movs	r0, #0
 8008480:	e7f7      	b.n	8008472 <__swsetup_r+0xba>
 8008482:	bf00      	nop
 8008484:	2000001c 	.word	0x2000001c
 8008488:	08008f34 	.word	0x08008f34
 800848c:	08008f54 	.word	0x08008f54
 8008490:	08008f14 	.word	0x08008f14

08008494 <abort>:
 8008494:	b508      	push	{r3, lr}
 8008496:	2006      	movs	r0, #6
 8008498:	f000 fa54 	bl	8008944 <raise>
 800849c:	2001      	movs	r0, #1
 800849e:	f7f9 f9dd 	bl	800185c <_exit>
	...

080084a4 <__sflush_r>:
 80084a4:	898a      	ldrh	r2, [r1, #12]
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	4605      	mov	r5, r0
 80084ac:	0710      	lsls	r0, r2, #28
 80084ae:	460c      	mov	r4, r1
 80084b0:	d458      	bmi.n	8008564 <__sflush_r+0xc0>
 80084b2:	684b      	ldr	r3, [r1, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc05      	bgt.n	80084c4 <__sflush_r+0x20>
 80084b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc02      	bgt.n	80084c4 <__sflush_r+0x20>
 80084be:	2000      	movs	r0, #0
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d0f9      	beq.n	80084be <__sflush_r+0x1a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d0:	682f      	ldr	r7, [r5, #0]
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	d032      	beq.n	800853c <__sflush_r+0x98>
 80084d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	075a      	lsls	r2, r3, #29
 80084dc:	d505      	bpl.n	80084ea <__sflush_r+0x46>
 80084de:	6863      	ldr	r3, [r4, #4]
 80084e0:	1ac0      	subs	r0, r0, r3
 80084e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e4:	b10b      	cbz	r3, 80084ea <__sflush_r+0x46>
 80084e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084e8:	1ac0      	subs	r0, r0, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	4602      	mov	r2, r0
 80084ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f0:	6a21      	ldr	r1, [r4, #32]
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b0      	blx	r6
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	d106      	bne.n	800850a <__sflush_r+0x66>
 80084fc:	6829      	ldr	r1, [r5, #0]
 80084fe:	291d      	cmp	r1, #29
 8008500:	d82c      	bhi.n	800855c <__sflush_r+0xb8>
 8008502:	4a2a      	ldr	r2, [pc, #168]	; (80085ac <__sflush_r+0x108>)
 8008504:	40ca      	lsrs	r2, r1
 8008506:	07d6      	lsls	r6, r2, #31
 8008508:	d528      	bpl.n	800855c <__sflush_r+0xb8>
 800850a:	2200      	movs	r2, #0
 800850c:	6062      	str	r2, [r4, #4]
 800850e:	04d9      	lsls	r1, r3, #19
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	d504      	bpl.n	8008520 <__sflush_r+0x7c>
 8008516:	1c42      	adds	r2, r0, #1
 8008518:	d101      	bne.n	800851e <__sflush_r+0x7a>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	b903      	cbnz	r3, 8008520 <__sflush_r+0x7c>
 800851e:	6560      	str	r0, [r4, #84]	; 0x54
 8008520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008522:	602f      	str	r7, [r5, #0]
 8008524:	2900      	cmp	r1, #0
 8008526:	d0ca      	beq.n	80084be <__sflush_r+0x1a>
 8008528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <__sflush_r+0x92>
 8008530:	4628      	mov	r0, r5
 8008532:	f7ff faa5 	bl	8007a80 <_free_r>
 8008536:	2000      	movs	r0, #0
 8008538:	6360      	str	r0, [r4, #52]	; 0x34
 800853a:	e7c1      	b.n	80084c0 <__sflush_r+0x1c>
 800853c:	6a21      	ldr	r1, [r4, #32]
 800853e:	2301      	movs	r3, #1
 8008540:	4628      	mov	r0, r5
 8008542:	47b0      	blx	r6
 8008544:	1c41      	adds	r1, r0, #1
 8008546:	d1c7      	bne.n	80084d8 <__sflush_r+0x34>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c4      	beq.n	80084d8 <__sflush_r+0x34>
 800854e:	2b1d      	cmp	r3, #29
 8008550:	d001      	beq.n	8008556 <__sflush_r+0xb2>
 8008552:	2b16      	cmp	r3, #22
 8008554:	d101      	bne.n	800855a <__sflush_r+0xb6>
 8008556:	602f      	str	r7, [r5, #0]
 8008558:	e7b1      	b.n	80084be <__sflush_r+0x1a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	e7ad      	b.n	80084c0 <__sflush_r+0x1c>
 8008564:	690f      	ldr	r7, [r1, #16]
 8008566:	2f00      	cmp	r7, #0
 8008568:	d0a9      	beq.n	80084be <__sflush_r+0x1a>
 800856a:	0793      	lsls	r3, r2, #30
 800856c:	680e      	ldr	r6, [r1, #0]
 800856e:	bf08      	it	eq
 8008570:	694b      	ldreq	r3, [r1, #20]
 8008572:	600f      	str	r7, [r1, #0]
 8008574:	bf18      	it	ne
 8008576:	2300      	movne	r3, #0
 8008578:	eba6 0807 	sub.w	r8, r6, r7
 800857c:	608b      	str	r3, [r1, #8]
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	dd9c      	ble.n	80084be <__sflush_r+0x1a>
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008588:	4643      	mov	r3, r8
 800858a:	463a      	mov	r2, r7
 800858c:	4628      	mov	r0, r5
 800858e:	47b0      	blx	r6
 8008590:	2800      	cmp	r0, #0
 8008592:	dc06      	bgt.n	80085a2 <__sflush_r+0xfe>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	e78e      	b.n	80084c0 <__sflush_r+0x1c>
 80085a2:	4407      	add	r7, r0
 80085a4:	eba8 0800 	sub.w	r8, r8, r0
 80085a8:	e7e9      	b.n	800857e <__sflush_r+0xda>
 80085aa:	bf00      	nop
 80085ac:	20400001 	.word	0x20400001

080085b0 <_fflush_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b913      	cbnz	r3, 80085c0 <_fflush_r+0x10>
 80085ba:	2500      	movs	r5, #0
 80085bc:	4628      	mov	r0, r5
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	b118      	cbz	r0, 80085ca <_fflush_r+0x1a>
 80085c2:	6983      	ldr	r3, [r0, #24]
 80085c4:	b90b      	cbnz	r3, 80085ca <_fflush_r+0x1a>
 80085c6:	f000 f887 	bl	80086d8 <__sinit>
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <_fflush_r+0x6c>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d11b      	bne.n	8008608 <_fflush_r+0x58>
 80085d0:	686c      	ldr	r4, [r5, #4]
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0ef      	beq.n	80085ba <_fflush_r+0xa>
 80085da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085dc:	07d0      	lsls	r0, r2, #31
 80085de:	d404      	bmi.n	80085ea <_fflush_r+0x3a>
 80085e0:	0599      	lsls	r1, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_fflush_r+0x3a>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f000 f915 	bl	8008814 <__retarget_lock_acquire_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7ff ff59 	bl	80084a4 <__sflush_r>
 80085f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f4:	07da      	lsls	r2, r3, #31
 80085f6:	4605      	mov	r5, r0
 80085f8:	d4e0      	bmi.n	80085bc <_fflush_r+0xc>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	d4dd      	bmi.n	80085bc <_fflush_r+0xc>
 8008600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008602:	f000 f908 	bl	8008816 <__retarget_lock_release_recursive>
 8008606:	e7d9      	b.n	80085bc <_fflush_r+0xc>
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <_fflush_r+0x70>)
 800860a:	429c      	cmp	r4, r3
 800860c:	d101      	bne.n	8008612 <_fflush_r+0x62>
 800860e:	68ac      	ldr	r4, [r5, #8]
 8008610:	e7df      	b.n	80085d2 <_fflush_r+0x22>
 8008612:	4b04      	ldr	r3, [pc, #16]	; (8008624 <_fflush_r+0x74>)
 8008614:	429c      	cmp	r4, r3
 8008616:	bf08      	it	eq
 8008618:	68ec      	ldreq	r4, [r5, #12]
 800861a:	e7da      	b.n	80085d2 <_fflush_r+0x22>
 800861c:	08008f34 	.word	0x08008f34
 8008620:	08008f54 	.word	0x08008f54
 8008624:	08008f14 	.word	0x08008f14

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	; 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	; 0x5c
 8008646:	f7fd fac9 	bl	8005bdc <memset>
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <std+0x38>)
 800864c:	6263      	str	r3, [r4, #36]	; 0x24
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <std+0x3c>)
 8008650:	62a3      	str	r3, [r4, #40]	; 0x28
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <std+0x40>)
 8008654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <std+0x44>)
 8008658:	6224      	str	r4, [r4, #32]
 800865a:	6323      	str	r3, [r4, #48]	; 0x30
 800865c:	bd10      	pop	{r4, pc}
 800865e:	bf00      	nop
 8008660:	0800897d 	.word	0x0800897d
 8008664:	0800899f 	.word	0x0800899f
 8008668:	080089d7 	.word	0x080089d7
 800866c:	080089fb 	.word	0x080089fb

08008670 <_cleanup_r>:
 8008670:	4901      	ldr	r1, [pc, #4]	; (8008678 <_cleanup_r+0x8>)
 8008672:	f000 b8af 	b.w	80087d4 <_fwalk_reent>
 8008676:	bf00      	nop
 8008678:	080085b1 	.word	0x080085b1

0800867c <__sfmoreglue>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	2268      	movs	r2, #104	; 0x68
 8008680:	1e4d      	subs	r5, r1, #1
 8008682:	4355      	muls	r5, r2
 8008684:	460e      	mov	r6, r1
 8008686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800868a:	f7ff fa65 	bl	8007b58 <_malloc_r>
 800868e:	4604      	mov	r4, r0
 8008690:	b140      	cbz	r0, 80086a4 <__sfmoreglue+0x28>
 8008692:	2100      	movs	r1, #0
 8008694:	e9c0 1600 	strd	r1, r6, [r0]
 8008698:	300c      	adds	r0, #12
 800869a:	60a0      	str	r0, [r4, #8]
 800869c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086a0:	f7fd fa9c 	bl	8005bdc <memset>
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <__sfp_lock_acquire>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__sfp_lock_acquire+0x8>)
 80086aa:	f000 b8b3 	b.w	8008814 <__retarget_lock_acquire_recursive>
 80086ae:	bf00      	nop
 80086b0:	2000430d 	.word	0x2000430d

080086b4 <__sfp_lock_release>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__sfp_lock_release+0x8>)
 80086b6:	f000 b8ae 	b.w	8008816 <__retarget_lock_release_recursive>
 80086ba:	bf00      	nop
 80086bc:	2000430d 	.word	0x2000430d

080086c0 <__sinit_lock_acquire>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__sinit_lock_acquire+0x8>)
 80086c2:	f000 b8a7 	b.w	8008814 <__retarget_lock_acquire_recursive>
 80086c6:	bf00      	nop
 80086c8:	2000430e 	.word	0x2000430e

080086cc <__sinit_lock_release>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__sinit_lock_release+0x8>)
 80086ce:	f000 b8a2 	b.w	8008816 <__retarget_lock_release_recursive>
 80086d2:	bf00      	nop
 80086d4:	2000430e 	.word	0x2000430e

080086d8 <__sinit>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	f7ff fff0 	bl	80086c0 <__sinit_lock_acquire>
 80086e0:	69a3      	ldr	r3, [r4, #24]
 80086e2:	b11b      	cbz	r3, 80086ec <__sinit+0x14>
 80086e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e8:	f7ff bff0 	b.w	80086cc <__sinit_lock_release>
 80086ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086f0:	6523      	str	r3, [r4, #80]	; 0x50
 80086f2:	4b13      	ldr	r3, [pc, #76]	; (8008740 <__sinit+0x68>)
 80086f4:	4a13      	ldr	r2, [pc, #76]	; (8008744 <__sinit+0x6c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	bf04      	itt	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	61a3      	streq	r3, [r4, #24]
 8008702:	4620      	mov	r0, r4
 8008704:	f000 f820 	bl	8008748 <__sfp>
 8008708:	6060      	str	r0, [r4, #4]
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f81c 	bl	8008748 <__sfp>
 8008710:	60a0      	str	r0, [r4, #8]
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f818 	bl	8008748 <__sfp>
 8008718:	2200      	movs	r2, #0
 800871a:	60e0      	str	r0, [r4, #12]
 800871c:	2104      	movs	r1, #4
 800871e:	6860      	ldr	r0, [r4, #4]
 8008720:	f7ff ff82 	bl	8008628 <std>
 8008724:	68a0      	ldr	r0, [r4, #8]
 8008726:	2201      	movs	r2, #1
 8008728:	2109      	movs	r1, #9
 800872a:	f7ff ff7d 	bl	8008628 <std>
 800872e:	68e0      	ldr	r0, [r4, #12]
 8008730:	2202      	movs	r2, #2
 8008732:	2112      	movs	r1, #18
 8008734:	f7ff ff78 	bl	8008628 <std>
 8008738:	2301      	movs	r3, #1
 800873a:	61a3      	str	r3, [r4, #24]
 800873c:	e7d2      	b.n	80086e4 <__sinit+0xc>
 800873e:	bf00      	nop
 8008740:	08008b98 	.word	0x08008b98
 8008744:	08008671 	.word	0x08008671

08008748 <__sfp>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	4607      	mov	r7, r0
 800874c:	f7ff ffac 	bl	80086a8 <__sfp_lock_acquire>
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <__sfp+0x84>)
 8008752:	681e      	ldr	r6, [r3, #0]
 8008754:	69b3      	ldr	r3, [r6, #24]
 8008756:	b913      	cbnz	r3, 800875e <__sfp+0x16>
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ffbd 	bl	80086d8 <__sinit>
 800875e:	3648      	adds	r6, #72	; 0x48
 8008760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008764:	3b01      	subs	r3, #1
 8008766:	d503      	bpl.n	8008770 <__sfp+0x28>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	b30b      	cbz	r3, 80087b0 <__sfp+0x68>
 800876c:	6836      	ldr	r6, [r6, #0]
 800876e:	e7f7      	b.n	8008760 <__sfp+0x18>
 8008770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008774:	b9d5      	cbnz	r5, 80087ac <__sfp+0x64>
 8008776:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <__sfp+0x88>)
 8008778:	60e3      	str	r3, [r4, #12]
 800877a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800877e:	6665      	str	r5, [r4, #100]	; 0x64
 8008780:	f000 f847 	bl	8008812 <__retarget_lock_init_recursive>
 8008784:	f7ff ff96 	bl	80086b4 <__sfp_lock_release>
 8008788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800878c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008790:	6025      	str	r5, [r4, #0]
 8008792:	61a5      	str	r5, [r4, #24]
 8008794:	2208      	movs	r2, #8
 8008796:	4629      	mov	r1, r5
 8008798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800879c:	f7fd fa1e 	bl	8005bdc <memset>
 80087a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087a8:	4620      	mov	r0, r4
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	3468      	adds	r4, #104	; 0x68
 80087ae:	e7d9      	b.n	8008764 <__sfp+0x1c>
 80087b0:	2104      	movs	r1, #4
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7ff ff62 	bl	800867c <__sfmoreglue>
 80087b8:	4604      	mov	r4, r0
 80087ba:	6030      	str	r0, [r6, #0]
 80087bc:	2800      	cmp	r0, #0
 80087be:	d1d5      	bne.n	800876c <__sfp+0x24>
 80087c0:	f7ff ff78 	bl	80086b4 <__sfp_lock_release>
 80087c4:	230c      	movs	r3, #12
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	e7ee      	b.n	80087a8 <__sfp+0x60>
 80087ca:	bf00      	nop
 80087cc:	08008b98 	.word	0x08008b98
 80087d0:	ffff0001 	.word	0xffff0001

080087d4 <_fwalk_reent>:
 80087d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d8:	4606      	mov	r6, r0
 80087da:	4688      	mov	r8, r1
 80087dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087e0:	2700      	movs	r7, #0
 80087e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e6:	f1b9 0901 	subs.w	r9, r9, #1
 80087ea:	d505      	bpl.n	80087f8 <_fwalk_reent+0x24>
 80087ec:	6824      	ldr	r4, [r4, #0]
 80087ee:	2c00      	cmp	r4, #0
 80087f0:	d1f7      	bne.n	80087e2 <_fwalk_reent+0xe>
 80087f2:	4638      	mov	r0, r7
 80087f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f8:	89ab      	ldrh	r3, [r5, #12]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d907      	bls.n	800880e <_fwalk_reent+0x3a>
 80087fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008802:	3301      	adds	r3, #1
 8008804:	d003      	beq.n	800880e <_fwalk_reent+0x3a>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	47c0      	blx	r8
 800880c:	4307      	orrs	r7, r0
 800880e:	3568      	adds	r5, #104	; 0x68
 8008810:	e7e9      	b.n	80087e6 <_fwalk_reent+0x12>

08008812 <__retarget_lock_init_recursive>:
 8008812:	4770      	bx	lr

08008814 <__retarget_lock_acquire_recursive>:
 8008814:	4770      	bx	lr

08008816 <__retarget_lock_release_recursive>:
 8008816:	4770      	bx	lr

08008818 <__swhatbuf_r>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	460e      	mov	r6, r1
 800881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008820:	2900      	cmp	r1, #0
 8008822:	b096      	sub	sp, #88	; 0x58
 8008824:	4614      	mov	r4, r2
 8008826:	461d      	mov	r5, r3
 8008828:	da08      	bge.n	800883c <__swhatbuf_r+0x24>
 800882a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	602a      	str	r2, [r5, #0]
 8008832:	061a      	lsls	r2, r3, #24
 8008834:	d410      	bmi.n	8008858 <__swhatbuf_r+0x40>
 8008836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883a:	e00e      	b.n	800885a <__swhatbuf_r+0x42>
 800883c:	466a      	mov	r2, sp
 800883e:	f000 f903 	bl	8008a48 <_fstat_r>
 8008842:	2800      	cmp	r0, #0
 8008844:	dbf1      	blt.n	800882a <__swhatbuf_r+0x12>
 8008846:	9a01      	ldr	r2, [sp, #4]
 8008848:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800884c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008850:	425a      	negs	r2, r3
 8008852:	415a      	adcs	r2, r3
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	e7ee      	b.n	8008836 <__swhatbuf_r+0x1e>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2000      	movs	r0, #0
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	b016      	add	sp, #88	; 0x58
 8008860:	bd70      	pop	{r4, r5, r6, pc}
	...

08008864 <__smakebuf_r>:
 8008864:	898b      	ldrh	r3, [r1, #12]
 8008866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008868:	079d      	lsls	r5, r3, #30
 800886a:	4606      	mov	r6, r0
 800886c:	460c      	mov	r4, r1
 800886e:	d507      	bpl.n	8008880 <__smakebuf_r+0x1c>
 8008870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	2301      	movs	r3, #1
 800887a:	6163      	str	r3, [r4, #20]
 800887c:	b002      	add	sp, #8
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	ab01      	add	r3, sp, #4
 8008882:	466a      	mov	r2, sp
 8008884:	f7ff ffc8 	bl	8008818 <__swhatbuf_r>
 8008888:	9900      	ldr	r1, [sp, #0]
 800888a:	4605      	mov	r5, r0
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff f963 	bl	8007b58 <_malloc_r>
 8008892:	b948      	cbnz	r0, 80088a8 <__smakebuf_r+0x44>
 8008894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008898:	059a      	lsls	r2, r3, #22
 800889a:	d4ef      	bmi.n	800887c <__smakebuf_r+0x18>
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	f043 0302 	orr.w	r3, r3, #2
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	e7e3      	b.n	8008870 <__smakebuf_r+0xc>
 80088a8:	4b0d      	ldr	r3, [pc, #52]	; (80088e0 <__smakebuf_r+0x7c>)
 80088aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	6020      	str	r0, [r4, #0]
 80088b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	9b00      	ldr	r3, [sp, #0]
 80088b8:	6163      	str	r3, [r4, #20]
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	6120      	str	r0, [r4, #16]
 80088be:	b15b      	cbz	r3, 80088d8 <__smakebuf_r+0x74>
 80088c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 f8d1 	bl	8008a6c <_isatty_r>
 80088ca:	b128      	cbz	r0, 80088d8 <__smakebuf_r+0x74>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	89a0      	ldrh	r0, [r4, #12]
 80088da:	4305      	orrs	r5, r0
 80088dc:	81a5      	strh	r5, [r4, #12]
 80088de:	e7cd      	b.n	800887c <__smakebuf_r+0x18>
 80088e0:	08008671 	.word	0x08008671

080088e4 <_malloc_usable_size_r>:
 80088e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e8:	1f18      	subs	r0, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfbc      	itt	lt
 80088ee:	580b      	ldrlt	r3, [r1, r0]
 80088f0:	18c0      	addlt	r0, r0, r3
 80088f2:	4770      	bx	lr

080088f4 <_raise_r>:
 80088f4:	291f      	cmp	r1, #31
 80088f6:	b538      	push	{r3, r4, r5, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	d904      	bls.n	8008908 <_raise_r+0x14>
 80088fe:	2316      	movs	r3, #22
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	f04f 30ff 	mov.w	r0, #4294967295
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800890a:	b112      	cbz	r2, 8008912 <_raise_r+0x1e>
 800890c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008910:	b94b      	cbnz	r3, 8008926 <_raise_r+0x32>
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f830 	bl	8008978 <_getpid_r>
 8008918:	462a      	mov	r2, r5
 800891a:	4601      	mov	r1, r0
 800891c:	4620      	mov	r0, r4
 800891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008922:	f000 b817 	b.w	8008954 <_kill_r>
 8008926:	2b01      	cmp	r3, #1
 8008928:	d00a      	beq.n	8008940 <_raise_r+0x4c>
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	d103      	bne.n	8008936 <_raise_r+0x42>
 800892e:	2316      	movs	r3, #22
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	2001      	movs	r0, #1
 8008934:	e7e7      	b.n	8008906 <_raise_r+0x12>
 8008936:	2400      	movs	r4, #0
 8008938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800893c:	4628      	mov	r0, r5
 800893e:	4798      	blx	r3
 8008940:	2000      	movs	r0, #0
 8008942:	e7e0      	b.n	8008906 <_raise_r+0x12>

08008944 <raise>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <raise+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f7ff bfd3 	b.w	80088f4 <_raise_r>
 800894e:	bf00      	nop
 8008950:	2000001c 	.word	0x2000001c

08008954 <_kill_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_kill_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 ff6b 	bl	800183c <_kill>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_kill_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_kill_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	20004308 	.word	0x20004308

08008978 <_getpid_r>:
 8008978:	f7f8 bf58 	b.w	800182c <_getpid>

0800897c <__sread>:
 800897c:	b510      	push	{r4, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	f000 f894 	bl	8008ab0 <_read_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	bfab      	itete	ge
 800898c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800898e:	89a3      	ldrhlt	r3, [r4, #12]
 8008990:	181b      	addge	r3, r3, r0
 8008992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008996:	bfac      	ite	ge
 8008998:	6563      	strge	r3, [r4, #84]	; 0x54
 800899a:	81a3      	strhlt	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__swrite>:
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	461f      	mov	r7, r3
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	05db      	lsls	r3, r3, #23
 80089a8:	4605      	mov	r5, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4616      	mov	r6, r2
 80089ae:	d505      	bpl.n	80089bc <__swrite+0x1e>
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	2302      	movs	r3, #2
 80089b6:	2200      	movs	r2, #0
 80089b8:	f000 f868 	bl	8008a8c <_lseek_r>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	4632      	mov	r2, r6
 80089ca:	463b      	mov	r3, r7
 80089cc:	4628      	mov	r0, r5
 80089ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	f000 b817 	b.w	8008a04 <_write_r>

080089d6 <__sseek>:
 80089d6:	b510      	push	{r4, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 f855 	bl	8008a8c <_lseek_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	bf15      	itete	ne
 80089e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strheq	r3, [r4, #12]
 80089f4:	bf18      	it	ne
 80089f6:	81a3      	strhne	r3, [r4, #12]
 80089f8:	bd10      	pop	{r4, pc}

080089fa <__sclose>:
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f000 b813 	b.w	8008a28 <_close_r>
	...

08008a04 <_write_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_write_r+0x20>)
 8008a08:	4604      	mov	r4, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7f8 ff49 	bl	80018aa <_write>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_write_r+0x1e>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_write_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20004308 	.word	0x20004308

08008a28 <_close_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d06      	ldr	r5, [pc, #24]	; (8008a44 <_close_r+0x1c>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7f8 ff55 	bl	80018e2 <_close>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_close_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_close_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20004308 	.word	0x20004308

08008a48 <_fstat_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	; (8008a68 <_fstat_r+0x20>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f7f8 ff50 	bl	80018fa <_fstat>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d102      	bne.n	8008a64 <_fstat_r+0x1c>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	b103      	cbz	r3, 8008a64 <_fstat_r+0x1c>
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	20004308 	.word	0x20004308

08008a6c <_isatty_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d06      	ldr	r5, [pc, #24]	; (8008a88 <_isatty_r+0x1c>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f8 ff4f 	bl	800191a <_isatty>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_isatty_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_isatty_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20004308 	.word	0x20004308

08008a8c <_lseek_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d07      	ldr	r5, [pc, #28]	; (8008aac <_lseek_r+0x20>)
 8008a90:	4604      	mov	r4, r0
 8008a92:	4608      	mov	r0, r1
 8008a94:	4611      	mov	r1, r2
 8008a96:	2200      	movs	r2, #0
 8008a98:	602a      	str	r2, [r5, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f7f8 ff48 	bl	8001930 <_lseek>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_lseek_r+0x1e>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_lseek_r+0x1e>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20004308 	.word	0x20004308

08008ab0 <_read_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	; (8008ad0 <_read_r+0x20>)
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7f8 fed6 	bl	8001870 <_read>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_read_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_read_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	20004308 	.word	0x20004308

08008ad4 <_init>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr

08008ae0 <_fini>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr
