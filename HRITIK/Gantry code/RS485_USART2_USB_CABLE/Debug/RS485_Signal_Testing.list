
RS485_Signal_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003438  08003438  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200000f0  08003530  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08003530  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000921f  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185a  00000000  00000000  0002933f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ce4  00000000  00000000  0002b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009160  00000000  00000000  0004063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a8b  00000000  00000000  0004979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be8  00000000  00000000  000ce278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003400 	.word	0x08003400

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f4 	.word	0x200000f4
 80001d4:	08003400 	.word	0x08003400

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f9d4 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f810 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8a0 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f874 	bl	80005d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, sizeof(rx_data));
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	4902      	ldr	r1, [pc, #8]	; (8000500 <main+0x24>)
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x28>)
 80004f8:	f001 faf3 	bl	8001ae2 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x20>
 80004fe:	bf00      	nop
 8000500:	20000150 	.word	0x20000150
 8000504:	2000010c 	.word	0x2000010c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 ff6a 	bl	80033f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <SystemClock_Config+0xc8>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <SystemClock_Config+0xcc>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fd31 	bl	8000ff4 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f88a 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff93 	bl	80014e4 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c4:	f000 f874 	bl	80006b0 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_USART2_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x4c>)
 8000610:	f001 f988 	bl	8001924 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800061a:	f000 f849 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000010c 	.word	0x2000010c
 8000628:	40004400 	.word	0x40004400

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_GPIO_Init+0x7c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_GPIO_Init+0x7c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_GPIO_Init+0x7c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_GPIO_Init+0x7c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <MX_GPIO_Init+0x7c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_GPIO_Init+0x7c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_RE_GPIO_Port, RS485_DE_RE_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2102      	movs	r1, #2
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0x80>)
 8000680:	f000 fc9e 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_DE_RE_Pin */
  GPIO_InitStruct.Pin = RS485_DE_RE_Pin;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RS485_DE_RE_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_GPIO_Init+0x80>)
 800069c:	f000 fb0c 	bl	8000cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_MspInit+0x4c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006fa:	2007      	movs	r0, #7
 80006fc:	f000 fa08 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <HAL_UART_MspInit+0x94>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d133      	bne.n	8000796 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_UART_MspInit+0x98>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000766:	230c      	movs	r3, #12
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000776:	2307      	movs	r3, #7
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 8000782:	f000 fa99 	bl	8000cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2026      	movs	r0, #38	; 0x26
 800078c:	f000 f9cb 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000790:	2026      	movs	r0, #38	; 0x26
 8000792:	f000 f9e4 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f89a 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <USART2_IRQHandler+0x10>)
 8000806:	f001 f9d1 	bl	8001bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000010c 	.word	0x2000010c

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000862:	f7ff ffd7 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fd9f 	bl	80033a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086a:	f7ff fe37 	bl	80004dc <main>
  bx  lr    
 800086e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 800087c:	08003440 	.word	0x08003440
  ldr r2, =_sbss
 8000880:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000884:	20000454 	.word	0x20000454

08000888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <HAL_Init+0x40>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_Init+0x40>)
 80008a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x40>)
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f92b 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fefc 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023c00 	.word	0x40023c00

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f943 	bl	8000b7a <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f90b 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000250 	.word	0x20000250

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000250 	.word	0x20000250

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <__NVIC_EnableIRQ+0x38>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff29 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff3e 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff8e 	bl	8000a64 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff31 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa2 	bl	8000acc <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff feda 	bl	8000958 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d008      	beq.n	8000bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e052      	b.n	8000c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0216 	bic.w	r2, r2, #22
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d103      	bne.n	8000bf4 <HAL_DMA_Abort+0x62>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0208 	bic.w	r2, r2, #8
 8000c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c14:	e013      	b.n	8000c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c16:	f7ff fe9f 	bl	8000958 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d90c      	bls.n	8000c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2220      	movs	r2, #32
 8000c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e015      	b.n	8000c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e4      	bne.n	8000c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c50:	223f      	movs	r2, #63	; 0x3f
 8000c52:	409a      	lsls	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d004      	beq.n	8000c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e00c      	b.n	8000caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2205      	movs	r2, #5
 8000c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0201 	bic.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e159      	b.n	8000f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8148 	bne.w	8000f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a2 	beq.w	8000f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_GPIO_Init+0x2f0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x202>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2f4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x1fe>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a47      	ldr	r2, [pc, #284]	; (8000fb0 <HAL_GPIO_Init+0x2f8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a46      	ldr	r2, [pc, #280]	; (8000fb4 <HAL_GPIO_Init+0x2fc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x1f6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a45      	ldr	r2, [pc, #276]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x1f2>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x204>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x204>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x204>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x204>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x204>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f52:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f aea2 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e267      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d075      	beq.n	80010fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001012:	4b88      	ldr	r3, [pc, #544]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b04      	cmp	r3, #4
 800101c:	d00c      	beq.n	8001038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101e:	4b85      	ldr	r3, [pc, #532]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001026:	2b08      	cmp	r3, #8
 8001028:	d112      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102a:	4b82      	ldr	r3, [pc, #520]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001036:	d10b      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	4b7e      	ldr	r3, [pc, #504]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05b      	beq.n	80010fc <HAL_RCC_OscConfig+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d157      	bne.n	80010fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e242      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x74>
 800105a:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a75      	ldr	r2, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e01d      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x98>
 8001072:	4b70      	ldr	r3, [pc, #448]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a6f      	ldr	r2, [pc, #444]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a6c      	ldr	r2, [pc, #432]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 800108c:	4b69      	ldr	r3, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a68      	ldr	r2, [pc, #416]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b66      	ldr	r3, [pc, #408]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a65      	ldr	r2, [pc, #404]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d013      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc54 	bl	8000958 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fc50 	bl	8000958 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e207      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc0>
 80010d2:	e014      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc40 	bl	8000958 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fc3c 	bl	8000958 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e1f3      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	4b51      	ldr	r3, [pc, #324]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0xe8>
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d063      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	2b08      	cmp	r3, #8
 8001120:	d11c      	bne.n	800115c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001122:	4b44      	ldr	r3, [pc, #272]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d116      	bne.n	800115c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_RCC_OscConfig+0x152>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d001      	beq.n	8001146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e1c7      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	e03a      	b.n	80011d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d020      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_RCC_OscConfig+0x244>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116a:	f7ff fbf5 	bl	8000958 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fbf1 	bl	8000958 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e1a8      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4925      	ldr	r1, [pc, #148]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]
 80011a4:	e015      	b.n	80011d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_RCC_OscConfig+0x244>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fbd4 	bl	8000958 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b4:	f7ff fbd0 	bl	8000958 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e187      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d036      	beq.n	800124c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d016      	beq.n	8001214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_RCC_OscConfig+0x248>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ec:	f7ff fbb4 	bl	8000958 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fbb0 	bl	8000958 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e167      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x240>)
 8001208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x200>
 8001212:	e01b      	b.n	800124c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_RCC_OscConfig+0x248>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb9d 	bl	8000958 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	e00e      	b.n	8001240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fb99 	bl	8000958 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d907      	bls.n	8001240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e150      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
 8001234:	40023800 	.word	0x40023800
 8001238:	42470000 	.word	0x42470000
 800123c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ea      	bne.n	8001222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 8097 	beq.w	8001388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10f      	bne.n	800128a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b7d      	ldr	r3, [pc, #500]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a7c      	ldr	r2, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x474>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d118      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <HAL_RCC_OscConfig+0x474>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a73      	ldr	r2, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x474>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb59 	bl	8000958 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012aa:	f7ff fb55 	bl	8000958 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e10c      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x474>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x2ea>
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a63      	ldr	r2, [pc, #396]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	e01c      	b.n	8001318 <HAL_RCC_OscConfig+0x324>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x30c>
 80012e6:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	4a5e      	ldr	r2, [pc, #376]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6713      	str	r3, [r2, #112]	; 0x70
 80012f2:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6713      	str	r3, [r2, #112]	; 0x70
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0x324>
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6713      	str	r3, [r2, #112]	; 0x70
 800130c:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a54      	ldr	r2, [pc, #336]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d015      	beq.n	800134c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fb1a 	bl	8000958 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001326:	e00a      	b.n	800133e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fb16 	bl	8000958 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0cb      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0ee      	beq.n	8001328 <HAL_RCC_OscConfig+0x334>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fb04 	bl	8000958 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff fb00 	bl	8000958 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e0b5      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ee      	bne.n	8001354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a38      	ldr	r2, [pc, #224]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a1 	beq.w	80014d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d05c      	beq.n	8001458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d141      	bne.n	800142a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_RCC_OscConfig+0x478>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fad4 	bl	8000958 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fad0 	bl	8000958 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e087      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	061b      	lsls	r3, r3, #24
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x478>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff faa9 	bl	8000958 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff faa5 	bl	8000958 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e05c      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x416>
 8001428:	e054      	b.n	80014d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_RCC_OscConfig+0x478>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fa92 	bl	8000958 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fa8e 	bl	8000958 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e045      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_RCC_OscConfig+0x470>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x444>
 8001456:	e03d      	b.n	80014d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e038      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000
 800146c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x4ec>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d028      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d121      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	429a      	cmp	r2, r3
 8001498:	d11a      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014a0:	4013      	ands	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d111      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0cc      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d90c      	bls.n	8001520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0b8      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800155a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	494d      	ldr	r1, [pc, #308]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d044      	beq.n	8001604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d119      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e07f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e067      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f023 0203 	bic.w	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4934      	ldr	r1, [pc, #208]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d4:	f7ff f9c0 	bl	8000958 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff f9bc 	bl	8000958 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e04f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 020c 	and.w	r2, r3, #12
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d1eb      	bne.n	80015dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d20c      	bcs.n	800162c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e032      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4916      	ldr	r1, [pc, #88]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800166a:	f000 f821 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800166e:	4602      	mov	r2, r0
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	5ccb      	ldrb	r3, [r1, r3]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f920 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	08003418 	.word	0x08003418
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b4:	b094      	sub	sp, #80	; 0x50
 80016b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
 80016bc:	2300      	movs	r3, #0
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016c0:	2300      	movs	r3, #0
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c8:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d00d      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x40>
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	f200 80e1 	bhi.w	800189c <HAL_RCC_GetSysClockFreq+0x1ec>
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x34>
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d003      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0x3a>
 80016e2:	e0db      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016e8:	e0db      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80016ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016ee:	e0d8      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fa:	4b6d      	ldr	r3, [pc, #436]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001706:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	099b      	lsrs	r3, r3, #6
 800170c:	2200      	movs	r2, #0
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001710:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
 800171e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001722:	4622      	mov	r2, r4
 8001724:	462b      	mov	r3, r5
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	0159      	lsls	r1, r3, #5
 8001730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001734:	0150      	lsls	r0, r2, #5
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4621      	mov	r1, r4
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	6139      	str	r1, [r7, #16]
 8001740:	4629      	mov	r1, r5
 8001742:	eb63 0301 	sbc.w	r3, r3, r1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001754:	4659      	mov	r1, fp
 8001756:	018b      	lsls	r3, r1, #6
 8001758:	4651      	mov	r1, sl
 800175a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175e:	4651      	mov	r1, sl
 8001760:	018a      	lsls	r2, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	ebb2 0801 	subs.w	r8, r2, r1
 8001768:	4659      	mov	r1, fp
 800176a:	eb63 0901 	sbc.w	r9, r3, r1
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800177a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800177e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001782:	4690      	mov	r8, r2
 8001784:	4699      	mov	r9, r3
 8001786:	4623      	mov	r3, r4
 8001788:	eb18 0303 	adds.w	r3, r8, r3
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	462b      	mov	r3, r5
 8001790:	eb49 0303 	adc.w	r3, r9, r3
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017a2:	4629      	mov	r1, r5
 80017a4:	024b      	lsls	r3, r1, #9
 80017a6:	4621      	mov	r1, r4
 80017a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017ac:	4621      	mov	r1, r4
 80017ae:	024a      	lsls	r2, r1, #9
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b6:	2200      	movs	r2, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017c0:	f7fe fd0a 	bl	80001d8 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017cc:	e058      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	099b      	lsrs	r3, r3, #6
 80017d4:	2200      	movs	r2, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	4611      	mov	r1, r2
 80017da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
 80017e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017e8:	4642      	mov	r2, r8
 80017ea:	464b      	mov	r3, r9
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	0159      	lsls	r1, r3, #5
 80017f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fa:	0150      	lsls	r0, r2, #5
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4641      	mov	r1, r8
 8001802:	ebb2 0a01 	subs.w	sl, r2, r1
 8001806:	4649      	mov	r1, r9
 8001808:	eb63 0b01 	sbc.w	fp, r3, r1
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800181c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001820:	ebb2 040a 	subs.w	r4, r2, sl
 8001824:	eb63 050b 	sbc.w	r5, r3, fp
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	00eb      	lsls	r3, r5, #3
 8001832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001836:	00e2      	lsls	r2, r4, #3
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	4643      	mov	r3, r8
 800183e:	18e3      	adds	r3, r4, r3
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	464b      	mov	r3, r9
 8001844:	eb45 0303 	adc.w	r3, r5, r3
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001856:	4629      	mov	r1, r5
 8001858:	028b      	lsls	r3, r1, #10
 800185a:	4621      	mov	r1, r4
 800185c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001860:	4621      	mov	r1, r4
 8001862:	028a      	lsls	r2, r1, #10
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186a:	2200      	movs	r2, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	61fa      	str	r2, [r7, #28]
 8001870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001874:	f7fe fcb0 	bl	80001d8 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3750      	adds	r7, #80	; 0x50
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff0 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08003428 	.word	0x08003428

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffdc 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0b5b      	lsrs	r3, r3, #13
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	08003428 	.word	0x08003428

08001924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e03f      	b.n	80019b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fede 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fe11 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800197c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800198c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800199c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b08a      	sub	sp, #40	; 0x28
 80019c2:	af02      	add	r7, sp, #8
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d17c      	bne.n	8001ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_UART_Transmit+0x2c>
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e075      	b.n	8001ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_UART_Transmit+0x3e>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e06e      	b.n	8001ada <HAL_UART_Transmit+0x11c>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2221      	movs	r2, #33	; 0x21
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a12:	f7fe ffa1 	bl	8000958 <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	88fa      	ldrh	r2, [r7, #6]
 8001a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	d108      	bne.n	8001a40 <HAL_UART_Transmit+0x82>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d104      	bne.n	8001a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e003      	b.n	8001a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a50:	e02a      	b.n	8001aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fb51 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e036      	b.n	8001ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10b      	bne.n	8001a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3302      	adds	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	e007      	b.n	8001a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1cf      	bne.n	8001a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fb21 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e006      	b.n	8001ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b08c      	sub	sp, #48	; 0x30
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	4613      	mov	r3, r2
 8001aee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d152      	bne.n	8001ba2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04b      	b.n	8001ba4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e044      	b.n	8001ba4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fb56 	bl	80021e0 <UART_Start_Receive_IT>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12c      	bne.n	8001b9c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d125      	bne.n	8001b96 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	e853 3f00 	ldrex	r3, [r3]
 8001b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b80:	627a      	str	r2, [r7, #36]	; 0x24
 8001b82:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	e841 2300 	strex	r3, r2, [r1]
 8001b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e5      	bne.n	8001b60 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8001b94:	e002      	b.n	8001b9c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ba0:	e000      	b.n	8001ba4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0ba      	sub	sp, #232	; 0xe8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_UART_IRQHandler+0x66>
 8001bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fc05 	bl	800241a <UART_Receive_IT>
      return;
 8001c10:	e256      	b.n	80020c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80de 	beq.w	8001dd8 <HAL_UART_IRQHandler+0x22c>
 8001c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d106      	bne.n	8001c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80d1 	beq.w	8001dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_UART_IRQHandler+0xae>
 8001c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_UART_IRQHandler+0xd2>
 8001c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_UART_IRQHandler+0xf6>
 8001c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d011      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x126>
 8001cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d105      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f043 0208 	orr.w	r2, r3, #8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 81ed 	beq.w	80020b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_UART_IRQHandler+0x14e>
 8001ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fb90 	bl	800241a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <HAL_UART_IRQHandler+0x17a>
 8001d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d04f      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fa98 	bl	800225c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d141      	bne.n	8001dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d48:	e853 3f00 	ldrex	r3, [r3]
 8001d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3314      	adds	r3, #20
 8001d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d76:	e841 2300 	strex	r3, r2, [r1]
 8001d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1d9      	bne.n	8001d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d013      	beq.n	8001db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	4a7d      	ldr	r2, [pc, #500]	; (8001f88 <HAL_UART_IRQHandler+0x3dc>)
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff69 	bl	8000c72 <HAL_DMA_Abort_IT>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d016      	beq.n	8001dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db0:	4610      	mov	r0, r2
 8001db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db4:	e00e      	b.n	8001dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f99a 	bl	80020f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	e00a      	b.n	8001dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f996 	bl	80020f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc4:	e006      	b.n	8001dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f992 	bl	80020f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001dd2:	e170      	b.n	80020b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd4:	bf00      	nop
    return;
 8001dd6:	e16e      	b.n	80020b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f040 814a 	bne.w	8002076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8143 	beq.w	8002076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 813c 	beq.w	8002076 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	f040 80b4 	bne.w	8001f8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8140 	beq.w	80020ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e42:	429a      	cmp	r2, r3
 8001e44:	f080 8139 	bcs.w	80020ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5a:	f000 8088 	beq.w	8001f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	330c      	adds	r3, #12
 8001e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e6c:	e853 3f00 	ldrex	r3, [r3]
 8001e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e9a:	e841 2300 	strex	r3, r2, [r1]
 8001e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1d9      	bne.n	8001e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3314      	adds	r3, #20
 8001eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	e853 3f00 	ldrex	r3, [r3]
 8001eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3314      	adds	r3, #20
 8001eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001eda:	e841 2300 	strex	r3, r2, [r1]
 8001ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e1      	bne.n	8001eaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f12:	e841 2300 	strex	r3, r2, [r1]
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e3      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f36:	e853 3f00 	ldrex	r3, [r3]
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	f023 0310 	bic.w	r3, r3, #16
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f58:	e841 2300 	strex	r3, r2, [r1]
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e3      	bne.n	8001f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fe12 	bl	8000b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f001 f940 	bl	8003204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f84:	e099      	b.n	80020ba <HAL_UART_IRQHandler+0x50e>
 8001f86:	bf00      	nop
 8001f88:	08002323 	.word	0x08002323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 808b 	beq.w	80020be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8086 	beq.w	80020be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fde:	e841 2300 	strex	r3, r2, [r1]
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e3      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3314      	adds	r3, #20
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	e853 3f00 	ldrex	r3, [r3]
 8001ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3314      	adds	r3, #20
 800200a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800200e:	633a      	str	r2, [r7, #48]	; 0x30
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002016:	e841 2300 	strex	r3, r2, [r1]
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e3      	bne.n	8001fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	e853 3f00 	ldrex	r3, [r3]
 800203e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0310 	bic.w	r3, r3, #16
 8002046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	330c      	adds	r3, #12
 8002050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002054:	61fa      	str	r2, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	617b      	str	r3, [r7, #20]
   return(result);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e3      	bne.n	8002030 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f001 f8c8 	bl	8003204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002074:	e023      	b.n	80020be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_UART_IRQHandler+0x4ea>
 8002082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f95b 	bl	800234a <UART_Transmit_IT>
    return;
 8002094:	e014      	b.n	80020c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00e      	beq.n	80020c0 <HAL_UART_IRQHandler+0x514>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f99b 	bl	80023ea <UART_EndTransmit_IT>
    return;
 80020b4:	e004      	b.n	80020c0 <HAL_UART_IRQHandler+0x514>
    return;
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <HAL_UART_IRQHandler+0x514>
      return;
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <HAL_UART_IRQHandler+0x514>
      return;
 80020be:	bf00      	nop
  }
}
 80020c0:	37e8      	adds	r7, #232	; 0xe8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b090      	sub	sp, #64	; 0x40
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	e050      	b.n	80021b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d04c      	beq.n	80021b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800211e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
 8002124:	f7fe fc18 	bl	8000958 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002130:	429a      	cmp	r2, r3
 8002132:	d241      	bcs.n	80021b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	330c      	adds	r3, #12
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	e853 3f00 	ldrex	r3, [r3]
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002154:	637a      	str	r2, [r7, #52]	; 0x34
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800215a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215c:	e841 2300 	strex	r3, r2, [r1]
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e5      	bne.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	e853 3f00 	ldrex	r3, [r3]
 8002176:	613b      	str	r3, [r7, #16]
   return(result);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3314      	adds	r3, #20
 8002186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002188:	623a      	str	r2, [r7, #32]
 800218a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218c:	69f9      	ldr	r1, [r7, #28]
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	e841 2300 	strex	r3, r2, [r1]
 8002194:	61bb      	str	r3, [r7, #24]
   return(result);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e5      	bne.n	8002168 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e00f      	b.n	80021d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d09f      	beq.n	8002116 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3740      	adds	r7, #64	; 0x40
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2222      	movs	r2, #34	; 0x22
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800225c:	b480      	push	{r7}
 800225e:	b095      	sub	sp, #84	; 0x54
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	e853 3f00 	ldrex	r3, [r3]
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800227a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002284:	643a      	str	r2, [r7, #64]	; 0x40
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800228a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800228c:	e841 2300 	strex	r3, r2, [r1]
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e5      	bne.n	8002264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3314      	adds	r3, #20
 800229e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	e853 3f00 	ldrex	r3, [r3]
 80022a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3314      	adds	r3, #20
 80022b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c0:	e841 2300 	strex	r3, r2, [r1]
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e5      	bne.n	8002298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d119      	bne.n	8002308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	e853 3f00 	ldrex	r3, [r3]
 80022e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f023 0310 	bic.w	r3, r3, #16
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f4:	61ba      	str	r2, [r7, #24]
 80022f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	e841 2300 	strex	r3, r2, [r1]
 8002300:	613b      	str	r3, [r7, #16]
   return(result);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e5      	bne.n	80022d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002316:	bf00      	nop
 8002318:	3754      	adds	r7, #84	; 0x54
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff fed7 	bl	80020f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b21      	cmp	r3, #33	; 0x21
 800235c:	d13e      	bne.n	80023dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002366:	d114      	bne.n	8002392 <UART_Transmit_IT+0x48>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d110      	bne.n	8002392 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	1c9a      	adds	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	e008      	b.n	80023a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	1c59      	adds	r1, r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6211      	str	r1, [r2, #32]
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fe5c 	bl	80020c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b22      	cmp	r3, #34	; 0x22
 800242c:	f040 80ab 	bne.w	8002586 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002438:	d117      	bne.n	800246a <UART_Receive_IT+0x50>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	b29a      	uxth	r2, r3
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
 8002468:	e026      	b.n	80024b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d007      	beq.n	800248e <UART_Receive_IT+0x74>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <UART_Receive_IT+0x82>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e008      	b.n	80024ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d15a      	bne.n	8002582 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0220 	bic.w	r2, r2, #32
 80024da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b01      	cmp	r3, #1
 800250a:	d135      	bne.n	8002578 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	613b      	str	r3, [r7, #16]
   return(result);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f023 0310 	bic.w	r3, r3, #16
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	623a      	str	r2, [r7, #32]
 8002534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e5      	bne.n	8002512 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d10a      	bne.n	800256a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fe47 	bl	8003204 <HAL_UARTEx_RxEventCallback>
 8002576:	e002      	b.n	800257e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fdaf 	bl	80020dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e002      	b.n	8002588 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0c0      	sub	sp, #256	; 0x100
 8002596:	af00      	add	r7, sp, #0
 8002598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	ea40 0301 	orr.w	r3, r0, r1
 80025b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025e8:	f021 010c 	bic.w	r1, r1, #12
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	6999      	ldr	r1, [r3, #24]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	ea40 0301 	orr.w	r3, r0, r1
 8002616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b8f      	ldr	r3, [pc, #572]	; (800285c <UART_SetConfig+0x2cc>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <UART_SetConfig+0xa0>
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <UART_SetConfig+0x2d0>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d104      	bne.n	800263a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff f964 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8002634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002638:	e003      	b.n	8002642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263a:	f7ff f94b 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 800263e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264c:	f040 810c 	bne.w	8002868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800265a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800265e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	1891      	adds	r1, r2, r2
 8002668:	65b9      	str	r1, [r7, #88]	; 0x58
 800266a:	415b      	adcs	r3, r3
 800266c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800266e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002672:	4621      	mov	r1, r4
 8002674:	eb12 0801 	adds.w	r8, r2, r1
 8002678:	4629      	mov	r1, r5
 800267a:	eb43 0901 	adc.w	r9, r3, r1
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002692:	4690      	mov	r8, r2
 8002694:	4699      	mov	r9, r3
 8002696:	4623      	mov	r3, r4
 8002698:	eb18 0303 	adds.w	r3, r8, r3
 800269c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026a0:	462b      	mov	r3, r5
 80026a2:	eb49 0303 	adc.w	r3, r9, r3
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026be:	460b      	mov	r3, r1
 80026c0:	18db      	adds	r3, r3, r3
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
 80026c4:	4613      	mov	r3, r2
 80026c6:	eb42 0303 	adc.w	r3, r2, r3
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54
 80026cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026d4:	f7fd fd80 	bl	80001d8 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <UART_SetConfig+0x2d4>)
 80026de:	fba3 2302 	umull	r2, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	011c      	lsls	r4, r3, #4
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002700:	415b      	adcs	r3, r3
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002708:	4641      	mov	r1, r8
 800270a:	eb12 0a01 	adds.w	sl, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb43 0b01 	adc.w	fp, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002728:	4692      	mov	sl, r2
 800272a:	469b      	mov	fp, r3
 800272c:	4643      	mov	r3, r8
 800272e:	eb1a 0303 	adds.w	r3, sl, r3
 8002732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002736:	464b      	mov	r3, r9
 8002738:	eb4b 0303 	adc.w	r3, fp, r3
 800273c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800274c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002754:	460b      	mov	r3, r1
 8002756:	18db      	adds	r3, r3, r3
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
 800275a:	4613      	mov	r3, r2
 800275c:	eb42 0303 	adc.w	r3, r2, r3
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
 8002762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800276a:	f7fd fd35 	bl	80001d8 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4611      	mov	r1, r2
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <UART_SetConfig+0x2d4>)
 8002776:	fba3 2301 	umull	r2, r3, r3, r1
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2264      	movs	r2, #100	; 0x64
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	1acb      	subs	r3, r1, r3
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <UART_SetConfig+0x2d4>)
 800278c:	fba3 2302 	umull	r2, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002798:	441c      	add	r4, r3
 800279a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	1891      	adds	r1, r2, r2
 80027b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b4:	415b      	adcs	r3, r3
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027bc:	4641      	mov	r1, r8
 80027be:	1851      	adds	r1, r2, r1
 80027c0:	6339      	str	r1, [r7, #48]	; 0x30
 80027c2:	4649      	mov	r1, r9
 80027c4:	414b      	adcs	r3, r1
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027d4:	4659      	mov	r1, fp
 80027d6:	00cb      	lsls	r3, r1, #3
 80027d8:	4651      	mov	r1, sl
 80027da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027de:	4651      	mov	r1, sl
 80027e0:	00ca      	lsls	r2, r1, #3
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	4642      	mov	r2, r8
 80027ea:	189b      	adds	r3, r3, r2
 80027ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027f0:	464b      	mov	r3, r9
 80027f2:	460a      	mov	r2, r1
 80027f4:	eb42 0303 	adc.w	r3, r2, r3
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800280c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002826:	f7fd fcd7 	bl	80001d8 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <UART_SetConfig+0x2d4>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3332      	adds	r3, #50	; 0x32
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <UART_SetConfig+0x2d4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 0207 	and.w	r2, r3, #7
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4422      	add	r2, r4
 8002856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002858:	e105      	b.n	8002a66 <UART_SetConfig+0x4d6>
 800285a:	bf00      	nop
 800285c:	40011000 	.word	0x40011000
 8002860:	40011400 	.word	0x40011400
 8002864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286c:	2200      	movs	r2, #0
 800286e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800287a:	4642      	mov	r2, r8
 800287c:	464b      	mov	r3, r9
 800287e:	1891      	adds	r1, r2, r2
 8002880:	6239      	str	r1, [r7, #32]
 8002882:	415b      	adcs	r3, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288a:	4641      	mov	r1, r8
 800288c:	1854      	adds	r4, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb43 0501 	adc.w	r5, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028b0:	464b      	mov	r3, r9
 80028b2:	eb45 0303 	adc.w	r3, r5, r3
 80028b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028d6:	4629      	mov	r1, r5
 80028d8:	008b      	lsls	r3, r1, #2
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e0:	4621      	mov	r1, r4
 80028e2:	008a      	lsls	r2, r1, #2
 80028e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028e8:	f7fd fc76 	bl	80001d8 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <UART_SetConfig+0x4e4>)
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	011c      	lsls	r4, r3, #4
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	61b9      	str	r1, [r7, #24]
 8002914:	415b      	adcs	r3, r3
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6139      	str	r1, [r7, #16]
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	67bb      	str	r3, [r7, #120]	; 0x78
 8002966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002974:	4649      	mov	r1, r9
 8002976:	008b      	lsls	r3, r1, #2
 8002978:	4641      	mov	r1, r8
 800297a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297e:	4641      	mov	r1, r8
 8002980:	008a      	lsls	r2, r1, #2
 8002982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002986:	f7fd fc27 	bl	80001d8 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <UART_SetConfig+0x4e4>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ae:	441c      	add	r4, r3
 80029b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b4:	2200      	movs	r2, #0
 80029b6:	673b      	str	r3, [r7, #112]	; 0x70
 80029b8:	677a      	str	r2, [r7, #116]	; 0x74
 80029ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029be:	4642      	mov	r2, r8
 80029c0:	464b      	mov	r3, r9
 80029c2:	1891      	adds	r1, r2, r2
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	415b      	adcs	r3, r3
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ce:	4641      	mov	r1, r8
 80029d0:	1851      	adds	r1, r2, r1
 80029d2:	6039      	str	r1, [r7, #0]
 80029d4:	4649      	mov	r1, r9
 80029d6:	414b      	adcs	r3, r1
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e6:	4659      	mov	r1, fp
 80029e8:	00cb      	lsls	r3, r1, #3
 80029ea:	4651      	mov	r1, sl
 80029ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f0:	4651      	mov	r1, sl
 80029f2:	00ca      	lsls	r2, r1, #3
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	4603      	mov	r3, r0
 80029fa:	4642      	mov	r2, r8
 80029fc:	189b      	adds	r3, r3, r2
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a00:	464b      	mov	r3, r9
 8002a02:	460a      	mov	r2, r1
 8002a04:	eb42 0303 	adc.w	r3, r2, r3
 8002a08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	663b      	str	r3, [r7, #96]	; 0x60
 8002a14:	667a      	str	r2, [r7, #100]	; 0x64
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a22:	4649      	mov	r1, r9
 8002a24:	008b      	lsls	r3, r1, #2
 8002a26:	4641      	mov	r1, r8
 8002a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	008a      	lsls	r2, r1, #2
 8002a30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a34:	f7fd fbd0 	bl	80001d8 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2164      	movs	r1, #100	; 0x64
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	3332      	adds	r3, #50	; 0x32
 8002a50:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4422      	add	r2, r4
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a72:	bf00      	nop
 8002a74:	51eb851f 	.word	0x51eb851f

08002a78 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high


    // Transmit data
    uint16_t crc = crc16(data, size);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f821 	bl	8002ad0 <crc16>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	89fa      	ldrh	r2, [r7, #14]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b299      	uxth	r1, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, data, size + 2, 1000);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4803      	ldr	r0, [pc, #12]	; (8002acc <sendData+0x54>)
 8002ac0:	f7fe ff7d 	bl	80019be <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low


}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000010c 	.word	0x2000010c

08002ad0 <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8002adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	81bb      	strh	r3, [r7, #12]
 8002ae6:	e022      	b.n	8002b2e <crc16+0x5e>
        crc ^= data[i];
 8002ae8:	89bb      	ldrh	r3, [r7, #12]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	4053      	eors	r3, r2
 8002af6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8002af8:	2300      	movs	r3, #0
 8002afa:	72fb      	strb	r3, [r7, #11]
 8002afc:	e011      	b.n	8002b22 <crc16+0x52>
            if (crc & 0x0001) {
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <crc16+0x74>)
 8002b10:	4053      	eors	r3, r2
 8002b12:	81fb      	strh	r3, [r7, #14]
 8002b14:	e002      	b.n	8002b1c <crc16+0x4c>
            } else {
                crc >>= 1;
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	72fb      	strb	r3, [r7, #11]
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d9ea      	bls.n	8002afe <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8002b28:	89bb      	ldrh	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	81bb      	strh	r3, [r7, #12]
 8002b2e:	89ba      	ldrh	r2, [r7, #12]
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d3d8      	bcc.n	8002ae8 <crc16+0x18>
            }
        }
    }
    return crc;
 8002b36:	89fb      	ldrh	r3, [r7, #14]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	ffffa001 	.word	0xffffa001

08002b48 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <modbusException+0x38>)
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <modbusException+0x3c>)
 8002b58:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <modbusException+0x38>)
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <modbusException+0x3c>)
 8002b66:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <modbusException+0x3c>)
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 8002b6e:	2103      	movs	r1, #3
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <modbusException+0x3c>)
 8002b72:	f7ff ff81 	bl	8002a78 <sendData>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000254 	.word	0x20000254
 8002b84:	20000354 	.word	0x20000354

08002b88 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460a      	mov	r2, r1
 8002b92:	80fb      	strh	r3, [r7, #6]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <readHoldingRegs+0x1c>
 8002b9e:	88bb      	ldrh	r3, [r7, #4]
 8002ba0:	2b32      	cmp	r3, #50	; 0x32
 8002ba2:	d904      	bls.n	8002bae <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f7ff ffcf 	bl	8002b48 <modbusException>
        return 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e04a      	b.n	8002c44 <readHoldingRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	88bb      	ldrh	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	2b32      	cmp	r3, #50	; 0x32
 8002bbe:	d904      	bls.n	8002bca <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f7ff ffc1 	bl	8002b48 <modbusException>
        return 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e03c      	b.n	8002c44 <readHoldingRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8002bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bce:	2100      	movs	r1, #0
 8002bd0:	481e      	ldr	r0, [pc, #120]	; (8002c4c <readHoldingRegs+0xc4>)
 8002bd2:	f000 fc0d 	bl	80033f0 <memset>
    TxData[0] = SLAVE_ID;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <readHoldingRegs+0xc4>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <readHoldingRegs+0xc8>)
 8002bde:	785a      	ldrb	r2, [r3, #1]
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <readHoldingRegs+0xc4>)
 8002be2:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8002be4:	88bb      	ldrh	r3, [r7, #4]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <readHoldingRegs+0xc4>)
 8002bee:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e01b      	b.n	8002c32 <readHoldingRegs+0xaa>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <readHoldingRegs+0xcc>)
 8002bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	b299      	uxth	r1, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	617a      	str	r2, [r7, #20]
 8002c0c:	b2c9      	uxtb	r1, r1
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <readHoldingRegs+0xc4>)
 8002c10:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <readHoldingRegs+0xcc>)
 8002c16:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	617a      	str	r2, [r7, #20]
 8002c20:	b2c9      	uxtb	r1, r1
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <readHoldingRegs+0xc4>)
 8002c24:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dbdf      	blt.n	8002bfa <readHoldingRegs+0x72>
    }

    sendData(TxData, indx);
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <readHoldingRegs+0xc4>)
 8002c3e:	f7ff ff1b 	bl	8002a78 <sendData>
    return 1;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000354 	.word	0x20000354
 8002c50:	20000254 	.word	0x20000254
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460a      	mov	r2, r1
 8002c62:	80fb      	strh	r3, [r7, #6]
 8002c64:	4613      	mov	r3, r2
 8002c66:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 8002c68:	88bb      	ldrh	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <readInputRegs+0x1c>
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	2b32      	cmp	r3, #50	; 0x32
 8002c72:	d904      	bls.n	8002c7e <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f7ff ff67 	bl	8002b48 <modbusException>
        return 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e04a      	b.n	8002d14 <readInputRegs+0xbc>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	88bb      	ldrh	r3, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	2b32      	cmp	r3, #50	; 0x32
 8002c8e:	d904      	bls.n	8002c9a <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7ff ff59 	bl	8002b48 <modbusException>
        return 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e03c      	b.n	8002d14 <readInputRegs+0xbc>
    }

    memset(TxData, '\0', 256);
 8002c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	481e      	ldr	r0, [pc, #120]	; (8002d1c <readInputRegs+0xc4>)
 8002ca2:	f000 fba5 	bl	80033f0 <memset>
    TxData[0] = SLAVE_ID;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <readInputRegs+0xc4>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <readInputRegs+0xc8>)
 8002cae:	785a      	ldrb	r2, [r3, #1]
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <readInputRegs+0xc4>)
 8002cb2:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <readInputRegs+0xc4>)
 8002cbe:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e01b      	b.n	8002d02 <readInputRegs+0xaa>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <readInputRegs+0xcc>)
 8002cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b299      	uxth	r1, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	617a      	str	r2, [r7, #20]
 8002cdc:	b2c9      	uxtb	r1, r1
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <readInputRegs+0xc4>)
 8002ce0:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <readInputRegs+0xcc>)
 8002ce6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	617a      	str	r2, [r7, #20]
 8002cf0:	b2c9      	uxtb	r1, r1
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <readInputRegs+0xc4>)
 8002cf4:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	dbdf      	blt.n	8002cca <readInputRegs+0x72>
    }

    sendData(TxData, indx);
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <readInputRegs+0xc4>)
 8002d0e:	f7ff feb3 	bl	8002a78 <sendData>
    return 1;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000354 	.word	0x20000354
 8002d20:	20000254 	.word	0x20000254
 8002d24:	20000070 	.word	0x20000070

08002d28 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460a      	mov	r2, r1
 8002d32:	80fb      	strh	r3, [r7, #6]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 8002d38:	88bb      	ldrh	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <readCoils+0x1e>
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d44:	d904      	bls.n	8002d50 <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8002d46:	2003      	movs	r0, #3
 8002d48:	f7ff fefe 	bl	8002b48 <modbusException>
        return 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e080      	b.n	8002e52 <readCoils+0x12a>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	2bc7      	cmp	r3, #199	; 0xc7
 8002d60:	d904      	bls.n	8002d6c <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7ff fef0 	bl	8002b48 <modbusException>
        return 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e072      	b.n	8002e52 <readCoils+0x12a>
    }

    memset(TxData, '\0', 256);
 8002d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d70:	2100      	movs	r1, #0
 8002d72:	483a      	ldr	r0, [pc, #232]	; (8002e5c <readCoils+0x134>)
 8002d74:	f000 fb3c 	bl	80033f0 <memset>
    TxData[0] = SLAVE_ID;
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <readCoils+0x134>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <readCoils+0x138>)
 8002d80:	785a      	ldrb	r2, [r3, #1]
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <readCoils+0x134>)
 8002d84:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 8002d86:	88bb      	ldrh	r3, [r7, #4]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	88ba      	ldrh	r2, [r7, #4]
 8002d90:	f002 0207 	and.w	r2, r2, #7
 8002d94:	b292      	uxth	r2, r2
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2201      	movne	r2, #1
 8002d9c:	2200      	moveq	r2, #0
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	4413      	add	r3, r2
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <readCoils+0x134>)
 8002da6:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8002da8:	2303      	movs	r3, #3
 8002daa:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e033      	b.n	8002e2e <readCoils+0x106>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <readCoils+0x134>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b25a      	sxtb	r2, r3
 8002dd0:	4924      	ldr	r1, [pc, #144]	; (8002e64 <readCoils+0x13c>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	440b      	add	r3, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	8afb      	ldrh	r3, [r7, #22]
 8002ddc:	fa41 f303 	asr.w	r3, r1, r3
 8002de0:	f003 0101 	and.w	r1, r3, #1
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	b2d9      	uxtb	r1, r3
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <readCoils+0x134>)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
        bitPosition++;
 8002e02:	8afb      	ldrh	r3, [r7, #22]
 8002e04:	3301      	adds	r3, #1
 8002e06:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b07      	cmp	r3, #7
 8002e0c:	dd04      	ble.n	8002e18 <readCoils+0xf0>
            indxPosition = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
            indx++;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 8002e18:	8afb      	ldrh	r3, [r7, #22]
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	d904      	bls.n	8002e28 <readCoils+0x100>
            bitPosition = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	82fb      	strh	r3, [r7, #22]
            startByte++;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbc7      	blt.n	8002dc6 <readCoils+0x9e>
        }
    }

    if (numCoils % 8 != 0) indx++;
 8002e36:	88bb      	ldrh	r3, [r7, #4]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <readCoils+0x120>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	4804      	ldr	r0, [pc, #16]	; (8002e5c <readCoils+0x134>)
 8002e4c:	f7ff fe14 	bl	8002a78 <sendData>
    return 1;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000354 	.word	0x20000354
 8002e60:	20000254 	.word	0x20000254
 8002e64:	200000d4 	.word	0x200000d4

08002e68 <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460a      	mov	r2, r1
 8002e72:	80fb      	strh	r3, [r7, #6]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	2b31      	cmp	r3, #49	; 0x31
 8002e7c:	d904      	bls.n	8002e88 <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002e7e:	2002      	movs	r0, #2
 8002e80:	f7ff fe62 	bl	8002b48 <modbusException>
        return 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e020      	b.n	8002eca <writeSingleHoldingReg+0x62>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4912      	ldr	r1, [pc, #72]	; (8002ed4 <writeSingleHoldingReg+0x6c>)
 8002e8c:	88ba      	ldrh	r2, [r7, #4]
 8002e8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <writeSingleHoldingReg+0x74>)
 8002e9a:	785a      	ldrb	r2, [r3, #1]
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002e9e:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <writeSingleHoldingReg+0x74>)
 8002ea2:	789a      	ldrb	r2, [r3, #2]
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002ea6:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <writeSingleHoldingReg+0x74>)
 8002eaa:	78da      	ldrb	r2, [r3, #3]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002eae:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <writeSingleHoldingReg+0x74>)
 8002eb2:	791a      	ldrb	r2, [r3, #4]
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002eb6:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <writeSingleHoldingReg+0x74>)
 8002eba:	795a      	ldrb	r2, [r3, #5]
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002ebe:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8002ec0:	2106      	movs	r1, #6
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <writeSingleHoldingReg+0x70>)
 8002ec4:	f7ff fdd8 	bl	8002a78 <sendData>
    return 1;
 8002ec8:	2301      	movs	r3, #1
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	20000354 	.word	0x20000354
 8002edc:	20000254 	.word	0x20000254

08002ee0 <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	603a      	str	r2, [r7, #0]
 8002eea:	80fb      	strh	r3, [r7, #6]
 8002eec:	460b      	mov	r3, r1
 8002eee:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 8002ef0:	88bb      	ldrh	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <writeHoldingRegs+0x1c>
 8002ef6:	88bb      	ldrh	r3, [r7, #4]
 8002ef8:	2b7b      	cmp	r3, #123	; 0x7b
 8002efa:	d904      	bls.n	8002f06 <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f7ff fe23 	bl	8002b48 <modbusException>
        return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e03f      	b.n	8002f86 <writeHoldingRegs+0xa6>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	88bb      	ldrh	r3, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	2b31      	cmp	r3, #49	; 0x31
 8002f16:	d904      	bls.n	8002f22 <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f7ff fe15 	bl	8002b48 <modbusException>
        return 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e031      	b.n	8002f86 <writeHoldingRegs+0xa6>
    }

    for (int i = 0; i < numRegs; i++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e00e      	b.n	8002f46 <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	441a      	add	r2, r3
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	80f9      	strh	r1, [r7, #6]
 8002f36:	4619      	mov	r1, r3
 8002f38:	8812      	ldrh	r2, [r2, #0]
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <writeHoldingRegs+0xb0>)
 8002f3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	88bb      	ldrh	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	dbec      	blt.n	8002f28 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <writeHoldingRegs+0xb8>)
 8002f56:	785a      	ldrb	r2, [r3, #1]
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f5a:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <writeHoldingRegs+0xb8>)
 8002f5e:	789a      	ldrb	r2, [r3, #2]
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f62:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <writeHoldingRegs+0xb8>)
 8002f66:	78da      	ldrb	r2, [r3, #3]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f6a:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <writeHoldingRegs+0xb8>)
 8002f6e:	791a      	ldrb	r2, [r3, #4]
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f72:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <writeHoldingRegs+0xb8>)
 8002f76:	795a      	ldrb	r2, [r3, #5]
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f7a:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8002f7c:	2106      	movs	r1, #6
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <writeHoldingRegs+0xb4>)
 8002f80:	f7ff fd7a 	bl	8002a78 <sendData>
    return 1;
 8002f84:	2301      	movs	r3, #1
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	20000354 	.word	0x20000354
 8002f98:	20000254 	.word	0x20000254

08002f9c <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	80fb      	strh	r3, [r7, #6]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2bc7      	cmp	r3, #199	; 0xc7
 8002fb0:	d904      	bls.n	8002fbc <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7ff fdc8 	bl	8002b48 <modbusException>
        return 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e05c      	b.n	8003076 <writeSingleCoil+0xda>
    }

    int bytePos = writeAddr / 8;
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	08db      	lsrs	r3, r3, #3
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 8002fcc:	797b      	ldrb	r3, [r7, #5]
 8002fce:	2bff      	cmp	r3, #255	; 0xff
 8002fd0:	d116      	bne.n	8003000 <writeSingleCoil+0x64>
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <writeSingleCoil+0xe4>)
 8002fd4:	795b      	ldrb	r3, [r3, #5]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d112      	bne.n	8003000 <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <writeSingleCoil+0xe8>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b25a      	sxtb	r2, r3
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	b2d9      	uxtb	r1, r3
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <writeSingleCoil+0xe8>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e020      	b.n	8003042 <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 8003000:	797b      	ldrb	r3, [r7, #5]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <writeSingleCoil+0x9c>
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <writeSingleCoil+0xe4>)
 8003008:	795b      	ldrb	r3, [r3, #5]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <writeSingleCoil+0xe8>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b25a      	sxtb	r2, r3
 8003018:	2101      	movs	r1, #1
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	b25b      	sxtb	r3, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	b25b      	sxtb	r3, r3
 8003026:	4013      	ands	r3, r2
 8003028:	b25b      	sxtb	r3, r3
 800302a:	b2d9      	uxtb	r1, r3
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <writeSingleCoil+0xe8>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	460a      	mov	r2, r1
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e004      	b.n	8003042 <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8003038:	2003      	movs	r0, #3
 800303a:	f7ff fd85 	bl	8002b48 <modbusException>
        return 0;
 800303e:	2300      	movs	r3, #0
 8003040:	e019      	b.n	8003076 <writeSingleCoil+0xda>
    }

    TxData[0] = SLAVE_ID;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <writeSingleCoil+0xec>)
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <writeSingleCoil+0xe4>)
 800304a:	785a      	ldrb	r2, [r3, #1]
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <writeSingleCoil+0xec>)
 800304e:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <writeSingleCoil+0xe4>)
 8003052:	789a      	ldrb	r2, [r3, #2]
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <writeSingleCoil+0xec>)
 8003056:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <writeSingleCoil+0xe4>)
 800305a:	78da      	ldrb	r2, [r3, #3]
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <writeSingleCoil+0xec>)
 800305e:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <writeSingleCoil+0xec>)
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <writeSingleCoil+0xec>)
 8003068:	2200      	movs	r2, #0
 800306a:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 800306c:	2106      	movs	r1, #6
 800306e:	4806      	ldr	r0, [pc, #24]	; (8003088 <writeSingleCoil+0xec>)
 8003070:	f7ff fd02 	bl	8002a78 <sendData>
    return 1;
 8003074:	2301      	movs	r3, #1
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000254 	.word	0x20000254
 8003084:	200000d4 	.word	0x200000d4
 8003088:	20000354 	.word	0x20000354

0800308c <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	603a      	str	r2, [r7, #0]
 8003096:	80fb      	strh	r3, [r7, #6]
 8003098:	460b      	mov	r3, r1
 800309a:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 800309c:	88bb      	ldrh	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <writeMultiCoils+0x1e>
 80030a2:	88bb      	ldrh	r3, [r7, #4]
 80030a4:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80030a8:	d904      	bls.n	80030b4 <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f7ff fd4c 	bl	8002b48 <modbusException>
        return 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e09c      	b.n	80031ee <writeMultiCoils+0x162>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	88bb      	ldrh	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 80030c0:	8a7b      	ldrh	r3, [r7, #18]
 80030c2:	2bc7      	cmp	r3, #199	; 0xc7
 80030c4:	d904      	bls.n	80030d0 <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80030c6:	2002      	movs	r0, #2
 80030c8:	f7ff fd3e 	bl	8002b48 <modbusException>
        return 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e08e      	b.n	80031ee <writeMultiCoils+0x162>
    }

    int startByte = startAddr / 8;
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t bitPosition = startAddr % 8;
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	847b      	strh	r3, [r7, #34]	; 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	88bb      	ldrh	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e052      	b.n	80031ae <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e047      	b.n	800319e <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 800310e:	88bb      	ldrh	r3, [r7, #4]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	429a      	cmp	r2, r3
 8003114:	da47      	bge.n	80031a6 <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa42 f303 	asr.w	r3, r2, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 800312e:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <writeMultiCoils+0x16c>)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b25a      	sxtb	r2, r3
 8003138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	b25b      	sxtb	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	b25b      	sxtb	r3, r3
 8003146:	b2d9      	uxtb	r1, r3
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <writeMultiCoils+0x16c>)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	4413      	add	r3, r2
 800314e:	460a      	mov	r2, r1
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e013      	b.n	800317c <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <writeMultiCoils+0x16c>)
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	4413      	add	r3, r2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b25a      	sxtb	r2, r3
 800315e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	b25b      	sxtb	r3, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	b25b      	sxtb	r3, r3
 800316c:	4013      	ands	r3, r2
 800316e:	b25b      	sxtb	r3, r3
 8003170:	b2d9      	uxtb	r1, r3
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <writeMultiCoils+0x16c>)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	4413      	add	r3, r2
 8003178:	460a      	mov	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 800317c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800317e:	3301      	adds	r3, #1
 8003180:	847b      	strh	r3, [r7, #34]	; 0x22
            if (bitPosition > 7) {
 8003182:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003184:	2b07      	cmp	r3, #7
 8003186:	d904      	bls.n	8003192 <writeMultiCoils+0x106>
                bitPosition = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	847b      	strh	r3, [r7, #34]	; 0x22
                startByte++;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	3301      	adds	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
            }
            indx++;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	ddb4      	ble.n	800310e <writeMultiCoils+0x82>
 80031a4:	e000      	b.n	80031a8 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 80031a6:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	dba8      	blt.n	8003108 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = SLAVE_ID;
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <writeMultiCoils+0x170>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <writeMultiCoils+0x174>)
 80031be:	785a      	ldrb	r2, [r3, #1]
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <writeMultiCoils+0x170>)
 80031c2:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <writeMultiCoils+0x174>)
 80031c6:	789a      	ldrb	r2, [r3, #2]
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <writeMultiCoils+0x170>)
 80031ca:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <writeMultiCoils+0x174>)
 80031ce:	78da      	ldrb	r2, [r3, #3]
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <writeMultiCoils+0x170>)
 80031d2:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <writeMultiCoils+0x174>)
 80031d6:	791a      	ldrb	r2, [r3, #4]
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <writeMultiCoils+0x170>)
 80031da:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <writeMultiCoils+0x174>)
 80031de:	795a      	ldrb	r2, [r3, #5]
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <writeMultiCoils+0x170>)
 80031e2:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 80031e4:	2106      	movs	r1, #6
 80031e6:	4805      	ldr	r0, [pc, #20]	; (80031fc <writeMultiCoils+0x170>)
 80031e8:	f7ff fc46 	bl	8002a78 <sendData>
    return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200000d4 	.word	0x200000d4
 80031fc:	20000354 	.word	0x20000354
 8003200:	20000254 	.word	0x20000254

08003204 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART2) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_UARTEx_RxEventCallback+0x194>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f040 80bb 	bne.w	8003392 <HAL_UARTEx_RxEventCallback+0x18e>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UARTEx_RxEventCallback+0x26>
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003228:	d906      	bls.n	8003238 <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 800322a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322e:	495b      	ldr	r1, [pc, #364]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fe fc56 	bl	8001ae2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8003236:	e0ac      	b.n	8003392 <HAL_UARTEx_RxEventCallback+0x18e>

        // Disable DE and RE pins for reception


        // Check Slave ID
        if (RxData[0] != SLAVE_ID) {
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d006      	beq.n	800324e <HAL_UARTEx_RxEventCallback+0x4a>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8003240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003244:	4955      	ldr	r1, [pc, #340]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fc4b 	bl	8001ae2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 800324c:	e0a1      	b.n	8003392 <HAL_UARTEx_RxEventCallback+0x18e>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	3b01      	subs	r3, #1
 8003252:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	b21a      	sxth	r2, r3
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	3b02      	subs	r3, #2
 800325e:	494f      	ldr	r1, [pc, #316]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	b21b      	sxth	r3, r3
 8003264:	4313      	orrs	r3, r2
 8003266:	b21b      	sxth	r3, r3
 8003268:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	3b02      	subs	r3, #2
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	484a      	ldr	r0, [pc, #296]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003274:	f7ff fc2c 	bl	8002ad0 <crc16>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	4293      	cmp	r3, r2
 8003280:	d006      	beq.n	8003290 <HAL_UARTEx_RxEventCallback+0x8c>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8003282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003286:	4945      	ldr	r1, [pc, #276]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fe fc2a 	bl	8001ae2 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 800328e:	e080      	b.n	8003392 <HAL_UARTEx_RxEventCallback+0x18e>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8003290:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	b21a      	sxth	r2, r3
 8003298:	4b40      	ldr	r3, [pc, #256]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 800329a:	78db      	ldrb	r3, [r3, #3]
 800329c:	b21b      	sxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 80032a4:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 80032ae:	795b      	ldrb	r3, [r3, #5]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response


        // Handle the Modbus function codes
        switch (RxData[1]) {
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	3b01      	subs	r3, #1
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	d85d      	bhi.n	800337e <HAL_UARTEx_RxEventCallback+0x17a>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_UARTEx_RxEventCallback+0xc4>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	08003309 	.word	0x08003309
 80032cc:	0800337f 	.word	0x0800337f
 80032d0:	08003317 	.word	0x08003317
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003333 	.word	0x08003333
 80032dc:	08003343 	.word	0x08003343
 80032e0:	0800337f 	.word	0x0800337f
 80032e4:	0800337f 	.word	0x0800337f
 80032e8:	0800337f 	.word	0x0800337f
 80032ec:	0800337f 	.word	0x0800337f
 80032f0:	0800337f 	.word	0x0800337f
 80032f4:	0800337f 	.word	0x0800337f
 80032f8:	0800337f 	.word	0x0800337f
 80032fc:	0800337f 	.word	0x0800337f
 8003300:	08003363 	.word	0x08003363
 8003304:	08003371 	.word	0x08003371
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8003308:	897a      	ldrh	r2, [r7, #10]
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fd0a 	bl	8002d28 <readCoils>
                break;
 8003314:	e037      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 8003316:	897a      	ldrh	r2, [r7, #10]
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fc33 	bl	8002b88 <readHoldingRegs>
                break;
 8003322:	e030      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 8003324:	897a      	ldrh	r2, [r7, #10]
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fc94 	bl	8002c58 <readInputRegs>
                break;
 8003330:	e029      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003334:	791a      	ldrb	r2, [r3, #4]
 8003336:	89bb      	ldrh	r3, [r7, #12]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fe2e 	bl	8002f9c <writeSingleCoil>
                break;
 8003340:	e021      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 8003344:	791b      	ldrb	r3, [r3, #4]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b21a      	sxth	r2, r3
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	b21b      	sxth	r3, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	b21b      	sxth	r3, r3
 8003354:	b29a      	uxth	r2, r3
 8003356:	89bb      	ldrh	r3, [r7, #12]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fd84 	bl	8002e68 <writeSingleHoldingReg>
                break;
 8003360:	e011      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 8003362:	8979      	ldrh	r1, [r7, #10]
 8003364:	89bb      	ldrh	r3, [r7, #12]
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe8f 	bl	800308c <writeMultiCoils>
                break;
 800336e:	e00a      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	89bb      	ldrh	r3, [r7, #12]
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fdb2 	bl	8002ee0 <writeHoldingRegs>
                break;
 800337c:	e003      	b.n	8003386 <HAL_UARTEx_RxEventCallback+0x182>
            default:
                modbusException(ILLEGAL_FUNCTION);
 800337e:	2001      	movs	r0, #1
 8003380:	f7ff fbe2 	bl	8002b48 <modbusException>
                break;
 8003384:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8003386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338a:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_UARTEx_RxEventCallback+0x198>)
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe fba8 	bl	8001ae2 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40004400 	.word	0x40004400
 800339c:	20000254 	.word	0x20000254
 80033a0:	2000025b 	.word	0x2000025b
 80033a4:	2000025a 	.word	0x2000025a

080033a8 <__libc_init_array>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4d0d      	ldr	r5, [pc, #52]	; (80033e0 <__libc_init_array+0x38>)
 80033ac:	4c0d      	ldr	r4, [pc, #52]	; (80033e4 <__libc_init_array+0x3c>)
 80033ae:	1b64      	subs	r4, r4, r5
 80033b0:	10a4      	asrs	r4, r4, #2
 80033b2:	2600      	movs	r6, #0
 80033b4:	42a6      	cmp	r6, r4
 80033b6:	d109      	bne.n	80033cc <__libc_init_array+0x24>
 80033b8:	4d0b      	ldr	r5, [pc, #44]	; (80033e8 <__libc_init_array+0x40>)
 80033ba:	4c0c      	ldr	r4, [pc, #48]	; (80033ec <__libc_init_array+0x44>)
 80033bc:	f000 f820 	bl	8003400 <_init>
 80033c0:	1b64      	subs	r4, r4, r5
 80033c2:	10a4      	asrs	r4, r4, #2
 80033c4:	2600      	movs	r6, #0
 80033c6:	42a6      	cmp	r6, r4
 80033c8:	d105      	bne.n	80033d6 <__libc_init_array+0x2e>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d0:	4798      	blx	r3
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7ee      	b.n	80033b4 <__libc_init_array+0xc>
 80033d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033da:	4798      	blx	r3
 80033dc:	3601      	adds	r6, #1
 80033de:	e7f2      	b.n	80033c6 <__libc_init_array+0x1e>
 80033e0:	08003438 	.word	0x08003438
 80033e4:	08003438 	.word	0x08003438
 80033e8:	08003438 	.word	0x08003438
 80033ec:	0800343c 	.word	0x0800343c

080033f0 <memset>:
 80033f0:	4402      	add	r2, r0
 80033f2:	4603      	mov	r3, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	bf00      	nop
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
