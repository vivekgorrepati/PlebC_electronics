
code for x-axis RS485 open loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  000080f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  000080f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08006038  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200000f4  0800612c  000080f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800612c  00008460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013430  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a90  00000000  00000000  0001b554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cad  00000000  00000000  0001f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276ea  00000000  00000000  0001fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141f9  00000000  00000000  000473bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f293c  00000000  00000000  0005b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014def4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  0014df38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00152420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f4 	.word	0x200000f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fb8 	.word	0x08005fb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f8 	.word	0x200000f8
 80001c4:	08005fb8 	.word	0x08005fb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <UART_StartReceive>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to start UART reception
void UART_StartReceive(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  // Enable reception by setting DE and RE pins high
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f000 ff43 	bl	8001b3c <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, RX_BUFFER_SIZE);
 8000cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cba:	4903      	ldr	r1, [pc, #12]	@ (8000cc8 <UART_StartReceive+0x24>)
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <UART_StartReceive+0x28>)
 8000cbe:	f004 fb51 	bl	8005364 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000250 	.word	0x20000250
 8000ccc:	20000178 	.word	0x20000178

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
//	rpm 			= Holding_Registers_Database[0];
//	acceleration 	= Holding_Registers_Database[1];
	motorSetSteps 	= Holding_Registers_Database[3];
 8000cd6:	4b73      	ldr	r3, [pc, #460]	@ (8000ea4 <main+0x1d4>)
 8000cd8:	88db      	ldrh	r3, [r3, #6]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b72      	ldr	r3, [pc, #456]	@ (8000ea8 <main+0x1d8>)
 8000cde:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce0:	f000 fbe0 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce4:	f000 f8f6 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce8:	f000 f9ca 	bl	8001080 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cec:	f000 f944 	bl	8000f78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000cf0:	f000 f996 	bl	8001020 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000cf4:	486d      	ldr	r0, [pc, #436]	@ (8000eac <main+0x1dc>)
 8000cf6:	f002 fae3 	bl	80032c0 <HAL_TIM_Base_Start>
  UART_StartReceive();
 8000cfa:	f7ff ffd3 	bl	8000ca4 <UART_StartReceive>

  // Define motor configurations
  	MotorConfig motor1 = {GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0};
 8000cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8000eb0 <main+0x1e0>)
 8000d00:	463c      	mov	r4, r7
 8000d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		velocity 		= Holding_Registers_Database[0];
 8000d08:	4b66      	ldr	r3, [pc, #408]	@ (8000ea4 <main+0x1d4>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d14:	4b67      	ldr	r3, [pc, #412]	@ (8000eb4 <main+0x1e4>)
 8000d16:	edc3 7a00 	vstr	s15, [r3]
		pully_dia		= Holding_Registers_Database[2];
 8000d1a:	4b62      	ldr	r3, [pc, #392]	@ (8000ea4 <main+0x1d4>)
 8000d1c:	889b      	ldrh	r3, [r3, #4]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	4b64      	ldr	r3, [pc, #400]	@ (8000eb8 <main+0x1e8>)
 8000d28:	edc3 7a00 	vstr	s15, [r3]
		acceleration	= Holding_Registers_Database[1];
 8000d2c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea4 <main+0x1d4>)
 8000d2e:	885b      	ldrh	r3, [r3, #2]
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d38:	4b60      	ldr	r3, [pc, #384]	@ (8000ebc <main+0x1ec>)
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
		rpm = (840*velocity)/(44*pully_dia);
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb4 <main+0x1e4>)
 8000d40:	edd3 7a00 	vldr	s15, [r3]
 8000d44:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8000ec0 <main+0x1f0>
 8000d48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb8 <main+0x1e8>)
 8000d4e:	edd3 7a00 	vldr	s15, [r3]
 8000d52:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8000ec4 <main+0x1f4>
 8000d56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec8 <main+0x1f8>)
 8000d60:	edc3 7a00 	vstr	s15, [r3]

		if(rpm != prev_rpm)
 8000d64:	4b58      	ldr	r3, [pc, #352]	@ (8000ec8 <main+0x1f8>)
 8000d66:	ed93 7a00 	vldr	s14, [r3]
 8000d6a:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <main+0x1fc>)
 8000d6c:	edd3 7a00 	vldr	s15, [r3]
 8000d70:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d00d      	beq.n	8000d96 <main+0xc6>
		{
		setRPM(rpm, motorSetSteps); // (RPM, Steps)
 8000d7a:	4b53      	ldr	r3, [pc, #332]	@ (8000ec8 <main+0x1f8>)
 8000d7c:	edd3 7a00 	vldr	s15, [r3]
 8000d80:	4b49      	ldr	r3, [pc, #292]	@ (8000ea8 <main+0x1d8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8a:	f005 f83b 	bl	8005e04 <setRPM>
		prev_rpm = rpm;
 8000d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ec8 <main+0x1f8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <main+0x1fc>)
 8000d94:	6013      	str	r3, [r2, #0]
		}

		//Reading acceleration value from acceleration holding register
		acceleration = Holding_Registers_Database[1];
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <main+0x1d4>)
 8000d98:	885b      	ldrh	r3, [r3, #2]
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da2:	4b46      	ldr	r3, [pc, #280]	@ (8000ebc <main+0x1ec>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
		if(acceleration != prev_acceleration)
 8000da8:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <main+0x1ec>)
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	4b48      	ldr	r3, [pc, #288]	@ (8000ed0 <main+0x200>)
 8000db0:	edd3 7a00 	vldr	s15, [r3]
 8000db4:	eeb4 7a67 	vcmp.f32	s14, s15
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	d00a      	beq.n	8000dd4 <main+0x104>
		{
		setAcceleration(acceleration);
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8000ebc <main+0x1ec>)
 8000dc0:	edd3 7a00 	vldr	s15, [r3]
 8000dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc8:	f005 f80c 	bl	8005de4 <setAcceleration>
		prev_acceleration = acceleration;
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <main+0x1ec>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed0 <main+0x200>)
 8000dd2:	6013      	str	r3, [r2, #0]
		}


		if(Holding_Registers_Database[4] == 0)
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <main+0x1d4>)
 8000dd6:	891b      	ldrh	r3, [r3, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10a      	bne.n	8000df2 <main+0x122>
		{
		  motorStop(&motor1);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4618      	mov	r0, r3
 8000de0:	f005 f8a6 	bl	8005f30 <motorStop>
		  HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_SET); // disable driver
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dec:	f000 fea6 	bl	8001b3c <HAL_GPIO_WritePin>
 8000df0:	e78a      	b.n	8000d08 <main+0x38>
		}

		else if(Holding_Registers_Database[4] == 1)
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <main+0x1d4>)
 8000df4:	891b      	ldrh	r3, [r3, #8]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d127      	bne.n	8000e4a <main+0x17a>
		{
			// Set direction pin for forward movement
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f000 fe9b 	bl	8001b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET); // Enable driver
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f000 fe95 	bl	8001b3c <HAL_GPIO_WritePin>

		  	// Calculate the new speed and step interval
			unsigned long stepInterval = computeNewSpeed();
 8000e12:	f005 f819 	bl	8005e48 <computeNewSpeed>
 8000e16:	6138      	str	r0, [r7, #16]

			// Generate a step pulse with the calculated interval
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f000 fe8c 	bl	8001b3c <HAL_GPIO_WritePin>
			microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	085b      	lsrs	r3, r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 ffc0 	bl	8005db0 <microDelay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f000 fe80 	bl	8001b3c <HAL_GPIO_WritePin>
			microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	085b      	lsrs	r3, r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 ffb4 	bl	8005db0 <microDelay>
 8000e48:	e75e      	b.n	8000d08 <main+0x38>
		}

		else if(Holding_Registers_Database[4] == 2)
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <main+0x1d4>)
 8000e4c:	891b      	ldrh	r3, [r3, #8]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	f47f af5a 	bne.w	8000d08 <main+0x38>
		{
			// Set direction pin for Backward movement
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f000 fe6e 	bl	8001b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DRIVE_ENB_Pin, GPIO_PIN_RESET); // Enable Driver
 8000e60:	2200      	movs	r2, #0
 8000e62:	2110      	movs	r1, #16
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f000 fe68 	bl	8001b3c <HAL_GPIO_WritePin>

			// Calculate the new speed and step interval
			unsigned long stepInterval = computeNewSpeed();
 8000e6c:	f004 ffec 	bl	8005e48 <computeNewSpeed>
 8000e70:	6178      	str	r0, [r7, #20]

			// Generate a step pulse with the calculated interval
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2101      	movs	r1, #1
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7a:	f000 fe5f 	bl	8001b3c <HAL_GPIO_WritePin>
			microDelay(stepInterval / 2);  // Half of the interval for the high pulse
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 ff93 	bl	8005db0 <microDelay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f000 fe53 	bl	8001b3c <HAL_GPIO_WritePin>
			microDelay(stepInterval / 2);  // Half of the interval for the low pulse
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	085b      	lsrs	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 ff87 	bl	8005db0 <microDelay>
		velocity 		= Holding_Registers_Database[0];
 8000ea2:	e731      	b.n	8000d08 <main+0x38>
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	20000118 	.word	0x20000118
 8000eac:	2000012c 	.word	0x2000012c
 8000eb0:	08005fd0 	.word	0x08005fd0
 8000eb4:	2000011c 	.word	0x2000011c
 8000eb8:	20000124 	.word	0x20000124
 8000ebc:	20000114 	.word	0x20000114
 8000ec0:	44520000 	.word	0x44520000
 8000ec4:	42300000 	.word	0x42300000
 8000ec8:	20000110 	.word	0x20000110
 8000ecc:	20000120 	.word	0x20000120
 8000ed0:	20000128 	.word	0x20000128

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	@ 0x58
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2244      	movs	r2, #68	@ 0x44
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 f83c 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ef6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000efa:	f000 fe45 	bl	8001b88 <HAL_PWREx_ControlVoltageScaling>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f04:	f000 f925 	bl	8001152 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f12:	2310      	movs	r3, #16
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f26:	2307      	movs	r3, #7
 8000f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fe7c 	bl	8001c34 <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f42:	f000 f906 	bl	8001152 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fa44 	bl	80023ec <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f6a:	f000 f8f2 	bl	8001152 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3758      	adds	r7, #88	@ 0x58
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000f98:	4a20      	ldr	r2, [pc, #128]	@ (800101c <MX_TIM1_Init+0xa4>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000f9e:	224f      	movs	r2, #79	@ 0x4f
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc2:	4815      	ldr	r0, [pc, #84]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fc4:	f002 f924 	bl	8003210 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f000 f8c0 	bl	8001152 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480e      	ldr	r0, [pc, #56]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8000fe0:	f002 fb4d 	bl	800367e <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fea:	f000 f8b2 	bl	8001152 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_TIM1_Init+0xa0>)
 8001000:	f002 fd6e 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800100a:	f000 f8a2 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000012c 	.word	0x2000012c
 800101c:	40012c00 	.word	0x40012c00

08001020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <MX_USART1_UART_Init+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001064:	f002 fde2 	bl	8003c2c <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 f870 	bl	8001152 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000178 	.word	0x20000178
 800107c:	40013800 	.word	0x40013800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <MX_GPIO_Init+0xac>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	4a24      	ldr	r2, [pc, #144]	@ (800112c <MX_GPIO_Init+0xac>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_GPIO_Init+0xac>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_GPIO_Init+0xac>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a1e      	ldr	r2, [pc, #120]	@ (800112c <MX_GPIO_Init+0xac>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_GPIO_Init+0xac>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_GPIO_Init+0xac>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <MX_GPIO_Init+0xac>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_GPIO_Init+0xac>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f240 1113 	movw	r1, #275	@ 0x113
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e8:	f000 fd28 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin;
 80010ec:	2302      	movs	r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	480c      	ldr	r0, [pc, #48]	@ (8001130 <MX_GPIO_Init+0xb0>)
 8001100:	f000 fb72 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin DRIVE_ENB_Pin DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|DRIVE_ENB_Pin|DE_RE_ENB_Pin;
 8001104:	f240 1313 	movw	r3, #275	@ 0x113
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001120:	f000 fb62 	bl	80017e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800

08001134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001144:	d101      	bne.n	800114a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001146:	f000 f9cd 	bl	80014e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001156:	b672      	cpsid	i
}
 8001158:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115a:	bf00      	nop
 800115c:	e7fd      	b.n	800115a <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_MspInit+0x44>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	@ 0x60
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_MspInit+0x44>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_MspInit+0x44>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6593      	str	r3, [r2, #88]	@ 0x58
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_MspInit+0x44>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_TIM_Base_MspInit+0x38>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10b      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011be:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0ac      	sub	sp, #176	@ 0xb0
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2288      	movs	r2, #136	@ 0x88
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fea9 	bl	8005f60 <memset>
  if(huart->Instance==USART1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a26      	ldr	r2, [pc, #152]	@ (80012ac <HAL_UART_MspInit+0xc4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d144      	bne.n	80012a2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800121c:	2300      	movs	r3, #0
 800121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fb37 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001230:	f7ff ff8f 	bl	8001152 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001238:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_UART_MspInit+0xc8>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001264:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127e:	2307      	movs	r3, #7
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f000 faab 	bl	80017e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2025      	movs	r0, #37	@ 0x25
 8001298:	f000 f9fc 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129c:	2025      	movs	r0, #37	@ 0x25
 800129e:	f000 fa15 	bl	80016cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	37b0      	adds	r7, #176	@ 0xb0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_InitTick+0xe0>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	4a33      	ldr	r2, [pc, #204]	@ (8001394 <HAL_InitTick+0xe0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <HAL_InitTick+0xe0>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012da:	f107 0210 	add.w	r2, r7, #16
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fa45 	bl	8002774 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f4:	f001 fa12 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80012f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80012fa:	e004      	b.n	8001306 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012fc:	f001 fa0e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8001300:	4603      	mov	r3, r0
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001308:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <HAL_InitTick+0xe4>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	3b01      	subs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <HAL_InitTick+0xe8>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <HAL_InitTick+0xe8>)
 800131e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <HAL_InitTick+0xe8>)
 8001326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001328:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_InitTick+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <HAL_InitTick+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_InitTick+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800133c:	4817      	ldr	r0, [pc, #92]	@ (800139c <HAL_InitTick+0xe8>)
 800133e:	f001 ff67 	bl	8003210 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11b      	bne.n	8001388 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001350:	4812      	ldr	r0, [pc, #72]	@ (800139c <HAL_InitTick+0xe8>)
 8001352:	f002 f81d 	bl	8003390 <HAL_TIM_Base_Start_IT>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800135c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001364:	201c      	movs	r0, #28
 8001366:	f000 f9b1 	bl	80016cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d808      	bhi.n	8001382 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	201c      	movs	r0, #28
 8001376:	f000 f98d 	bl	8001694 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <HAL_InitTick+0xec>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e002      	b.n	8001388 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001388:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800138c:	4618      	mov	r0, r3
 800138e:	3738      	adds	r7, #56	@ 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	431bde83 	.word	0x431bde83
 800139c:	20000200 	.word	0x20000200
 80013a0:	20000008 	.word	0x20000008

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <NMI_Handler+0x4>

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <MemManage_Handler+0x4>

080013bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <UsageFault_Handler+0x4>

080013cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <TIM2_IRQHandler+0x10>)
 800140a:	f002 f831 	bl	8003470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000200 	.word	0x20000200

08001418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <USART1_IRQHandler+0x10>)
 800141e:	f002 fcdd 	bl	8003ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000178 	.word	0x20000178

0800142c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff ffea 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopForever+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f004 fd77 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff fc25 	bl	8000cd0 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001494:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 8001498:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 800149c:	20000460 	.word	0x20000460

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_Init+0x3c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_Init+0x3c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f8df 	bl	800167e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c0:	200f      	movs	r0, #15
 80014c2:	f7ff fef7 	bl	80012b4 <HAL_InitTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e001      	b.n	80014d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d2:	f7ff fe45 	bl	8001160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	2000024c 	.word	0x2000024c

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000024c 	.word	0x2000024c

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff4c 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a6:	f7ff ff61 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	6978      	ldr	r0, [r7, #20]
 80016b2:	f7ff ffb1 	bl	8001618 <NVIC_EncodePriority>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff80 	bl	80015c4 <__NVIC_SetPriority>
}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff54 	bl	8001588 <__NVIC_EnableIRQ>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d008      	beq.n	8001712 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e022      	b.n	8001758 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 020e 	bic.w	r2, r2, #14
 8001720:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f003 021c 	and.w	r2, r3, #28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d005      	beq.n	8001788 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2204      	movs	r2, #4
 8001780:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e029      	b.n	80017dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 020e 	bic.w	r2, r2, #14
 8001796:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	f003 021c 	and.w	r2, r3, #28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    }
  }
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e17f      	b.n	8001af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8171 	beq.w	8001af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d118      	bne.n	80018c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800189c:	2201      	movs	r2, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f003 0201 	and.w	r2, r3, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d017      	beq.n	8001904 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d123      	bne.n	8001958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	6939      	ldr	r1, [r7, #16]
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80ac 	beq.w	8001af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b18 <HAL_GPIO_Init+0x330>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b18 <HAL_GPIO_Init+0x330>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b18 <HAL_GPIO_Init+0x330>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x242>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_GPIO_Init+0x338>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x23e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001b24 <HAL_GPIO_Init+0x33c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x23a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001b28 <HAL_GPIO_Init+0x340>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x236>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b2c <HAL_GPIO_Init+0x344>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x232>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	@ (8001b30 <HAL_GPIO_Init+0x348>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x22e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_GPIO_Init+0x34c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x22a>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00c      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e00a      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a16:	2305      	movs	r3, #5
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x244>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a3c:	4937      	ldr	r1, [pc, #220]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a6e:	4a32      	ldr	r2, [pc, #200]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a74:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a98:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aec:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <HAL_GPIO_Init+0x350>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f ae78 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	48001000 	.word	0x48001000
 8001b30:	48001400 	.word	0x48001400
 8001b34:	48001800 	.word	0x48001800
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40007000 	.word	0x40007000

08001b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b96:	d130      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba4:	d038      	beq.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bae:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2232      	movs	r2, #50	@ 0x32
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0c9b      	lsrs	r3, r3, #18
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bcc:	e002      	b.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be0:	d102      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f2      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf4:	d110      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e00f      	b.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c06:	d007      	beq.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c10:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e3ca      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4b97      	ldr	r3, [pc, #604]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c50:	4b94      	ldr	r3, [pc, #592]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80e4 	beq.w	8001e30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_RCC_OscConfig+0x4a>
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	f040 808b 	bne.w	8001d8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 8087 	bne.w	8001d8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c7e:	4b89      	ldr	r3, [pc, #548]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x62>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e3a2      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x7c>
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_OscConfig+0x88>
 8001cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d223      	bcs.n	8001d08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fd87 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e383      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd4:	4b73      	ldr	r3, [pc, #460]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a72      	ldr	r2, [pc, #456]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b70      	ldr	r3, [pc, #448]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	496d      	ldr	r1, [pc, #436]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	4968      	ldr	r1, [pc, #416]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
 8001d06:	e025      	b.n	8001d54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d08:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b63      	ldr	r3, [pc, #396]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4960      	ldr	r1, [pc, #384]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	495b      	ldr	r1, [pc, #364]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fd47 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e343      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d54:	f000 fc4a 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	4950      	ldr	r1, [pc, #320]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <HAL_RCC_OscConfig+0x278>)
 8001d72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d74:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa9b 	bl	80012b4 <HAL_InitTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d052      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	e327      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d032      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a42      	ldr	r2, [pc, #264]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fbb4 	bl	800150c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da8:	f7ff fbb0 	bl	800150c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e310      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a36      	ldr	r2, [pc, #216]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4931      	ldr	r1, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	492c      	ldr	r1, [pc, #176]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e01a      	b.n	8001e30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb81 	bl	800150c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fb7d 	bl	800150c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e2dd      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x1da>
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d074      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x21a>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d10e      	bne.n	8001e66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d064      	beq.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d160      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e2ba      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x24a>
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e026      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e86:	d115      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x280>
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a02      	ldr	r2, [pc, #8]	@ (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08005fe0 	.word	0x08005fe0
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fb1a 	bl	800150c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fb16 	bl	800150c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e276      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	4b92      	ldr	r3, [pc, #584]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x2a8>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fb06 	bl	800150c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fb02 	bl	800150c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e262      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	4b88      	ldr	r3, [pc, #544]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2d0>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x310>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d116      	bne.n	8001f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f44:	4b7c      	ldr	r3, [pc, #496]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x328>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e23f      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b76      	ldr	r3, [pc, #472]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	4973      	ldr	r1, [pc, #460]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	e040      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d023      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fac1 	bl	800150c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fabd 	bl	800150c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e21d      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa0:	4b65      	ldr	r3, [pc, #404]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b62      	ldr	r3, [pc, #392]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	495f      	ldr	r1, [pc, #380]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e018      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa9d 	bl	800150c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fa99 	bl	800150c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1f9      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03c      	beq.n	800207a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200e:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fa78 	bl	800150c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fa74 	bl	800150c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1d4      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x3ec>
 8002040:	e01b      	b.n	800207a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002048:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7ff fa5b 	bl	800150c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205a:	f7ff fa57 	bl	800150c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1b7      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800206c:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ef      	bne.n	800205a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80a6 	beq.w	80021d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800208c:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_OscConfig+0x508>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d118      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	4b1e      	ldr	r3, [pc, #120]	@ (800213c <HAL_RCC_OscConfig+0x508>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_RCC_OscConfig+0x508>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020cc:	f7ff fa1e 	bl	800150c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7ff fa1a 	bl	800150c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e17a      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_RCC_OscConfig+0x508>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x4d8>
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800210a:	e029      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d115      	bne.n	8002140 <HAL_RCC_OscConfig+0x50c>
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212a:	4a03      	ldr	r2, [pc, #12]	@ (8002138 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	4b9c      	ldr	r3, [pc, #624]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4a9b      	ldr	r2, [pc, #620]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002150:	4b98      	ldr	r3, [pc, #608]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a97      	ldr	r2, [pc, #604]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d016      	beq.n	8002196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f9d0 	bl	800150c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff f9cc 	bl	800150c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e12a      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	4b8b      	ldr	r3, [pc, #556]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ed      	beq.n	8002170 <HAL_RCC_OscConfig+0x53c>
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f9b9 	bl	800150c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff f9b5 	bl	800150c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e113      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b4:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ed      	bne.n	800219e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b7a      	ldr	r3, [pc, #488]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	4a79      	ldr	r2, [pc, #484]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80fe 	beq.w	80023da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	f040 80d0 	bne.w	8002388 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021e8:	4b72      	ldr	r3, [pc, #456]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d130      	bne.n	800225e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	3b01      	subs	r3, #1
 8002208:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d127      	bne.n	800225e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002218:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d11f      	bne.n	800225e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002228:	2a07      	cmp	r2, #7
 800222a:	bf14      	ite	ne
 800222c:	2201      	movne	r2, #1
 800222e:	2200      	moveq	r2, #0
 8002230:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002232:	4293      	cmp	r3, r2
 8002234:	d113      	bne.n	800225e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d109      	bne.n	800225e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d06e      	beq.n	800233c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d069      	beq.n	8002338 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0ad      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002280:	4b4c      	ldr	r3, [pc, #304]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4b      	ldr	r2, [pc, #300]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800228c:	f7ff f93e 	bl	800150c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff f93a 	bl	800150c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e09a      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b2:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x784>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	4311      	orrs	r1, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022cc:	0212      	lsls	r2, r2, #8
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022d4:	0852      	lsrs	r2, r2, #1
 80022d6:	3a01      	subs	r2, #1
 80022d8:	0552      	lsls	r2, r2, #21
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022e0:	0852      	lsrs	r2, r2, #1
 80022e2:	3a01      	subs	r2, #1
 80022e4:	0652      	lsls	r2, r2, #25
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022ec:	0912      	lsrs	r2, r2, #4
 80022ee:	0452      	lsls	r2, r2, #17
 80022f0:	430a      	orrs	r2, r1
 80022f2:	4930      	ldr	r1, [pc, #192]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022f8:	4b2e      	ldr	r3, [pc, #184]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002302:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a2a      	ldr	r2, [pc, #168]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800230e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002310:	f7ff f8fc 	bl	800150c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff f8f8 	bl	800150c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e058      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002336:	e050      	b.n	80023da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e04f      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d148      	bne.n	80023da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002360:	f7ff f8d4 	bl	800150c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f8d0 	bl	800150c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e030      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x734>
 8002386:	e028      	b.n	80023da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d023      	beq.n	80023d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 8002394:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7ff f8b7 	bl	800150c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	e00c      	b.n	80023bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7ff f8b3 	bl	800150c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d905      	bls.n	80023bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e013      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x7b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ec      	bne.n	80023a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x7b0>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4905      	ldr	r1, [pc, #20]	@ (80023e4 <HAL_RCC_OscConfig+0x7b0>)
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x7b4>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
 80023d4:	e001      	b.n	80023da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	feeefffc 	.word	0xfeeefffc

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0e7      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b75      	ldr	r3, [pc, #468]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4970      	ldr	r1, [pc, #448]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b6e      	ldr	r3, [pc, #440]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cf      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002448:	429a      	cmp	r2, r3
 800244a:	d908      	bls.n	800245e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4960      	ldr	r1, [pc, #384]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d04c      	beq.n	8002504 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b5a      	ldr	r3, [pc, #360]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d121      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0a6      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248a:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e09a      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a2:	4b4e      	ldr	r3, [pc, #312]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e08e      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e086      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4943      	ldr	r1, [pc, #268]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7ff f81a 	bl	800150c <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff f816 	bl	800150c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e06e      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251c:	429a      	cmp	r2, r3
 800251e:	d208      	bcs.n	8002532 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	492b      	ldr	r1, [pc, #172]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d210      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0207 	bic.w	r2, r3, #7
 8002548:	4923      	ldr	r1, [pc, #140]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e036      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4918      	ldr	r1, [pc, #96]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4910      	ldr	r1, [pc, #64]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a0:	f000 f824 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	490b      	ldr	r1, [pc, #44]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f4>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1fc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fe75 	bl	80012b4 <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ce:	7afb      	ldrb	r3, [r7, #11]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08005fe0 	.word	0x08005fe0
 80025e4:	20000004 	.word	0x20000004
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d121      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d11e      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002620:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800262c:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e005      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800263c:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002648:	4a2b      	ldr	r2, [pc, #172]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d102      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002664:	4b25      	ldr	r3, [pc, #148]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	e004      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d101      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002670:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x114>)
 8002672:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d134      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0xa6>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0xac>
 8002690:	e005      	b.n	800269e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002694:	617b      	str	r3, [r7, #20]
      break;
 8002696:	e005      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x114>)
 800269a:	617b      	str	r3, [r7, #20]
      break;
 800269c:	e002      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	617b      	str	r3, [r7, #20]
      break;
 80026a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	3301      	adds	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	0e5b      	lsrs	r3, r3, #25
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	3301      	adds	r3, #1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e4:	69bb      	ldr	r3, [r7, #24]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08005ff8 	.word	0x08005ff8
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08005ff0 	.word	0x08005ff0

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800274c:	f7ff ffda 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	@ (8002770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08005ff0 	.word	0x08005ff0

08002774 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	220f      	movs	r2, #15
 8002782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_RCC_GetClockConfig+0x60>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0207 	and.w	r2, r3, #7
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40022000 	.word	0x40022000

080027d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f0:	f7ff f9bc 	bl	8001b6c <HAL_PWREx_GetVoltageRange>
 80027f4:	6178      	str	r0, [r7, #20]
 80027f6:	e014      	b.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	4a24      	ldr	r2, [pc, #144]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	@ 0x58
 8002804:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002810:	f7ff f9ac 	bl	8001b6c <HAL_PWREx_GetVoltageRange>
 8002814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002828:	d10b      	bne.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b80      	cmp	r3, #128	@ 0x80
 800282e:	d919      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2ba0      	cmp	r3, #160	@ 0xa0
 8002834:	d902      	bls.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002836:	2302      	movs	r3, #2
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e013      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e010      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d902      	bls.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e00a      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d102      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e004      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b70      	cmp	r3, #112	@ 0x70
 800285e:	d101      	bne.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 0207 	bic.w	r2, r3, #7
 800286c:	4909      	ldr	r1, [pc, #36]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002874:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40022000 	.word	0x40022000

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d041      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028bc:	d02a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028c2:	d824      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ce:	d81e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d8:	d010      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028da:	e018      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028dc:	4b86      	ldr	r3, [pc, #536]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a85      	ldr	r2, [pc, #532]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e8:	e015      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fabb 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fa:	e00c      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3320      	adds	r3, #32
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fba6 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	74fb      	strb	r3, [r7, #19]
      break;
 8002912:	e000      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291c:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800292a:	4973      	ldr	r1, [pc, #460]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d041      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002948:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800294c:	d02a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800294e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002952:	d824      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002954:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800295a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800295e:	d81e      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002968:	d010      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800296c:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002976:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa73 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3320      	adds	r3, #32
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fb5e 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	74fb      	strb	r3, [r7, #19]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ac:	4b52      	ldr	r3, [pc, #328]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ba:	494f      	ldr	r1, [pc, #316]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029c2:	e001      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a0 	beq.w	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4a40      	ldr	r2, [pc, #256]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80029fc:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3a      	ldr	r2, [pc, #232]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fd78 	bl	800150c <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1e:	e009      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fd74 	bl	800150c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	74fb      	strb	r3, [r7, #19]
        break;
 8002a32:	e005      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a34:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d15c      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01f      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d019      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fd33 	bl	800150c <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fd2f 	bl	800150c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d902      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ec      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae6:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aee:	e009      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
 8002af4:	e006      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b04:	7c7b      	ldrb	r3, [r7, #17]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	4a9d      	ldr	r2, [pc, #628]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b22:	4b98      	ldr	r3, [pc, #608]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f023 0203 	bic.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	4994      	ldr	r1, [pc, #592]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b44:	4b8f      	ldr	r3, [pc, #572]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 020c 	bic.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	498c      	ldr	r1, [pc, #560]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b66:	4b87      	ldr	r3, [pc, #540]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	4983      	ldr	r1, [pc, #524]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b88:	4b7e      	ldr	r3, [pc, #504]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	497b      	ldr	r1, [pc, #492]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002baa:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	4972      	ldr	r1, [pc, #456]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	496a      	ldr	r1, [pc, #424]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bee:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	4961      	ldr	r1, [pc, #388]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c10:	4b5c      	ldr	r3, [pc, #368]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	4959      	ldr	r1, [pc, #356]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c32:	4b54      	ldr	r3, [pc, #336]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c40:	4950      	ldr	r1, [pc, #320]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c54:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	4948      	ldr	r1, [pc, #288]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c76:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	493f      	ldr	r1, [pc, #252]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d028      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c98:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca6:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e011      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cce:	d10c      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f8c8 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d028      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d20:	60d3      	str	r3, [r2, #12]
 8002d22:	e011      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f899 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	4908      	ldr	r1, [pc, #32]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d72:	d109      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a02      	ldr	r2, [pc, #8]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	e014      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f867 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02f      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc6:	4928      	ldr	r1, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f844 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	74bb      	strb	r3, [r7, #18]
 8002df2:	e011      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3320      	adds	r3, #32
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f925 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e24:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e56:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e7a:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e86:	4b72      	ldr	r3, [pc, #456]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10d      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
       ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
       ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d047      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e044      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d018      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x86>
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d825      	bhi.n	8002f10 <RCCEx_PLLSAI1_Config+0xa4>
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d002      	beq.n	8002ece <RCCEx_PLLSAI1_Config+0x62>
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d009      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0x74>
 8002ecc:	e020      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ece:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e01a      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e013      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ef2:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002efe:	4b54      	ldr	r3, [pc, #336]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f0e:	e006      	b.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e004      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	4944      	ldr	r1, [pc, #272]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d17d      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f48:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a40      	ldr	r2, [pc, #256]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fe fada 	bl	800150c <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5a:	e009      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f5c:	f7fe fad6 	bl	800150c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6e:	e005      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ef      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d160      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f88:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	0912      	lsrs	r2, r2, #4
 8002fa0:	0452      	lsls	r2, r2, #17
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	492a      	ldr	r1, [pc, #168]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	610b      	str	r3, [r1, #16]
 8002faa:	e027      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d112      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	0211      	lsls	r1, r2, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6912      	ldr	r2, [r2, #16]
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0552      	lsls	r2, r2, #21
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	491f      	ldr	r1, [pc, #124]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	610b      	str	r3, [r1, #16]
 8002fd6:	e011      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6952      	ldr	r2, [r2, #20]
 8002fee:	0852      	lsrs	r2, r2, #1
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0652      	lsls	r2, r2, #25
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	4916      	ldr	r1, [pc, #88]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fa80 	bl	800150c <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300e:	e009      	b.n	8003024 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003010:	f7fe fa7c 	bl	800150c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	73fb      	strb	r3, [r7, #15]
          break;
 8003022:	e005      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4904      	ldr	r1, [pc, #16]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800306e:	4b67      	ldr	r3, [pc, #412]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d10d      	bne.n	800309a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
       ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003086:	4b61      	ldr	r3, [pc, #388]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
       ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d047      	beq.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e044      	b.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d018      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x86>
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d825      	bhi.n	80030f8 <RCCEx_PLLSAI2_Config+0xa4>
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d002      	beq.n	80030b6 <RCCEx_PLLSAI2_Config+0x62>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d009      	beq.n	80030c8 <RCCEx_PLLSAI2_Config+0x74>
 80030b4:	e020      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030b6:	4b55      	ldr	r3, [pc, #340]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11d      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c6:	e01a      	b.n	80030fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c8:	4b50      	ldr	r3, [pc, #320]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d116      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d8:	e013      	b.n	8003102 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030da:	4b4c      	ldr	r3, [pc, #304]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030f6:	e006      	b.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e004      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003106:	bf00      	nop
    }

    if(status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800310e:	4b3f      	ldr	r3, [pc, #252]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	430b      	orrs	r3, r1
 8003124:	4939      	ldr	r1, [pc, #228]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d167      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a35      	ldr	r2, [pc, #212]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fe f9e6 	bl	800150c <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003144:	f7fe f9e2 	bl	800150c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e005      	b.n	8003164 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003158:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ef      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d14a      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003170:	4b26      	ldr	r3, [pc, #152]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	0211      	lsls	r1, r2, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68d2      	ldr	r2, [r2, #12]
 8003186:	0912      	lsrs	r2, r2, #4
 8003188:	0452      	lsls	r2, r2, #17
 800318a:	430a      	orrs	r2, r1
 800318c:	491f      	ldr	r1, [pc, #124]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	614b      	str	r3, [r1, #20]
 8003192:	e011      	b.n	80031b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003194:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800319c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6912      	ldr	r2, [r2, #16]
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0652      	lsls	r2, r2, #25
 80031b0:	430a      	orrs	r2, r1
 80031b2:	4916      	ldr	r1, [pc, #88]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a13      	ldr	r2, [pc, #76]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe f9a2 	bl	800150c <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031cc:	f7fe f99e 	bl	800150c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
          break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4904      	ldr	r1, [pc, #16]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e049      	b.n	80032b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd ffb6 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 fb06 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e047      	b.n	8003368 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <HAL_TIM_Base_Start+0xb4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f2:	d018      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_TIM_Base_Start+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <HAL_TIM_Base_Start+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <HAL_TIM_Base_Start+0xc0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_TIM_Base_Start+0xc4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_TIM_Base_Start+0x66>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <HAL_TIM_Base_Start+0xc8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d115      	bne.n	8003352 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <HAL_TIM_Base_Start+0xcc>)
 800332e:	4013      	ands	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b06      	cmp	r3, #6
 8003336:	d015      	beq.n	8003364 <HAL_TIM_Base_Start+0xa4>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333e:	d011      	beq.n	8003364 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003350:	e008      	b.n	8003364 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e000      	b.n	8003366 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40013400 	.word	0x40013400
 8003388:	40014000 	.word	0x40014000
 800338c:	00010007 	.word	0x00010007

08003390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e04f      	b.n	8003448 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <HAL_TIM_Base_Start_IT+0xc4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01d      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d018      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_TIM_Base_Start_IT+0xc8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_TIM_Base_Start_IT+0xcc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <HAL_TIM_Base_Start_IT+0xd4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0x76>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_TIM_Base_Start_IT+0xd8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d115      	bne.n	8003432 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b17      	ldr	r3, [pc, #92]	@ (800346c <HAL_TIM_Base_Start_IT+0xdc>)
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d015      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0xb4>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341e:	d011      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	e008      	b.n	8003444 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e000      	b.n	8003446 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40000c00 	.word	0x40000c00
 8003464:	40013400 	.word	0x40013400
 8003468:	40014000 	.word	0x40014000
 800346c:	00010007 	.word	0x00010007

08003470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d020      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0202 	mvn.w	r2, #2
 80034a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9b2 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f9a4 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9b5 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d020      	beq.n	8003520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0204 	mvn.w	r2, #4
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f98c 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f97e 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f98f 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d020      	beq.n	800356c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01b      	beq.n	800356c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0208 	mvn.w	r2, #8
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2204      	movs	r2, #4
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f966 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f958 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f969 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	d020      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0210 	mvn.w	r2, #16
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2208      	movs	r2, #8
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f940 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f932 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f943 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0201 	mvn.w	r2, #1
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fdac 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00c      	beq.n	800360a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fafd 	bl	8003c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00c      	beq.n	800362e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 faf5 	bl	8003c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00c      	beq.n	8003652 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8fd 	bl	800384c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00c      	beq.n	8003676 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0220 	mvn.w	r2, #32
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fabd 	bl	8003bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_TIM_ConfigClockSource+0x1c>
 8003696:	2302      	movs	r3, #2
 8003698:	e0b6      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x18a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d6:	d03e      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0xd8>
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036dc:	f200 8087 	bhi.w	80037ee <HAL_TIM_ConfigClockSource+0x170>
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e4:	f000 8086 	beq.w	80037f4 <HAL_TIM_ConfigClockSource+0x176>
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ec:	d87f      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 80036ee:	2b70      	cmp	r3, #112	@ 0x70
 80036f0:	d01a      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0xaa>
 80036f2:	2b70      	cmp	r3, #112	@ 0x70
 80036f4:	d87b      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 80036f6:	2b60      	cmp	r3, #96	@ 0x60
 80036f8:	d050      	beq.n	800379c <HAL_TIM_ConfigClockSource+0x11e>
 80036fa:	2b60      	cmp	r3, #96	@ 0x60
 80036fc:	d877      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 80036fe:	2b50      	cmp	r3, #80	@ 0x50
 8003700:	d03c      	beq.n	800377c <HAL_TIM_ConfigClockSource+0xfe>
 8003702:	2b50      	cmp	r3, #80	@ 0x50
 8003704:	d873      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d058      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0x13e>
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d86f      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 800370e:	2b30      	cmp	r3, #48	@ 0x30
 8003710:	d064      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x15e>
 8003712:	2b30      	cmp	r3, #48	@ 0x30
 8003714:	d86b      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 8003716:	2b20      	cmp	r3, #32
 8003718:	d060      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x15e>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d867      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d05c      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x15e>
 8003722:	2b10      	cmp	r3, #16
 8003724:	d05a      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x15e>
 8003726:	e062      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003738:	f000 f9b2 	bl	8003aa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800374a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
      break;
 8003754:	e04f      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	f000 f99b 	bl	8003aa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003778:	609a      	str	r2, [r3, #8]
      break;
 800377a:	e03c      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	461a      	mov	r2, r3
 800378a:	f000 f90f 	bl	80039ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2150      	movs	r1, #80	@ 0x50
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f968 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 800379a:	e02c      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a8:	461a      	mov	r2, r3
 80037aa:	f000 f92e 	bl	8003a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2160      	movs	r1, #96	@ 0x60
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f958 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 80037ba:	e01c      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c8:	461a      	mov	r2, r3
 80037ca:	f000 f8ef 	bl	80039ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f948 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 f93f 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a46      	ldr	r2, [pc, #280]	@ (800398c <TIM_Base_SetConfig+0x12c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <TIM_Base_SetConfig+0x130>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a42      	ldr	r2, [pc, #264]	@ (8003994 <TIM_Base_SetConfig+0x134>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a41      	ldr	r2, [pc, #260]	@ (8003998 <TIM_Base_SetConfig+0x138>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a40      	ldr	r2, [pc, #256]	@ (800399c <TIM_Base_SetConfig+0x13c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a35      	ldr	r2, [pc, #212]	@ (800398c <TIM_Base_SetConfig+0x12c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d01b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a32      	ldr	r2, [pc, #200]	@ (8003990 <TIM_Base_SetConfig+0x130>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <TIM_Base_SetConfig+0x134>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a30      	ldr	r2, [pc, #192]	@ (8003998 <TIM_Base_SetConfig+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2f      	ldr	r2, [pc, #188]	@ (800399c <TIM_Base_SetConfig+0x13c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2e      	ldr	r2, [pc, #184]	@ (80039a0 <TIM_Base_SetConfig+0x140>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <TIM_Base_SetConfig+0x144>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2c      	ldr	r2, [pc, #176]	@ (80039a8 <TIM_Base_SetConfig+0x148>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_Base_SetConfig+0x12c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00f      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <TIM_Base_SetConfig+0x13c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a17      	ldr	r2, [pc, #92]	@ (80039a0 <TIM_Base_SetConfig+0x140>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <TIM_Base_SetConfig+0x144>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a15      	ldr	r2, [pc, #84]	@ (80039a8 <TIM_Base_SetConfig+0x148>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f023 0201 	bic.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
  }
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800

080039ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0201 	bic.w	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 030a 	bic.w	r3, r3, #10
 80039e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f023 0210 	bic.w	r2, r3, #16
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f043 0307 	orr.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e068      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2d      	ldr	r2, [pc, #180]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d018      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40014000 	.word	0x40014000

08003bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd faca 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fe8e 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fbd3 	bl	8004424 <UART_SetConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01b      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 ff0d 	bl	8004ad8 <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d177      	bne.n	8003dd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x24>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e070      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2221      	movs	r2, #33	@ 0x21
 8003cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fc05 	bl	800150c <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02f      	b.n	8003d9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	@ 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 ff6f 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03b      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3302      	adds	r3, #2
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e007      	b.n	8003d88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1c9      	bne.n	8003d3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2140      	movs	r1, #64	@ 0x40
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 ff39 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e005      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0ba      	sub	sp, #232	@ 0xe8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00f      	beq.n	8003e44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 82ca 	beq.w	80043ce <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
      }
      return;
 8003e42:	e2c4      	b.n	80043ce <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8117 	beq.w	800407c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e5e:	4b85      	ldr	r3, [pc, #532]	@ (8004074 <HAL_UART_IRQHandler+0x298>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 810a 	beq.w	800407c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d011      	beq.n	8003e98 <HAL_UART_IRQHandler+0xbc>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2201      	movs	r2, #1
 8003e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xec>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d011      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x11c>
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2a:	f043 0208 	orr.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <HAL_UART_IRQHandler+0x18a>
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8230 	beq.w	80043d2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04f      	beq.n	800405e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 ff66 	bl	8004e90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d141      	bne.n	8004056 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800400a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1d9      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	2b00      	cmp	r3, #0
 8004024:	d013      	beq.n	800404e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402a:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <HAL_UART_IRQHandler+0x29c>)
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fb96 	bl	8001764 <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004048:	4610      	mov	r0, r2
 800404a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e00f      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9de 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e00b      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9da 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e007      	b.n	800406e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9d6 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800406c:	e1b1      	b.n	80043d2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	bf00      	nop
    return;
 8004070:	e1af      	b.n	80043d2 <HAL_UART_IRQHandler+0x5f6>
 8004072:	bf00      	nop
 8004074:	04000120 	.word	0x04000120
 8004078:	08004f59 	.word	0x08004f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 816a 	bne.w	800435a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8163 	beq.w	800435a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 815c 	beq.w	800435a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	f040 80d4 	bne.w	8004262 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80ad 	beq.w	800422a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040da:	429a      	cmp	r2, r3
 80040dc:	f080 80a5 	bcs.w	800422a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 8086 	bne.w	8004208 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800412a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1da      	bne.n	80040fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800416a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800416e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800417c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e1      	bne.n	8004146 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d8:	f023 0310 	bic.w	r3, r3, #16
 80041dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e4      	bne.n	80041c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fa70 	bl	80016e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800421a:	b29b      	uxth	r3, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 fcde 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004228:	e0d5      	b.n	80043d6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004234:	429a      	cmp	r2, r3
 8004236:	f040 80ce 	bne.w	80043d6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	f040 80c5 	bne.w	80043d6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f001 fcc2 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
      return;
 8004260:	e0b9      	b.n	80043d6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800426e:	b29b      	uxth	r3, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80ab 	beq.w	80043da <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a6 	beq.w	80043da <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e4      	bne.n	800428e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	623b      	str	r3, [r7, #32]
   return(result);
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e3      	bne.n	80042c4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60fb      	str	r3, [r7, #12]
   return(result);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	617b      	str	r3, [r7, #20]
   return(result);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e4      	bne.n	8004310 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 fc46 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004358:	e03f      	b.n	80043da <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <HAL_UART_IRQHandler+0x5a8>
 8004366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800437a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 ffe7 	bl	8005350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004382:	e02d      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01c      	beq.n	80043de <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
    }
    return;
 80043ac:	e017      	b.n	80043de <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <HAL_UART_IRQHandler+0x604>
 80043ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fddc 	bl	8004f84 <UART_EndTransmit_IT>
    return;
 80043cc:	e008      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
      return;
 80043ce:	bf00      	nop
 80043d0:	e006      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
    return;
 80043d2:	bf00      	nop
 80043d4:	e004      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
      return;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
      return;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <HAL_UART_IRQHandler+0x604>
    return;
 80043de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043e0:	37e8      	adds	r7, #232	@ 0xe8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004428:	b08a      	sub	sp, #40	@ 0x28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4313      	orrs	r3, r2
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4ba4      	ldr	r3, [pc, #656]	@ (80046e4 <UART_SetConfig+0x2c0>)
 8004454:	4013      	ands	r3, r2
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800445c:	430b      	orrs	r3, r1
 800445e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a99      	ldr	r2, [pc, #612]	@ (80046e8 <UART_SetConfig+0x2c4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448c:	4313      	orrs	r3, r2
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a90      	ldr	r2, [pc, #576]	@ (80046ec <UART_SetConfig+0x2c8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d126      	bne.n	80044fc <UART_SetConfig+0xd8>
 80044ae:	4b90      	ldr	r3, [pc, #576]	@ (80046f0 <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d81b      	bhi.n	80044f4 <UART_SetConfig+0xd0>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0xa0>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044ed 	.word	0x080044ed
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044da:	e116      	b.n	800470a <UART_SetConfig+0x2e6>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e2:	e112      	b.n	800470a <UART_SetConfig+0x2e6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ea:	e10e      	b.n	800470a <UART_SetConfig+0x2e6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f2:	e10a      	b.n	800470a <UART_SetConfig+0x2e6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fa:	e106      	b.n	800470a <UART_SetConfig+0x2e6>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7c      	ldr	r2, [pc, #496]	@ (80046f4 <UART_SetConfig+0x2d0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d138      	bne.n	8004578 <UART_SetConfig+0x154>
 8004506:	4b7a      	ldr	r3, [pc, #488]	@ (80046f0 <UART_SetConfig+0x2cc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d82d      	bhi.n	8004570 <UART_SetConfig+0x14c>
 8004514:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <UART_SetConfig+0xf8>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004551 	.word	0x08004551
 8004520:	08004571 	.word	0x08004571
 8004524:	08004571 	.word	0x08004571
 8004528:	08004571 	.word	0x08004571
 800452c:	08004561 	.word	0x08004561
 8004530:	08004571 	.word	0x08004571
 8004534:	08004571 	.word	0x08004571
 8004538:	08004571 	.word	0x08004571
 800453c:	08004559 	.word	0x08004559
 8004540:	08004571 	.word	0x08004571
 8004544:	08004571 	.word	0x08004571
 8004548:	08004571 	.word	0x08004571
 800454c:	08004569 	.word	0x08004569
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e0d8      	b.n	800470a <UART_SetConfig+0x2e6>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e0d4      	b.n	800470a <UART_SetConfig+0x2e6>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004566:	e0d0      	b.n	800470a <UART_SetConfig+0x2e6>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456e:	e0cc      	b.n	800470a <UART_SetConfig+0x2e6>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e0c8      	b.n	800470a <UART_SetConfig+0x2e6>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a5e      	ldr	r2, [pc, #376]	@ (80046f8 <UART_SetConfig+0x2d4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d125      	bne.n	80045ce <UART_SetConfig+0x1aa>
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d016      	beq.n	80045be <UART_SetConfig+0x19a>
 8004590:	2b30      	cmp	r3, #48	@ 0x30
 8004592:	d818      	bhi.n	80045c6 <UART_SetConfig+0x1a2>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d00a      	beq.n	80045ae <UART_SetConfig+0x18a>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d814      	bhi.n	80045c6 <UART_SetConfig+0x1a2>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <UART_SetConfig+0x182>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d008      	beq.n	80045b6 <UART_SetConfig+0x192>
 80045a4:	e00f      	b.n	80045c6 <UART_SetConfig+0x1a2>
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ac:	e0ad      	b.n	800470a <UART_SetConfig+0x2e6>
 80045ae:	2302      	movs	r3, #2
 80045b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b4:	e0a9      	b.n	800470a <UART_SetConfig+0x2e6>
 80045b6:	2304      	movs	r3, #4
 80045b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045bc:	e0a5      	b.n	800470a <UART_SetConfig+0x2e6>
 80045be:	2308      	movs	r3, #8
 80045c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c4:	e0a1      	b.n	800470a <UART_SetConfig+0x2e6>
 80045c6:	2310      	movs	r3, #16
 80045c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045cc:	e09d      	b.n	800470a <UART_SetConfig+0x2e6>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4a      	ldr	r2, [pc, #296]	@ (80046fc <UART_SetConfig+0x2d8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d125      	bne.n	8004624 <UART_SetConfig+0x200>
 80045d8:	4b45      	ldr	r3, [pc, #276]	@ (80046f0 <UART_SetConfig+0x2cc>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e4:	d016      	beq.n	8004614 <UART_SetConfig+0x1f0>
 80045e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045e8:	d818      	bhi.n	800461c <UART_SetConfig+0x1f8>
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d00a      	beq.n	8004604 <UART_SetConfig+0x1e0>
 80045ee:	2b80      	cmp	r3, #128	@ 0x80
 80045f0:	d814      	bhi.n	800461c <UART_SetConfig+0x1f8>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <UART_SetConfig+0x1d8>
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	d008      	beq.n	800460c <UART_SetConfig+0x1e8>
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x1f8>
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004602:	e082      	b.n	800470a <UART_SetConfig+0x2e6>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460a:	e07e      	b.n	800470a <UART_SetConfig+0x2e6>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004612:	e07a      	b.n	800470a <UART_SetConfig+0x2e6>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e076      	b.n	800470a <UART_SetConfig+0x2e6>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e072      	b.n	800470a <UART_SetConfig+0x2e6>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a35      	ldr	r2, [pc, #212]	@ (8004700 <UART_SetConfig+0x2dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d12a      	bne.n	8004684 <UART_SetConfig+0x260>
 800462e:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <UART_SetConfig+0x2cc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463c:	d01a      	beq.n	8004674 <UART_SetConfig+0x250>
 800463e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0x258>
 8004644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004648:	d00c      	beq.n	8004664 <UART_SetConfig+0x240>
 800464a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464e:	d815      	bhi.n	800467c <UART_SetConfig+0x258>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0x238>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004658:	d008      	beq.n	800466c <UART_SetConfig+0x248>
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x258>
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e052      	b.n	800470a <UART_SetConfig+0x2e6>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e04e      	b.n	800470a <UART_SetConfig+0x2e6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e04a      	b.n	800470a <UART_SetConfig+0x2e6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e046      	b.n	800470a <UART_SetConfig+0x2e6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e042      	b.n	800470a <UART_SetConfig+0x2e6>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <UART_SetConfig+0x2c4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d13a      	bne.n	8004704 <UART_SetConfig+0x2e0>
 800468e:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <UART_SetConfig+0x2cc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800469c:	d01a      	beq.n	80046d4 <UART_SetConfig+0x2b0>
 800469e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a2:	d81b      	bhi.n	80046dc <UART_SetConfig+0x2b8>
 80046a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a8:	d00c      	beq.n	80046c4 <UART_SetConfig+0x2a0>
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ae:	d815      	bhi.n	80046dc <UART_SetConfig+0x2b8>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <UART_SetConfig+0x298>
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x2a8>
 80046ba:	e00f      	b.n	80046dc <UART_SetConfig+0x2b8>
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e022      	b.n	800470a <UART_SetConfig+0x2e6>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e01e      	b.n	800470a <UART_SetConfig+0x2e6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e01a      	b.n	800470a <UART_SetConfig+0x2e6>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e016      	b.n	800470a <UART_SetConfig+0x2e6>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e012      	b.n	800470a <UART_SetConfig+0x2e6>
 80046e4:	efff69f3 	.word	0xefff69f3
 80046e8:	40008000 	.word	0x40008000
 80046ec:	40013800 	.word	0x40013800
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40004400 	.word	0x40004400
 80046f8:	40004800 	.word	0x40004800
 80046fc:	40004c00 	.word	0x40004c00
 8004700:	40005000 	.word	0x40005000
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a9f      	ldr	r2, [pc, #636]	@ (800498c <UART_SetConfig+0x568>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d17a      	bne.n	800480a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004714:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004718:	2b08      	cmp	r3, #8
 800471a:	d824      	bhi.n	8004766 <UART_SetConfig+0x342>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <UART_SetConfig+0x300>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004749 	.word	0x08004749
 8004728:	08004767 	.word	0x08004767
 800472c:	08004751 	.word	0x08004751
 8004730:	08004767 	.word	0x08004767
 8004734:	08004757 	.word	0x08004757
 8004738:	08004767 	.word	0x08004767
 800473c:	08004767 	.word	0x08004767
 8004740:	08004767 	.word	0x08004767
 8004744:	0800475f 	.word	0x0800475f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7fd ffe8 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e010      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004750:	4b8f      	ldr	r3, [pc, #572]	@ (8004990 <UART_SetConfig+0x56c>)
 8004752:	61fb      	str	r3, [r7, #28]
        break;
 8004754:	e00d      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004756:	f7fd ff49 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800475a:	61f8      	str	r0, [r7, #28]
        break;
 800475c:	e009      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004762:	61fb      	str	r3, [r7, #28]
        break;
 8004764:	e005      	b.n	8004772 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80fb 	beq.w	8004970 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	429a      	cmp	r2, r3
 8004788:	d305      	bcc.n	8004796 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	429a      	cmp	r2, r3
 8004794:	d903      	bls.n	800479e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800479c:	e0e8      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2200      	movs	r2, #0
 80047a2:	461c      	mov	r4, r3
 80047a4:	4615      	mov	r5, r2
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	022b      	lsls	r3, r5, #8
 80047b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b4:	0222      	lsls	r2, r4, #8
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	6849      	ldr	r1, [r1, #4]
 80047ba:	0849      	lsrs	r1, r1, #1
 80047bc:	2000      	movs	r0, #0
 80047be:	4688      	mov	r8, r1
 80047c0:	4681      	mov	r9, r0
 80047c2:	eb12 0a08 	adds.w	sl, r2, r8
 80047c6:	eb43 0b09 	adc.w	fp, r3, r9
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d8:	4650      	mov	r0, sl
 80047da:	4659      	mov	r1, fp
 80047dc:	f7fc f8ea 	bl	80009b4 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4613      	mov	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ee:	d308      	bcc.n	8004802 <UART_SetConfig+0x3de>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d204      	bcs.n	8004802 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	e0b6      	b.n	8004970 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004808:	e0b2      	b.n	8004970 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004812:	d15e      	bne.n	80048d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004814:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004818:	2b08      	cmp	r3, #8
 800481a:	d828      	bhi.n	800486e <UART_SetConfig+0x44a>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x400>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fd ff68 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 800484c:	61f8      	str	r0, [r7, #28]
        break;
 800484e:	e014      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fd ff7a 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004854:	61f8      	str	r0, [r7, #28]
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b4d      	ldr	r3, [pc, #308]	@ (8004990 <UART_SetConfig+0x56c>)
 800485a:	61fb      	str	r3, [r7, #28]
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fd fec5 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004862:	61f8      	str	r0, [r7, #28]
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486a:	61fb      	str	r3, [r7, #28]
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d077      	beq.n	8004970 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d916      	bls.n	80048ca <UART_SetConfig+0x4a6>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a2:	d212      	bcs.n	80048ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	8afb      	ldrh	r3, [r7, #22]
 80048bc:	4313      	orrs	r3, r2
 80048be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	8afa      	ldrh	r2, [r7, #22]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e052      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d0:	e04e      	b.n	8004970 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d827      	bhi.n	800492a <UART_SetConfig+0x506>
 80048da:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0x4bc>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fd ff0a 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004908:	61f8      	str	r0, [r7, #28]
        break;
 800490a:	e014      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7fd ff1c 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004910:	61f8      	str	r0, [r7, #28]
        break;
 8004912:	e010      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b1e      	ldr	r3, [pc, #120]	@ (8004990 <UART_SetConfig+0x56c>)
 8004916:	61fb      	str	r3, [r7, #28]
        break;
 8004918:	e00d      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fd fe67 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800491e:	61f8      	str	r0, [r7, #28]
        break;
 8004920:	e009      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004926:	61fb      	str	r3, [r7, #28]
        break;
 8004928:	e005      	b.n	8004936 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004934:	bf00      	nop
    }

    if (pclk != 0U)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d019      	beq.n	8004970 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085a      	lsrs	r2, r3, #1
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d909      	bls.n	800496a <UART_SetConfig+0x546>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800495c:	d205      	bcs.n	800496a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e002      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800497c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004980:	4618      	mov	r0, r3
 8004982:	3728      	adds	r7, #40	@ 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40008000 	.word	0x40008000
 8004990:	00f42400 	.word	0x00f42400

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	@ 0x60
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc fd10 	bl	800150c <HAL_GetTick>
 8004aec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12e      	bne.n	8004b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f88c 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e062      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d149      	bne.n	8004bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f856 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03c      	beq.n	8004bfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bd4:	61fa      	str	r2, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	617b      	str	r3, [r7, #20]
   return(result);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e011      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3758      	adds	r7, #88	@ 0x58
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	e04f      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d04b      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fc fc63 	bl	800150c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e04e      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d037      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d034      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d031      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d110      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8ff 	bl	8004e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2208      	movs	r2, #8
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e029      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d111      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8e5 	bl	8004e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0a0      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b097      	sub	sp, #92	@ 0x5c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d36:	d10e      	bne.n	8004d56 <UART_Start_Receive_IT+0x52>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <UART_Start_Receive_IT+0x48>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d4a:	e02d      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	22ff      	movs	r2, #255	@ 0xff
 8004d50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d54:	e028      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <UART_Start_Receive_IT+0x76>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <UART_Start_Receive_IT+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22ff      	movs	r2, #255	@ 0xff
 8004d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d6e:	e01b      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	227f      	movs	r2, #127	@ 0x7f
 8004d74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d78:	e016      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d82:	d10d      	bne.n	8004da0 <UART_Start_Receive_IT+0x9c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <UART_Start_Receive_IT+0x92>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	227f      	movs	r2, #127	@ 0x7f
 8004d90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d94:	e008      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	223f      	movs	r2, #63	@ 0x3f
 8004d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d9e:	e003      	b.n	8004da8 <UART_Start_Receive_IT+0xa4>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2222      	movs	r2, #34	@ 0x22
 8004db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004dda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df4:	d107      	bne.n	8004e06 <UART_Start_Receive_IT+0x102>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a21      	ldr	r2, [pc, #132]	@ (8004e88 <UART_Start_Receive_IT+0x184>)
 8004e02:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e04:	e002      	b.n	8004e0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a20      	ldr	r2, [pc, #128]	@ (8004e8c <UART_Start_Receive_IT+0x188>)
 8004e0a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_Start_Receive_IT+0x110>
 8004e46:	e018      	b.n	8004e7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	613b      	str	r3, [r7, #16]
   return(result);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f043 0320 	orr.w	r3, r3, #32
 8004e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e66:	623b      	str	r3, [r7, #32]
 8004e68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	69f9      	ldr	r1, [r7, #28]
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e6      	bne.n	8004e48 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	375c      	adds	r7, #92	@ 0x5c
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	08005195 	.word	0x08005195
 8004e8c:	08004fd9 	.word	0x08004fd9

08004e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b095      	sub	sp, #84	@ 0x54
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d118      	bne.n	8004f38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f023 0310 	bic.w	r3, r3, #16
 8004f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6979      	ldr	r1, [r7, #20]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	613b      	str	r3, [r7, #16]
   return(result);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4c:	bf00      	nop
 8004f4e:	3754      	adds	r7, #84	@ 0x54
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fa4a 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fa0c 	bl	80043e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd0:	bf00      	nop
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b09c      	sub	sp, #112	@ 0x70
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fe6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff0:	2b22      	cmp	r3, #34	@ 0x22
 8004ff2:	f040 80be 	bne.w	8005172 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ffc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005000:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005004:	b2d9      	uxtb	r1, r3
 8005006:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	400a      	ands	r2, r1
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 80a3 	bne.w	8005186 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800504e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800505e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005060:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800506c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e6      	bne.n	8005040 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	667b      	str	r3, [r7, #100]	@ 0x64
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005092:	647a      	str	r2, [r7, #68]	@ 0x44
 8005094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a34      	ldr	r2, [pc, #208]	@ (8005190 <UART_RxISR_8BIT+0x1b8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d01f      	beq.n	8005104 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	623b      	str	r3, [r7, #32]
   return(result);
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005108:	2b01      	cmp	r3, #1
 800510a:	d12e      	bne.n	800516a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	617b      	str	r3, [r7, #20]
   return(result);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b10      	cmp	r3, #16
 8005150:	d103      	bne.n	800515a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2210      	movs	r2, #16
 8005158:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fd3e 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005168:	e00d      	b.n	8005186 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff f946 	bl	80043fc <HAL_UART_RxCpltCallback>
}
 8005170:	e009      	b.n	8005186 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	8b1b      	ldrh	r3, [r3, #24]
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	b292      	uxth	r2, r2
 8005184:	831a      	strh	r2, [r3, #24]
}
 8005186:	bf00      	nop
 8005188:	3770      	adds	r7, #112	@ 0x70
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40008000 	.word	0x40008000

08005194 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b09c      	sub	sp, #112	@ 0x70
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ac:	2b22      	cmp	r3, #34	@ 0x22
 80051ae:	f040 80be 	bne.w	800532e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80051c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80051c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80051ca:	4013      	ands	r3, r2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 80a3 	bne.w	8005342 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800520a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005210:	667b      	str	r3, [r7, #100]	@ 0x64
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800521a:	657b      	str	r3, [r7, #84]	@ 0x54
 800521c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005220:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	663b      	str	r3, [r7, #96]	@ 0x60
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800524e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a34      	ldr	r2, [pc, #208]	@ (800534c <UART_RxISR_16BIT+0x1b8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01f      	beq.n	80052c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	61fb      	str	r3, [r7, #28]
   return(result);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e6      	bne.n	800528e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d12e      	bne.n	8005326 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60bb      	str	r3, [r7, #8]
   return(result);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	613b      	str	r3, [r7, #16]
   return(result);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e6      	bne.n	80052ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d103      	bne.n	8005316 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2210      	movs	r2, #16
 8005314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fc60 	bl	8005be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005324:	e00d      	b.n	8005342 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff f868 	bl	80043fc <HAL_UART_RxCpltCallback>
}
 800532c:	e009      	b.n	8005342 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	8b1b      	ldrh	r3, [r3, #24]
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	b292      	uxth	r2, r2
 8005340:	831a      	strh	r2, [r3, #24]
}
 8005342:	bf00      	nop
 8005344:	3770      	adds	r7, #112	@ 0x70
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40008000 	.word	0x40008000

08005350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	@ 0x30
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537e:	2b20      	cmp	r3, #32
 8005380:	d13b      	bne.n	80053fa <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e034      	b.n	80053fc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fcad 	bl	8004d04 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d11d      	bne.n	80053ee <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	617b      	str	r3, [r7, #20]
   return(result);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f043 0310 	orr.w	r3, r3, #16
 80053ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053da:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80053ec:	e002      	b.n	80053f4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80053f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053f8:	e000      	b.n	80053fc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	@ 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <sendData>:
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0
};

void sendData(uint8_t *data, int size) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
    // Enable transmission by setting DE and RE pins high
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 800540e:	2201      	movs	r2, #1
 8005410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005418:	f7fc fb90 	bl	8001b3c <HAL_GPIO_WritePin>

    // Transmit data
    uint16_t crc = crc16(data, size);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f828 	bl	8005478 <crc16>
 8005428:	4603      	mov	r3, r0
 800542a:	81fb      	strh	r3, [r7, #14]
    data[size] = crc & 0xFF;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	89fa      	ldrh	r2, [r7, #14]
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
    data[size + 1] = (crc >> 8) & 0xFF;
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	b299      	uxth	r1, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	b2ca      	uxtb	r2, r1
 8005448:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data, size + 2, 1000);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	3302      	adds	r3, #2
 8005450:	b29a      	uxth	r2, r3
 8005452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4806      	ldr	r0, [pc, #24]	@ (8005474 <sendData+0x70>)
 800545a:	f7fe fc35 	bl	8003cc8 <HAL_UART_Transmit>

    // Disable transmission by setting DE and RE pins low
    HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 800545e:	2200      	movs	r2, #0
 8005460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005468:	f7fc fb68 	bl	8001b3c <HAL_GPIO_WritePin>

}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000178 	.word	0x20000178

08005478 <crc16>:


uint16_t crc16(const uint8_t *data, uint16_t len) {
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8005484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005488:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 800548a:	2300      	movs	r3, #0
 800548c:	81bb      	strh	r3, [r7, #12]
 800548e:	e022      	b.n	80054d6 <crc16+0x5e>
        crc ^= data[i];
 8005490:	89bb      	ldrh	r3, [r7, #12]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	89fb      	ldrh	r3, [r7, #14]
 800549c:	4053      	eors	r3, r2
 800549e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80054a0:	2300      	movs	r3, #0
 80054a2:	72fb      	strb	r3, [r7, #11]
 80054a4:	e011      	b.n	80054ca <crc16+0x52>
            if (crc & 0x0001) {
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <crc16+0x74>)
 80054b8:	4053      	eors	r3, r2
 80054ba:	81fb      	strh	r3, [r7, #14]
 80054bc:	e002      	b.n	80054c4 <crc16+0x4c>
            } else {
                crc >>= 1;
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	3301      	adds	r3, #1
 80054c8:	72fb      	strb	r3, [r7, #11]
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d9ea      	bls.n	80054a6 <crc16+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 80054d0:	89bb      	ldrh	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	81bb      	strh	r3, [r7, #12]
 80054d6:	89ba      	ldrh	r2, [r7, #12]
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d3d8      	bcc.n	8005490 <crc16+0x18>
            }
        }
    }
    return crc;
 80054de:	89fb      	ldrh	r3, [r7, #14]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	ffffa001 	.word	0xffffa001

080054f0 <modbusException>:

void modbusException(uint8_t exceptionCode) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
    TxData[0] = RxData[0];
 80054fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <modbusException+0x38>)
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <modbusException+0x3c>)
 8005500:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1] | 0x80;
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <modbusException+0x38>)
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <modbusException+0x3c>)
 800550e:	705a      	strb	r2, [r3, #1]
    TxData[2] = exceptionCode;
 8005510:	4a06      	ldr	r2, [pc, #24]	@ (800552c <modbusException+0x3c>)
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	7093      	strb	r3, [r2, #2]
    sendData(TxData, 3);
 8005516:	2103      	movs	r1, #3
 8005518:	4804      	ldr	r0, [pc, #16]	@ (800552c <modbusException+0x3c>)
 800551a:	f7ff ff73 	bl	8005404 <sendData>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000250 	.word	0x20000250
 800552c:	20000350 	.word	0x20000350

08005530 <readHoldingRegs>:

uint8_t readHoldingRegs(uint16_t startAddr, uint16_t numRegs) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	460a      	mov	r2, r1
 800553a:	80fb      	strh	r3, [r7, #6]
 800553c:	4613      	mov	r3, r2
 800553e:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_HOLDING_REGISTERS)) {
 8005540:	88bb      	ldrh	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <readHoldingRegs+0x1c>
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	2b32      	cmp	r3, #50	@ 0x32
 800554a:	d904      	bls.n	8005556 <readHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 800554c:	2003      	movs	r0, #3
 800554e:	f7ff ffcf 	bl	80054f0 <modbusException>
        return 0;
 8005552:	2300      	movs	r3, #0
 8005554:	e04c      	b.n	80055f0 <readHoldingRegs+0xc0>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	88bb      	ldrh	r3, [r7, #4]
 800555a:	4413      	add	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_HOLDING_REGISTERS) {
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	2b32      	cmp	r3, #50	@ 0x32
 8005566:	d904      	bls.n	8005572 <readHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005568:	2002      	movs	r0, #2
 800556a:	f7ff ffc1 	bl	80054f0 <modbusException>
        return 0;
 800556e:	2300      	movs	r3, #0
 8005570:	e03e      	b.n	80055f0 <readHoldingRegs+0xc0>
    }

    memset(TxData, '\0', 256);
 8005572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005576:	2100      	movs	r1, #0
 8005578:	481f      	ldr	r0, [pc, #124]	@ (80055f8 <readHoldingRegs+0xc8>)
 800557a:	f000 fcf1 	bl	8005f60 <memset>
    TxData[0] = Slave_ID;
 800557e:	4b1f      	ldr	r3, [pc, #124]	@ (80055fc <readHoldingRegs+0xcc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b1c      	ldr	r3, [pc, #112]	@ (80055f8 <readHoldingRegs+0xc8>)
 8005586:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005588:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <readHoldingRegs+0xd0>)
 800558a:	785a      	ldrb	r2, [r3, #1]
 800558c:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <readHoldingRegs+0xc8>)
 800558e:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8005590:	88bb      	ldrh	r3, [r7, #4]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b17      	ldr	r3, [pc, #92]	@ (80055f8 <readHoldingRegs+0xc8>)
 800559a:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 800559c:	2303      	movs	r3, #3
 800559e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	e01b      	b.n	80055de <readHoldingRegs+0xae>
        TxData[indx++] = (Holding_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	4a16      	ldr	r2, [pc, #88]	@ (8005604 <readHoldingRegs+0xd4>)
 80055aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	b299      	uxth	r1, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	617a      	str	r2, [r7, #20]
 80055b8:	b2c9      	uxtb	r1, r1
 80055ba:	4a0f      	ldr	r2, [pc, #60]	@ (80055f8 <readHoldingRegs+0xc8>)
 80055bc:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Holding_Registers_Database[startAddr] & 0xFF;        // Low byte
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	4a10      	ldr	r2, [pc, #64]	@ (8005604 <readHoldingRegs+0xd4>)
 80055c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	617a      	str	r2, [r7, #20]
 80055cc:	b2c9      	uxtb	r1, r1
 80055ce:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <readHoldingRegs+0xc8>)
 80055d0:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	3301      	adds	r3, #1
 80055d6:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	3301      	adds	r3, #1
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	88bb      	ldrh	r3, [r7, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	dbdf      	blt.n	80055a6 <readHoldingRegs+0x76>
    }

    sendData(TxData, indx);
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	4803      	ldr	r0, [pc, #12]	@ (80055f8 <readHoldingRegs+0xc8>)
 80055ea:	f7ff ff0b 	bl	8005404 <sendData>
    return 1;
 80055ee:	2301      	movs	r3, #1
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000350 	.word	0x20000350
 80055fc:	20000000 	.word	0x20000000
 8005600:	20000250 	.word	0x20000250
 8005604:	20000010 	.word	0x20000010

08005608 <readInputRegs>:

uint8_t readInputRegs(uint16_t startAddr, uint16_t numRegs) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	460a      	mov	r2, r1
 8005612:	80fb      	strh	r3, [r7, #6]
 8005614:	4613      	mov	r3, r2
 8005616:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > MAX_INPUT_REGISTERS)) {
 8005618:	88bb      	ldrh	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <readInputRegs+0x1c>
 800561e:	88bb      	ldrh	r3, [r7, #4]
 8005620:	2b32      	cmp	r3, #50	@ 0x32
 8005622:	d904      	bls.n	800562e <readInputRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 8005624:	2003      	movs	r0, #3
 8005626:	f7ff ff63 	bl	80054f0 <modbusException>
        return 0;
 800562a:	2300      	movs	r3, #0
 800562c:	e04c      	b.n	80056c8 <readInputRegs+0xc0>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	88bb      	ldrh	r3, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	81fb      	strh	r3, [r7, #14]
    if (endAddr > MAX_INPUT_REGISTERS) {
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	2b32      	cmp	r3, #50	@ 0x32
 800563e:	d904      	bls.n	800564a <readInputRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005640:	2002      	movs	r0, #2
 8005642:	f7ff ff55 	bl	80054f0 <modbusException>
        return 0;
 8005646:	2300      	movs	r3, #0
 8005648:	e03e      	b.n	80056c8 <readInputRegs+0xc0>
    }

    memset(TxData, '\0', 256);
 800564a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800564e:	2100      	movs	r1, #0
 8005650:	481f      	ldr	r0, [pc, #124]	@ (80056d0 <readInputRegs+0xc8>)
 8005652:	f000 fc85 	bl	8005f60 <memset>
    TxData[0] = Slave_ID;
 8005656:	4b1f      	ldr	r3, [pc, #124]	@ (80056d4 <readInputRegs+0xcc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b1c      	ldr	r3, [pc, #112]	@ (80056d0 <readInputRegs+0xc8>)
 800565e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005660:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <readInputRegs+0xd0>)
 8005662:	785a      	ldrb	r2, [r3, #1]
 8005664:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <readInputRegs+0xc8>)
 8005666:	705a      	strb	r2, [r3, #1]
    TxData[2] = numRegs * 2;
 8005668:	88bb      	ldrh	r3, [r7, #4]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <readInputRegs+0xc8>)
 8005672:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005674:	2303      	movs	r3, #3
 8005676:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numRegs; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	e01b      	b.n	80056b6 <readInputRegs+0xae>
        TxData[indx++] = (Input_Registers_Database[startAddr] >> 8) & 0xFF; // High byte
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	4a16      	ldr	r2, [pc, #88]	@ (80056dc <readInputRegs+0xd4>)
 8005682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b299      	uxth	r1, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	617a      	str	r2, [r7, #20]
 8005690:	b2c9      	uxtb	r1, r1
 8005692:	4a0f      	ldr	r2, [pc, #60]	@ (80056d0 <readInputRegs+0xc8>)
 8005694:	54d1      	strb	r1, [r2, r3]
        TxData[indx++] = Input_Registers_Database[startAddr] & 0xFF;        // Low byte
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <readInputRegs+0xd4>)
 800569a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	617a      	str	r2, [r7, #20]
 80056a4:	b2c9      	uxtb	r1, r1
 80056a6:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <readInputRegs+0xc8>)
 80056a8:	54d1      	strb	r1, [r2, r3]
        startAddr++;
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	3301      	adds	r3, #1
 80056ae:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < numRegs; i++) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3301      	adds	r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	88bb      	ldrh	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	dbdf      	blt.n	800567e <readInputRegs+0x76>
    }

    sendData(TxData, indx);
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	4803      	ldr	r0, [pc, #12]	@ (80056d0 <readInputRegs+0xc8>)
 80056c2:	f7ff fe9f 	bl	8005404 <sendData>
    return 1;
 80056c6:	2301      	movs	r3, #1
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000350 	.word	0x20000350
 80056d4:	20000000 	.word	0x20000000
 80056d8:	20000250 	.word	0x20000250
 80056dc:	20000074 	.word	0x20000074

080056e0 <readCoils>:


uint8_t readCoils(uint16_t startAddr, uint16_t numCoils) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	460a      	mov	r2, r1
 80056ea:	80fb      	strh	r3, [r7, #6]
 80056ec:	4613      	mov	r3, r2
 80056ee:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 2000)) {
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <readCoils+0x1e>
 80056f6:	88bb      	ldrh	r3, [r7, #4]
 80056f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80056fc:	d904      	bls.n	8005708 <readCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 80056fe:	2003      	movs	r0, #3
 8005700:	f7ff fef6 	bl	80054f0 <modbusException>
        return 0;
 8005704:	2300      	movs	r3, #0
 8005706:	e082      	b.n	800580e <readCoils+0x12e>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	817b      	strh	r3, [r7, #10]
    if (endAddr > 199) {
 8005714:	897b      	ldrh	r3, [r7, #10]
 8005716:	2bc7      	cmp	r3, #199	@ 0xc7
 8005718:	d904      	bls.n	8005724 <readCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800571a:	2002      	movs	r0, #2
 800571c:	f7ff fee8 	bl	80054f0 <modbusException>
        return 0;
 8005720:	2300      	movs	r3, #0
 8005722:	e074      	b.n	800580e <readCoils+0x12e>
    }

    memset(TxData, '\0', 256);
 8005724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005728:	2100      	movs	r1, #0
 800572a:	483b      	ldr	r0, [pc, #236]	@ (8005818 <readCoils+0x138>)
 800572c:	f000 fc18 	bl	8005f60 <memset>
    TxData[0] = Slave_ID;
 8005730:	4b3a      	ldr	r3, [pc, #232]	@ (800581c <readCoils+0x13c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <readCoils+0x138>)
 8005738:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 800573a:	4b39      	ldr	r3, [pc, #228]	@ (8005820 <readCoils+0x140>)
 800573c:	785a      	ldrb	r2, [r3, #1]
 800573e:	4b36      	ldr	r3, [pc, #216]	@ (8005818 <readCoils+0x138>)
 8005740:	705a      	strb	r2, [r3, #1]
    TxData[2] = (numCoils / 8) + ((numCoils % 8) > 0 ? 1 : 0);
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	08db      	lsrs	r3, r3, #3
 8005746:	b29b      	uxth	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	88ba      	ldrh	r2, [r7, #4]
 800574c:	f002 0207 	and.w	r2, r2, #7
 8005750:	b292      	uxth	r2, r2
 8005752:	2a00      	cmp	r2, #0
 8005754:	bf14      	ite	ne
 8005756:	2201      	movne	r2, #1
 8005758:	2200      	moveq	r2, #0
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	4413      	add	r3, r2
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b2d      	ldr	r3, [pc, #180]	@ (8005818 <readCoils+0x138>)
 8005762:	709a      	strb	r2, [r3, #2]

    int indx = 3;
 8005764:	2303      	movs	r3, #3
 8005766:	61fb      	str	r3, [r7, #28]
    int startByte = startAddr / 8;
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	b29b      	uxth	r3, r3
 800576e:	61bb      	str	r3, [r7, #24]
    uint16_t bitPosition = startAddr % 8;
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	82fb      	strh	r3, [r7, #22]
    int indxPosition = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < numCoils; i++) {
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e033      	b.n	80057ea <readCoils+0x10a>
        TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) & 0x01) << indxPosition;
 8005782:	4a25      	ldr	r2, [pc, #148]	@ (8005818 <readCoils+0x138>)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	b25a      	sxtb	r2, r3
 800578c:	4925      	ldr	r1, [pc, #148]	@ (8005824 <readCoils+0x144>)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	440b      	add	r3, r1
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
 8005796:	8afb      	ldrh	r3, [r7, #22]
 8005798:	fa41 f303 	asr.w	r3, r1, r3
 800579c:	f003 0101 	and.w	r1, r3, #1
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b25b      	sxtb	r3, r3
 80057ac:	b2d9      	uxtb	r1, r3
 80057ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005818 <readCoils+0x138>)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	460a      	mov	r2, r1
 80057b6:	701a      	strb	r2, [r3, #0]
        indxPosition++;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
        bitPosition++;
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	3301      	adds	r3, #1
 80057c2:	82fb      	strh	r3, [r7, #22]
        if (indxPosition > 7) {
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b07      	cmp	r3, #7
 80057c8:	dd04      	ble.n	80057d4 <readCoils+0xf4>
            indxPosition = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
            indx++;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
        }
        if (bitPosition > 7) {
 80057d4:	8afb      	ldrh	r3, [r7, #22]
 80057d6:	2b07      	cmp	r3, #7
 80057d8:	d904      	bls.n	80057e4 <readCoils+0x104>
            bitPosition = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	82fb      	strh	r3, [r7, #22]
            startByte++;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numCoils; i++) {
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	88bb      	ldrh	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	dbc7      	blt.n	8005782 <readCoils+0xa2>
        }
    }

    if (numCoils % 8 != 0) indx++;
 80057f2:	88bb      	ldrh	r3, [r7, #4]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <readCoils+0x124>
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3301      	adds	r3, #1
 8005802:	61fb      	str	r3, [r7, #28]
    sendData(TxData, indx);
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	4804      	ldr	r0, [pc, #16]	@ (8005818 <readCoils+0x138>)
 8005808:	f7ff fdfc 	bl	8005404 <sendData>
    return 1;
 800580c:	2301      	movs	r3, #1
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000350 	.word	0x20000350
 800581c:	20000000 	.word	0x20000000
 8005820:	20000250 	.word	0x20000250
 8005824:	200000d8 	.word	0x200000d8

08005828 <writeSingleHoldingReg>:

uint8_t writeSingleHoldingReg(uint16_t writeAddr, uint16_t regValue) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	460a      	mov	r2, r1
 8005832:	80fb      	strh	r3, [r7, #6]
 8005834:	4613      	mov	r3, r2
 8005836:	80bb      	strh	r3, [r7, #4]
    if (writeAddr >= MAX_HOLDING_REGISTERS) {
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b31      	cmp	r3, #49	@ 0x31
 800583c:	d904      	bls.n	8005848 <writeSingleHoldingReg+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 800583e:	2002      	movs	r0, #2
 8005840:	f7ff fe56 	bl	80054f0 <modbusException>
        return 0;
 8005844:	2300      	movs	r3, #0
 8005846:	e022      	b.n	800588e <writeSingleHoldingReg+0x66>
    }

    Holding_Registers_Database[writeAddr] = regValue;
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	4913      	ldr	r1, [pc, #76]	@ (8005898 <writeSingleHoldingReg+0x70>)
 800584c:	88ba      	ldrh	r2, [r7, #4]
 800584e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Construct the response message
    TxData[0] = Slave_ID;
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <writeSingleHoldingReg+0x74>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b11      	ldr	r3, [pc, #68]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 800585a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 800585c:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <writeSingleHoldingReg+0x7c>)
 800585e:	785a      	ldrb	r2, [r3, #1]
 8005860:	4b0f      	ldr	r3, [pc, #60]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 8005862:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005864:	4b0f      	ldr	r3, [pc, #60]	@ (80058a4 <writeSingleHoldingReg+0x7c>)
 8005866:	789a      	ldrb	r2, [r3, #2]
 8005868:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 800586a:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <writeSingleHoldingReg+0x7c>)
 800586e:	78da      	ldrb	r2, [r3, #3]
 8005870:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 8005872:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <writeSingleHoldingReg+0x7c>)
 8005876:	791a      	ldrb	r2, [r3, #4]
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 800587a:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <writeSingleHoldingReg+0x7c>)
 800587e:	795a      	ldrb	r2, [r3, #5]
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 8005882:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005884:	2106      	movs	r1, #6
 8005886:	4806      	ldr	r0, [pc, #24]	@ (80058a0 <writeSingleHoldingReg+0x78>)
 8005888:	f7ff fdbc 	bl	8005404 <sendData>
    return 1;
 800588c:	2301      	movs	r3, #1
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000010 	.word	0x20000010
 800589c:	20000000 	.word	0x20000000
 80058a0:	20000350 	.word	0x20000350
 80058a4:	20000250 	.word	0x20000250

080058a8 <writeHoldingRegs>:


uint8_t writeHoldingRegs(uint16_t startAddr, uint16_t numRegs, uint16_t *data) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	603a      	str	r2, [r7, #0]
 80058b2:	80fb      	strh	r3, [r7, #6]
 80058b4:	460b      	mov	r3, r1
 80058b6:	80bb      	strh	r3, [r7, #4]
    if ((numRegs < 1) || (numRegs > 123)) {
 80058b8:	88bb      	ldrh	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <writeHoldingRegs+0x1c>
 80058be:	88bb      	ldrh	r3, [r7, #4]
 80058c0:	2b7b      	cmp	r3, #123	@ 0x7b
 80058c2:	d904      	bls.n	80058ce <writeHoldingRegs+0x26>
        modbusException(ILLEGAL_DATA_VALUE);
 80058c4:	2003      	movs	r0, #3
 80058c6:	f7ff fe13 	bl	80054f0 <modbusException>
        return 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e041      	b.n	8005952 <writeHoldingRegs+0xaa>
    }

    uint16_t endAddr = startAddr + numRegs - 1;
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	88bb      	ldrh	r3, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	817b      	strh	r3, [r7, #10]
    if (endAddr > 49) {
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	2b31      	cmp	r3, #49	@ 0x31
 80058de:	d904      	bls.n	80058ea <writeHoldingRegs+0x42>
        modbusException(ILLEGAL_DATA_ADDRESS);
 80058e0:	2002      	movs	r0, #2
 80058e2:	f7ff fe05 	bl	80054f0 <modbusException>
        return 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e033      	b.n	8005952 <writeHoldingRegs+0xaa>
    }

    for (int i = 0; i < numRegs; i++) {
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e00e      	b.n	800590e <writeHoldingRegs+0x66>
        Holding_Registers_Database[startAddr++] = data[i];
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	441a      	add	r2, r3
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	80f9      	strh	r1, [r7, #6]
 80058fe:	4619      	mov	r1, r3
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	4b16      	ldr	r3, [pc, #88]	@ (800595c <writeHoldingRegs+0xb4>)
 8005904:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for (int i = 0; i < numRegs; i++) {
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	88bb      	ldrh	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	429a      	cmp	r2, r3
 8005914:	dbec      	blt.n	80058f0 <writeHoldingRegs+0x48>
    }

    // Construct the response message
    TxData[0] = Slave_ID;
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <writeHoldingRegs+0xb8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <writeHoldingRegs+0xbc>)
 800591e:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005920:	4b11      	ldr	r3, [pc, #68]	@ (8005968 <writeHoldingRegs+0xc0>)
 8005922:	785a      	ldrb	r2, [r3, #1]
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <writeHoldingRegs+0xbc>)
 8005926:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005928:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <writeHoldingRegs+0xc0>)
 800592a:	789a      	ldrb	r2, [r3, #2]
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <writeHoldingRegs+0xbc>)
 800592e:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005930:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <writeHoldingRegs+0xc0>)
 8005932:	78da      	ldrb	r2, [r3, #3]
 8005934:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <writeHoldingRegs+0xbc>)
 8005936:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005938:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <writeHoldingRegs+0xc0>)
 800593a:	791a      	ldrb	r2, [r3, #4]
 800593c:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <writeHoldingRegs+0xbc>)
 800593e:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005940:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <writeHoldingRegs+0xc0>)
 8005942:	795a      	ldrb	r2, [r3, #5]
 8005944:	4b07      	ldr	r3, [pc, #28]	@ (8005964 <writeHoldingRegs+0xbc>)
 8005946:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005948:	2106      	movs	r1, #6
 800594a:	4806      	ldr	r0, [pc, #24]	@ (8005964 <writeHoldingRegs+0xbc>)
 800594c:	f7ff fd5a 	bl	8005404 <sendData>
    return 1;
 8005950:	2301      	movs	r3, #1
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000010 	.word	0x20000010
 8005960:	20000000 	.word	0x20000000
 8005964:	20000350 	.word	0x20000350
 8005968:	20000250 	.word	0x20000250

0800596c <writeSingleCoil>:




uint8_t writeSingleCoil(uint16_t writeAddr, uint8_t coilValue) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	460a      	mov	r2, r1
 8005976:	80fb      	strh	r3, [r7, #6]
 8005978:	4613      	mov	r3, r2
 800597a:	717b      	strb	r3, [r7, #5]
    if (writeAddr > 199) {
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005980:	d904      	bls.n	800598c <writeSingleCoil+0x20>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005982:	2002      	movs	r0, #2
 8005984:	f7ff fdb4 	bl	80054f0 <modbusException>
        return 0;
 8005988:	2300      	movs	r3, #0
 800598a:	e05e      	b.n	8005a4a <writeSingleCoil+0xde>
    }

    int bytePos = writeAddr / 8;
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	b29b      	uxth	r3, r3
 8005992:	60fb      	str	r3, [r7, #12]
    int bitPos = writeAddr % 8;
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60bb      	str	r3, [r7, #8]

    if ((coilValue == 0xFF) && (RxData[5] == 0x00)) {
 800599c:	797b      	ldrb	r3, [r7, #5]
 800599e:	2bff      	cmp	r3, #255	@ 0xff
 80059a0:	d116      	bne.n	80059d0 <writeSingleCoil+0x64>
 80059a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a54 <writeSingleCoil+0xe8>)
 80059a4:	795b      	ldrb	r3, [r3, #5]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d112      	bne.n	80059d0 <writeSingleCoil+0x64>
        Coils_Database[bytePos] |= (1 << bitPos);
 80059aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <writeSingleCoil+0xec>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b25a      	sxtb	r2, r3
 80059b4:	2101      	movs	r1, #1
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	b2d9      	uxtb	r1, r3
 80059c4:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <writeSingleCoil+0xec>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	460a      	mov	r2, r1
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e020      	b.n	8005a12 <writeSingleCoil+0xa6>
    } else if ((coilValue == 0x00) && (RxData[5] == 0x00)) {
 80059d0:	797b      	ldrb	r3, [r7, #5]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d118      	bne.n	8005a08 <writeSingleCoil+0x9c>
 80059d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <writeSingleCoil+0xe8>)
 80059d8:	795b      	ldrb	r3, [r3, #5]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d114      	bne.n	8005a08 <writeSingleCoil+0x9c>
        Coils_Database[bytePos] &= ~(1 << bitPos);
 80059de:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <writeSingleCoil+0xec>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b25a      	sxtb	r2, r3
 80059e8:	2101      	movs	r1, #1
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	b25b      	sxtb	r3, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	4013      	ands	r3, r2
 80059f8:	b25b      	sxtb	r3, r3
 80059fa:	b2d9      	uxtb	r1, r3
 80059fc:	4a16      	ldr	r2, [pc, #88]	@ (8005a58 <writeSingleCoil+0xec>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	460a      	mov	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e004      	b.n	8005a12 <writeSingleCoil+0xa6>
    } else {
        modbusException(ILLEGAL_DATA_VALUE);
 8005a08:	2003      	movs	r0, #3
 8005a0a:	f7ff fd71 	bl	80054f0 <modbusException>
        return 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e01b      	b.n	8005a4a <writeSingleCoil+0xde>
    }

    TxData[0] = Slave_ID;
 8005a12:	4b12      	ldr	r3, [pc, #72]	@ (8005a5c <writeSingleCoil+0xf0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a1a:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <writeSingleCoil+0xe8>)
 8005a1e:	785a      	ldrb	r2, [r3, #1]
 8005a20:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a22:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <writeSingleCoil+0xe8>)
 8005a26:	789a      	ldrb	r2, [r3, #2]
 8005a28:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a2a:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005a2c:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <writeSingleCoil+0xe8>)
 8005a2e:	78da      	ldrb	r2, [r3, #3]
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a32:	70da      	strb	r2, [r3, #3]
    TxData[4] = coilValue;  // Changed to coilValue
 8005a34:	4a0a      	ldr	r2, [pc, #40]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a36:	797b      	ldrb	r3, [r7, #5]
 8005a38:	7113      	strb	r3, [r2, #4]
    TxData[5] = 0x00;        // Assuming the sixth byte is always 0x00 in this function
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	715a      	strb	r2, [r3, #5]

    sendData(TxData, 6);
 8005a40:	2106      	movs	r1, #6
 8005a42:	4807      	ldr	r0, [pc, #28]	@ (8005a60 <writeSingleCoil+0xf4>)
 8005a44:	f7ff fcde 	bl	8005404 <sendData>
    return 1;
 8005a48:	2301      	movs	r3, #1
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000250 	.word	0x20000250
 8005a58:	200000d8 	.word	0x200000d8
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20000350 	.word	0x20000350

08005a64 <writeMultiCoils>:


uint8_t writeMultiCoils(uint16_t startAddr, uint16_t numCoils, uint8_t *coilData) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	@ 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	603a      	str	r2, [r7, #0]
 8005a6e:	80fb      	strh	r3, [r7, #6]
 8005a70:	460b      	mov	r3, r1
 8005a72:	80bb      	strh	r3, [r7, #4]
    if ((numCoils < 1) || (numCoils > 1968)) {
 8005a74:	88bb      	ldrh	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <writeMultiCoils+0x1e>
 8005a7a:	88bb      	ldrh	r3, [r7, #4]
 8005a7c:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8005a80:	d904      	bls.n	8005a8c <writeMultiCoils+0x28>
        modbusException(ILLEGAL_DATA_VALUE);
 8005a82:	2003      	movs	r0, #3
 8005a84:	f7ff fd34 	bl	80054f0 <modbusException>
        return 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e09e      	b.n	8005bca <writeMultiCoils+0x166>
    }

    uint16_t endAddr = startAddr + numCoils - 1;
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	88bb      	ldrh	r3, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	827b      	strh	r3, [r7, #18]
    if (endAddr > 199) {
 8005a98:	8a7b      	ldrh	r3, [r7, #18]
 8005a9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a9c:	d904      	bls.n	8005aa8 <writeMultiCoils+0x44>
        modbusException(ILLEGAL_DATA_ADDRESS);
 8005a9e:	2002      	movs	r0, #2
 8005aa0:	f7ff fd26 	bl	80054f0 <modbusException>
        return 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e090      	b.n	8005bca <writeMultiCoils+0x166>
    }

    int startByte = startAddr / 8;
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t bitPosition = startAddr % 8;
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
    int byteCount = numCoils / 8 + ((numCoils % 8) > 0 ? 1 : 0);
 8005ab8:	88bb      	ldrh	r3, [r7, #4]
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	88bb      	ldrh	r3, [r7, #4]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
    int indx = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < byteCount; i++) {
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e052      	b.n	8005b86 <writeMultiCoils+0x122>
        for (int j = 0; j < 8; j++) {
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e047      	b.n	8005b76 <writeMultiCoils+0x112>
            if (indx >= numCoils) break;
 8005ae6:	88bb      	ldrh	r3, [r7, #4]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	da47      	bge.n	8005b7e <writeMultiCoils+0x11a>
            if ((coilData[i] >> j) & 1) {
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	fa42 f303 	asr.w	r3, r2, r3
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <writeMultiCoils+0xc8>
                Coils_Database[startByte] |= (1 << bitPosition);
 8005b06:	4a33      	ldr	r2, [pc, #204]	@ (8005bd4 <writeMultiCoils+0x170>)
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b25a      	sxtb	r2, r3
 8005b10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b12:	2101      	movs	r1, #1
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	b25b      	sxtb	r3, r3
 8005b1e:	b2d9      	uxtb	r1, r3
 8005b20:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd4 <writeMultiCoils+0x170>)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	4413      	add	r3, r2
 8005b26:	460a      	mov	r2, r1
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e013      	b.n	8005b54 <writeMultiCoils+0xf0>
            } else {
                Coils_Database[startByte] &= ~(1 << bitPosition);
 8005b2c:	4a29      	ldr	r2, [pc, #164]	@ (8005bd4 <writeMultiCoils+0x170>)
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	4413      	add	r3, r2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b25a      	sxtb	r2, r3
 8005b36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	4013      	ands	r3, r2
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	b2d9      	uxtb	r1, r3
 8005b4a:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <writeMultiCoils+0x170>)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	4413      	add	r3, r2
 8005b50:	460a      	mov	r2, r1
 8005b52:	701a      	strb	r2, [r3, #0]
            }
            bitPosition++;
 8005b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b56:	3301      	adds	r3, #1
 8005b58:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (bitPosition > 7) {
 8005b5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	d904      	bls.n	8005b6a <writeMultiCoils+0x106>
                bitPosition = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	847b      	strh	r3, [r7, #34]	@ 0x22
                startByte++;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	3301      	adds	r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            indx++;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < 8; j++) {
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3301      	adds	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	ddb4      	ble.n	8005ae6 <writeMultiCoils+0x82>
 8005b7c:	e000      	b.n	8005b80 <writeMultiCoils+0x11c>
            if (indx >= numCoils) break;
 8005b7e:	bf00      	nop
    for (int i = 0; i < byteCount; i++) {
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	dba8      	blt.n	8005ae0 <writeMultiCoils+0x7c>
        }
    }

    // Construct the response message
    TxData[0] = Slave_ID;
 8005b8e:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <writeMultiCoils+0x174>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <writeMultiCoils+0x178>)
 8005b96:	701a      	strb	r2, [r3, #0]
    TxData[1] = RxData[1];
 8005b98:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <writeMultiCoils+0x17c>)
 8005b9a:	785a      	ldrb	r2, [r3, #1]
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <writeMultiCoils+0x178>)
 8005b9e:	705a      	strb	r2, [r3, #1]
    TxData[2] = RxData[2];
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <writeMultiCoils+0x17c>)
 8005ba2:	789a      	ldrb	r2, [r3, #2]
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <writeMultiCoils+0x178>)
 8005ba6:	709a      	strb	r2, [r3, #2]
    TxData[3] = RxData[3];
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <writeMultiCoils+0x17c>)
 8005baa:	78da      	ldrb	r2, [r3, #3]
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <writeMultiCoils+0x178>)
 8005bae:	70da      	strb	r2, [r3, #3]
    TxData[4] = RxData[4];
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <writeMultiCoils+0x17c>)
 8005bb2:	791a      	ldrb	r2, [r3, #4]
 8005bb4:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <writeMultiCoils+0x178>)
 8005bb6:	711a      	strb	r2, [r3, #4]
    TxData[5] = RxData[5];
 8005bb8:	4b09      	ldr	r3, [pc, #36]	@ (8005be0 <writeMultiCoils+0x17c>)
 8005bba:	795a      	ldrb	r2, [r3, #5]
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <writeMultiCoils+0x178>)
 8005bbe:	715a      	strb	r2, [r3, #5]

    // Send the response message
    sendData(TxData, 6);
 8005bc0:	2106      	movs	r1, #6
 8005bc2:	4806      	ldr	r0, [pc, #24]	@ (8005bdc <writeMultiCoils+0x178>)
 8005bc4:	f7ff fc1e 	bl	8005404 <sendData>
    return 1;
 8005bc8:	2301      	movs	r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3728      	adds	r7, #40	@ 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200000d8 	.word	0x200000d8
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	20000350 	.word	0x20000350
 8005be0:	20000250 	.word	0x20000250

08005be4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a69      	ldr	r2, [pc, #420]	@ (8005d9c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f040 80cd 	bne.w	8005d96 <HAL_UARTEx_RxEventCallback+0x1b2>

        if (Size < 1 || Size > RX_BUFFER_SIZE) {
 8005bfc:	887b      	ldrh	r3, [r7, #2]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_UARTEx_RxEventCallback+0x26>
 8005c02:	887b      	ldrh	r3, [r7, #2]
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c08:	d906      	bls.n	8005c18 <HAL_UARTEx_RxEventCallback+0x34>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c0e:	4964      	ldr	r1, [pc, #400]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fba7 	bl	8005364 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005c16:	e0be      	b.n	8005d96 <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Disable DE and RE pins for reception
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c22:	f7fb ff8b 	bl	8001b3c <HAL_GPIO_WritePin>

        // Check Slave ID
        if (RxData[0] != Slave_ID) {
 8005c26:	4b5e      	ldr	r3, [pc, #376]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8005da4 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d006      	beq.n	8005c42 <HAL_UARTEx_RxEventCallback+0x5e>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c38:	4959      	ldr	r1, [pc, #356]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fb92 	bl	8005364 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005c40:	e0a9      	b.n	8005d96 <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Calculate and Check CRC
        uint16_t crc = ((RxData[Size - 1] << 8) | RxData[Size - 2]);
 8005c42:	887b      	ldrh	r3, [r7, #2]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	4a56      	ldr	r2, [pc, #344]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c48:	5cd3      	ldrb	r3, [r2, r3]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	b21a      	sxth	r2, r3
 8005c4e:	887b      	ldrh	r3, [r7, #2]
 8005c50:	3b02      	subs	r3, #2
 8005c52:	4953      	ldr	r1, [pc, #332]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c54:	5ccb      	ldrb	r3, [r1, r3]
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	b21b      	sxth	r3, r3
 8005c5c:	81fb      	strh	r3, [r7, #14]
        if (crc != crc16(RxData, Size - 2)) {
 8005c5e:	887b      	ldrh	r3, [r7, #2]
 8005c60:	3b02      	subs	r3, #2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	484e      	ldr	r0, [pc, #312]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c68:	f7ff fc06 	bl	8005478 <crc16>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d006      	beq.n	8005c84 <HAL_UARTEx_RxEventCallback+0xa0>
            // Restart UART reception for next packet
            HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c7a:	4949      	ldr	r1, [pc, #292]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fb71 	bl	8005364 <HAL_UARTEx_ReceiveToIdle_IT>
            return;
 8005c82:	e088      	b.n	8005d96 <HAL_UARTEx_RxEventCallback+0x1b2>
        }

        // Extract start address and number of registers/coils
        uint16_t startAddr = ((RxData[2] << 8) | RxData[3]);
 8005c84:	4b46      	ldr	r3, [pc, #280]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c86:	789b      	ldrb	r3, [r3, #2]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	b21a      	sxth	r2, r3
 8005c8c:	4b44      	ldr	r3, [pc, #272]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	b21b      	sxth	r3, r3
 8005c92:	4313      	orrs	r3, r2
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	81bb      	strh	r3, [r7, #12]
        uint16_t numRegs = ((RxData[4] << 8) | RxData[5]);
 8005c98:	4b41      	ldr	r3, [pc, #260]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b21a      	sxth	r2, r3
 8005ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005ca2:	795b      	ldrb	r3, [r3, #5]
 8005ca4:	b21b      	sxth	r3, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	817b      	strh	r3, [r7, #10]

        // Enable DE and RE pins before transmitting response
        HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_SET);
 8005cac:	2201      	movs	r2, #1
 8005cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005cb6:	f7fb ff41 	bl	8001b3c <HAL_GPIO_WritePin>

        // Handle the Modbus function codes
        switch (RxData[1]) {
 8005cba:	4b39      	ldr	r3, [pc, #228]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d85e      	bhi.n	8005d82 <HAL_UARTEx_RxEventCallback+0x19e>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <HAL_UARTEx_RxEventCallback+0xe8>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d83 	.word	0x08005d83
 8005cd4:	08005d1b 	.word	0x08005d1b
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d37 	.word	0x08005d37
 8005ce0:	08005d47 	.word	0x08005d47
 8005ce4:	08005d83 	.word	0x08005d83
 8005ce8:	08005d83 	.word	0x08005d83
 8005cec:	08005d83 	.word	0x08005d83
 8005cf0:	08005d83 	.word	0x08005d83
 8005cf4:	08005d83 	.word	0x08005d83
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005d83 	.word	0x08005d83
 8005d00:	08005d83 	.word	0x08005d83
 8005d04:	08005d67 	.word	0x08005d67
 8005d08:	08005d75 	.word	0x08005d75
            case 1:  // Function code for reading coils
                readCoils(startAddr, numRegs);
 8005d0c:	897a      	ldrh	r2, [r7, #10]
 8005d0e:	89bb      	ldrh	r3, [r7, #12]
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fce4 	bl	80056e0 <readCoils>
                break;
 8005d18:	e037      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 3:  // Function code for reading holding registers
                readHoldingRegs(startAddr, numRegs);
 8005d1a:	897a      	ldrh	r2, [r7, #10]
 8005d1c:	89bb      	ldrh	r3, [r7, #12]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fc05 	bl	8005530 <readHoldingRegs>
                break;
 8005d26:	e030      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 4:  // Function code for reading input registers
                readInputRegs(startAddr, numRegs);
 8005d28:	897a      	ldrh	r2, [r7, #10]
 8005d2a:	89bb      	ldrh	r3, [r7, #12]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fc6a 	bl	8005608 <readInputRegs>
                break;
 8005d34:	e029      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 5:  // Function code for writing a single coil
                writeSingleCoil(startAddr, RxData[4]);
 8005d36:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005d38:	791a      	ldrb	r2, [r3, #4]
 8005d3a:	89bb      	ldrh	r3, [r7, #12]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fe14 	bl	800596c <writeSingleCoil>
                break;
 8005d44:	e021      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 6:  // Function code for writing a single holding register
                writeSingleHoldingReg(startAddr, (RxData[4] << 8) | RxData[5]);
 8005d46:	4b16      	ldr	r3, [pc, #88]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	b21a      	sxth	r2, r3
 8005d4e:	4b14      	ldr	r3, [pc, #80]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005d50:	795b      	ldrb	r3, [r3, #5]
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b21b      	sxth	r3, r3
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	89bb      	ldrh	r3, [r7, #12]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fd62 	bl	8005828 <writeSingleHoldingReg>
                break;
 8005d64:	e011      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 15: // Function code for writing multiple coils
                writeMultiCoils(startAddr, numRegs, &RxData[7]);
 8005d66:	8979      	ldrh	r1, [r7, #10]
 8005d68:	89bb      	ldrh	r3, [r7, #12]
 8005d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8005da8 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fe79 	bl	8005a64 <writeMultiCoils>
                break;
 8005d72:	e00a      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            case 16: // Function code for writing holding registers
                writeHoldingRegs(startAddr, numRegs, (uint16_t *)&RxData[6]);
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	4a0c      	ldr	r2, [pc, #48]	@ (8005dac <HAL_UARTEx_RxEventCallback+0x1c8>)
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fd94 	bl	80058a8 <writeHoldingRegs>
                break;
 8005d80:	e003      	b.n	8005d8a <HAL_UARTEx_RxEventCallback+0x1a6>
            default:
                modbusException(ILLEGAL_FUNCTION);
 8005d82:	2001      	movs	r0, #1
 8005d84:	f7ff fbb4 	bl	80054f0 <modbusException>
                break;
 8005d88:	bf00      	nop
        }

        // Restart UART reception
        HAL_UARTEx_ReceiveToIdle_IT(huart, RxData, RX_BUFFER_SIZE);
 8005d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d8e:	4904      	ldr	r1, [pc, #16]	@ (8005da0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fae7 	bl	8005364 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40013800 	.word	0x40013800
 8005da0:	20000250 	.word	0x20000250
 8005da4:	20000000 	.word	0x20000000
 8005da8:	20000257 	.word	0x20000257
 8005dac:	20000256 	.word	0x20000256

08005db0 <microDelay>:
extern int prev_rpm;

// External TIM handle declared in main.c
extern TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <microDelay+0x30>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8005dc2:	bf00      	nop
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <microDelay+0x30>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d3f9      	bcc.n	8005dc4 <microDelay+0x14>
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2000012c 	.word	0x2000012c

08005de4 <setAcceleration>:

void setMaxSpeed(float speed) {
    _maxSpeed = speed;
}

void setAcceleration(float acceleration) {
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	ed87 0a01 	vstr	s0, [r7, #4]
    _acceleration = acceleration;
 8005dee:	4a04      	ldr	r2, [pc, #16]	@ (8005e00 <setAcceleration+0x1c>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000454 	.word	0x20000454

08005e04 <setRPM>:

void setRPM(volatile float rpm, int steps) {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e0e:	6038      	str	r0, [r7, #0]
    volatile float speed = (rpm * steps) / 60.0f;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e22:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005e40 <setRPM+0x3c>
 8005e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e2a:	edc7 7a03 	vstr	s15, [r7, #12]
    _maxSpeed = speed;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <setRPM+0x40>)
 8005e32:	6013      	str	r3, [r2, #0]

}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	42700000 	.word	0x42700000
 8005e44:	20000458 	.word	0x20000458

08005e48 <computeNewSpeed>:

unsigned long computeNewSpeed() {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
    if (_speed < _maxSpeed) {
 8005e4c:	4b34      	ldr	r3, [pc, #208]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e4e:	ed93 7a00 	vldr	s14, [r3]
 8005e52:	4b34      	ldr	r3, [pc, #208]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005e54:	edd3 7a00 	vldr	s15, [r3]
 8005e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	d51a      	bpl.n	8005e98 <computeNewSpeed+0x50>
        _speed += _acceleration;
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <computeNewSpeed+0xe0>)
 8005e64:	ed93 7a00 	vldr	s14, [r3]
 8005e68:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e72:	4b2b      	ldr	r3, [pc, #172]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e74:	edc3 7a00 	vstr	s15, [r3]
        if (_speed > _maxSpeed) {
 8005e78:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e7a:	ed93 7a00 	vldr	s14, [r3]
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005e80:	edd3 7a00 	vldr	s15, [r3]
 8005e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8c:	dd29      	ble.n	8005ee2 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 8005e8e:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a23      	ldr	r2, [pc, #140]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e024      	b.n	8005ee2 <computeNewSpeed+0x9a>
        }
    }
    else if (_speed > _maxSpeed) {
 8005e98:	4b21      	ldr	r3, [pc, #132]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005e9a:	ed93 7a00 	vldr	s14, [r3]
 8005e9e:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005ea0:	edd3 7a00 	vldr	s15, [r3]
 8005ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	dd19      	ble.n	8005ee2 <computeNewSpeed+0x9a>
        _speed -= _acceleration;
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <computeNewSpeed+0xe0>)
 8005eb0:	edd3 7a00 	vldr	s15, [r3]
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005eb6:	ed93 7a00 	vldr	s14, [r3]
 8005eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005ec0:	edc3 7a00 	vstr	s15, [r3]
        if (_speed < _maxSpeed) {
 8005ec4:	4b16      	ldr	r3, [pc, #88]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005ec6:	ed93 7a00 	vldr	s14, [r3]
 8005eca:	4b16      	ldr	r3, [pc, #88]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	d503      	bpl.n	8005ee2 <computeNewSpeed+0x9a>
            _speed = _maxSpeed;
 8005eda:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <computeNewSpeed+0xdc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a10      	ldr	r2, [pc, #64]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005ee0:	6013      	str	r3, [r2, #0]
        }
    }

    // Calculate step interval in microseconds
    _stepInterval = (long)(1000000.0 / _speed);
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <computeNewSpeed+0xd8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa fad2 	bl	8000490 <__aeabi_f2d>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	a109      	add	r1, pc, #36	@ (adr r1, 8005f18 <computeNewSpeed+0xd0>)
 8005ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef6:	f7fa fc4d 	bl	8000794 <__aeabi_ddiv>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	f7fa fd2f 	bl	8000964 <__aeabi_d2iz>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a08      	ldr	r2, [pc, #32]	@ (8005f2c <computeNewSpeed+0xe4>)
 8005f0a:	6013      	str	r3, [r2, #0]

    return _stepInterval;
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <computeNewSpeed+0xe4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	f3af 8000 	nop.w
 8005f18:	00000000 	.word	0x00000000
 8005f1c:	412e8480 	.word	0x412e8480
 8005f20:	20000450 	.word	0x20000450
 8005f24:	20000458 	.word	0x20000458
 8005f28:	20000454 	.word	0x20000454
 8005f2c:	2000045c 	.word	0x2000045c

08005f30 <motorStop>:
//        HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
//        microDelay(stepInterval / 2);  // Low pulse duration
//    }
//}

void motorStop(MotorConfig* motor) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

    // Ensure the step pin is low
    HAL_GPIO_WritePin(motor->STEP_PORT, motor->STEP_PIN, GPIO_PIN_RESET);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6898      	ldr	r0, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	899b      	ldrh	r3, [r3, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	4619      	mov	r1, r3
 8005f44:	f7fb fdfa 	bl	8001b3c <HAL_GPIO_WritePin>

    // Optionally, you can set the direction pin to a known state (e.g., low)
    HAL_GPIO_WritePin(motor->DIR_PORT, motor->DIR_PIN, GPIO_PIN_RESET);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	889b      	ldrh	r3, [r3, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f7fb fdf2 	bl	8001b3c <HAL_GPIO_WritePin>


}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa8 <__libc_init_array+0x38>)
 8005f74:	4c0d      	ldr	r4, [pc, #52]	@ (8005fac <__libc_init_array+0x3c>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	4d0b      	ldr	r5, [pc, #44]	@ (8005fb0 <__libc_init_array+0x40>)
 8005f82:	4c0c      	ldr	r4, [pc, #48]	@ (8005fb4 <__libc_init_array+0x44>)
 8005f84:	f000 f818 	bl	8005fb8 <_init>
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	08006030 	.word	0x08006030
 8005fac:	08006030 	.word	0x08006030
 8005fb0:	08006030 	.word	0x08006030
 8005fb4:	08006034 	.word	0x08006034

08005fb8 <_init>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr

08005fc4 <_fini>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr
