
Probe_Pad_slave_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b15c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800b2f0  0800b2f0  0000c2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f0  0800b7f0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f8  0800b7f8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001d4  0800b9d4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800b9d4  0000d5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011164  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f8  00000000  00000000  0001e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00020a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b45  00000000  00000000  00021908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028874  00000000  00000000  0002244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110b9  00000000  00000000  0004acc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcd51  00000000  00000000  0005bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c8  00000000  00000000  00158b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2d4 	.word	0x0800b2d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b2d4 	.word	0x0800b2d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_write>:
 * @param ptr: pointer to the string to write
 * @param len: length of the string to write
 * @return number of characters written
 */
int _write(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
    int i = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x2a>
        ITM_SendChar((*ptr++));		// Sends each character to ITM for debugging
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffc7 	bl	8000fe4 <ITM_SendChar>
    for (i = 0; i < len; i++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x16>

    return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <calculateCRC>:
 * @param length: length of the data
 * @return computed CRC value
 */

uint16_t calculateCRC(uint8_t *data, uint16_t length)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // Initial CRC value
 800107a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107e:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	81bb      	strh	r3, [r7, #12]
 8001084:	e026      	b.n	80010d4 <calculateCRC+0x66>
    {
        crc ^= data[i]; // XOR byte into the least significant byte of CRC
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	4053      	eors	r3, r2
 8001094:	81fb      	strh	r3, [r7, #14]

        for (uint8_t j = 0; j < 8; j++)
 8001096:	2300      	movs	r3, #0
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	e015      	b.n	80010c8 <calculateCRC+0x5a>
        {
            if (crc & 0x0001) // If the LSB is set
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <calculateCRC+0x4e>
            {
                crc >>= 1;       // Shift right
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;   // Apply the polynomial
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80010b2:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80010b6:	43db      	mvns	r3, r3
 80010b8:	81fb      	strh	r3, [r7, #14]
 80010ba:	e002      	b.n	80010c2 <calculateCRC+0x54>
            }
            else
            {
                crc >>= 1; // Just shift right
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	085b      	lsrs	r3, r3, #1
 80010c0:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++)
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	3301      	adds	r3, #1
 80010c6:	72fb      	strb	r3, [r7, #11]
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d9e6      	bls.n	800109c <calculateCRC+0x2e>
    for (uint16_t i = 0; i < length; i++)
 80010ce:	89bb      	ldrh	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	81bb      	strh	r3, [r7, #12]
 80010d4:	89ba      	ldrh	r2, [r7, #12]
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3d4      	bcc.n	8001086 <calculateCRC+0x18>
            }
        }
    }

    return crc; // Return the CRC value
 80010dc:	89fb      	ldrh	r3, [r7, #14]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <processImuData>:

void processImuData()
{
 80010ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f0:	b090      	sub	sp, #64	@ 0x40
 80010f2:	af08      	add	r7, sp, #32
	// Extract Quaternion Data
	int16_t modbusRegisters[4];
	for (int i = 0; i < 4; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	e017      	b.n	800112a <processImuData+0x3e>
		modbusRegisters[i] = (int16_t)((imuData[2 + (i * 2)] << 8) | imuData[3 + (i * 2)]);
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4a50      	ldr	r2, [pc, #320]	@ (8001244 <processImuData+0x158>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3303      	adds	r3, #3
 800110e:	494d      	ldr	r1, [pc, #308]	@ (8001244 <processImuData+0x158>)
 8001110:	5ccb      	ldrb	r3, [r1, r3]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	3320      	adds	r3, #32
 800111e:	443b      	add	r3, r7
 8001120:	f823 2c20 	strh.w	r2, [r3, #-32]
	for (int i = 0; i < 4; i++) {
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	3301      	adds	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b03      	cmp	r3, #3
 800112e:	dde4      	ble.n	80010fa <processImuData+0xe>
	}

	// Validate CRC
	uint16_t calculatedCRC = calculateCRC(imuData, 10);
 8001130:	210a      	movs	r1, #10
 8001132:	4844      	ldr	r0, [pc, #272]	@ (8001244 <processImuData+0x158>)
 8001134:	f7ff ff9b 	bl	800106e <calculateCRC>
 8001138:	4603      	mov	r3, r0
 800113a:	837b      	strh	r3, [r7, #26]
	uint16_t receivedCRC = (imuData[10]) | (imuData[11] << 8);
 800113c:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <processImuData+0x158>)
 800113e:	7a9b      	ldrb	r3, [r3, #10]
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b40      	ldr	r3, [pc, #256]	@ (8001244 <processImuData+0x158>)
 8001144:	7adb      	ldrb	r3, [r3, #11]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	833b      	strh	r3, [r7, #24]

	if (calculatedCRC != receivedCRC) {
 8001150:	8b7a      	ldrh	r2, [r7, #26]
 8001152:	8b3b      	ldrh	r3, [r7, #24]
 8001154:	429a      	cmp	r2, r3
 8001156:	d014      	beq.n	8001182 <processImuData+0x96>
		snprintf(uart_buffer, sizeof(uart_buffer), "CRC mismatch: Expected 0x%04X, Got 0x%04X\n", calculatedCRC, receivedCRC);
 8001158:	8b7a      	ldrh	r2, [r7, #26]
 800115a:	8b3b      	ldrh	r3, [r7, #24]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4613      	mov	r3, r2
 8001160:	4a39      	ldr	r2, [pc, #228]	@ (8001248 <processImuData+0x15c>)
 8001162:	2164      	movs	r1, #100	@ 0x64
 8001164:	4839      	ldr	r0, [pc, #228]	@ (800124c <processImuData+0x160>)
 8001166:	f006 fc49 	bl	80079fc <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800116a:	4838      	ldr	r0, [pc, #224]	@ (800124c <processImuData+0x160>)
 800116c:	f7ff f880 	bl	8000270 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	4934      	ldr	r1, [pc, #208]	@ (800124c <processImuData+0x160>)
 800117a:	4835      	ldr	r0, [pc, #212]	@ (8001250 <processImuData+0x164>)
 800117c:	f004 f974 	bl	8005468 <HAL_UART_Transmit>
 8001180:	e05b      	b.n	800123a <processImuData+0x14e>
		return;
	}

	 // Convert Quaternion Data to Floats
	        float w = modbusRegisters[0] / 30000.0f;
 8001182:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118e:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001254 <processImuData+0x168>
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	edc7 7a05 	vstr	s15, [r7, #20]
	        float x = modbusRegisters[1] / 30000.0f;
 800119a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a6:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001254 <processImuData+0x168>
 80011aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ae:	edc7 7a04 	vstr	s15, [r7, #16]
	        float y = modbusRegisters[2] / 30000.0f;
 80011b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001254 <processImuData+0x168>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	edc7 7a03 	vstr	s15, [r7, #12]
	        float z = modbusRegisters[3] / 30000.0f;
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001254 <processImuData+0x168>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]

	// Debug Output Quaternion Data
	snprintf(uart_buffer, sizeof(uart_buffer), "%.4f,%.4f,%.4f,%.4f\r\n", w, x, y, z);
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff f9b0 	bl	8000548 <__aeabi_f2d>
 80011e8:	4604      	mov	r4, r0
 80011ea:	460d      	mov	r5, r1
 80011ec:	6938      	ldr	r0, [r7, #16]
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4680      	mov	r8, r0
 80011f4:	4689      	mov	r9, r1
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff f9a6 	bl	8000548 <__aeabi_f2d>
 80011fc:	4682      	mov	sl, r0
 80011fe:	468b      	mov	fp, r1
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f7ff f9a1 	bl	8000548 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800120e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001212:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001216:	e9cd 4500 	strd	r4, r5, [sp]
 800121a:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <processImuData+0x16c>)
 800121c:	2164      	movs	r1, #100	@ 0x64
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <processImuData+0x160>)
 8001220:	f006 fbec 	bl	80079fc <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001224:	4809      	ldr	r0, [pc, #36]	@ (800124c <processImuData+0x160>)
 8001226:	f7ff f823 	bl	8000270 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	4906      	ldr	r1, [pc, #24]	@ (800124c <processImuData+0x160>)
 8001234:	4806      	ldr	r0, [pc, #24]	@ (8001250 <processImuData+0x164>)
 8001236:	f004 f917 	bl	8005468 <HAL_UART_Transmit>
}
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001242:	bf00      	nop
 8001244:	20000270 	.word	0x20000270
 8001248:	0800b2f0 	.word	0x0800b2f0
 800124c:	2000020c 	.word	0x2000020c
 8001250:	20000374 	.word	0x20000374
 8001254:	46ea6000 	.word	0x46ea6000
 8001258:	0800b31c 	.word	0x0800b31c

0800125c <processLoadcellData>:

void processLoadcellData()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af02      	add	r7, sp, #8
	// Extract Load Cell Data
		int16_t loadCellValue = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	80fb      	strh	r3, [r7, #6]
		loadCellValue = (loadcellData[2] << 8) | loadcellData[3];
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <processLoadcellData+0x98>)
 8001268:	789b      	ldrb	r3, [r3, #2]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <processLoadcellData+0x98>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	80fb      	strh	r3, [r7, #6]

	// Validate CRC
		uint16_t calculatedCRC = calculateCRC(loadcellData, 4);
 8001278:	2104      	movs	r1, #4
 800127a:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <processLoadcellData+0x98>)
 800127c:	f7ff fef7 	bl	800106e <calculateCRC>
 8001280:	4603      	mov	r3, r0
 8001282:	80bb      	strh	r3, [r7, #4]
		uint16_t receivedCRC = (loadcellData[4]) | (loadcellData[5] << 8);
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <processLoadcellData+0x98>)
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <processLoadcellData+0x98>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	807b      	strh	r3, [r7, #2]

		if (calculatedCRC != receivedCRC)
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	429a      	cmp	r2, r3
 800129e:	d014      	beq.n	80012ca <processLoadcellData+0x6e>
		{
			snprintf(uart_buffer, sizeof(uart_buffer), "CRC mismatch: Expected 0x%04X, Got 0x%04X\n", calculatedCRC, receivedCRC);
 80012a0:	88ba      	ldrh	r2, [r7, #4]
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <processLoadcellData+0x9c>)
 80012aa:	2164      	movs	r1, #100	@ 0x64
 80012ac:	4813      	ldr	r0, [pc, #76]	@ (80012fc <processLoadcellData+0xa0>)
 80012ae:	f006 fba5 	bl	80079fc <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012b2:	4812      	ldr	r0, [pc, #72]	@ (80012fc <processLoadcellData+0xa0>)
 80012b4:	f7fe ffdc 	bl	8000270 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	490e      	ldr	r1, [pc, #56]	@ (80012fc <processLoadcellData+0xa0>)
 80012c2:	480f      	ldr	r0, [pc, #60]	@ (8001300 <processLoadcellData+0xa4>)
 80012c4:	f004 f8d0 	bl	8005468 <HAL_UART_Transmit>
			return;
 80012c8:	e011      	b.n	80012ee <processLoadcellData+0x92>
		}

	// Debug Output Load Cell Data
		snprintf(uart_buffer, sizeof(uart_buffer), "Received Load Cell Data: %d\n", loadCellValue);
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <processLoadcellData+0xa8>)
 80012d0:	2164      	movs	r1, #100	@ 0x64
 80012d2:	480a      	ldr	r0, [pc, #40]	@ (80012fc <processLoadcellData+0xa0>)
 80012d4:	f006 fb92 	bl	80079fc <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <processLoadcellData+0xa0>)
 80012da:	f7fe ffc9 	bl	8000270 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	4905      	ldr	r1, [pc, #20]	@ (80012fc <processLoadcellData+0xa0>)
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <processLoadcellData+0xa4>)
 80012ea:	f004 f8bd 	bl	8005468 <HAL_UART_Transmit>
}
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000280 	.word	0x20000280
 80012f8:	0800b2f0 	.word	0x0800b2f0
 80012fc:	2000020c 	.word	0x2000020c
 8001300:	20000374 	.word	0x20000374
 8001304:	0800b334 	.word	0x0800b334

08001308 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive callback function (interrupt-based)
 * @param huart: pointer to UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Check if the interrupt is from UART1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a3a      	ldr	r2, [pc, #232]	@ (8001400 <HAL_UART_RxCpltCallback+0xf8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d16e      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0xf0>
    {
        if (!isReceiving)
 800131a:	4b3a      	ldr	r3, [pc, #232]	@ (8001404 <HAL_UART_RxCpltCallback+0xfc>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_UART_RxCpltCallback+0x4c>
        {
            // Looking for start byte 0xAA
            if (uartByte == 0xAA)
 8001322:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_UART_RxCpltCallback+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2baa      	cmp	r3, #170	@ 0xaa
 8001328:	d161      	bne.n	80013ee <HAL_UART_RxCpltCallback+0xe6>
            {
                isReceiving = 1;  // Start storing the frame
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <HAL_UART_RxCpltCallback+0xfc>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;   // Reset buffer index
 8001330:	4b36      	ldr	r3, [pc, #216]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
                imuBuffer[frameIndex++] = uartByte;  // Store 0xAA as the start byte
 8001336:	4b35      	ldr	r3, [pc, #212]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	b2d1      	uxtb	r1, r2
 800133e:	4a33      	ldr	r2, [pc, #204]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 8001340:	7011      	strb	r1, [r2, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b30      	ldr	r3, [pc, #192]	@ (8001408 <HAL_UART_RxCpltCallback+0x100>)
 8001346:	7819      	ldrb	r1, [r3, #0]
 8001348:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 800134a:	5499      	strb	r1, [r3, r2]
                byteCount = 1;
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e04c      	b.n	80013ee <HAL_UART_RxCpltCallback+0xe6>
            }
        }
        else
        {
            // Store the incoming byte
            imuBuffer[frameIndex++] = uartByte;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	b2d1      	uxtb	r1, r2
 800135c:	4a2b      	ldr	r2, [pc, #172]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 800135e:	7011      	strb	r1, [r2, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <HAL_UART_RxCpltCallback+0x100>)
 8001364:	7819      	ldrb	r1, [r3, #0]
 8001366:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 8001368:	5499      	strb	r1, [r3, r2]
            byteCount++;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a28      	ldr	r2, [pc, #160]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 8001372:	6013      	str	r3, [r2, #0]

            // If we received the end byte 0x55 and the frame length is correct
            if (uartByte == 0x55) 		//	if (uartByte == 0x55 && frameIndex == FRAME_SIZE)
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_UART_RxCpltCallback+0x100>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b55      	cmp	r3, #85	@ 0x55
 800137a:	d12e      	bne.n	80013da <HAL_UART_RxCpltCallback+0xd2>
            {
//
                if(byteCount == 13 && imuBuffer[1] == 0x01)
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b0d      	cmp	r3, #13
 8001382:	d109      	bne.n	8001398 <HAL_UART_RxCpltCallback+0x90>
 8001384:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_UART_RxCpltCallback+0x90>
                {
                	memcpy(imuData, imuBuffer,sizeof(imuBuffer));
 800138c:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_UART_RxCpltCallback+0x110>)
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 8001390:	4614      	mov	r4, r2
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	c407      	stmia	r4!, {r0, r1, r2}
 8001396:	7023      	strb	r3, [r4, #0]
                }

                if(byteCount == 7 && imuBuffer[1] == 0x02)
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b07      	cmp	r3, #7
 800139e:	d10d      	bne.n	80013bc <HAL_UART_RxCpltCallback+0xb4>
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d109      	bne.n	80013bc <HAL_UART_RxCpltCallback+0xb4>
				{
                	memcpy(loadcellData, imuBuffer, 7);
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_UART_RxCpltCallback+0x114>)
 80013aa:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 80013ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b0:	6018      	str	r0, [r3, #0]
 80013b2:	3304      	adds	r3, #4
 80013b4:	8019      	strh	r1, [r3, #0]
 80013b6:	3302      	adds	r3, #2
 80013b8:	0c0a      	lsrs	r2, r1, #16
 80013ba:	701a      	strb	r2, [r3, #0]
				}

                memset(imuBuffer, 0, sizeof(imuBuffer)); // Reset the entire buffer to 0
 80013bc:	220d      	movs	r2, #13
 80013be:	2100      	movs	r1, #0
 80013c0:	4813      	ldr	r0, [pc, #76]	@ (8001410 <HAL_UART_RxCpltCallback+0x108>)
 80013c2:	f006 fbb2 	bl	8007b2a <memset>

                // Reset receiving state for the next frame
                isReceiving = 0;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_UART_RxCpltCallback+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
                byteCount = 0;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_UART_RxCpltCallback+0x10c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e009      	b.n	80013ee <HAL_UART_RxCpltCallback+0xe6>


            }
            // If we exceed the frame size without receiving 0x55, reset
            else if (frameIndex >= FRAME_SIZE)
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d905      	bls.n	80013ee <HAL_UART_RxCpltCallback+0xe6>
            {
                isReceiving = 0;  // Reset receiving flag
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_UART_RxCpltCallback+0xfc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;   // Reset index
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_UART_RxCpltCallback+0x104>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
            }
        }


        // Restart UART reception for the next byte
        HAL_UART_Receive_IT(&huart1, &uartByte, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4905      	ldr	r1, [pc, #20]	@ (8001408 <HAL_UART_RxCpltCallback+0x100>)
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <HAL_UART_RxCpltCallback+0x118>)
 80013f4:	f004 f8c2 	bl	800557c <HAL_UART_Receive_IT>
    }
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	40013800 	.word	0x40013800
 8001404:	200001f8 	.word	0x200001f8
 8001408:	200001f0 	.word	0x200001f0
 800140c:	20000209 	.word	0x20000209
 8001410:	200001fc 	.word	0x200001fc
 8001414:	200001f4 	.word	0x200001f4
 8001418:	20000270 	.word	0x20000270
 800141c:	20000280 	.word	0x20000280
 8001420:	200002ec 	.word	0x200002ec

08001424 <Read_ADC_Channel>:

ADC_ChannelConfTypeDef sConfig;
ADC_ChannelConfTypeDef sConfig = {0};
ADC_MultiModeTypeDef multimode = {0};

void Read_ADC_Channel(uint32_t channel, uint16_t *result) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
	sConfig.Channel = channel;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	2306      	movs	r3, #6
 8001446:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;  // Use the appropriate sampling time
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144c:	237f      	movs	r3, #127	@ 0x7f
 800144e:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001450:	2304      	movs	r3, #4
 8001452:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	4810      	ldr	r0, [pc, #64]	@ (80014a0 <Read_ADC_Channel+0x7c>)
 8001460:	f001 fad8 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <Read_ADC_Channel+0x4a>
		Error_Handler();
 800146a:	f000 fa51 	bl	8001910 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 800146e:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <Read_ADC_Channel+0x7c>)
 8001470:	f001 f8fc 	bl	800266c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <Read_ADC_Channel+0x7c>)
 800147a:	f001 f9e5 	bl	8002848 <HAL_ADC_PollForConversion>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <Read_ADC_Channel+0x6e>
		*result = HAL_ADC_GetValue(&hadc1);
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <Read_ADC_Channel+0x7c>)
 8001486:	f001 fab7 	bl	80029f8 <HAL_ADC_GetValue>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8001492:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <Read_ADC_Channel+0x7c>)
 8001494:	f001 f9a4 	bl	80027e0 <HAL_ADC_Stop>
}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000288 	.word	0x20000288

080014a4 <processRemoteData>:

void processRemoteData(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af04      	add	r7, sp, #16
	  Read_ADC_Channel(ADC_CHANNEL_1, &JoystickX1);
 80014aa:	491d      	ldr	r1, [pc, #116]	@ (8001520 <processRemoteData+0x7c>)
 80014ac:	481d      	ldr	r0, [pc, #116]	@ (8001524 <processRemoteData+0x80>)
 80014ae:	f7ff ffb9 	bl	8001424 <Read_ADC_Channel>
	  Read_ADC_Channel(ADC_CHANNEL_2, &JoystickY1);
 80014b2:	491d      	ldr	r1, [pc, #116]	@ (8001528 <processRemoteData+0x84>)
 80014b4:	481d      	ldr	r0, [pc, #116]	@ (800152c <processRemoteData+0x88>)
 80014b6:	f7ff ffb5 	bl	8001424 <Read_ADC_Channel>
	  Read_ADC_Channel(ADC_CHANNEL_3, &Pot);
 80014ba:	491d      	ldr	r1, [pc, #116]	@ (8001530 <processRemoteData+0x8c>)
 80014bc:	481d      	ldr	r0, [pc, #116]	@ (8001534 <processRemoteData+0x90>)
 80014be:	f7ff ffb1 	bl	8001424 <Read_ADC_Channel>
	  Read_ADC_Channel(ADC_CHANNEL_4, &JoystickX2);
 80014c2:	491d      	ldr	r1, [pc, #116]	@ (8001538 <processRemoteData+0x94>)
 80014c4:	481d      	ldr	r0, [pc, #116]	@ (800153c <processRemoteData+0x98>)
 80014c6:	f7ff ffad 	bl	8001424 <Read_ADC_Channel>
	  Read_ADC_Channel(ADC_CHANNEL_9, &JoystickY2);
 80014ca:	491d      	ldr	r1, [pc, #116]	@ (8001540 <processRemoteData+0x9c>)
 80014cc:	481d      	ldr	r0, [pc, #116]	@ (8001544 <processRemoteData+0xa0>)
 80014ce:	f7ff ffa9 	bl	8001424 <Read_ADC_Channel>

	  // Format sensor values into a string
	  snprintf(uartBuffer, sizeof(uartBuffer),"X1: %d, Y1: %d, X2: %d, Y2: %d, P: %d\r\n",JoystickX1, JoystickY1, Pot, JoystickX2, JoystickY2);
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <processRemoteData+0x7c>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	461c      	mov	r4, r3
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <processRemoteData+0x84>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <processRemoteData+0x8c>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <processRemoteData+0x94>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <processRemoteData+0x9c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	9303      	str	r3, [sp, #12]
 80014f0:	9002      	str	r0, [sp, #8]
 80014f2:	9101      	str	r1, [sp, #4]
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <processRemoteData+0xa4>)
 80014fa:	2164      	movs	r1, #100	@ 0x64
 80014fc:	4813      	ldr	r0, [pc, #76]	@ (800154c <processRemoteData+0xa8>)
 80014fe:	f006 fa7d 	bl	80079fc <sniprintf>

	  // Send the formatted string over UART1
	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001502:	4812      	ldr	r0, [pc, #72]	@ (800154c <processRemoteData+0xa8>)
 8001504:	f7fe feb4 	bl	8000270 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	490e      	ldr	r1, [pc, #56]	@ (800154c <processRemoteData+0xa8>)
 8001512:	480f      	ldr	r0, [pc, #60]	@ (8001550 <processRemoteData+0xac>)
 8001514:	f003 ffa8 	bl	8005468 <HAL_UART_Transmit>
}
 8001518:	bf00      	nop
 800151a:	3704      	adds	r7, #4
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	200003fc 	.word	0x200003fc
 8001524:	04300002 	.word	0x04300002
 8001528:	200003fe 	.word	0x200003fe
 800152c:	08600004 	.word	0x08600004
 8001530:	20000400 	.word	0x20000400
 8001534:	0c900008 	.word	0x0c900008
 8001538:	20000402 	.word	0x20000402
 800153c:	10c00010 	.word	0x10c00010
 8001540:	20000404 	.word	0x20000404
 8001544:	25b00200 	.word	0x25b00200
 8001548:	0800b354 	.word	0x0800b354
 800154c:	20000408 	.word	0x20000408
 8001550:	20000374 	.word	0x20000374

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 fc66 	bl	8001e28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f822 	bl	80015a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 f98a 	bl	8001878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001564:	f000 f958 	bl	8001818 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001568:	f000 f926 	bl	80017b8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800156c:	f000 f86c 	bl	8001648 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &uartByte, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	490a      	ldr	r1, [pc, #40]	@ (800159c <main+0x48>)
 8001574:	480a      	ldr	r0, [pc, #40]	@ (80015a0 <main+0x4c>)
 8001576:	f004 f801 	bl	800557c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
	   processImuData();
 800157a:	f7ff fdb7 	bl	80010ec <processImuData>
	   HAL_Delay(100);
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f000 fcce 	bl	8001f20 <HAL_Delay>
	   processLoadcellData();
 8001584:	f7ff fe6a 	bl	800125c <processLoadcellData>
	   HAL_Delay(100);
 8001588:	2064      	movs	r0, #100	@ 0x64
 800158a:	f000 fcc9 	bl	8001f20 <HAL_Delay>
	   processRemoteData();
 800158e:	f7ff ff89 	bl	80014a4 <processRemoteData>
	   HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f000 fcc4 	bl	8001f20 <HAL_Delay>
	   processImuData();
 8001598:	bf00      	nop
 800159a:	e7ee      	b.n	800157a <main+0x26>
 800159c:	200001f0 	.word	0x200001f0
 80015a0:	200002ec 	.word	0x200002ec

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	@ 0x58
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2244      	movs	r2, #68	@ 0x44
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 fab9 	bl	8007b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015ca:	f002 fbed 	bl	8003da8 <HAL_PWREx_ControlVoltageScaling>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d4:	f000 f99c 	bl	8001910 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d8:	2302      	movs	r3, #2
 80015da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e2:	2310      	movs	r3, #16
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ea:	2302      	movs	r3, #2
 80015ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015f2:	230a      	movs	r3, #10
 80015f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015f6:	2307      	movs	r3, #7
 80015f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fc24 	bl	8003e54 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001612:	f000 f97d 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2303      	movs	r3, #3
 800161c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	2104      	movs	r1, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f002 ffec 	bl	800460c <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800163a:	f000 f969 	bl	8001910 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	@ 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800166a:	4b4c      	ldr	r3, [pc, #304]	@ (800179c <MX_ADC1_Init+0x154>)
 800166c:	4a4c      	ldr	r2, [pc, #304]	@ (80017a0 <MX_ADC1_Init+0x158>)
 800166e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001670:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <MX_ADC1_Init+0x154>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001676:	4b49      	ldr	r3, [pc, #292]	@ (800179c <MX_ADC1_Init+0x154>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167c:	4b47      	ldr	r3, [pc, #284]	@ (800179c <MX_ADC1_Init+0x154>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <MX_ADC1_Init+0x154>)
 8001684:	2201      	movs	r2, #1
 8001686:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001688:	4b44      	ldr	r3, [pc, #272]	@ (800179c <MX_ADC1_Init+0x154>)
 800168a:	2204      	movs	r2, #4
 800168c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800168e:	4b43      	ldr	r3, [pc, #268]	@ (800179c <MX_ADC1_Init+0x154>)
 8001690:	2200      	movs	r2, #0
 8001692:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	4b41      	ldr	r3, [pc, #260]	@ (800179c <MX_ADC1_Init+0x154>)
 8001696:	2200      	movs	r2, #0
 8001698:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800169a:	4b40      	ldr	r3, [pc, #256]	@ (800179c <MX_ADC1_Init+0x154>)
 800169c:	2205      	movs	r2, #5
 800169e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a0:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <MX_ADC1_Init+0x154>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a8:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <MX_ADC1_Init+0x154>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <MX_ADC1_Init+0x154>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016b4:	4b39      	ldr	r3, [pc, #228]	@ (800179c <MX_ADC1_Init+0x154>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <MX_ADC1_Init+0x154>)
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <MX_ADC1_Init+0x154>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ca:	4834      	ldr	r0, [pc, #208]	@ (800179c <MX_ADC1_Init+0x154>)
 80016cc:	f000 fe7e 	bl	80023cc <HAL_ADC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016d6:	f000 f91b 	bl	8001910 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	482d      	ldr	r0, [pc, #180]	@ (800179c <MX_ADC1_Init+0x154>)
 80016e6:	f001 ff4f 	bl	8003588 <HAL_ADCEx_MultiModeConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016f0:	f000 f90e 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <MX_ADC1_Init+0x15c>)
 80016f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f8:	2306      	movs	r3, #6
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80016fc:	2303      	movs	r3, #3
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001700:	237f      	movs	r3, #127	@ 0x7f
 8001702:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001704:	2304      	movs	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4822      	ldr	r0, [pc, #136]	@ (800179c <MX_ADC1_Init+0x154>)
 8001712:	f001 f97f 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800171c:	f000 f8f8 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <MX_ADC1_Init+0x160>)
 8001722:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001724:	230c      	movs	r3, #12
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	481b      	ldr	r0, [pc, #108]	@ (800179c <MX_ADC1_Init+0x154>)
 800172e:	f001 f971 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001738:	f000 f8ea 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_ADC1_Init+0x164>)
 800173e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001740:	2312      	movs	r3, #18
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4814      	ldr	r0, [pc, #80]	@ (800179c <MX_ADC1_Init+0x154>)
 800174a:	f001 f963 	bl	8002a14 <HAL_ADC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001754:	f000 f8dc 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_ADC1_Init+0x168>)
 800175a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800175c:	2318      	movs	r3, #24
 800175e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_ADC1_Init+0x154>)
 8001766:	f001 f955 	bl	8002a14 <HAL_ADC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001770:	f000 f8ce 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_ADC1_Init+0x16c>)
 8001776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	@ (800179c <MX_ADC1_Init+0x154>)
 8001784:	f001 f946 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 800178e:	f000 f8bf 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	@ 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000288 	.word	0x20000288
 80017a0:	50040000 	.word	0x50040000
 80017a4:	04300002 	.word	0x04300002
 80017a8:	08600004 	.word	0x08600004
 80017ac:	0c900008 	.word	0x0c900008
 80017b0:	10c00010 	.word	0x10c00010
 80017b4:	25b00200 	.word	0x25b00200

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <MX_USART1_UART_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_USART1_UART_Init+0x58>)
 80017fc:	f003 fde6 	bl	80053cc <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001806:	f000 f883 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002ec 	.word	0x200002ec
 8001814:	40013800 	.word	0x40013800

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800181e:	4a15      	ldr	r2, [pc, #84]	@ (8001874 <MX_USART2_UART_Init+0x5c>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800185c:	f003 fdb6 	bl	80053cc <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001866:	f000 f853 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000374 	.word	0x20000374
 8001874:	40004400 	.word	0x40004400

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_GPIO_Init+0x94>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <MX_GPIO_Init+0x94>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_GPIO_Init+0x94>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_GPIO_Init+0x94>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a18      	ldr	r2, [pc, #96]	@ (800190c <MX_GPIO_Init+0x94>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <MX_GPIO_Init+0x94>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <MX_GPIO_Init+0x94>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <MX_GPIO_Init+0x94>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_GPIO_Init+0x94>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_RE_ENB_GPIO_Port, DE_RE_ENB_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e0:	f002 fa3c 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_RE_ENB_Pin */
  GPIO_InitStruct.Pin = DE_RE_ENB_Pin;
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DE_RE_ENB_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f002 f882 	bl	8003a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <Error_Handler+0x8>

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_MspInit+0x44>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <HAL_MspInit+0x44>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6613      	str	r3, [r2, #96]	@ 0x60
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_MspInit+0x44>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_MspInit+0x44>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6593      	str	r3, [r2, #88]	@ 0x58
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_MspInit+0x44>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ac      	sub	sp, #176	@ 0xb0
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2288      	movs	r2, #136	@ 0x88
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f006 f8d0 	bl	8007b2a <memset>
  if(hadc->Instance==ADC1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a35      	ldr	r2, [pc, #212]	@ (8001a64 <HAL_ADC_MspInit+0x100>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d162      	bne.n	8001a5a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001994:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001998:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800199a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800199e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019aa:	2308      	movs	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019ae:	2307      	movs	r3, #7
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f845 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019d0:	f7ff ff9e 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	4a23      	ldr	r2, [pc, #140]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a08:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_ADC_MspInit+0x104>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a22:	230b      	movs	r3, #11
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a32:	4619      	mov	r1, r3
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <HAL_ADC_MspInit+0x108>)
 8001a36:	f001 ffe7 	bl	8003a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a40:	230b      	movs	r3, #11
 8001a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a56:	f001 ffd7 	bl	8003a08 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a5a:	bf00      	nop
 8001a5c:	37b0      	adds	r7, #176	@ 0xb0
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	50040000 	.word	0x50040000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48000800 	.word	0x48000800

08001a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ae      	sub	sp, #184	@ 0xb8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2288      	movs	r2, #136	@ 0x88
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f006 f84a 	bl	8007b2a <memset>
  if(huart->Instance==USART1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001bc8 <HAL_UART_MspInit+0x158>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d145      	bne.n	8001b2c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 ffd1 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab8:	f7ff ff2a 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac0:	4a42      	ldr	r2, [pc, #264]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac8:	4b40      	ldr	r3, [pc, #256]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b06:	2307      	movs	r3, #7
 8001b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b16:	f001 ff77 	bl	8003a08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2025      	movs	r0, #37	@ 0x25
 8001b20:	f001 febd 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b24:	2025      	movs	r0, #37	@ 0x25
 8001b26:	f001 fed6 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b2a:	e048      	b.n	8001bbe <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_UART_MspInit+0x160>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d143      	bne.n	8001bbe <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff86 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001b4e:	f7ff fedf 	bl	8001910 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UART_MspInit+0x15c>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b82:	230c      	movs	r3, #12
 8001b84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001baa:	f001 ff2d 	bl	8003a08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2026      	movs	r0, #38	@ 0x26
 8001bb4:	f001 fe73 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb8:	2026      	movs	r0, #38	@ 0x26
 8001bba:	f001 fe8c 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	37b8      	adds	r7, #184	@ 0xb8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 f959 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <USART1_IRQHandler+0x10>)
 8001c3a:	f003 fceb 	bl	8005614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200002ec 	.word	0x200002ec

08001c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <USART2_IRQHandler+0x10>)
 8001c4e:	f003 fce1 	bl	8005614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000374 	.word	0x20000374

08001c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_kill>:

int _kill(int pid, int sig)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c76:	f005 ffab 	bl	8007bd0 <__errno>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2216      	movs	r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_exit>:

void _exit (int status)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffe7 	bl	8001c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <_exit+0x12>

08001ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e00a      	b.n	8001cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	4601      	mov	r1, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	b2ca      	uxtb	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf0      	blt.n	8001cb4 <_read+0x12>
  }

  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f005 ff2c 	bl	8007bd0 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20018000 	.word	0x20018000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	2000046c 	.word	0x2000046c
 8001dac:	200005c0 	.word	0x200005c0

08001db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopForever+0xe>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopForever+0x16>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f005 feeb 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e06:	f7ff fba5 	bl	8001554 <main>

08001e0a <LoopForever>:

LoopForever:
    b LoopForever
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e18:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 8001e1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e20:	200005c0 	.word	0x200005c0

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <HAL_Init+0x3c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <HAL_Init+0x3c>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f001 fd22 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e44:	2000      	movs	r0, #0
 8001e46:	f000 f80f 	bl	8001e68 <HAL_InitTick>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	e001      	b.n	8001e5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e56:	f7ff fd61 	bl	800191c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e74:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_InitTick+0x6c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d023      	beq.n	8001ec4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_InitTick+0x70>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_InitTick+0x6c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fd2d 	bl	80038f2 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d809      	bhi.n	8001eb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f001 fcf7 	bl	800389e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_InitTick+0x74>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e007      	b.n	8001ec8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e004      	b.n	8001ec8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e001      	b.n	8001ec8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000470 	.word	0x20000470

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000470 	.word	0x20000470

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3360      	adds	r3, #96	@ 0x60
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <LL_ADC_SetOffset+0x44>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	03fff000 	.word	0x03fff000

08002018 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3360      	adds	r3, #96	@ 0x60
 8002026:	461a      	mov	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3360      	adds	r3, #96	@ 0x60
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3330      	adds	r3, #48	@ 0x30
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	4413      	add	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	211f      	movs	r1, #31
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	f003 011f 	and.w	r1, r3, #31
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	431a      	orrs	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3314      	adds	r3, #20
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0e5b      	lsrs	r3, r3, #25
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	0d1b      	lsrs	r3, r3, #20
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2107      	movs	r1, #7
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	401a      	ands	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	0d1b      	lsrs	r3, r3, #20
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0318 	and.w	r3, r3, #24
 8002172:	4908      	ldr	r1, [pc, #32]	@ (8002194 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002174:	40d9      	lsrs	r1, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	400b      	ands	r3, r1
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	431a      	orrs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0007ffff 	.word	0x0007ffff

08002198 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 031f 	and.w	r3, r3, #31
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002208:	d101      	bne.n	800220e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800222c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002230:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002258:	d101      	bne.n	800225e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a8:	f043 0202 	orr.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d101      	bne.n	80022fa <LL_ADC_IsDisableOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_IsDisableOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d101      	bne.n	8002370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800238e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d101      	bne.n	80023be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e130      	b.n	8002648 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fab5 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fef1 	bl	80021f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fed7 	bl	80021d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff0c 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fef0 	bl	800221c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243c:	4b84      	ldr	r3, [pc, #528]	@ (8002650 <HAL_ADC_Init+0x284>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4a84      	ldr	r2, [pc, #528]	@ (8002654 <HAL_ADC_Init+0x288>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002450:	e002      	b.n	8002458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3b01      	subs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff feee 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff62 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80c9 	bne.w	8002636 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80c5 	bne.w	8002636 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024b4:	f043 0202 	orr.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fefb 	bl	80022bc <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d115      	bne.n	80024f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024cc:	4862      	ldr	r0, [pc, #392]	@ (8002658 <HAL_ADC_Init+0x28c>)
 80024ce:	f7ff fef5 	bl	80022bc <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4861      	ldr	r0, [pc, #388]	@ (800265c <HAL_ADC_Init+0x290>)
 80024d6:	f7ff fef1 	bl	80022bc <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	431c      	orrs	r4, r3
 80024de:	4860      	ldr	r0, [pc, #384]	@ (8002660 <HAL_ADC_Init+0x294>)
 80024e0:	f7ff feec 	bl	80022bc <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4323      	orrs	r3, r4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4619      	mov	r1, r3
 80024f2:	485c      	ldr	r0, [pc, #368]	@ (8002664 <HAL_ADC_Init+0x298>)
 80024f4:	f7ff fd38 	bl	8001f68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e5b      	ldrb	r3, [r3, #25]
 80024fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002502:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002508:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800250e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d106      	bne.n	8002534 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	3b01      	subs	r3, #1
 800252c:	045b      	lsls	r3, r3, #17
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <HAL_ADC_Init+0x29c>)
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	430b      	orrs	r3, r1
 8002562:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff1c 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 800256e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13d      	bne.n	80025f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d13a      	bne.n	80025f2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002580:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002588:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d118      	bne.n	80025e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025d2:	430a      	orrs	r2, r1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e007      	b.n	80025f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f023 010f 	bic.w	r1, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
 8002612:	e007      	b.n	8002624 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020f 	bic.w	r2, r2, #15
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f023 0303 	bic.w	r3, r3, #3
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
 8002634:	e007      	b.n	8002646 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002646:	7ffb      	ldrb	r3, [r7, #31]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3724      	adds	r7, #36	@ 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040200 	.word	0x50040200
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	4857      	ldr	r0, [pc, #348]	@ (80027d4 <HAL_ADC_Start+0x168>)
 8002676:	f7ff fd8f 	bl	8002198 <LL_ADC_GetMultimode>
 800267a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe69 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 809c 	bne.w	80027c6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_Start+0x30>
 8002698:	2302      	movs	r3, #2
 800269a:	e097      	b.n	80027cc <HAL_ADC_Start+0x160>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fe63 	bl	8003370 <ADC_Enable>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 8083 	bne.w	80027bc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Start+0x6e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Start+0x70>
 80026da:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <HAL_ADC_Start+0x170>)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d002      	beq.n	80026ea <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d106      	bne.n	8002712 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	f023 0206 	bic.w	r2, r3, #6
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002710:	e002      	b.n	8002718 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	221c      	movs	r2, #28
 800271e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2a      	ldr	r2, [pc, #168]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d002      	beq.n	8002738 <HAL_ADC_Start+0xcc>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e000      	b.n	800273a <HAL_ADC_Start+0xce>
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_ADC_Start+0x170>)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4293      	cmp	r3, r2
 8002740:	d008      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d002      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b09      	cmp	r3, #9
 8002752:	d114      	bne.n	800277e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800276a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fdc6 	bl	8002308 <LL_ADC_REG_StartConversion>
 800277c:	e025      	b.n	80027ca <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_Start+0x12e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e000      	b.n	800279c <HAL_ADC_Start+0x130>
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_ADC_Start+0x170>)
 800279c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80027ba:	e006      	b.n	80027ca <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80027c4:	e001      	b.n	80027ca <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	50040300 	.word	0x50040300
 80027d8:	50040100 	.word	0x50040100
 80027dc:	50040000 	.word	0x50040000

080027e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Stop+0x16>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e023      	b.n	800283e <HAL_ADC_Stop+0x5e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027fe:	2103      	movs	r1, #3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fcf9 	bl	80031f8 <ADC_ConversionStop>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fe33 	bl	800347c <ADC_Disable>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002852:	4866      	ldr	r0, [pc, #408]	@ (80029ec <HAL_ADC_PollForConversion+0x1a4>)
 8002854:	f7ff fca0 	bl	8002198 <LL_ADC_GetMultimode>
 8002858:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d102      	bne.n	8002868 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002862:	2308      	movs	r3, #8
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e02a      	b.n	80028be <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d002      	beq.n	800287a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d111      	bne.n	800289e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0a4      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002898:	2304      	movs	r3, #4
 800289a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800289c:	e00f      	b.n	80028be <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800289e:	4853      	ldr	r0, [pc, #332]	@ (80029ec <HAL_ADC_PollForConversion+0x1a4>)
 80028a0:	f7ff fc88 	bl	80021b4 <LL_ADC_GetMultiDMATransfer>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e093      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ba:	2304      	movs	r3, #4
 80028bc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028be:	f7ff fb23 	bl	8001f08 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028c4:	e021      	b.n	800290a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d01d      	beq.n	800290a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028ce:	f7ff fb1b 	bl	8001f08 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <HAL_ADC_PollForConversion+0x9c>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d112      	bne.n	800290a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e06b      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0d6      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fba6 	bl	800207a <LL_ADC_REG_IsTriggerSourceSWStart>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01c      	beq.n	800296e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7e5b      	ldrb	r3, [r3, #25]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d118      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d111      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_ADC_PollForConversion+0x1a8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d002      	beq.n	800297e <HAL_ADC_PollForConversion+0x136>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e000      	b.n	8002980 <HAL_ADC_PollForConversion+0x138>
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_ADC_PollForConversion+0x1ac>)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4293      	cmp	r3, r2
 8002986:	d008      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d002      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b09      	cmp	r3, #9
 8002998:	d104      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e00c      	b.n	80029be <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_ADC_PollForConversion+0x1a8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x16c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_PollForConversion+0x16e>
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <HAL_ADC_PollForConversion+0x1ac>)
 80029b6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2208      	movs	r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e008      	b.n	80029e0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	220c      	movs	r2, #12
 80029de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	50040300 	.word	0x50040300
 80029f0:	50040100 	.word	0x50040100
 80029f4:	50040000 	.word	0x50040000

080029f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0b6      	sub	sp, #216	@ 0xd8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x22>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e3c9      	b.n	80031ca <HAL_ADC_ConfigChannel+0x7b6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fc88 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 83aa 	bne.w	80031a4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d824      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3b02      	subs	r3, #2
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d81b      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x8e>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_ADC_ConfigChannel+0x5c>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a99 	.word	0x08002a99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a80:	230c      	movs	r3, #12
 8002a82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a86:	e010      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a90:	2318      	movs	r3, #24
 8002a92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a96:	e008      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ab8:	f7ff faf2 	bl	80020a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fc49 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002ac6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc69 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 81a4 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 819f 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f7ff fafd 	bl	80020f8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d00a      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b30:	f7ff fa4e 	bl	8001fd0 <LL_ADC_SetOffset>
 8002b34:	e179      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fa6b 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x14e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fa60 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	e01e      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x18c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fa55 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e004      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1a4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	e018      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1d6>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e004      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fa24 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fa08 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x214>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f9fd 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	e01e      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x252>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f9f2 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e004      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x26a>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	e018      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x29c>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e004      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f9c1 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f9a5 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2da>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f99a 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x318>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f98f 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e004      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x330>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	e014      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x35a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f962 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2103      	movs	r1, #3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f946 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x398>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f93b 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	e017      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x3c8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f930 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x3e0>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	e011      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x404>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e04:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f90d 	bl	8002044 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fa44 	bl	80022bc <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8140 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff f981 	bl	8002150 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a8f      	ldr	r2, [pc, #572]	@ (8003090 <HAL_ADC_ConfigChannel+0x67c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 8131 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x46e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	bf94      	ite	ls
 8002e7a:	2301      	movls	r3, #1
 8002e7c:	2300      	movhi	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e019      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x4a2>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d079      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x4c2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed4:	e015      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4ee>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x50e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x53e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x564>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	e018      	b.n	8002faa <HAL_ADC_ConfigChannel+0x596>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002faa:	430b      	orrs	r3, r1
 8002fac:	e081      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x5b6>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc8:	e015      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5e2>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e003      	b.n	8002fee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x602>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x632>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	61bb      	str	r3, [r7, #24]
  return result;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	ea42 0103 	orr.w	r1, r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x65e>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	3301      	adds	r3, #1
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	3b1e      	subs	r3, #30
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003070:	e01e      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x69c>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
  return result;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e006      	b.n	800309c <HAL_ADC_ConfigChannel+0x688>
 800308e:	bf00      	nop
 8003090:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7ff f81e 	bl	80020f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b44      	ldr	r3, [pc, #272]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d07a      	beq.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	4843      	ldr	r0, [pc, #268]	@ (80031d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80030ca:	f7fe ff73 	bl	8001fb4 <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a41      	ldr	r2, [pc, #260]	@ (80031dc <HAL_ADC_ConfigChannel+0x7c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d12c      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d126      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3c      	ldr	r2, [pc, #240]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x6e8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3b      	ldr	r2, [pc, #236]	@ (80031e4 <HAL_ADC_ConfigChannel+0x7d0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d15d      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003104:	4619      	mov	r1, r3
 8003106:	4834      	ldr	r0, [pc, #208]	@ (80031d8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003108:	f7fe ff41 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310c:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a36      	ldr	r2, [pc, #216]	@ (80031ec <HAL_ADC_ConfigChannel+0x7d8>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003126:	e002      	b.n	800312e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3b01      	subs	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003134:	e040      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2d      	ldr	r2, [pc, #180]	@ (80031f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d118      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d112      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a23      	ldr	r2, [pc, #140]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x74c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a22      	ldr	r2, [pc, #136]	@ (80031e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d12d      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003164:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003168:	4619      	mov	r1, r3
 800316a:	481b      	ldr	r0, [pc, #108]	@ (80031d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800316c:	f7fe ff0f 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003170:	e024      	b.n	80031bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d120      	bne.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800317c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11a      	bne.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a14      	ldr	r2, [pc, #80]	@ (80031e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d115      	bne.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003196:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800319a:	4619      	mov	r1, r3
 800319c:	480e      	ldr	r0, [pc, #56]	@ (80031d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800319e:	f7fe fef6 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
 80031a2:	e00c      	b.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80031b6:	e002      	b.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	37d8      	adds	r7, #216	@ 0xd8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	80080000 	.word	0x80080000
 80031d8:	50040300 	.word	0x50040300
 80031dc:	c7520000 	.word	0xc7520000
 80031e0:	50040000 	.word	0x50040000
 80031e4:	50040200 	.word	0x50040200
 80031e8:	20000000 	.word	0x20000000
 80031ec:	053e2d63 	.word	0x053e2d63
 80031f0:	cb840000 	.word	0xcb840000
 80031f4:	80000001 	.word	0x80000001

080031f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f8a2 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8003214:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f8c3 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8003220:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8098 	beq.w	8003360 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02a      	beq.n	8003294 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e5b      	ldrb	r3, [r3, #25]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d126      	bne.n	8003294 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7e1b      	ldrb	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d122      	bne.n	8003294 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003252:	e014      	b.n	800327e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4a45      	ldr	r2, [pc, #276]	@ (800336c <ADC_ConversionStop+0x174>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d90d      	bls.n	8003278 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e074      	b.n	8003362 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d1e3      	bne.n	8003254 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2240      	movs	r2, #64	@ 0x40
 8003292:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d014      	beq.n	80032c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f85a 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff f817 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f836 	bl	8002330 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d014      	beq.n	80032f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f869 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe ffff 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f845 	bl	800237e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d005      	beq.n	8003306 <ADC_ConversionStop+0x10e>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d105      	bne.n	800330c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003300:	230c      	movs	r3, #12
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e005      	b.n	8003312 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003306:	2308      	movs	r3, #8
 8003308:	617b      	str	r3, [r7, #20]
        break;
 800330a:	e002      	b.n	8003312 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800330c:	2304      	movs	r3, #4
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003312:	f7fe fdf9 	bl	8001f08 <HAL_GetTick>
 8003316:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003318:	e01b      	b.n	8003352 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800331a:	f7fe fdf5 	bl	8001f08 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b05      	cmp	r3, #5
 8003326:	d914      	bls.n	8003352 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1dc      	bne.n	800331a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	a33fffff 	.word	0xa33fffff

08003370 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe ff9b 	bl	80022bc <LL_ADC_IsEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d169      	bne.n	8003460 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b36      	ldr	r3, [pc, #216]	@ (800346c <ADC_Enable+0xfc>)
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e055      	b.n	8003462 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ff56 	bl	800226c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033c0:	482b      	ldr	r0, [pc, #172]	@ (8003470 <ADC_Enable+0x100>)
 80033c2:	f7fe fdf7 	bl	8001fb4 <LL_ADC_GetCommonPathInternalCh>
 80033c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033d0:	4b28      	ldr	r3, [pc, #160]	@ (8003474 <ADC_Enable+0x104>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	4a28      	ldr	r2, [pc, #160]	@ (8003478 <ADC_Enable+0x108>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ea:	e002      	b.n	80033f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033f8:	f7fe fd86 	bl	8001f08 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033fe:	e028      	b.n	8003452 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe ff59 	bl	80022bc <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe ff29 	bl	800226c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800341a:	f7fe fd75 	bl	8001f08 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d914      	bls.n	8003452 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d00d      	beq.n	8003452 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e007      	b.n	8003462 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d1cf      	bne.n	8003400 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	8000003f 	.word	0x8000003f
 8003470:	50040300 	.word	0x50040300
 8003474:	20000000 	.word	0x20000000
 8003478:	053e2d63 	.word	0x053e2d63

0800347c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe ff2a 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 800348e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe ff11 	bl	80022bc <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d047      	beq.n	8003530 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d144      	bne.n	8003530 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030d 	and.w	r3, r3, #13
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10c      	bne.n	80034ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe feeb 	bl	8002294 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2203      	movs	r2, #3
 80034c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034c6:	f7fe fd1f 	bl	8001f08 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034cc:	e029      	b.n	8003522 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e023      	b.n	8003532 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ea:	f7fe fd0d 	bl	8001f08 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d914      	bls.n	8003522 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f043 0210 	orr.w	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e007      	b.n	8003532 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1dc      	bne.n	80034ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <LL_ADC_IsEnabled>:
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <LL_ADC_IsEnabled+0x18>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_ADC_IsEnabled+0x1a>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_ADC_REG_IsConversionOngoing>:
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d101      	bne.n	8003578 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b09f      	sub	sp, #124	@ 0x7c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e093      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ae:	2300      	movs	r3, #0
 80035b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035b2:	2300      	movs	r3, #0
 80035b4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a47      	ldr	r2, [pc, #284]	@ (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035c0:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	e001      	b.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e072      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ffb8 	bl	8003560 <LL_ADC_REG_IsConversionOngoing>
 80035f0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffb2 	bl	8003560 <LL_ADC_REG_IsConversionOngoing>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d154      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003604:	2b00      	cmp	r3, #0
 8003606:	d151      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003608:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800360a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02c      	beq.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003626:	035b      	lsls	r3, r3, #13
 8003628:	430b      	orrs	r3, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003630:	4829      	ldr	r0, [pc, #164]	@ (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003632:	f7ff ff82 	bl	800353a <LL_ADC_IsEnabled>
 8003636:	4604      	mov	r4, r0
 8003638:	4828      	ldr	r0, [pc, #160]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800363a:	f7ff ff7e 	bl	800353a <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	431c      	orrs	r4, r3
 8003642:	4828      	ldr	r0, [pc, #160]	@ (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003644:	f7ff ff79 	bl	800353a <LL_ADC_IsEnabled>
 8003648:	4603      	mov	r3, r0
 800364a:	4323      	orrs	r3, r4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d137      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003658:	f023 030f 	bic.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	6811      	ldr	r1, [r2, #0]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	431a      	orrs	r2, r3
 8003668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800366c:	e028      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800366e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003678:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800367a:	4817      	ldr	r0, [pc, #92]	@ (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800367c:	f7ff ff5d 	bl	800353a <LL_ADC_IsEnabled>
 8003680:	4604      	mov	r4, r0
 8003682:	4816      	ldr	r0, [pc, #88]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003684:	f7ff ff59 	bl	800353a <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	431c      	orrs	r4, r3
 800368c:	4815      	ldr	r0, [pc, #84]	@ (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800368e:	f7ff ff54 	bl	800353a <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	4323      	orrs	r3, r4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d112      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800369a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036a2:	f023 030f 	bic.w	r3, r3, #15
 80036a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e009      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80036be:	e000      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	377c      	adds	r7, #124	@ 0x7c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	50040000 	.word	0x50040000
 80036dc:	50040100 	.word	0x50040100
 80036e0:	50040300 	.word	0x50040300
 80036e4:	50040200 	.word	0x50040200

080036e8 <__NVIC_SetPriorityGrouping>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	@ (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	@ (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	@ (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff3e 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff31 	bl	800374c <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d008      	beq.n	8003934 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e022      	b.n	800397a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	f003 021c 	and.w	r2, r3, #28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d005      	beq.n	80039aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	e029      	b.n	80039fe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 020e 	bic.w	r2, r2, #14
 80039b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 021c 	and.w	r2, r3, #28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
    }
  }
  return status;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e17f      	b.n	8003d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8171 	beq.w	8003d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d005      	beq.n	8003a48 <HAL_GPIO_Init+0x40>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d118      	bne.n	8003ae8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003abc:	2201      	movs	r2, #1
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d017      	beq.n	8003b24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d123      	bne.n	8003b78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	6939      	ldr	r1, [r7, #16]
 8003b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80ac 	beq.w	8003d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	4b5f      	ldr	r3, [pc, #380]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d38 <HAL_GPIO_Init+0x330>)
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d3c <HAL_GPIO_Init+0x334>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bfc:	d025      	beq.n	8003c4a <HAL_GPIO_Init+0x242>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4f      	ldr	r2, [pc, #316]	@ (8003d40 <HAL_GPIO_Init+0x338>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <HAL_GPIO_Init+0x23e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_GPIO_Init+0x33c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d019      	beq.n	8003c42 <HAL_GPIO_Init+0x23a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_GPIO_Init+0x340>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_GPIO_Init+0x236>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_GPIO_Init+0x344>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00d      	beq.n	8003c3a <HAL_GPIO_Init+0x232>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <HAL_GPIO_Init+0x348>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <HAL_GPIO_Init+0x22e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <HAL_GPIO_Init+0x34c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_GPIO_Init+0x22a>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00c      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c32:	2307      	movs	r3, #7
 8003c34:	e00a      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e008      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e004      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e002      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_GPIO_Init+0x244>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	f002 0203 	and.w	r2, r2, #3
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	4093      	lsls	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c5c:	4937      	ldr	r1, [pc, #220]	@ (8003d3c <HAL_GPIO_Init+0x334>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c8e:	4a32      	ldr	r2, [pc, #200]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c94:	4b30      	ldr	r3, [pc, #192]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cbe:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d0c:	4a12      	ldr	r2, [pc, #72]	@ (8003d58 <HAL_GPIO_Init+0x350>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f47f ae78 	bne.w	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	48000800 	.word	0x48000800
 8003d48:	48000c00 	.word	0x48000c00
 8003d4c:	48001000 	.word	0x48001000
 8003d50:	48001400 	.word	0x48001400
 8003d54:	48001800 	.word	0x48001800
 8003d58:	40010400 	.word	0x40010400

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40007000 	.word	0x40007000

08003da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db6:	d130      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db8:	4b23      	ldr	r3, [pc, #140]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc4:	d038      	beq.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc6:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dce:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2232      	movs	r2, #50	@ 0x32
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0c9b      	lsrs	r3, r3, #18
 8003de8:	3301      	adds	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dec:	e002      	b.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df4:	4b14      	ldr	r3, [pc, #80]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e00:	d102      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f2      	bne.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e08:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e14:	d110      	bne.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e00f      	b.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e26:	d007      	beq.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e28:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e30:	4a05      	ldr	r2, [pc, #20]	@ (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	431bde83 	.word	0x431bde83

08003e54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e3ca      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e66:	4b97      	ldr	r3, [pc, #604]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e70:	4b94      	ldr	r3, [pc, #592]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80e4 	beq.w	8004050 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_RCC_OscConfig+0x4a>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	f040 808b 	bne.w	8003fac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 8087 	bne.w	8003fac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e9e:	4b89      	ldr	r3, [pc, #548]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e3a2      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	4b82      	ldr	r3, [pc, #520]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x7c>
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ece:	e005      	b.n	8003edc <HAL_RCC_OscConfig+0x88>
 8003ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d223      	bcs.n	8003f28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd55 	bl	8004994 <RCC_SetFlashLatencyFromMSIRange>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e383      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef4:	4b73      	ldr	r3, [pc, #460]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a72      	ldr	r2, [pc, #456]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b70      	ldr	r3, [pc, #448]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	496d      	ldr	r1, [pc, #436]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f12:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	4968      	ldr	r1, [pc, #416]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
 8003f26:	e025      	b.n	8003f74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f28:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a65      	ldr	r2, [pc, #404]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f043 0308 	orr.w	r3, r3, #8
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b63      	ldr	r3, [pc, #396]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4960      	ldr	r1, [pc, #384]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f46:	4b5f      	ldr	r3, [pc, #380]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	495b      	ldr	r1, [pc, #364]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fd15 	bl	8004994 <RCC_SetFlashLatencyFromMSIRange>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e343      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f74:	f000 fc4a 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	4950      	ldr	r1, [pc, #320]	@ (80040c8 <HAL_RCC_OscConfig+0x274>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <HAL_RCC_OscConfig+0x278>)
 8003f92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f94:	4b4e      	ldr	r3, [pc, #312]	@ (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd ff65 	bl	8001e68 <HAL_InitTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d052      	beq.n	800404e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	e327      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d032      	beq.n	800401a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fb4:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ffa2 	bl	8001f08 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc8:	f7fd ff9e 	bl	8001f08 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e310      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fda:	4b3a      	ldr	r3, [pc, #232]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe6:	4b37      	ldr	r3, [pc, #220]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a36      	ldr	r2, [pc, #216]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fec:	f043 0308 	orr.w	r3, r3, #8
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b34      	ldr	r3, [pc, #208]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4931      	ldr	r1, [pc, #196]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004004:	4b2f      	ldr	r3, [pc, #188]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	492c      	ldr	r1, [pc, #176]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e01a      	b.n	8004050 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800401a:	4b2a      	ldr	r3, [pc, #168]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a29      	ldr	r2, [pc, #164]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004026:	f7fd ff6f 	bl	8001f08 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800402e:	f7fd ff6b 	bl	8001f08 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e2dd      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004040:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x1da>
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800404e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d074      	beq.n	8004146 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d005      	beq.n	800406e <HAL_RCC_OscConfig+0x21a>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d10e      	bne.n	8004086 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d10b      	bne.n	8004086 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406e:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d064      	beq.n	8004144 <HAL_RCC_OscConfig+0x2f0>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d160      	bne.n	8004144 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e2ba      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x24a>
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0b      	ldr	r2, [pc, #44]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e026      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a6:	d115      	bne.n	80040d4 <HAL_RCC_OscConfig+0x280>
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 80040ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b03      	ldr	r3, [pc, #12]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a02      	ldr	r2, [pc, #8]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e014      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	0800b37c 	.word	0x0800b37c
 80040cc:	20000000 	.word	0x20000000
 80040d0:	20000004 	.word	0x20000004
 80040d4:	4ba0      	ldr	r3, [pc, #640]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b9d      	ldr	r3, [pc, #628]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a9c      	ldr	r2, [pc, #624]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd ff08 	bl	8001f08 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fd ff04 	bl	8001f08 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	@ 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e276      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410e:	4b92      	ldr	r3, [pc, #584]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x2a8>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fef4 	bl	8001f08 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7fd fef0 	bl	8001f08 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e262      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004136:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d0>
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d060      	beq.n	8004214 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d005      	beq.n	8004164 <HAL_RCC_OscConfig+0x310>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d119      	bne.n	8004192 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d116      	bne.n	8004192 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004164:	4b7c      	ldr	r3, [pc, #496]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_OscConfig+0x328>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e23f      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	4973      	ldr	r1, [pc, #460]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004190:	e040      	b.n	8004214 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d023      	beq.n	80041e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419a:	4b6f      	ldr	r3, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6e      	ldr	r2, [pc, #440]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fd feaf 	bl	8001f08 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fd feab 	bl	8001f08 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e21d      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	4b65      	ldr	r3, [pc, #404]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b62      	ldr	r3, [pc, #392]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	495f      	ldr	r1, [pc, #380]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	e018      	b.n	8004214 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80041e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fe8b 	bl	8001f08 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fd fe87 	bl	8001f08 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1f9      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004208:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d03c      	beq.n	800429a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01c      	beq.n	8004262 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004228:	4b4b      	ldr	r3, [pc, #300]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422e:	4a4a      	ldr	r2, [pc, #296]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7fd fe66 	bl	8001f08 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fd fe62 	bl	8001f08 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1d4      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ef      	beq.n	8004240 <HAL_RCC_OscConfig+0x3ec>
 8004260:	e01b      	b.n	800429a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004268:	4a3b      	ldr	r2, [pc, #236]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fd fe49 	bl	8001f08 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fd fe45 	bl	8001f08 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e1b7      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800428c:	4b32      	ldr	r3, [pc, #200]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ef      	bne.n	800427a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80a6 	beq.w	80043f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c4:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d4:	4b21      	ldr	r3, [pc, #132]	@ (800435c <HAL_RCC_OscConfig+0x508>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d118      	bne.n	8004312 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e0:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_RCC_OscConfig+0x508>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	@ (800435c <HAL_RCC_OscConfig+0x508>)
 80042e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ec:	f7fd fe0c 	bl	8001f08 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f4:	f7fd fe08 	bl	8001f08 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e17a      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_RCC_OscConfig+0x508>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d108      	bne.n	800432c <HAL_RCC_OscConfig+0x4d8>
 800431a:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800432a:	e029      	b.n	8004380 <HAL_RCC_OscConfig+0x52c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d115      	bne.n	8004360 <HAL_RCC_OscConfig+0x50c>
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a03      	ldr	r2, [pc, #12]	@ (8004358 <HAL_RCC_OscConfig+0x504>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004354:	e014      	b.n	8004380 <HAL_RCC_OscConfig+0x52c>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
 8004360:	4b9c      	ldr	r3, [pc, #624]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	4a9b      	ldr	r2, [pc, #620]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004370:	4b98      	ldr	r3, [pc, #608]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	4a97      	ldr	r2, [pc, #604]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004378:	f023 0304 	bic.w	r3, r3, #4
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7fd fdbe 	bl	8001f08 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7fd fdba 	bl	8001f08 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e12a      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a6:	4b8b      	ldr	r3, [pc, #556]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ed      	beq.n	8004390 <HAL_RCC_OscConfig+0x53c>
 80043b4:	e015      	b.n	80043e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fda7 	bl	8001f08 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fd fda3 	bl	8001f08 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e113      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d4:	4b7f      	ldr	r3, [pc, #508]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1ed      	bne.n	80043be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e8:	4b7a      	ldr	r3, [pc, #488]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	4a79      	ldr	r2, [pc, #484]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80fe 	beq.w	80045fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	2b02      	cmp	r3, #2
 8004404:	f040 80d0 	bne.w	80045a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004408:	4b72      	ldr	r3, [pc, #456]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0203 	and.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d130      	bne.n	800447e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	3b01      	subs	r3, #1
 8004428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d127      	bne.n	800447e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004438:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d11f      	bne.n	800447e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004448:	2a07      	cmp	r2, #7
 800444a:	bf14      	ite	ne
 800444c:	2201      	movne	r2, #1
 800444e:	2200      	moveq	r2, #0
 8004450:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004452:	4293      	cmp	r3, r2
 8004454:	d113      	bne.n	800447e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d109      	bne.n	800447e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d06e      	beq.n	800455c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d069      	beq.n	8004558 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004484:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004490:	4b50      	ldr	r3, [pc, #320]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0ad      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044a0:	4b4c      	ldr	r3, [pc, #304]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4b      	ldr	r2, [pc, #300]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80044a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ac:	f7fd fd2c 	bl	8001f08 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fd28 	bl	8001f08 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e09a      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c6:	4b43      	ldr	r3, [pc, #268]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d2:	4b40      	ldr	r3, [pc, #256]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	4b40      	ldr	r3, [pc, #256]	@ (80045d8 <HAL_RCC_OscConfig+0x784>)
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044e2:	3a01      	subs	r2, #1
 80044e4:	0112      	lsls	r2, r2, #4
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044ec:	0212      	lsls	r2, r2, #8
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044f4:	0852      	lsrs	r2, r2, #1
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0552      	lsls	r2, r2, #21
 80044fa:	4311      	orrs	r1, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004500:	0852      	lsrs	r2, r2, #1
 8004502:	3a01      	subs	r2, #1
 8004504:	0652      	lsls	r2, r2, #25
 8004506:	4311      	orrs	r1, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800450c:	0912      	lsrs	r2, r2, #4
 800450e:	0452      	lsls	r2, r2, #17
 8004510:	430a      	orrs	r2, r1
 8004512:	4930      	ldr	r1, [pc, #192]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004514:	4313      	orrs	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004518:	4b2e      	ldr	r3, [pc, #184]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800451e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004522:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004524:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a2a      	ldr	r2, [pc, #168]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800452e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004530:	f7fd fcea 	bl	8001f08 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fd fce6 	bl	8001f08 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e058      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454a:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004556:	e050      	b.n	80045fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e04f      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455c:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d148      	bne.n	80045fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a19      	ldr	r2, [pc, #100]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800457e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004580:	f7fd fcc2 	bl	8001f08 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd fcbe 	bl	8001f08 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e030      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x734>
 80045a6:	e028      	b.n	80045fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b0c      	cmp	r3, #12
 80045ac:	d023      	beq.n	80045f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <HAL_RCC_OscConfig+0x780>)
 80045b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd fca5 	bl	8001f08 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c0:	e00c      	b.n	80045dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fd fca1 	bl	8001f08 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d905      	bls.n	80045dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e013      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
 80045d4:	40021000 	.word	0x40021000
 80045d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ec      	bne.n	80045c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	4905      	ldr	r1, [pc, #20]	@ (8004604 <HAL_RCC_OscConfig+0x7b0>)
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_RCC_OscConfig+0x7b4>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	60cb      	str	r3, [r1, #12]
 80045f4:	e001      	b.n	80045fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	feeefffc 	.word	0xfeeefffc

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0e7      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d910      	bls.n	8004650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b72      	ldr	r3, [pc, #456]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 0207 	bic.w	r2, r3, #7
 8004636:	4970      	ldr	r1, [pc, #448]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b6e      	ldr	r3, [pc, #440]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0cf      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b66      	ldr	r3, [pc, #408]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004668:	429a      	cmp	r2, r3
 800466a:	d908      	bls.n	800467e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b63      	ldr	r3, [pc, #396]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4960      	ldr	r1, [pc, #384]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04c      	beq.n	8004724 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	4b5a      	ldr	r3, [pc, #360]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d121      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0a6      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d115      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e09a      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046c2:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e08e      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d2:	4b4a      	ldr	r3, [pc, #296]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e086      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b46      	ldr	r3, [pc, #280]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4943      	ldr	r1, [pc, #268]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f4:	f7fd fc08 	bl	8001f08 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fd fc04 	bl	8001f08 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e06e      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b3a      	ldr	r3, [pc, #232]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	4b31      	ldr	r3, [pc, #196]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800473c:	429a      	cmp	r2, r3
 800473e:	d208      	bcs.n	8004752 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b2e      	ldr	r3, [pc, #184]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	492b      	ldr	r1, [pc, #172]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004752:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d210      	bcs.n	8004782 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004760:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 0207 	bic.w	r2, r3, #7
 8004768:	4923      	ldr	r1, [pc, #140]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004770:	4b21      	ldr	r3, [pc, #132]	@ (80047f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e036      	b.n	80047f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478e:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4918      	ldr	r1, [pc, #96]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4910      	ldr	r1, [pc, #64]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c0:	f000 f824 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	490b      	ldr	r1, [pc, #44]	@ (8004800 <HAL_RCC_ClockConfig+0x1f4>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <HAL_RCC_ClockConfig+0x1f8>)
 80047de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047e0:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_RCC_ClockConfig+0x1fc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fd fb3f 	bl	8001e68 <HAL_InitTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80047ee:	7afb      	ldrb	r3, [r7, #11]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40022000 	.word	0x40022000
 80047fc:	40021000 	.word	0x40021000
 8004800:	0800b37c 	.word	0x0800b37c
 8004804:	20000000 	.word	0x20000000
 8004808:	20000004 	.word	0x20000004

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	4b3e      	ldr	r3, [pc, #248]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x34>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d121      	bne.n	800487e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d11e      	bne.n	800487e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004840:	4b34      	ldr	r3, [pc, #208]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800484c:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e005      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800485c:	4b2d      	ldr	r3, [pc, #180]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004868:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x10c>)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004870:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10d      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d102      	bne.n	800488a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004884:	4b25      	ldr	r3, [pc, #148]	@ (800491c <HAL_RCC_GetSysClockFreq+0x110>)
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e004      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d101      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x114>)
 8004892:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b0c      	cmp	r3, #12
 8004898:	d134      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489a:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d003      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0xac>
 80048b0:	e005      	b.n	80048be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048b2:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <HAL_RCC_GetSysClockFreq+0x110>)
 80048b4:	617b      	str	r3, [r7, #20]
      break;
 80048b6:	e005      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048b8:	4b19      	ldr	r3, [pc, #100]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ba:	617b      	str	r3, [r7, #20]
      break;
 80048bc:	e002      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	617b      	str	r3, [r7, #20]
      break;
 80048c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c4:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	3301      	adds	r3, #1
 80048d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	fb03 f202 	mul.w	r2, r3, r2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	0e5b      	lsrs	r3, r3, #25
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	3301      	adds	r3, #1
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004904:	69bb      	ldr	r3, [r7, #24]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3724      	adds	r7, #36	@ 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	0800b394 	.word	0x0800b394
 800491c:	00f42400 	.word	0x00f42400
 8004920:	007a1200 	.word	0x007a1200

08004924 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_RCC_GetHCLKFreq+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000000 	.word	0x20000000

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004940:	f7ff fff0 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4904      	ldr	r1, [pc, #16]	@ (8004964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	0800b38c 	.word	0x0800b38c

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800496c:	f7ff ffda 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0adb      	lsrs	r3, r3, #11
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4904      	ldr	r1, [pc, #16]	@ (8004990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	0800b38c 	.word	0x0800b38c

08004994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049a0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049ac:	f7ff f9ee 	bl	8003d8c <HAL_PWREx_GetVoltageRange>
 80049b0:	6178      	str	r0, [r7, #20]
 80049b2:	e014      	b.n	80049de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b8:	4a24      	ldr	r2, [pc, #144]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6593      	str	r3, [r2, #88]	@ 0x58
 80049c0:	4b22      	ldr	r3, [pc, #136]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049cc:	f7ff f9de 	bl	8003d8c <HAL_PWREx_GetVoltageRange>
 80049d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049d2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e4:	d10b      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b80      	cmp	r3, #128	@ 0x80
 80049ea:	d919      	bls.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80049f0:	d902      	bls.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f2:	2302      	movs	r3, #2
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e013      	b.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049f8:	2301      	movs	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e010      	b.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d902      	bls.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a04:	2303      	movs	r3, #3
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e00a      	b.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b80      	cmp	r3, #128	@ 0x80
 8004a0e:	d102      	bne.n	8004a16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a10:	2302      	movs	r3, #2
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e004      	b.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b70      	cmp	r3, #112	@ 0x70
 8004a1a:	d101      	bne.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f023 0207 	bic.w	r2, r3, #7
 8004a28:	4909      	ldr	r1, [pc, #36]	@ (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d001      	beq.n	8004a42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40022000 	.word	0x40022000

08004a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a60:	2300      	movs	r3, #0
 8004a62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d041      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a78:	d02a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a7e:	d824      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a84:	d008      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a8a:	d81e      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a96:	e018      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a98:	4b86      	ldr	r3, [pc, #536]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4a85      	ldr	r2, [pc, #532]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa4:	e015      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fabb 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ab6:	e00c      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3320      	adds	r3, #32
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fba6 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac8:	e003      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ad8:	4b76      	ldr	r3, [pc, #472]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae6:	4973      	ldr	r1, [pc, #460]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004aee:	e001      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d041      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b08:	d02a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b0e:	d824      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b14:	d008      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b1a:	d81e      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b24:	d010      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b26:	e018      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b28:	4b62      	ldr	r3, [pc, #392]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a61      	ldr	r2, [pc, #388]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b34:	e015      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fa73 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b46:	e00c      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3320      	adds	r3, #32
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fb5e 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b68:	4b52      	ldr	r3, [pc, #328]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b76:	494f      	ldr	r1, [pc, #316]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b7e:	e001      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80a0 	beq.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b96:	4b47      	ldr	r3, [pc, #284]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bac:	4b41      	ldr	r3, [pc, #260]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd4:	f7fd f998 	bl	8001f08 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bda:	e009      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fd f994 	bl	8001f08 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d902      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	74fb      	strb	r3, [r7, #19]
        break;
 8004bee:	e005      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ef      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d15c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c02:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d019      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c20:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c2c:	4b21      	ldr	r3, [pc, #132]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a20      	ldr	r2, [pc, #128]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c4c:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fd f953 	bl	8001f08 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c64:	e00b      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fd f94f 	bl	8001f08 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d902      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ec      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca2:	4904      	ldr	r1, [pc, #16]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004caa:	e009      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
 8004cb0:	e006      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc0:	7c7b      	ldrb	r3, [r7, #17]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cca:	4a9d      	ldr	r2, [pc, #628]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cde:	4b98      	ldr	r3, [pc, #608]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	f023 0203 	bic.w	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	4994      	ldr	r1, [pc, #592]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d00:	4b8f      	ldr	r3, [pc, #572]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	f023 020c 	bic.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	498c      	ldr	r1, [pc, #560]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d22:	4b87      	ldr	r3, [pc, #540]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	4983      	ldr	r1, [pc, #524]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d44:	4b7e      	ldr	r3, [pc, #504]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	497b      	ldr	r1, [pc, #492]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d66:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d74:	4972      	ldr	r1, [pc, #456]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d88:	4b6d      	ldr	r3, [pc, #436]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d96:	496a      	ldr	r1, [pc, #424]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004daa:	4b65      	ldr	r3, [pc, #404]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	4961      	ldr	r1, [pc, #388]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dda:	4959      	ldr	r1, [pc, #356]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dee:	4b54      	ldr	r3, [pc, #336]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	4950      	ldr	r1, [pc, #320]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e10:	4b4b      	ldr	r3, [pc, #300]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	4948      	ldr	r1, [pc, #288]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e32:	4b43      	ldr	r3, [pc, #268]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	493f      	ldr	r1, [pc, #252]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d028      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e54:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e62:	4937      	ldr	r1, [pc, #220]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e72:	d106      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e74:	4b32      	ldr	r3, [pc, #200]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a31      	ldr	r2, [pc, #196]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e7e:	60d3      	str	r3, [r2, #12]
 8004e80:	e011      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f8c8 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d028      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eb2:	4b23      	ldr	r3, [pc, #140]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec0:	491f      	ldr	r1, [pc, #124]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004edc:	60d3      	str	r3, [r2, #12]
 8004ede:	e011      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f899 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d02b      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1e:	4908      	ldr	r1, [pc, #32]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f2e:	d109      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f30:	4b03      	ldr	r3, [pc, #12]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a02      	ldr	r2, [pc, #8]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3a:	60d3      	str	r3, [r2, #12]
 8004f3c:	e014      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2101      	movs	r1, #1
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f867 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02f      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f74:	4b2b      	ldr	r3, [pc, #172]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f82:	4928      	ldr	r1, [pc, #160]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f92:	d10d      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2102      	movs	r1, #2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f844 	bl	8005028 <RCCEx_PLLSAI1_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	74bb      	strb	r3, [r7, #18]
 8004fae:	e011      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f925 	bl	8005210 <RCCEx_PLLSAI2_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fe0:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fee:	490d      	ldr	r1, [pc, #52]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005002:	4b08      	ldr	r3, [pc, #32]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	4904      	ldr	r1, [pc, #16]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800501a:	7cbb      	ldrb	r3, [r7, #18]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000

08005028 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005036:	4b75      	ldr	r3, [pc, #468]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0203 	and.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d10d      	bne.n	800506e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
       ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505a:	4b6c      	ldr	r3, [pc, #432]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
       ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d047      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	e044      	b.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d018      	beq.n	80050ae <RCCEx_PLLSAI1_Config+0x86>
 800507c:	2b03      	cmp	r3, #3
 800507e:	d825      	bhi.n	80050cc <RCCEx_PLLSAI1_Config+0xa4>
 8005080:	2b01      	cmp	r3, #1
 8005082:	d002      	beq.n	800508a <RCCEx_PLLSAI1_Config+0x62>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d009      	beq.n	800509c <RCCEx_PLLSAI1_Config+0x74>
 8005088:	e020      	b.n	80050cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508a:	4b60      	ldr	r3, [pc, #384]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11d      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509a:	e01a      	b.n	80050d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ac:	e013      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ae:	4b57      	ldr	r3, [pc, #348]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ba:	4b54      	ldr	r3, [pc, #336]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ca:	e006      	b.n	80050da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	e004      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e2:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	430b      	orrs	r3, r1
 80050f8:	4944      	ldr	r1, [pc, #272]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d17d      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005104:	4b41      	ldr	r3, [pc, #260]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a40      	ldr	r2, [pc, #256]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fc fefa 	bl	8001f08 <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005118:	f7fc fef6 	bl	8001f08 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e005      	b.n	8005138 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800512c:	4b37      	ldr	r3, [pc, #220]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ef      	bne.n	8005118 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d160      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005144:	4b31      	ldr	r3, [pc, #196]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800514c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	0211      	lsls	r1, r2, #8
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68d2      	ldr	r2, [r2, #12]
 800515a:	0912      	lsrs	r2, r2, #4
 800515c:	0452      	lsls	r2, r2, #17
 800515e:	430a      	orrs	r2, r1
 8005160:	492a      	ldr	r1, [pc, #168]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
 8005166:	e027      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d112      	bne.n	8005194 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005176:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6892      	ldr	r2, [r2, #8]
 800517e:	0211      	lsls	r1, r2, #8
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6912      	ldr	r2, [r2, #16]
 8005184:	0852      	lsrs	r2, r2, #1
 8005186:	3a01      	subs	r2, #1
 8005188:	0552      	lsls	r2, r2, #21
 800518a:	430a      	orrs	r2, r1
 800518c:	491f      	ldr	r1, [pc, #124]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	610b      	str	r3, [r1, #16]
 8005192:	e011      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005194:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800519c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6892      	ldr	r2, [r2, #8]
 80051a4:	0211      	lsls	r1, r2, #8
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6952      	ldr	r2, [r2, #20]
 80051aa:	0852      	lsrs	r2, r2, #1
 80051ac:	3a01      	subs	r2, #1
 80051ae:	0652      	lsls	r2, r2, #25
 80051b0:	430a      	orrs	r2, r1
 80051b2:	4916      	ldr	r1, [pc, #88]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fc fea0 	bl	8001f08 <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ca:	e009      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051cc:	f7fc fe9c 	bl	8001f08 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d902      	bls.n	80051e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	73fb      	strb	r3, [r7, #15]
          break;
 80051de:	e005      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ef      	beq.n	80051cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	4904      	ldr	r1, [pc, #16]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000

08005210 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800521e:	4b6a      	ldr	r3, [pc, #424]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800522a:	4b67      	ldr	r3, [pc, #412]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d10d      	bne.n	8005256 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
       ||
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005242:	4b61      	ldr	r3, [pc, #388]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
       ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d047      	beq.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e044      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d018      	beq.n	8005296 <RCCEx_PLLSAI2_Config+0x86>
 8005264:	2b03      	cmp	r3, #3
 8005266:	d825      	bhi.n	80052b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <RCCEx_PLLSAI2_Config+0x62>
 800526c:	2b02      	cmp	r3, #2
 800526e:	d009      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x74>
 8005270:	e020      	b.n	80052b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005272:	4b55      	ldr	r3, [pc, #340]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11d      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005282:	e01a      	b.n	80052ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005284:	4b50      	ldr	r3, [pc, #320]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005294:	e013      	b.n	80052be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005296:	4b4c      	ldr	r3, [pc, #304]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a2:	4b49      	ldr	r3, [pc, #292]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b2:	e006      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e004      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ca:	4b3f      	ldr	r3, [pc, #252]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	430b      	orrs	r3, r1
 80052e0:	4939      	ldr	r1, [pc, #228]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d167      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052ec:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a35      	ldr	r2, [pc, #212]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f8:	f7fc fe06 	bl	8001f08 <HAL_GetTick>
 80052fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052fe:	e009      	b.n	8005314 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005300:	f7fc fe02 	bl	8001f08 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d902      	bls.n	8005314 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	73fb      	strb	r3, [r7, #15]
        break;
 8005312:	e005      	b.n	8005320 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005314:	4b2c      	ldr	r3, [pc, #176]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ef      	bne.n	8005300 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d14a      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d111      	bne.n	8005350 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532c:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	0211      	lsls	r1, r2, #8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	0912      	lsrs	r2, r2, #4
 8005344:	0452      	lsls	r2, r2, #17
 8005346:	430a      	orrs	r2, r1
 8005348:	491f      	ldr	r1, [pc, #124]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	614b      	str	r3, [r1, #20]
 800534e:	e011      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005358:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6892      	ldr	r2, [r2, #8]
 8005360:	0211      	lsls	r1, r2, #8
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6912      	ldr	r2, [r2, #16]
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	3a01      	subs	r2, #1
 800536a:	0652      	lsls	r2, r2, #25
 800536c:	430a      	orrs	r2, r1
 800536e:	4916      	ldr	r1, [pc, #88]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005374:	4b14      	ldr	r3, [pc, #80]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a13      	ldr	r2, [pc, #76]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fc fdc2 	bl	8001f08 <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005386:	e009      	b.n	800539c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005388:	f7fc fdbe 	bl	8001f08 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d902      	bls.n	800539c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	73fb      	strb	r3, [r7, #15]
          break;
 800539a:	e005      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ef      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	4904      	ldr	r1, [pc, #16]	@ (80053c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000

080053cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e040      	b.n	8005460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc fb3e 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	@ 0x24
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fedc 	bl	80061d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fc21 	bl	8005c60 <UART_SetConfig>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e01b      	b.n	8005460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 ff5b 	bl	8006314 <UART_CheckIdleState>
 800545e:	4603      	mov	r3, r0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	@ 0x28
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800547c:	2b20      	cmp	r3, #32
 800547e:	d177      	bne.n	8005570 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Transmit+0x24>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e070      	b.n	8005572 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2221      	movs	r2, #33	@ 0x21
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549e:	f7fc fd33 	bl	8001f08 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054bc:	d108      	bne.n	80054d0 <HAL_UART_Transmit+0x68>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e003      	b.n	80054d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d8:	e02f      	b.n	800553a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2180      	movs	r1, #128	@ 0x80
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 ffbd 	bl	8006464 <UART_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e03b      	b.n	8005572 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	881a      	ldrh	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550c:	b292      	uxth	r2, r2
 800550e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3302      	adds	r3, #2
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e007      	b.n	8005528 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1c9      	bne.n	80054da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2140      	movs	r1, #64	@ 0x40
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 ff87 	bl	8006464 <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e005      	b.n	8005572 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005590:	2b20      	cmp	r3, #32
 8005592:	d137      	bne.n	8005604 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_UART_Receive_IT+0x24>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e030      	b.n	8005606 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a18      	ldr	r2, [pc, #96]	@ (8005610 <HAL_UART_Receive_IT+0x94>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01f      	beq.n	80055f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d018      	beq.n	80055f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	613b      	str	r3, [r7, #16]
   return(result);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	6a3a      	ldr	r2, [r7, #32]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	461a      	mov	r2, r3
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 ffa0 	bl	8006540 <UART_Start_Receive_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	e000      	b.n	8005606 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	@ 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40008000 	.word	0x40008000

08005614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b0ba      	sub	sp, #232	@ 0xe8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800563a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800563e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005642:	4013      	ands	r3, r2
 8005644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d115      	bne.n	800567c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00f      	beq.n	800567c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 82ca 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      }
      return;
 800567a:	e2c4      	b.n	8005c06 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800567c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8117 	beq.w	80058b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005696:	4b85      	ldr	r3, [pc, #532]	@ (80058ac <HAL_UART_IRQHandler+0x298>)
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 810a 	beq.w	80058b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d011      	beq.n	80056d0 <HAL_UART_IRQHandler+0xbc>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_UART_IRQHandler+0xec>
 80056dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2202      	movs	r2, #2
 80056ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d011      	beq.n	8005730 <HAL_UART_IRQHandler+0x11c>
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005726:	f043 0202 	orr.w	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2208      	movs	r2, #8
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005762:	f043 0208 	orr.w	r2, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <HAL_UART_IRQHandler+0x18a>
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800578c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8230 	beq.w	8005c0a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e6:	2b40      	cmp	r3, #64	@ 0x40
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04f      	beq.n	8005896 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 ff68 	bl	80066cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b40      	cmp	r3, #64	@ 0x40
 8005808:	d141      	bne.n	800588e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800583a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800584e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1d9      	bne.n	800580a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005862:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <HAL_UART_IRQHandler+0x29c>)
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f88b 	bl	8003986 <HAL_DMA_Abort_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00f      	b.n	80058a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9d4 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00b      	b.n	80058a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9d0 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e007      	b.n	80058a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9cc 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80058a4:	e1b1      	b.n	8005c0a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	bf00      	nop
    return;
 80058a8:	e1af      	b.n	8005c0a <HAL_UART_IRQHandler+0x5f6>
 80058aa:	bf00      	nop
 80058ac:	04000120 	.word	0x04000120
 80058b0:	08006795 	.word	0x08006795

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f040 816a 	bne.w	8005b92 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8163 	beq.w	8005b92 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 815c 	beq.w	8005b92 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2210      	movs	r2, #16
 80058e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b40      	cmp	r3, #64	@ 0x40
 80058ee:	f040 80d4 	bne.w	8005a9a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80ad 	beq.w	8005a62 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005912:	429a      	cmp	r2, r3
 8005914:	f080 80a5 	bcs.w	8005a62 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800591e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 8086 	bne.w	8005a40 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800594c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005962:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800596a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1da      	bne.n	8005934 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800598e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e1      	bne.n	800597e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a10:	f023 0310 	bic.w	r3, r3, #16
 8005a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e4      	bne.n	8005a00 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fd ff65 	bl	800390a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8f4 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a60:	e0d5      	b.n	8005c0e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	f040 80ce 	bne.w	8005c0e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	f040 80c5 	bne.w	8005c0e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8d8 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
      return;
 8005a98:	e0b9      	b.n	8005c0e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80ab 	beq.w	8005c12 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a6 	beq.w	8005c12 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ada:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e4      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b20:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e3      	bne.n	8005afc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f023 0310 	bic.w	r3, r3, #16
 8005b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	69b9      	ldr	r1, [r7, #24]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	617b      	str	r3, [r7, #20]
   return(result);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e4      	bne.n	8005b48 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f85c 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b90:	e03f      	b.n	8005c12 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00e      	beq.n	8005bbc <HAL_UART_IRQHandler+0x5a8>
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 ffe9 	bl	8006b8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bba:	e02d      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01c      	beq.n	8005c16 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
    }
    return;
 8005be4:	e017      	b.n	8005c16 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <HAL_UART_IRQHandler+0x604>
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fdde 	bl	80067c0 <UART_EndTransmit_IT>
    return;
 8005c04:	e008      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
      return;
 8005c06:	bf00      	nop
 8005c08:	e006      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
    return;
 8005c0a:	bf00      	nop
 8005c0c:	e004      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
      return;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
      return;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <HAL_UART_IRQHandler+0x604>
    return;
 8005c16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c18:	37e8      	adds	r7, #232	@ 0xe8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop

08005c20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c64:	b08a      	sub	sp, #40	@ 0x28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4ba4      	ldr	r3, [pc, #656]	@ (8005f20 <UART_SetConfig+0x2c0>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a99      	ldr	r2, [pc, #612]	@ (8005f24 <UART_SetConfig+0x2c4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a90      	ldr	r2, [pc, #576]	@ (8005f28 <UART_SetConfig+0x2c8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d126      	bne.n	8005d38 <UART_SetConfig+0xd8>
 8005cea:	4b90      	ldr	r3, [pc, #576]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d81b      	bhi.n	8005d30 <UART_SetConfig+0xd0>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0xa0>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e116      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e112      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d26:	e10e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2e:	e10a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d36:	e106      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f30 <UART_SetConfig+0x2d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d138      	bne.n	8005db4 <UART_SetConfig+0x154>
 8005d42:	4b7a      	ldr	r3, [pc, #488]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d82d      	bhi.n	8005dac <UART_SetConfig+0x14c>
 8005d50:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <UART_SetConfig+0xf8>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005dad 	.word	0x08005dad
 8005d70:	08005dad 	.word	0x08005dad
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e0d8      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d94:	2302      	movs	r3, #2
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e0d4      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e0d0      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e0cc      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db2:	e0c8      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d125      	bne.n	8005e0a <UART_SetConfig+0x1aa>
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dc8:	2b30      	cmp	r3, #48	@ 0x30
 8005dca:	d016      	beq.n	8005dfa <UART_SetConfig+0x19a>
 8005dcc:	2b30      	cmp	r3, #48	@ 0x30
 8005dce:	d818      	bhi.n	8005e02 <UART_SetConfig+0x1a2>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d00a      	beq.n	8005dea <UART_SetConfig+0x18a>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d814      	bhi.n	8005e02 <UART_SetConfig+0x1a2>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <UART_SetConfig+0x182>
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d008      	beq.n	8005df2 <UART_SetConfig+0x192>
 8005de0:	e00f      	b.n	8005e02 <UART_SetConfig+0x1a2>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de8:	e0ad      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dea:	2302      	movs	r3, #2
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df0:	e0a9      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005df2:	2304      	movs	r3, #4
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df8:	e0a5      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e00:	e0a1      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e02:	2310      	movs	r3, #16
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e08:	e09d      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <UART_SetConfig+0x2d8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x200>
 8005e14:	4b45      	ldr	r3, [pc, #276]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e20:	d016      	beq.n	8005e50 <UART_SetConfig+0x1f0>
 8005e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e24:	d818      	bhi.n	8005e58 <UART_SetConfig+0x1f8>
 8005e26:	2b80      	cmp	r3, #128	@ 0x80
 8005e28:	d00a      	beq.n	8005e40 <UART_SetConfig+0x1e0>
 8005e2a:	2b80      	cmp	r3, #128	@ 0x80
 8005e2c:	d814      	bhi.n	8005e58 <UART_SetConfig+0x1f8>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <UART_SetConfig+0x1d8>
 8005e32:	2b40      	cmp	r3, #64	@ 0x40
 8005e34:	d008      	beq.n	8005e48 <UART_SetConfig+0x1e8>
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x1f8>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3e:	e082      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e07e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e07a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e076      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e072      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <UART_SetConfig+0x2dc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d12a      	bne.n	8005ec0 <UART_SetConfig+0x260>
 8005e6a:	4b30      	ldr	r3, [pc, #192]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e78:	d01a      	beq.n	8005eb0 <UART_SetConfig+0x250>
 8005e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e7e:	d81b      	bhi.n	8005eb8 <UART_SetConfig+0x258>
 8005e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e84:	d00c      	beq.n	8005ea0 <UART_SetConfig+0x240>
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8a:	d815      	bhi.n	8005eb8 <UART_SetConfig+0x258>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x238>
 8005e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x248>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x258>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e052      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e04e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e04a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb6:	e046      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	e042      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	@ (8005f24 <UART_SetConfig+0x2c4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d13a      	bne.n	8005f40 <UART_SetConfig+0x2e0>
 8005eca:	4b18      	ldr	r3, [pc, #96]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ed4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x2b0>
 8005eda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x2b8>
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x2a0>
 8005ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x2b8>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x298>
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x2a8>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x2b8>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e022      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e01e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0e:	e01a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e016      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	e012      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f20:	efff69f3 	.word	0xefff69f3
 8005f24:	40008000 	.word	0x40008000
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a9f      	ldr	r2, [pc, #636]	@ (80061c8 <UART_SetConfig+0x568>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d17a      	bne.n	8006046 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d824      	bhi.n	8005fa2 <UART_SetConfig+0x342>
 8005f58:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x300>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005f93 	.word	0x08005f93
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fa3 	.word	0x08005fa3
 8005f80:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe fcda 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8005f88:	61f8      	str	r0, [r7, #28]
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80061cc <UART_SetConfig+0x56c>)
 8005f8e:	61fb      	str	r3, [r7, #28]
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fe fc3b 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8005f96:	61f8      	str	r0, [r7, #28]
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9e:	61fb      	str	r3, [r7, #28]
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80fb 	beq.w	80061ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d305      	bcc.n	8005fd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d903      	bls.n	8005fda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fd8:	e0e8      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	461c      	mov	r4, r3
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	022b      	lsls	r3, r5, #8
 8005fec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ff0:	0222      	lsls	r2, r4, #8
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	6849      	ldr	r1, [r1, #4]
 8005ff6:	0849      	lsrs	r1, r1, #1
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	4688      	mov	r8, r1
 8005ffc:	4681      	mov	r9, r0
 8005ffe:	eb12 0a08 	adds.w	sl, r2, r8
 8006002:	eb43 0b09 	adc.w	fp, r3, r9
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006014:	4650      	mov	r0, sl
 8006016:	4659      	mov	r1, fp
 8006018:	f7fa fe36 	bl	8000c88 <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4613      	mov	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602a:	d308      	bcc.n	800603e <UART_SetConfig+0x3de>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006032:	d204      	bcs.n	800603e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e0b6      	b.n	80061ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006044:	e0b2      	b.n	80061ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604e:	d15e      	bne.n	800610e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006054:	2b08      	cmp	r3, #8
 8006056:	d828      	bhi.n	80060aa <UART_SetConfig+0x44a>
 8006058:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <UART_SetConfig+0x400>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe fc5a 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8006088:	61f8      	str	r0, [r7, #28]
        break;
 800608a:	e014      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fe fc6c 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 8006090:	61f8      	str	r0, [r7, #28]
        break;
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b4d      	ldr	r3, [pc, #308]	@ (80061cc <UART_SetConfig+0x56c>)
 8006096:	61fb      	str	r3, [r7, #28]
        break;
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fe fbb7 	bl	800480c <HAL_RCC_GetSysClockFreq>
 800609e:	61f8      	str	r0, [r7, #28]
        break;
 80060a0:	e009      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a6:	61fb      	str	r3, [r7, #28]
        break;
 80060a8:	e005      	b.n	80060b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d077      	beq.n	80061ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005a      	lsls	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	085b      	lsrs	r3, r3, #1
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b0f      	cmp	r3, #15
 80060d6:	d916      	bls.n	8006106 <UART_SetConfig+0x4a6>
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060de:	d212      	bcs.n	8006106 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f023 030f 	bic.w	r3, r3, #15
 80060e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	8afb      	ldrh	r3, [r7, #22]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	8afa      	ldrh	r2, [r7, #22]
 8006102:	60da      	str	r2, [r3, #12]
 8006104:	e052      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800610c:	e04e      	b.n	80061ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800610e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006112:	2b08      	cmp	r3, #8
 8006114:	d827      	bhi.n	8006166 <UART_SetConfig+0x506>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <UART_SetConfig+0x4bc>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006141 	.word	0x08006141
 8006120:	08006149 	.word	0x08006149
 8006124:	08006151 	.word	0x08006151
 8006128:	08006167 	.word	0x08006167
 800612c:	08006157 	.word	0x08006157
 8006130:	08006167 	.word	0x08006167
 8006134:	08006167 	.word	0x08006167
 8006138:	08006167 	.word	0x08006167
 800613c:	0800615f 	.word	0x0800615f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006140:	f7fe fbfc 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8006144:	61f8      	str	r0, [r7, #28]
        break;
 8006146:	e014      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7fe fc0e 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 800614c:	61f8      	str	r0, [r7, #28]
        break;
 800614e:	e010      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b1e      	ldr	r3, [pc, #120]	@ (80061cc <UART_SetConfig+0x56c>)
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e00d      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fe fb59 	bl	800480c <HAL_RCC_GetSysClockFreq>
 800615a:	61f8      	str	r0, [r7, #28]
        break;
 800615c:	e009      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006162:	61fb      	str	r3, [r7, #28]
        break;
 8006164:	e005      	b.n	8006172 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006170:	bf00      	nop
    }

    if (pclk != 0U)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d019      	beq.n	80061ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	085a      	lsrs	r2, r3, #1
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	441a      	add	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b0f      	cmp	r3, #15
 8006190:	d909      	bls.n	80061a6 <UART_SetConfig+0x546>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006198:	d205      	bcs.n	80061a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	e002      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3728      	adds	r7, #40	@ 0x28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c6:	bf00      	nop
 80061c8:	40008000 	.word	0x40008000
 80061cc:	00f42400 	.word	0x00f42400

080061d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ce:	d10a      	bne.n	80062e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b098      	sub	sp, #96	@ 0x60
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006324:	f7fb fdf0 	bl	8001f08 <HAL_GetTick>
 8006328:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d12e      	bne.n	8006396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f88c 	bl	8006464 <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d021      	beq.n	8006396 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006366:	653b      	str	r3, [r7, #80]	@ 0x50
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006370:	647b      	str	r3, [r7, #68]	@ 0x44
 8006372:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800637e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e062      	b.n	800645c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d149      	bne.n	8006438 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f856 	bl	8006464 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d03c      	beq.n	8006438 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	623b      	str	r3, [r7, #32]
   return(result);
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3308      	adds	r3, #8
 80063f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006410:	61fa      	str	r2, [r7, #28]
 8006412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	69b9      	ldr	r1, [r7, #24]
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	617b      	str	r3, [r7, #20]
   return(result);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e011      	b.n	800645c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3758      	adds	r7, #88	@ 0x58
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006474:	e04f      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d04b      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fb fd43 	bl	8001f08 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <UART_WaitOnFlagUntilTimeout+0x30>
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e04e      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d037      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b80      	cmp	r3, #128	@ 0x80
 80064aa:	d034      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b40      	cmp	r3, #64	@ 0x40
 80064b0:	d031      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d110      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2208      	movs	r2, #8
 80064c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f8ff 	bl	80066cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2208      	movs	r2, #8
 80064d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e029      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f0:	d111      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f8e5 	bl	80066cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e00f      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	429a      	cmp	r2, r3
 8006532:	d0a0      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006540:	b480      	push	{r7}
 8006542:	b097      	sub	sp, #92	@ 0x5c
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006572:	d10e      	bne.n	8006592 <UART_Start_Receive_IT+0x52>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <UART_Start_Receive_IT+0x48>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006582:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006586:	e02d      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	22ff      	movs	r2, #255	@ 0xff
 800658c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006590:	e028      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10d      	bne.n	80065b6 <UART_Start_Receive_IT+0x76>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <UART_Start_Receive_IT+0x6c>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	@ 0xff
 80065a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065aa:	e01b      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	227f      	movs	r2, #127	@ 0x7f
 80065b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065b4:	e016      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065be:	d10d      	bne.n	80065dc <UART_Start_Receive_IT+0x9c>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <UART_Start_Receive_IT+0x92>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	227f      	movs	r2, #127	@ 0x7f
 80065cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065d0:	e008      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	223f      	movs	r2, #63	@ 0x3f
 80065d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065da:	e003      	b.n	80065e4 <UART_Start_Receive_IT+0xa4>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2222      	movs	r2, #34	@ 0x22
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	657b      	str	r3, [r7, #84]	@ 0x54
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006614:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006616:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800661a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006630:	d107      	bne.n	8006642 <UART_Start_Receive_IT+0x102>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a21      	ldr	r2, [pc, #132]	@ (80066c4 <UART_Start_Receive_IT+0x184>)
 800663e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006640:	e002      	b.n	8006648 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a20      	ldr	r2, [pc, #128]	@ (80066c8 <UART_Start_Receive_IT+0x188>)
 8006646:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d019      	beq.n	8006684 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006670:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e6      	bne.n	8006650 <UART_Start_Receive_IT+0x110>
 8006682:	e018      	b.n	80066b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	613b      	str	r3, [r7, #16]
   return(result);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f043 0320 	orr.w	r3, r3, #32
 8006698:	653b      	str	r3, [r7, #80]	@ 0x50
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	69f9      	ldr	r1, [r7, #28]
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	375c      	adds	r7, #92	@ 0x5c
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	080069d1 	.word	0x080069d1
 80066c8:	08006815 	.word	0x08006815

080066cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b095      	sub	sp, #84	@ 0x54
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80066f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	61fb      	str	r3, [r7, #28]
   return(result);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800672c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673e:	2b01      	cmp	r3, #1
 8006740:	d118      	bne.n	8006774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	647b      	str	r3, [r7, #68]	@ 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	613b      	str	r3, [r7, #16]
   return(result);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006788:	bf00      	nop
 800678a:	3754      	adds	r7, #84	@ 0x54
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fa3e 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	613b      	str	r3, [r7, #16]
   return(result);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fa0a 	bl	8005c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680c:	bf00      	nop
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b09c      	sub	sp, #112	@ 0x70
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006822:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800682c:	2b22      	cmp	r3, #34	@ 0x22
 800682e:	f040 80be 	bne.w	80069ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006838:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800683c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006840:	b2d9      	uxtb	r1, r3
 8006842:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006846:	b2da      	uxtb	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684c:	400a      	ands	r2, r1
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 80a3 	bne.w	80069c2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800688a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800689a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800689c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80068d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a34      	ldr	r2, [pc, #208]	@ (80069cc <UART_RxISR_8BIT+0x1b8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01f      	beq.n	8006940 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	623b      	str	r3, [r7, #32]
   return(result);
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006922:	663b      	str	r3, [r7, #96]	@ 0x60
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30
 800692e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e6      	bne.n	800690e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006944:	2b01      	cmp	r3, #1
 8006946:	d12e      	bne.n	80069a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	60fb      	str	r3, [r7, #12]
   return(result);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69b9      	ldr	r1, [r7, #24]
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	617b      	str	r3, [r7, #20]
   return(result);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	2b10      	cmp	r3, #16
 800698c:	d103      	bne.n	8006996 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2210      	movs	r2, #16
 8006994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff f952 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069a4:	e00d      	b.n	80069c2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fa fcae 	bl	8001308 <HAL_UART_RxCpltCallback>
}
 80069ac:	e009      	b.n	80069c2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	8b1b      	ldrh	r3, [r3, #24]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0208 	orr.w	r2, r2, #8
 80069be:	b292      	uxth	r2, r2
 80069c0:	831a      	strh	r2, [r3, #24]
}
 80069c2:	bf00      	nop
 80069c4:	3770      	adds	r7, #112	@ 0x70
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40008000 	.word	0x40008000

080069d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b09c      	sub	sp, #112	@ 0x70
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e8:	2b22      	cmp	r3, #34	@ 0x22
 80069ea:	f040 80be 	bne.w	8006b6a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006a02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a06:	4013      	ands	r3, r2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a12:	1c9a      	adds	r2, r3, #2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80a3 	bne.w	8006b7e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a56:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a58:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e6      	bne.n	8006a38 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e5      	bne.n	8006a6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a34      	ldr	r2, [pc, #208]	@ (8006b88 <UART_RxISR_16BIT+0x1b8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01f      	beq.n	8006afc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d018      	beq.n	8006afc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d12e      	bne.n	8006b62 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f023 0310 	bic.w	r3, r3, #16
 8006b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6979      	ldr	r1, [r7, #20]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	613b      	str	r3, [r7, #16]
   return(result);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e6      	bne.n	8006b0a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d103      	bne.n	8006b52 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff f874 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b60:	e00d      	b.n	8006b7e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fbd0 	bl	8001308 <HAL_UART_RxCpltCallback>
}
 8006b68:	e009      	b.n	8006b7e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	8b1b      	ldrh	r3, [r3, #24]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0208 	orr.w	r2, r2, #8
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	831a      	strh	r2, [r3, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	3770      	adds	r7, #112	@ 0x70
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40008000 	.word	0x40008000

08006b8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <__cvt>:
 8006ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	ec57 6b10 	vmov	r6, r7, d0
 8006ba8:	2f00      	cmp	r7, #0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4619      	mov	r1, r3
 8006bae:	463b      	mov	r3, r7
 8006bb0:	bfbb      	ittet	lt
 8006bb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006bb6:	461f      	movlt	r7, r3
 8006bb8:	2300      	movge	r3, #0
 8006bba:	232d      	movlt	r3, #45	@ 0x2d
 8006bbc:	700b      	strb	r3, [r1, #0]
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	f023 0820 	bic.w	r8, r3, #32
 8006bca:	bfbc      	itt	lt
 8006bcc:	4632      	movlt	r2, r6
 8006bce:	4616      	movlt	r6, r2
 8006bd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bd4:	d005      	beq.n	8006be2 <__cvt+0x42>
 8006bd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006bda:	d100      	bne.n	8006bde <__cvt+0x3e>
 8006bdc:	3401      	adds	r4, #1
 8006bde:	2102      	movs	r1, #2
 8006be0:	e000      	b.n	8006be4 <__cvt+0x44>
 8006be2:	2103      	movs	r1, #3
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	ab02      	add	r3, sp, #8
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	ec47 6b10 	vmov	d0, r6, r7
 8006bf0:	4653      	mov	r3, sl
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	f001 f8a8 	bl	8007d48 <_dtoa_r>
 8006bf8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	d119      	bne.n	8006c34 <__cvt+0x94>
 8006c00:	f019 0f01 	tst.w	r9, #1
 8006c04:	d00e      	beq.n	8006c24 <__cvt+0x84>
 8006c06:	eb00 0904 	add.w	r9, r0, r4
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	f7f9 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c16:	b108      	cbz	r0, 8006c1c <__cvt+0x7c>
 8006c18:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c1c:	2230      	movs	r2, #48	@ 0x30
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	454b      	cmp	r3, r9
 8006c22:	d31e      	bcc.n	8006c62 <__cvt+0xc2>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c28:	1b5b      	subs	r3, r3, r5
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	b004      	add	sp, #16
 8006c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c38:	eb00 0904 	add.w	r9, r0, r4
 8006c3c:	d1e5      	bne.n	8006c0a <__cvt+0x6a>
 8006c3e:	7803      	ldrb	r3, [r0, #0]
 8006c40:	2b30      	cmp	r3, #48	@ 0x30
 8006c42:	d10a      	bne.n	8006c5a <__cvt+0xba>
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c50:	b918      	cbnz	r0, 8006c5a <__cvt+0xba>
 8006c52:	f1c4 0401 	rsb	r4, r4, #1
 8006c56:	f8ca 4000 	str.w	r4, [sl]
 8006c5a:	f8da 3000 	ldr.w	r3, [sl]
 8006c5e:	4499      	add	r9, r3
 8006c60:	e7d3      	b.n	8006c0a <__cvt+0x6a>
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	9103      	str	r1, [sp, #12]
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e7d9      	b.n	8006c1e <__cvt+0x7e>

08006c6a <__exponent>:
 8006c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	bfba      	itte	lt
 8006c70:	4249      	neglt	r1, r1
 8006c72:	232d      	movlt	r3, #45	@ 0x2d
 8006c74:	232b      	movge	r3, #43	@ 0x2b
 8006c76:	2909      	cmp	r1, #9
 8006c78:	7002      	strb	r2, [r0, #0]
 8006c7a:	7043      	strb	r3, [r0, #1]
 8006c7c:	dd29      	ble.n	8006cd2 <__exponent+0x68>
 8006c7e:	f10d 0307 	add.w	r3, sp, #7
 8006c82:	461d      	mov	r5, r3
 8006c84:	270a      	movs	r7, #10
 8006c86:	461a      	mov	r2, r3
 8006c88:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c8c:	fb07 1416 	mls	r4, r7, r6, r1
 8006c90:	3430      	adds	r4, #48	@ 0x30
 8006c92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c96:	460c      	mov	r4, r1
 8006c98:	2c63      	cmp	r4, #99	@ 0x63
 8006c9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	dcf1      	bgt.n	8006c86 <__exponent+0x1c>
 8006ca2:	3130      	adds	r1, #48	@ 0x30
 8006ca4:	1e94      	subs	r4, r2, #2
 8006ca6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006caa:	1c41      	adds	r1, r0, #1
 8006cac:	4623      	mov	r3, r4
 8006cae:	42ab      	cmp	r3, r5
 8006cb0:	d30a      	bcc.n	8006cc8 <__exponent+0x5e>
 8006cb2:	f10d 0309 	add.w	r3, sp, #9
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	42ac      	cmp	r4, r5
 8006cba:	bf88      	it	hi
 8006cbc:	2300      	movhi	r3, #0
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	4403      	add	r3, r0
 8006cc2:	1a18      	subs	r0, r3, r0
 8006cc4:	b003      	add	sp, #12
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ccc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cd0:	e7ed      	b.n	8006cae <__exponent+0x44>
 8006cd2:	2330      	movs	r3, #48	@ 0x30
 8006cd4:	3130      	adds	r1, #48	@ 0x30
 8006cd6:	7083      	strb	r3, [r0, #2]
 8006cd8:	70c1      	strb	r1, [r0, #3]
 8006cda:	1d03      	adds	r3, r0, #4
 8006cdc:	e7f1      	b.n	8006cc2 <__exponent+0x58>
	...

08006ce0 <_printf_float>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	b08d      	sub	sp, #52	@ 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f000 ff23 	bl	8007b3c <_localeconv_r>
 8006cf6:	6803      	ldr	r3, [r0, #0]
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7f9 fab8 	bl	8000270 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d04:	f8d8 3000 	ldr.w	r3, [r8]
 8006d08:	9005      	str	r0, [sp, #20]
 8006d0a:	3307      	adds	r3, #7
 8006d0c:	f023 0307 	bic.w	r3, r3, #7
 8006d10:	f103 0208 	add.w	r2, r3, #8
 8006d14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d18:	f8d4 b000 	ldr.w	fp, [r4]
 8006d1c:	f8c8 2000 	str.w	r2, [r8]
 8006d20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d28:	9307      	str	r3, [sp, #28]
 8006d2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d36:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa8 <_printf_float+0x2c8>)
 8006d38:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3c:	f7f9 fef6 	bl	8000b2c <__aeabi_dcmpun>
 8006d40:	bb70      	cbnz	r0, 8006da0 <_printf_float+0xc0>
 8006d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d46:	4b98      	ldr	r3, [pc, #608]	@ (8006fa8 <_printf_float+0x2c8>)
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	f7f9 fed0 	bl	8000af0 <__aeabi_dcmple>
 8006d50:	bb30      	cbnz	r0, 8006da0 <_printf_float+0xc0>
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 febf 	bl	8000adc <__aeabi_dcmplt>
 8006d5e:	b110      	cbz	r0, 8006d66 <_printf_float+0x86>
 8006d60:	232d      	movs	r3, #45	@ 0x2d
 8006d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d66:	4a91      	ldr	r2, [pc, #580]	@ (8006fac <_printf_float+0x2cc>)
 8006d68:	4b91      	ldr	r3, [pc, #580]	@ (8006fb0 <_printf_float+0x2d0>)
 8006d6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d6e:	bf94      	ite	ls
 8006d70:	4690      	movls	r8, r2
 8006d72:	4698      	movhi	r8, r3
 8006d74:	2303      	movs	r3, #3
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	f02b 0304 	bic.w	r3, fp, #4
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	9700      	str	r7, [sp, #0]
 8006d84:	4633      	mov	r3, r6
 8006d86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f9d2 	bl	8007134 <_printf_common>
 8006d90:	3001      	adds	r0, #1
 8006d92:	f040 808d 	bne.w	8006eb0 <_printf_float+0x1d0>
 8006d96:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9a:	b00d      	add	sp, #52	@ 0x34
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fec0 	bl	8000b2c <__aeabi_dcmpun>
 8006dac:	b140      	cbz	r0, 8006dc0 <_printf_float+0xe0>
 8006dae:	464b      	mov	r3, r9
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bfbc      	itt	lt
 8006db4:	232d      	movlt	r3, #45	@ 0x2d
 8006db6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006dba:	4a7e      	ldr	r2, [pc, #504]	@ (8006fb4 <_printf_float+0x2d4>)
 8006dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8006fb8 <_printf_float+0x2d8>)
 8006dbe:	e7d4      	b.n	8006d6a <_printf_float+0x8a>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006dc6:	9206      	str	r2, [sp, #24]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	d13b      	bne.n	8006e44 <_printf_float+0x164>
 8006dcc:	2306      	movs	r3, #6
 8006dce:	6063      	str	r3, [r4, #4]
 8006dd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ddc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006de0:	ab09      	add	r3, sp, #36	@ 0x24
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	6861      	ldr	r1, [r4, #4]
 8006de6:	ec49 8b10 	vmov	d0, r8, r9
 8006dea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7ff fed6 	bl	8006ba0 <__cvt>
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006df8:	2b47      	cmp	r3, #71	@ 0x47
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	d129      	bne.n	8006e52 <_printf_float+0x172>
 8006dfe:	1cc8      	adds	r0, r1, #3
 8006e00:	db02      	blt.n	8006e08 <_printf_float+0x128>
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	4299      	cmp	r1, r3
 8006e06:	dd41      	ble.n	8006e8c <_printf_float+0x1ac>
 8006e08:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e10:	3901      	subs	r1, #1
 8006e12:	4652      	mov	r2, sl
 8006e14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e18:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e1a:	f7ff ff26 	bl	8006c6a <__exponent>
 8006e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e20:	1813      	adds	r3, r2, r0
 8006e22:	2a01      	cmp	r2, #1
 8006e24:	4681      	mov	r9, r0
 8006e26:	6123      	str	r3, [r4, #16]
 8006e28:	dc02      	bgt.n	8006e30 <_printf_float+0x150>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	07d2      	lsls	r2, r2, #31
 8006e2e:	d501      	bpl.n	8006e34 <_printf_float+0x154>
 8006e30:	3301      	adds	r3, #1
 8006e32:	6123      	str	r3, [r4, #16]
 8006e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0a2      	beq.n	8006d82 <_printf_float+0xa2>
 8006e3c:	232d      	movs	r3, #45	@ 0x2d
 8006e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e42:	e79e      	b.n	8006d82 <_printf_float+0xa2>
 8006e44:	9a06      	ldr	r2, [sp, #24]
 8006e46:	2a47      	cmp	r2, #71	@ 0x47
 8006e48:	d1c2      	bne.n	8006dd0 <_printf_float+0xf0>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1c0      	bne.n	8006dd0 <_printf_float+0xf0>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e7bd      	b.n	8006dce <_printf_float+0xee>
 8006e52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e56:	d9db      	bls.n	8006e10 <_printf_float+0x130>
 8006e58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e5c:	d118      	bne.n	8006e90 <_printf_float+0x1b0>
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	dd0b      	ble.n	8006e7c <_printf_float+0x19c>
 8006e64:	6121      	str	r1, [r4, #16]
 8006e66:	b913      	cbnz	r3, 8006e6e <_printf_float+0x18e>
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	07d0      	lsls	r0, r2, #31
 8006e6c:	d502      	bpl.n	8006e74 <_printf_float+0x194>
 8006e6e:	3301      	adds	r3, #1
 8006e70:	440b      	add	r3, r1
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e76:	f04f 0900 	mov.w	r9, #0
 8006e7a:	e7db      	b.n	8006e34 <_printf_float+0x154>
 8006e7c:	b913      	cbnz	r3, 8006e84 <_printf_float+0x1a4>
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	07d2      	lsls	r2, r2, #31
 8006e82:	d501      	bpl.n	8006e88 <_printf_float+0x1a8>
 8006e84:	3302      	adds	r3, #2
 8006e86:	e7f4      	b.n	8006e72 <_printf_float+0x192>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e7f2      	b.n	8006e72 <_printf_float+0x192>
 8006e8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e92:	4299      	cmp	r1, r3
 8006e94:	db05      	blt.n	8006ea2 <_printf_float+0x1c2>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	6121      	str	r1, [r4, #16]
 8006e9a:	07d8      	lsls	r0, r3, #31
 8006e9c:	d5ea      	bpl.n	8006e74 <_printf_float+0x194>
 8006e9e:	1c4b      	adds	r3, r1, #1
 8006ea0:	e7e7      	b.n	8006e72 <_printf_float+0x192>
 8006ea2:	2900      	cmp	r1, #0
 8006ea4:	bfd4      	ite	le
 8006ea6:	f1c1 0202 	rsble	r2, r1, #2
 8006eaa:	2201      	movgt	r2, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	e7e0      	b.n	8006e72 <_printf_float+0x192>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	055a      	lsls	r2, r3, #21
 8006eb4:	d407      	bmi.n	8006ec6 <_printf_float+0x1e6>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d12b      	bne.n	8006f1c <_printf_float+0x23c>
 8006ec4:	e767      	b.n	8006d96 <_printf_float+0xb6>
 8006ec6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eca:	f240 80dd 	bls.w	8007088 <_printf_float+0x3a8>
 8006ece:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f7f9 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d033      	beq.n	8006f46 <_printf_float+0x266>
 8006ede:	4a37      	ldr	r2, [pc, #220]	@ (8006fbc <_printf_float+0x2dc>)
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f af54 	beq.w	8006d96 <_printf_float+0xb6>
 8006eee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ef2:	4543      	cmp	r3, r8
 8006ef4:	db02      	blt.n	8006efc <_printf_float+0x21c>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07d8      	lsls	r0, r3, #31
 8006efa:	d50f      	bpl.n	8006f1c <_printf_float+0x23c>
 8006efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f af45 	beq.w	8006d96 <_printf_float+0xb6>
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f14:	f104 0a1a 	add.w	sl, r4, #26
 8006f18:	45c8      	cmp	r8, r9
 8006f1a:	dc09      	bgt.n	8006f30 <_printf_float+0x250>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	f100 8103 	bmi.w	800712a <_printf_float+0x44a>
 8006f24:	68e0      	ldr	r0, [r4, #12]
 8006f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f28:	4298      	cmp	r0, r3
 8006f2a:	bfb8      	it	lt
 8006f2c:	4618      	movlt	r0, r3
 8006f2e:	e734      	b.n	8006d9a <_printf_float+0xba>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4652      	mov	r2, sl
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f af2b 	beq.w	8006d96 <_printf_float+0xb6>
 8006f40:	f109 0901 	add.w	r9, r9, #1
 8006f44:	e7e8      	b.n	8006f18 <_printf_float+0x238>
 8006f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc39      	bgt.n	8006fc0 <_printf_float+0x2e0>
 8006f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fbc <_printf_float+0x2dc>)
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f af1d 	beq.w	8006d96 <_printf_float+0xb6>
 8006f5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f60:	ea59 0303 	orrs.w	r3, r9, r3
 8006f64:	d102      	bne.n	8006f6c <_printf_float+0x28c>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	07d9      	lsls	r1, r3, #31
 8006f6a:	d5d7      	bpl.n	8006f1c <_printf_float+0x23c>
 8006f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f af0d 	beq.w	8006d96 <_printf_float+0xb6>
 8006f7c:	f04f 0a00 	mov.w	sl, #0
 8006f80:	f104 0b1a 	add.w	fp, r4, #26
 8006f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f86:	425b      	negs	r3, r3
 8006f88:	4553      	cmp	r3, sl
 8006f8a:	dc01      	bgt.n	8006f90 <_printf_float+0x2b0>
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	e793      	b.n	8006eb8 <_printf_float+0x1d8>
 8006f90:	2301      	movs	r3, #1
 8006f92:	465a      	mov	r2, fp
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f aefb 	beq.w	8006d96 <_printf_float+0xb6>
 8006fa0:	f10a 0a01 	add.w	sl, sl, #1
 8006fa4:	e7ee      	b.n	8006f84 <_printf_float+0x2a4>
 8006fa6:	bf00      	nop
 8006fa8:	7fefffff 	.word	0x7fefffff
 8006fac:	0800b3c4 	.word	0x0800b3c4
 8006fb0:	0800b3c8 	.word	0x0800b3c8
 8006fb4:	0800b3cc 	.word	0x0800b3cc
 8006fb8:	0800b3d0 	.word	0x0800b3d0
 8006fbc:	0800b3d4 	.word	0x0800b3d4
 8006fc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fc6:	4553      	cmp	r3, sl
 8006fc8:	bfa8      	it	ge
 8006fca:	4653      	movge	r3, sl
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	4699      	mov	r9, r3
 8006fd0:	dc36      	bgt.n	8007040 <_printf_float+0x360>
 8006fd2:	f04f 0b00 	mov.w	fp, #0
 8006fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fda:	f104 021a 	add.w	r2, r4, #26
 8006fde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fe0:	9306      	str	r3, [sp, #24]
 8006fe2:	eba3 0309 	sub.w	r3, r3, r9
 8006fe6:	455b      	cmp	r3, fp
 8006fe8:	dc31      	bgt.n	800704e <_printf_float+0x36e>
 8006fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fec:	459a      	cmp	sl, r3
 8006fee:	dc3a      	bgt.n	8007066 <_printf_float+0x386>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	07da      	lsls	r2, r3, #31
 8006ff4:	d437      	bmi.n	8007066 <_printf_float+0x386>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff8:	ebaa 0903 	sub.w	r9, sl, r3
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	ebaa 0303 	sub.w	r3, sl, r3
 8007002:	4599      	cmp	r9, r3
 8007004:	bfa8      	it	ge
 8007006:	4699      	movge	r9, r3
 8007008:	f1b9 0f00 	cmp.w	r9, #0
 800700c:	dc33      	bgt.n	8007076 <_printf_float+0x396>
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007016:	f104 0b1a 	add.w	fp, r4, #26
 800701a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800701c:	ebaa 0303 	sub.w	r3, sl, r3
 8007020:	eba3 0309 	sub.w	r3, r3, r9
 8007024:	4543      	cmp	r3, r8
 8007026:	f77f af79 	ble.w	8006f1c <_printf_float+0x23c>
 800702a:	2301      	movs	r3, #1
 800702c:	465a      	mov	r2, fp
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	47b8      	blx	r7
 8007034:	3001      	adds	r0, #1
 8007036:	f43f aeae 	beq.w	8006d96 <_printf_float+0xb6>
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	e7ec      	b.n	800701a <_printf_float+0x33a>
 8007040:	4642      	mov	r2, r8
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	d1c2      	bne.n	8006fd2 <_printf_float+0x2f2>
 800704c:	e6a3      	b.n	8006d96 <_printf_float+0xb6>
 800704e:	2301      	movs	r3, #1
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	9206      	str	r2, [sp, #24]
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae9c 	beq.w	8006d96 <_printf_float+0xb6>
 800705e:	9a06      	ldr	r2, [sp, #24]
 8007060:	f10b 0b01 	add.w	fp, fp, #1
 8007064:	e7bb      	b.n	8006fde <_printf_float+0x2fe>
 8007066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	d1c0      	bne.n	8006ff6 <_printf_float+0x316>
 8007074:	e68f      	b.n	8006d96 <_printf_float+0xb6>
 8007076:	9a06      	ldr	r2, [sp, #24]
 8007078:	464b      	mov	r3, r9
 800707a:	4442      	add	r2, r8
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	d1c3      	bne.n	800700e <_printf_float+0x32e>
 8007086:	e686      	b.n	8006d96 <_printf_float+0xb6>
 8007088:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800708c:	f1ba 0f01 	cmp.w	sl, #1
 8007090:	dc01      	bgt.n	8007096 <_printf_float+0x3b6>
 8007092:	07db      	lsls	r3, r3, #31
 8007094:	d536      	bpl.n	8007104 <_printf_float+0x424>
 8007096:	2301      	movs	r3, #1
 8007098:	4642      	mov	r2, r8
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae78 	beq.w	8006d96 <_printf_float+0xb6>
 80070a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae70 	beq.w	8006d96 <_printf_float+0xb6>
 80070b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070c2:	f7f9 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c6:	b9c0      	cbnz	r0, 80070fa <_printf_float+0x41a>
 80070c8:	4653      	mov	r3, sl
 80070ca:	f108 0201 	add.w	r2, r8, #1
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	d10c      	bne.n	80070f2 <_printf_float+0x412>
 80070d8:	e65d      	b.n	8006d96 <_printf_float+0xb6>
 80070da:	2301      	movs	r3, #1
 80070dc:	465a      	mov	r2, fp
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae56 	beq.w	8006d96 <_printf_float+0xb6>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	45d0      	cmp	r8, sl
 80070f0:	dbf3      	blt.n	80070da <_printf_float+0x3fa>
 80070f2:	464b      	mov	r3, r9
 80070f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070f8:	e6df      	b.n	8006eba <_printf_float+0x1da>
 80070fa:	f04f 0800 	mov.w	r8, #0
 80070fe:	f104 0b1a 	add.w	fp, r4, #26
 8007102:	e7f4      	b.n	80070ee <_printf_float+0x40e>
 8007104:	2301      	movs	r3, #1
 8007106:	4642      	mov	r2, r8
 8007108:	e7e1      	b.n	80070ce <_printf_float+0x3ee>
 800710a:	2301      	movs	r3, #1
 800710c:	464a      	mov	r2, r9
 800710e:	4631      	mov	r1, r6
 8007110:	4628      	mov	r0, r5
 8007112:	47b8      	blx	r7
 8007114:	3001      	adds	r0, #1
 8007116:	f43f ae3e 	beq.w	8006d96 <_printf_float+0xb6>
 800711a:	f108 0801 	add.w	r8, r8, #1
 800711e:	68e3      	ldr	r3, [r4, #12]
 8007120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007122:	1a5b      	subs	r3, r3, r1
 8007124:	4543      	cmp	r3, r8
 8007126:	dcf0      	bgt.n	800710a <_printf_float+0x42a>
 8007128:	e6fc      	b.n	8006f24 <_printf_float+0x244>
 800712a:	f04f 0800 	mov.w	r8, #0
 800712e:	f104 0919 	add.w	r9, r4, #25
 8007132:	e7f4      	b.n	800711e <_printf_float+0x43e>

08007134 <_printf_common>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	4616      	mov	r6, r2
 800713a:	4698      	mov	r8, r3
 800713c:	688a      	ldr	r2, [r1, #8]
 800713e:	690b      	ldr	r3, [r1, #16]
 8007140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007144:	4293      	cmp	r3, r2
 8007146:	bfb8      	it	lt
 8007148:	4613      	movlt	r3, r2
 800714a:	6033      	str	r3, [r6, #0]
 800714c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007150:	4607      	mov	r7, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b10a      	cbz	r2, 800715a <_printf_common+0x26>
 8007156:	3301      	adds	r3, #1
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	0699      	lsls	r1, r3, #26
 800715e:	bf42      	ittt	mi
 8007160:	6833      	ldrmi	r3, [r6, #0]
 8007162:	3302      	addmi	r3, #2
 8007164:	6033      	strmi	r3, [r6, #0]
 8007166:	6825      	ldr	r5, [r4, #0]
 8007168:	f015 0506 	ands.w	r5, r5, #6
 800716c:	d106      	bne.n	800717c <_printf_common+0x48>
 800716e:	f104 0a19 	add.w	sl, r4, #25
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	6832      	ldr	r2, [r6, #0]
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	42ab      	cmp	r3, r5
 800717a:	dc26      	bgt.n	80071ca <_printf_common+0x96>
 800717c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	3b00      	subs	r3, #0
 8007184:	bf18      	it	ne
 8007186:	2301      	movne	r3, #1
 8007188:	0692      	lsls	r2, r2, #26
 800718a:	d42b      	bmi.n	80071e4 <_printf_common+0xb0>
 800718c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007190:	4641      	mov	r1, r8
 8007192:	4638      	mov	r0, r7
 8007194:	47c8      	blx	r9
 8007196:	3001      	adds	r0, #1
 8007198:	d01e      	beq.n	80071d8 <_printf_common+0xa4>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	6922      	ldr	r2, [r4, #16]
 800719e:	f003 0306 	and.w	r3, r3, #6
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	bf02      	ittt	eq
 80071a6:	68e5      	ldreq	r5, [r4, #12]
 80071a8:	6833      	ldreq	r3, [r6, #0]
 80071aa:	1aed      	subeq	r5, r5, r3
 80071ac:	68a3      	ldr	r3, [r4, #8]
 80071ae:	bf0c      	ite	eq
 80071b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b4:	2500      	movne	r5, #0
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bfc4      	itt	gt
 80071ba:	1a9b      	subgt	r3, r3, r2
 80071bc:	18ed      	addgt	r5, r5, r3
 80071be:	2600      	movs	r6, #0
 80071c0:	341a      	adds	r4, #26
 80071c2:	42b5      	cmp	r5, r6
 80071c4:	d11a      	bne.n	80071fc <_printf_common+0xc8>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e008      	b.n	80071dc <_printf_common+0xa8>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4641      	mov	r1, r8
 80071d0:	4638      	mov	r0, r7
 80071d2:	47c8      	blx	r9
 80071d4:	3001      	adds	r0, #1
 80071d6:	d103      	bne.n	80071e0 <_printf_common+0xac>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e0:	3501      	adds	r5, #1
 80071e2:	e7c6      	b.n	8007172 <_printf_common+0x3e>
 80071e4:	18e1      	adds	r1, r4, r3
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	2030      	movs	r0, #48	@ 0x30
 80071ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071ee:	4422      	add	r2, r4
 80071f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071f8:	3302      	adds	r3, #2
 80071fa:	e7c7      	b.n	800718c <_printf_common+0x58>
 80071fc:	2301      	movs	r3, #1
 80071fe:	4622      	mov	r2, r4
 8007200:	4641      	mov	r1, r8
 8007202:	4638      	mov	r0, r7
 8007204:	47c8      	blx	r9
 8007206:	3001      	adds	r0, #1
 8007208:	d0e6      	beq.n	80071d8 <_printf_common+0xa4>
 800720a:	3601      	adds	r6, #1
 800720c:	e7d9      	b.n	80071c2 <_printf_common+0x8e>
	...

08007210 <_printf_i>:
 8007210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	7e0f      	ldrb	r7, [r1, #24]
 8007216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007218:	2f78      	cmp	r7, #120	@ 0x78
 800721a:	4691      	mov	r9, r2
 800721c:	4680      	mov	r8, r0
 800721e:	460c      	mov	r4, r1
 8007220:	469a      	mov	sl, r3
 8007222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007226:	d807      	bhi.n	8007238 <_printf_i+0x28>
 8007228:	2f62      	cmp	r7, #98	@ 0x62
 800722a:	d80a      	bhi.n	8007242 <_printf_i+0x32>
 800722c:	2f00      	cmp	r7, #0
 800722e:	f000 80d2 	beq.w	80073d6 <_printf_i+0x1c6>
 8007232:	2f58      	cmp	r7, #88	@ 0x58
 8007234:	f000 80b9 	beq.w	80073aa <_printf_i+0x19a>
 8007238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800723c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007240:	e03a      	b.n	80072b8 <_printf_i+0xa8>
 8007242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007246:	2b15      	cmp	r3, #21
 8007248:	d8f6      	bhi.n	8007238 <_printf_i+0x28>
 800724a:	a101      	add	r1, pc, #4	@ (adr r1, 8007250 <_printf_i+0x40>)
 800724c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007250:	080072a9 	.word	0x080072a9
 8007254:	080072bd 	.word	0x080072bd
 8007258:	08007239 	.word	0x08007239
 800725c:	08007239 	.word	0x08007239
 8007260:	08007239 	.word	0x08007239
 8007264:	08007239 	.word	0x08007239
 8007268:	080072bd 	.word	0x080072bd
 800726c:	08007239 	.word	0x08007239
 8007270:	08007239 	.word	0x08007239
 8007274:	08007239 	.word	0x08007239
 8007278:	08007239 	.word	0x08007239
 800727c:	080073bd 	.word	0x080073bd
 8007280:	080072e7 	.word	0x080072e7
 8007284:	08007377 	.word	0x08007377
 8007288:	08007239 	.word	0x08007239
 800728c:	08007239 	.word	0x08007239
 8007290:	080073df 	.word	0x080073df
 8007294:	08007239 	.word	0x08007239
 8007298:	080072e7 	.word	0x080072e7
 800729c:	08007239 	.word	0x08007239
 80072a0:	08007239 	.word	0x08007239
 80072a4:	0800737f 	.word	0x0800737f
 80072a8:	6833      	ldr	r3, [r6, #0]
 80072aa:	1d1a      	adds	r2, r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6032      	str	r2, [r6, #0]
 80072b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072b8:	2301      	movs	r3, #1
 80072ba:	e09d      	b.n	80073f8 <_printf_i+0x1e8>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1d19      	adds	r1, r3, #4
 80072c2:	6031      	str	r1, [r6, #0]
 80072c4:	0606      	lsls	r6, r0, #24
 80072c6:	d501      	bpl.n	80072cc <_printf_i+0xbc>
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	e003      	b.n	80072d4 <_printf_i+0xc4>
 80072cc:	0645      	lsls	r5, r0, #25
 80072ce:	d5fb      	bpl.n	80072c8 <_printf_i+0xb8>
 80072d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	da03      	bge.n	80072e0 <_printf_i+0xd0>
 80072d8:	232d      	movs	r3, #45	@ 0x2d
 80072da:	426d      	negs	r5, r5
 80072dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072e0:	4859      	ldr	r0, [pc, #356]	@ (8007448 <_printf_i+0x238>)
 80072e2:	230a      	movs	r3, #10
 80072e4:	e011      	b.n	800730a <_printf_i+0xfa>
 80072e6:	6821      	ldr	r1, [r4, #0]
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	0608      	lsls	r0, r1, #24
 80072ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80072f0:	d402      	bmi.n	80072f8 <_printf_i+0xe8>
 80072f2:	0649      	lsls	r1, r1, #25
 80072f4:	bf48      	it	mi
 80072f6:	b2ad      	uxthmi	r5, r5
 80072f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80072fa:	4853      	ldr	r0, [pc, #332]	@ (8007448 <_printf_i+0x238>)
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	bf14      	ite	ne
 8007300:	230a      	movne	r3, #10
 8007302:	2308      	moveq	r3, #8
 8007304:	2100      	movs	r1, #0
 8007306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800730a:	6866      	ldr	r6, [r4, #4]
 800730c:	60a6      	str	r6, [r4, #8]
 800730e:	2e00      	cmp	r6, #0
 8007310:	bfa2      	ittt	ge
 8007312:	6821      	ldrge	r1, [r4, #0]
 8007314:	f021 0104 	bicge.w	r1, r1, #4
 8007318:	6021      	strge	r1, [r4, #0]
 800731a:	b90d      	cbnz	r5, 8007320 <_printf_i+0x110>
 800731c:	2e00      	cmp	r6, #0
 800731e:	d04b      	beq.n	80073b8 <_printf_i+0x1a8>
 8007320:	4616      	mov	r6, r2
 8007322:	fbb5 f1f3 	udiv	r1, r5, r3
 8007326:	fb03 5711 	mls	r7, r3, r1, r5
 800732a:	5dc7      	ldrb	r7, [r0, r7]
 800732c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007330:	462f      	mov	r7, r5
 8007332:	42bb      	cmp	r3, r7
 8007334:	460d      	mov	r5, r1
 8007336:	d9f4      	bls.n	8007322 <_printf_i+0x112>
 8007338:	2b08      	cmp	r3, #8
 800733a:	d10b      	bne.n	8007354 <_printf_i+0x144>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07df      	lsls	r7, r3, #31
 8007340:	d508      	bpl.n	8007354 <_printf_i+0x144>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	4299      	cmp	r1, r3
 8007348:	bfde      	ittt	le
 800734a:	2330      	movle	r3, #48	@ 0x30
 800734c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007350:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007354:	1b92      	subs	r2, r2, r6
 8007356:	6122      	str	r2, [r4, #16]
 8007358:	f8cd a000 	str.w	sl, [sp]
 800735c:	464b      	mov	r3, r9
 800735e:	aa03      	add	r2, sp, #12
 8007360:	4621      	mov	r1, r4
 8007362:	4640      	mov	r0, r8
 8007364:	f7ff fee6 	bl	8007134 <_printf_common>
 8007368:	3001      	adds	r0, #1
 800736a:	d14a      	bne.n	8007402 <_printf_i+0x1f2>
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	b004      	add	sp, #16
 8007372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f043 0320 	orr.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	4833      	ldr	r0, [pc, #204]	@ (800744c <_printf_i+0x23c>)
 8007380:	2778      	movs	r7, #120	@ 0x78
 8007382:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	6831      	ldr	r1, [r6, #0]
 800738a:	061f      	lsls	r7, r3, #24
 800738c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007390:	d402      	bmi.n	8007398 <_printf_i+0x188>
 8007392:	065f      	lsls	r7, r3, #25
 8007394:	bf48      	it	mi
 8007396:	b2ad      	uxthmi	r5, r5
 8007398:	6031      	str	r1, [r6, #0]
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	bf44      	itt	mi
 800739e:	f043 0320 	orrmi.w	r3, r3, #32
 80073a2:	6023      	strmi	r3, [r4, #0]
 80073a4:	b11d      	cbz	r5, 80073ae <_printf_i+0x19e>
 80073a6:	2310      	movs	r3, #16
 80073a8:	e7ac      	b.n	8007304 <_printf_i+0xf4>
 80073aa:	4827      	ldr	r0, [pc, #156]	@ (8007448 <_printf_i+0x238>)
 80073ac:	e7e9      	b.n	8007382 <_printf_i+0x172>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f023 0320 	bic.w	r3, r3, #32
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	e7f6      	b.n	80073a6 <_printf_i+0x196>
 80073b8:	4616      	mov	r6, r2
 80073ba:	e7bd      	b.n	8007338 <_printf_i+0x128>
 80073bc:	6833      	ldr	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	6961      	ldr	r1, [r4, #20]
 80073c2:	1d18      	adds	r0, r3, #4
 80073c4:	6030      	str	r0, [r6, #0]
 80073c6:	062e      	lsls	r6, r5, #24
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0x1c0>
 80073cc:	6019      	str	r1, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <_printf_i+0x1c6>
 80073d0:	0668      	lsls	r0, r5, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0x1bc>
 80073d4:	8019      	strh	r1, [r3, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	4616      	mov	r6, r2
 80073dc:	e7bc      	b.n	8007358 <_printf_i+0x148>
 80073de:	6833      	ldr	r3, [r6, #0]
 80073e0:	1d1a      	adds	r2, r3, #4
 80073e2:	6032      	str	r2, [r6, #0]
 80073e4:	681e      	ldr	r6, [r3, #0]
 80073e6:	6862      	ldr	r2, [r4, #4]
 80073e8:	2100      	movs	r1, #0
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7f8 fef0 	bl	80001d0 <memchr>
 80073f0:	b108      	cbz	r0, 80073f6 <_printf_i+0x1e6>
 80073f2:	1b80      	subs	r0, r0, r6
 80073f4:	6060      	str	r0, [r4, #4]
 80073f6:	6863      	ldr	r3, [r4, #4]
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	2300      	movs	r3, #0
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007400:	e7aa      	b.n	8007358 <_printf_i+0x148>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d0ad      	beq.n	800736c <_printf_i+0x15c>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	079b      	lsls	r3, r3, #30
 8007414:	d413      	bmi.n	800743e <_printf_i+0x22e>
 8007416:	68e0      	ldr	r0, [r4, #12]
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	4298      	cmp	r0, r3
 800741c:	bfb8      	it	lt
 800741e:	4618      	movlt	r0, r3
 8007420:	e7a6      	b.n	8007370 <_printf_i+0x160>
 8007422:	2301      	movs	r3, #1
 8007424:	4632      	mov	r2, r6
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d09d      	beq.n	800736c <_printf_i+0x15c>
 8007430:	3501      	adds	r5, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	9903      	ldr	r1, [sp, #12]
 8007436:	1a5b      	subs	r3, r3, r1
 8007438:	42ab      	cmp	r3, r5
 800743a:	dcf2      	bgt.n	8007422 <_printf_i+0x212>
 800743c:	e7eb      	b.n	8007416 <_printf_i+0x206>
 800743e:	2500      	movs	r5, #0
 8007440:	f104 0619 	add.w	r6, r4, #25
 8007444:	e7f5      	b.n	8007432 <_printf_i+0x222>
 8007446:	bf00      	nop
 8007448:	0800b3d6 	.word	0x0800b3d6
 800744c:	0800b3e7 	.word	0x0800b3e7

08007450 <_scanf_float>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b087      	sub	sp, #28
 8007456:	4617      	mov	r7, r2
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	688b      	ldr	r3, [r1, #8]
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007462:	bf81      	itttt	hi
 8007464:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007468:	eb03 0b05 	addhi.w	fp, r3, r5
 800746c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007470:	608b      	strhi	r3, [r1, #8]
 8007472:	680b      	ldr	r3, [r1, #0]
 8007474:	460a      	mov	r2, r1
 8007476:	f04f 0500 	mov.w	r5, #0
 800747a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800747e:	f842 3b1c 	str.w	r3, [r2], #28
 8007482:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007486:	4680      	mov	r8, r0
 8007488:	460c      	mov	r4, r1
 800748a:	bf98      	it	ls
 800748c:	f04f 0b00 	movls.w	fp, #0
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	4616      	mov	r6, r2
 8007494:	46aa      	mov	sl, r5
 8007496:	46a9      	mov	r9, r5
 8007498:	9502      	str	r5, [sp, #8]
 800749a:	68a2      	ldr	r2, [r4, #8]
 800749c:	b152      	cbz	r2, 80074b4 <_scanf_float+0x64>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80074a4:	d864      	bhi.n	8007570 <_scanf_float+0x120>
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d83c      	bhi.n	8007524 <_scanf_float+0xd4>
 80074aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80074ae:	b2c8      	uxtb	r0, r1
 80074b0:	280e      	cmp	r0, #14
 80074b2:	d93a      	bls.n	800752a <_scanf_float+0xda>
 80074b4:	f1b9 0f00 	cmp.w	r9, #0
 80074b8:	d003      	beq.n	80074c2 <_scanf_float+0x72>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074c6:	f1ba 0f01 	cmp.w	sl, #1
 80074ca:	f200 8117 	bhi.w	80076fc <_scanf_float+0x2ac>
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	429e      	cmp	r6, r3
 80074d2:	f200 8108 	bhi.w	80076e6 <_scanf_float+0x296>
 80074d6:	2001      	movs	r0, #1
 80074d8:	b007      	add	sp, #28
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80074e2:	2a0d      	cmp	r2, #13
 80074e4:	d8e6      	bhi.n	80074b4 <_scanf_float+0x64>
 80074e6:	a101      	add	r1, pc, #4	@ (adr r1, 80074ec <_scanf_float+0x9c>)
 80074e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074ec:	08007633 	.word	0x08007633
 80074f0:	080074b5 	.word	0x080074b5
 80074f4:	080074b5 	.word	0x080074b5
 80074f8:	080074b5 	.word	0x080074b5
 80074fc:	08007693 	.word	0x08007693
 8007500:	0800766b 	.word	0x0800766b
 8007504:	080074b5 	.word	0x080074b5
 8007508:	080074b5 	.word	0x080074b5
 800750c:	08007641 	.word	0x08007641
 8007510:	080074b5 	.word	0x080074b5
 8007514:	080074b5 	.word	0x080074b5
 8007518:	080074b5 	.word	0x080074b5
 800751c:	080074b5 	.word	0x080074b5
 8007520:	080075f9 	.word	0x080075f9
 8007524:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007528:	e7db      	b.n	80074e2 <_scanf_float+0x92>
 800752a:	290e      	cmp	r1, #14
 800752c:	d8c2      	bhi.n	80074b4 <_scanf_float+0x64>
 800752e:	a001      	add	r0, pc, #4	@ (adr r0, 8007534 <_scanf_float+0xe4>)
 8007530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007534:	080075e9 	.word	0x080075e9
 8007538:	080074b5 	.word	0x080074b5
 800753c:	080075e9 	.word	0x080075e9
 8007540:	0800767f 	.word	0x0800767f
 8007544:	080074b5 	.word	0x080074b5
 8007548:	08007591 	.word	0x08007591
 800754c:	080075cf 	.word	0x080075cf
 8007550:	080075cf 	.word	0x080075cf
 8007554:	080075cf 	.word	0x080075cf
 8007558:	080075cf 	.word	0x080075cf
 800755c:	080075cf 	.word	0x080075cf
 8007560:	080075cf 	.word	0x080075cf
 8007564:	080075cf 	.word	0x080075cf
 8007568:	080075cf 	.word	0x080075cf
 800756c:	080075cf 	.word	0x080075cf
 8007570:	2b6e      	cmp	r3, #110	@ 0x6e
 8007572:	d809      	bhi.n	8007588 <_scanf_float+0x138>
 8007574:	2b60      	cmp	r3, #96	@ 0x60
 8007576:	d8b2      	bhi.n	80074de <_scanf_float+0x8e>
 8007578:	2b54      	cmp	r3, #84	@ 0x54
 800757a:	d07b      	beq.n	8007674 <_scanf_float+0x224>
 800757c:	2b59      	cmp	r3, #89	@ 0x59
 800757e:	d199      	bne.n	80074b4 <_scanf_float+0x64>
 8007580:	2d07      	cmp	r5, #7
 8007582:	d197      	bne.n	80074b4 <_scanf_float+0x64>
 8007584:	2508      	movs	r5, #8
 8007586:	e02c      	b.n	80075e2 <_scanf_float+0x192>
 8007588:	2b74      	cmp	r3, #116	@ 0x74
 800758a:	d073      	beq.n	8007674 <_scanf_float+0x224>
 800758c:	2b79      	cmp	r3, #121	@ 0x79
 800758e:	e7f6      	b.n	800757e <_scanf_float+0x12e>
 8007590:	6821      	ldr	r1, [r4, #0]
 8007592:	05c8      	lsls	r0, r1, #23
 8007594:	d51b      	bpl.n	80075ce <_scanf_float+0x17e>
 8007596:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800759a:	6021      	str	r1, [r4, #0]
 800759c:	f109 0901 	add.w	r9, r9, #1
 80075a0:	f1bb 0f00 	cmp.w	fp, #0
 80075a4:	d003      	beq.n	80075ae <_scanf_float+0x15e>
 80075a6:	3201      	adds	r2, #1
 80075a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075ac:	60a2      	str	r2, [r4, #8]
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	60a3      	str	r3, [r4, #8]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	3301      	adds	r3, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3b01      	subs	r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	f340 8087 	ble.w	80076d4 <_scanf_float+0x284>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	e765      	b.n	800749a <_scanf_float+0x4a>
 80075ce:	eb1a 0105 	adds.w	r1, sl, r5
 80075d2:	f47f af6f 	bne.w	80074b4 <_scanf_float+0x64>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80075dc:	6022      	str	r2, [r4, #0]
 80075de:	460d      	mov	r5, r1
 80075e0:	468a      	mov	sl, r1
 80075e2:	f806 3b01 	strb.w	r3, [r6], #1
 80075e6:	e7e2      	b.n	80075ae <_scanf_float+0x15e>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	0610      	lsls	r0, r2, #24
 80075ec:	f57f af62 	bpl.w	80074b4 <_scanf_float+0x64>
 80075f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075f4:	6022      	str	r2, [r4, #0]
 80075f6:	e7f4      	b.n	80075e2 <_scanf_float+0x192>
 80075f8:	f1ba 0f00 	cmp.w	sl, #0
 80075fc:	d10e      	bne.n	800761c <_scanf_float+0x1cc>
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	d10e      	bne.n	8007622 <_scanf_float+0x1d2>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800760a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800760e:	d108      	bne.n	8007622 <_scanf_float+0x1d2>
 8007610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	f04f 0a01 	mov.w	sl, #1
 800761a:	e7e2      	b.n	80075e2 <_scanf_float+0x192>
 800761c:	f1ba 0f02 	cmp.w	sl, #2
 8007620:	d055      	beq.n	80076ce <_scanf_float+0x27e>
 8007622:	2d01      	cmp	r5, #1
 8007624:	d002      	beq.n	800762c <_scanf_float+0x1dc>
 8007626:	2d04      	cmp	r5, #4
 8007628:	f47f af44 	bne.w	80074b4 <_scanf_float+0x64>
 800762c:	3501      	adds	r5, #1
 800762e:	b2ed      	uxtb	r5, r5
 8007630:	e7d7      	b.n	80075e2 <_scanf_float+0x192>
 8007632:	f1ba 0f01 	cmp.w	sl, #1
 8007636:	f47f af3d 	bne.w	80074b4 <_scanf_float+0x64>
 800763a:	f04f 0a02 	mov.w	sl, #2
 800763e:	e7d0      	b.n	80075e2 <_scanf_float+0x192>
 8007640:	b97d      	cbnz	r5, 8007662 <_scanf_float+0x212>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	f47f af38 	bne.w	80074ba <_scanf_float+0x6a>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007650:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007654:	f040 8108 	bne.w	8007868 <_scanf_float+0x418>
 8007658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	2501      	movs	r5, #1
 8007660:	e7bf      	b.n	80075e2 <_scanf_float+0x192>
 8007662:	2d03      	cmp	r5, #3
 8007664:	d0e2      	beq.n	800762c <_scanf_float+0x1dc>
 8007666:	2d05      	cmp	r5, #5
 8007668:	e7de      	b.n	8007628 <_scanf_float+0x1d8>
 800766a:	2d02      	cmp	r5, #2
 800766c:	f47f af22 	bne.w	80074b4 <_scanf_float+0x64>
 8007670:	2503      	movs	r5, #3
 8007672:	e7b6      	b.n	80075e2 <_scanf_float+0x192>
 8007674:	2d06      	cmp	r5, #6
 8007676:	f47f af1d 	bne.w	80074b4 <_scanf_float+0x64>
 800767a:	2507      	movs	r5, #7
 800767c:	e7b1      	b.n	80075e2 <_scanf_float+0x192>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	0591      	lsls	r1, r2, #22
 8007682:	f57f af17 	bpl.w	80074b4 <_scanf_float+0x64>
 8007686:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800768a:	6022      	str	r2, [r4, #0]
 800768c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007690:	e7a7      	b.n	80075e2 <_scanf_float+0x192>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007698:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800769c:	d006      	beq.n	80076ac <_scanf_float+0x25c>
 800769e:	0550      	lsls	r0, r2, #21
 80076a0:	f57f af08 	bpl.w	80074b4 <_scanf_float+0x64>
 80076a4:	f1b9 0f00 	cmp.w	r9, #0
 80076a8:	f000 80de 	beq.w	8007868 <_scanf_float+0x418>
 80076ac:	0591      	lsls	r1, r2, #22
 80076ae:	bf58      	it	pl
 80076b0:	9902      	ldrpl	r1, [sp, #8]
 80076b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076b6:	bf58      	it	pl
 80076b8:	eba9 0101 	subpl.w	r1, r9, r1
 80076bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80076c0:	bf58      	it	pl
 80076c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	e789      	b.n	80075e2 <_scanf_float+0x192>
 80076ce:	f04f 0a03 	mov.w	sl, #3
 80076d2:	e786      	b.n	80075e2 <_scanf_float+0x192>
 80076d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80076d8:	4639      	mov	r1, r7
 80076da:	4640      	mov	r0, r8
 80076dc:	4798      	blx	r3
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f aedb 	beq.w	800749a <_scanf_float+0x4a>
 80076e4:	e6e6      	b.n	80074b4 <_scanf_float+0x64>
 80076e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076ee:	463a      	mov	r2, r7
 80076f0:	4640      	mov	r0, r8
 80076f2:	4798      	blx	r3
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	e6e8      	b.n	80074ce <_scanf_float+0x7e>
 80076fc:	1e6b      	subs	r3, r5, #1
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d824      	bhi.n	800774c <_scanf_float+0x2fc>
 8007702:	2d02      	cmp	r5, #2
 8007704:	d836      	bhi.n	8007774 <_scanf_float+0x324>
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	429e      	cmp	r6, r3
 800770a:	f67f aee4 	bls.w	80074d6 <_scanf_float+0x86>
 800770e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007716:	463a      	mov	r2, r7
 8007718:	4640      	mov	r0, r8
 800771a:	4798      	blx	r3
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	3b01      	subs	r3, #1
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	e7f0      	b.n	8007706 <_scanf_float+0x2b6>
 8007724:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007728:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800772c:	463a      	mov	r2, r7
 800772e:	4640      	mov	r0, r8
 8007730:	4798      	blx	r3
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	3b01      	subs	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f10a 3aff 	add.w	sl, sl, #4294967295
 800773c:	fa5f fa8a 	uxtb.w	sl, sl
 8007740:	f1ba 0f02 	cmp.w	sl, #2
 8007744:	d1ee      	bne.n	8007724 <_scanf_float+0x2d4>
 8007746:	3d03      	subs	r5, #3
 8007748:	b2ed      	uxtb	r5, r5
 800774a:	1b76      	subs	r6, r6, r5
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	05da      	lsls	r2, r3, #23
 8007750:	d530      	bpl.n	80077b4 <_scanf_float+0x364>
 8007752:	055b      	lsls	r3, r3, #21
 8007754:	d511      	bpl.n	800777a <_scanf_float+0x32a>
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	429e      	cmp	r6, r3
 800775a:	f67f aebc 	bls.w	80074d6 <_scanf_float+0x86>
 800775e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007766:	463a      	mov	r2, r7
 8007768:	4640      	mov	r0, r8
 800776a:	4798      	blx	r3
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	3b01      	subs	r3, #1
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	e7f0      	b.n	8007756 <_scanf_float+0x306>
 8007774:	46aa      	mov	sl, r5
 8007776:	46b3      	mov	fp, r6
 8007778:	e7de      	b.n	8007738 <_scanf_float+0x2e8>
 800777a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	2965      	cmp	r1, #101	@ 0x65
 8007782:	f103 33ff 	add.w	r3, r3, #4294967295
 8007786:	f106 35ff 	add.w	r5, r6, #4294967295
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	d00c      	beq.n	80077a8 <_scanf_float+0x358>
 800778e:	2945      	cmp	r1, #69	@ 0x45
 8007790:	d00a      	beq.n	80077a8 <_scanf_float+0x358>
 8007792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007796:	463a      	mov	r2, r7
 8007798:	4640      	mov	r0, r8
 800779a:	4798      	blx	r3
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	1eb5      	subs	r5, r6, #2
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077ac:	463a      	mov	r2, r7
 80077ae:	4640      	mov	r0, r8
 80077b0:	4798      	blx	r3
 80077b2:	462e      	mov	r6, r5
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	f012 0210 	ands.w	r2, r2, #16
 80077ba:	d001      	beq.n	80077c0 <_scanf_float+0x370>
 80077bc:	2000      	movs	r0, #0
 80077be:	e68b      	b.n	80074d8 <_scanf_float+0x88>
 80077c0:	7032      	strb	r2, [r6, #0]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077cc:	d11c      	bne.n	8007808 <_scanf_float+0x3b8>
 80077ce:	9b02      	ldr	r3, [sp, #8]
 80077d0:	454b      	cmp	r3, r9
 80077d2:	eba3 0209 	sub.w	r2, r3, r9
 80077d6:	d123      	bne.n	8007820 <_scanf_float+0x3d0>
 80077d8:	9901      	ldr	r1, [sp, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	4640      	mov	r0, r8
 80077de:	f002 fc2b 	bl	800a038 <_strtod_r>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f011 0f02 	tst.w	r1, #2
 80077ec:	ec57 6b10 	vmov	r6, r7, d0
 80077f0:	f103 0204 	add.w	r2, r3, #4
 80077f4:	d01f      	beq.n	8007836 <_scanf_float+0x3e6>
 80077f6:	9903      	ldr	r1, [sp, #12]
 80077f8:	600a      	str	r2, [r1, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	e9c3 6700 	strd	r6, r7, [r3]
 8007800:	68e3      	ldr	r3, [r4, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60e3      	str	r3, [r4, #12]
 8007806:	e7d9      	b.n	80077bc <_scanf_float+0x36c>
 8007808:	9b04      	ldr	r3, [sp, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0e4      	beq.n	80077d8 <_scanf_float+0x388>
 800780e:	9905      	ldr	r1, [sp, #20]
 8007810:	230a      	movs	r3, #10
 8007812:	3101      	adds	r1, #1
 8007814:	4640      	mov	r0, r8
 8007816:	f002 fc8f 	bl	800a138 <_strtol_r>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	9e05      	ldr	r6, [sp, #20]
 800781e:	1ac2      	subs	r2, r0, r3
 8007820:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007824:	429e      	cmp	r6, r3
 8007826:	bf28      	it	cs
 8007828:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800782c:	4910      	ldr	r1, [pc, #64]	@ (8007870 <_scanf_float+0x420>)
 800782e:	4630      	mov	r0, r6
 8007830:	f000 f918 	bl	8007a64 <siprintf>
 8007834:	e7d0      	b.n	80077d8 <_scanf_float+0x388>
 8007836:	f011 0f04 	tst.w	r1, #4
 800783a:	9903      	ldr	r1, [sp, #12]
 800783c:	600a      	str	r2, [r1, #0]
 800783e:	d1dc      	bne.n	80077fa <_scanf_float+0x3aa>
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	4632      	mov	r2, r6
 8007844:	463b      	mov	r3, r7
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f96f 	bl	8000b2c <__aeabi_dcmpun>
 800784e:	b128      	cbz	r0, 800785c <_scanf_float+0x40c>
 8007850:	4808      	ldr	r0, [pc, #32]	@ (8007874 <_scanf_float+0x424>)
 8007852:	f000 f9eb 	bl	8007c2c <nanf>
 8007856:	ed85 0a00 	vstr	s0, [r5]
 800785a:	e7d1      	b.n	8007800 <_scanf_float+0x3b0>
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f9 f9c2 	bl	8000be8 <__aeabi_d2f>
 8007864:	6028      	str	r0, [r5, #0]
 8007866:	e7cb      	b.n	8007800 <_scanf_float+0x3b0>
 8007868:	f04f 0900 	mov.w	r9, #0
 800786c:	e629      	b.n	80074c2 <_scanf_float+0x72>
 800786e:	bf00      	nop
 8007870:	0800b3f8 	.word	0x0800b3f8
 8007874:	0800b78d 	.word	0x0800b78d

08007878 <std>:
 8007878:	2300      	movs	r3, #0
 800787a:	b510      	push	{r4, lr}
 800787c:	4604      	mov	r4, r0
 800787e:	e9c0 3300 	strd	r3, r3, [r0]
 8007882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007886:	6083      	str	r3, [r0, #8]
 8007888:	8181      	strh	r1, [r0, #12]
 800788a:	6643      	str	r3, [r0, #100]	@ 0x64
 800788c:	81c2      	strh	r2, [r0, #14]
 800788e:	6183      	str	r3, [r0, #24]
 8007890:	4619      	mov	r1, r3
 8007892:	2208      	movs	r2, #8
 8007894:	305c      	adds	r0, #92	@ 0x5c
 8007896:	f000 f948 	bl	8007b2a <memset>
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <std+0x58>)
 800789c:	6263      	str	r3, [r4, #36]	@ 0x24
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <std+0x5c>)
 80078a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078a2:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <std+0x60>)
 80078a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <std+0x64>)
 80078a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80078aa:	4b0d      	ldr	r3, [pc, #52]	@ (80078e0 <std+0x68>)
 80078ac:	6224      	str	r4, [r4, #32]
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d006      	beq.n	80078c0 <std+0x48>
 80078b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078b6:	4294      	cmp	r4, r2
 80078b8:	d002      	beq.n	80078c0 <std+0x48>
 80078ba:	33d0      	adds	r3, #208	@ 0xd0
 80078bc:	429c      	cmp	r4, r3
 80078be:	d105      	bne.n	80078cc <std+0x54>
 80078c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f000 b9ac 	b.w	8007c24 <__retarget_lock_init_recursive>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	08007aa5 	.word	0x08007aa5
 80078d4:	08007ac7 	.word	0x08007ac7
 80078d8:	08007aff 	.word	0x08007aff
 80078dc:	08007b23 	.word	0x08007b23
 80078e0:	20000474 	.word	0x20000474

080078e4 <stdio_exit_handler>:
 80078e4:	4a02      	ldr	r2, [pc, #8]	@ (80078f0 <stdio_exit_handler+0xc>)
 80078e6:	4903      	ldr	r1, [pc, #12]	@ (80078f4 <stdio_exit_handler+0x10>)
 80078e8:	4803      	ldr	r0, [pc, #12]	@ (80078f8 <stdio_exit_handler+0x14>)
 80078ea:	f000 b869 	b.w	80079c0 <_fwalk_sglue>
 80078ee:	bf00      	nop
 80078f0:	2000000c 	.word	0x2000000c
 80078f4:	0800a4f5 	.word	0x0800a4f5
 80078f8:	2000001c 	.word	0x2000001c

080078fc <cleanup_stdio>:
 80078fc:	6841      	ldr	r1, [r0, #4]
 80078fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007930 <cleanup_stdio+0x34>)
 8007900:	4299      	cmp	r1, r3
 8007902:	b510      	push	{r4, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	d001      	beq.n	800790c <cleanup_stdio+0x10>
 8007908:	f002 fdf4 	bl	800a4f4 <_fflush_r>
 800790c:	68a1      	ldr	r1, [r4, #8]
 800790e:	4b09      	ldr	r3, [pc, #36]	@ (8007934 <cleanup_stdio+0x38>)
 8007910:	4299      	cmp	r1, r3
 8007912:	d002      	beq.n	800791a <cleanup_stdio+0x1e>
 8007914:	4620      	mov	r0, r4
 8007916:	f002 fded 	bl	800a4f4 <_fflush_r>
 800791a:	68e1      	ldr	r1, [r4, #12]
 800791c:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <cleanup_stdio+0x3c>)
 800791e:	4299      	cmp	r1, r3
 8007920:	d004      	beq.n	800792c <cleanup_stdio+0x30>
 8007922:	4620      	mov	r0, r4
 8007924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007928:	f002 bde4 	b.w	800a4f4 <_fflush_r>
 800792c:	bd10      	pop	{r4, pc}
 800792e:	bf00      	nop
 8007930:	20000474 	.word	0x20000474
 8007934:	200004dc 	.word	0x200004dc
 8007938:	20000544 	.word	0x20000544

0800793c <global_stdio_init.part.0>:
 800793c:	b510      	push	{r4, lr}
 800793e:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <global_stdio_init.part.0+0x30>)
 8007940:	4c0b      	ldr	r4, [pc, #44]	@ (8007970 <global_stdio_init.part.0+0x34>)
 8007942:	4a0c      	ldr	r2, [pc, #48]	@ (8007974 <global_stdio_init.part.0+0x38>)
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	4620      	mov	r0, r4
 8007948:	2200      	movs	r2, #0
 800794a:	2104      	movs	r1, #4
 800794c:	f7ff ff94 	bl	8007878 <std>
 8007950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007954:	2201      	movs	r2, #1
 8007956:	2109      	movs	r1, #9
 8007958:	f7ff ff8e 	bl	8007878 <std>
 800795c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007960:	2202      	movs	r2, #2
 8007962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007966:	2112      	movs	r1, #18
 8007968:	f7ff bf86 	b.w	8007878 <std>
 800796c:	200005ac 	.word	0x200005ac
 8007970:	20000474 	.word	0x20000474
 8007974:	080078e5 	.word	0x080078e5

08007978 <__sfp_lock_acquire>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__sfp_lock_acquire+0x8>)
 800797a:	f000 b954 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200005b5 	.word	0x200005b5

08007984 <__sfp_lock_release>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__sfp_lock_release+0x8>)
 8007986:	f000 b94f 	b.w	8007c28 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200005b5 	.word	0x200005b5

08007990 <__sinit>:
 8007990:	b510      	push	{r4, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	f7ff fff0 	bl	8007978 <__sfp_lock_acquire>
 8007998:	6a23      	ldr	r3, [r4, #32]
 800799a:	b11b      	cbz	r3, 80079a4 <__sinit+0x14>
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	f7ff bff0 	b.w	8007984 <__sfp_lock_release>
 80079a4:	4b04      	ldr	r3, [pc, #16]	@ (80079b8 <__sinit+0x28>)
 80079a6:	6223      	str	r3, [r4, #32]
 80079a8:	4b04      	ldr	r3, [pc, #16]	@ (80079bc <__sinit+0x2c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f5      	bne.n	800799c <__sinit+0xc>
 80079b0:	f7ff ffc4 	bl	800793c <global_stdio_init.part.0>
 80079b4:	e7f2      	b.n	800799c <__sinit+0xc>
 80079b6:	bf00      	nop
 80079b8:	080078fd 	.word	0x080078fd
 80079bc:	200005ac 	.word	0x200005ac

080079c0 <_fwalk_sglue>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	4607      	mov	r7, r0
 80079c6:	4688      	mov	r8, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	2600      	movs	r6, #0
 80079cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079d0:	f1b9 0901 	subs.w	r9, r9, #1
 80079d4:	d505      	bpl.n	80079e2 <_fwalk_sglue+0x22>
 80079d6:	6824      	ldr	r4, [r4, #0]
 80079d8:	2c00      	cmp	r4, #0
 80079da:	d1f7      	bne.n	80079cc <_fwalk_sglue+0xc>
 80079dc:	4630      	mov	r0, r6
 80079de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d907      	bls.n	80079f8 <_fwalk_sglue+0x38>
 80079e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079ec:	3301      	adds	r3, #1
 80079ee:	d003      	beq.n	80079f8 <_fwalk_sglue+0x38>
 80079f0:	4629      	mov	r1, r5
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c0      	blx	r8
 80079f6:	4306      	orrs	r6, r0
 80079f8:	3568      	adds	r5, #104	@ 0x68
 80079fa:	e7e9      	b.n	80079d0 <_fwalk_sglue+0x10>

080079fc <sniprintf>:
 80079fc:	b40c      	push	{r2, r3}
 80079fe:	b530      	push	{r4, r5, lr}
 8007a00:	4b17      	ldr	r3, [pc, #92]	@ (8007a60 <sniprintf+0x64>)
 8007a02:	1e0c      	subs	r4, r1, #0
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	b09d      	sub	sp, #116	@ 0x74
 8007a08:	da08      	bge.n	8007a1c <sniprintf+0x20>
 8007a0a:	238b      	movs	r3, #139	@ 0x8b
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	b01d      	add	sp, #116	@ 0x74
 8007a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a18:	b002      	add	sp, #8
 8007a1a:	4770      	bx	lr
 8007a1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a24:	bf14      	ite	ne
 8007a26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a2a:	4623      	moveq	r3, r4
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	9006      	str	r0, [sp, #24]
 8007a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a3e:	ab21      	add	r3, sp, #132	@ 0x84
 8007a40:	a902      	add	r1, sp, #8
 8007a42:	4628      	mov	r0, r5
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	f002 fbd5 	bl	800a1f4 <_svfiprintf_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	bfbc      	itt	lt
 8007a4e:	238b      	movlt	r3, #139	@ 0x8b
 8007a50:	602b      	strlt	r3, [r5, #0]
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	d0dd      	beq.n	8007a12 <sniprintf+0x16>
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e7d9      	b.n	8007a12 <sniprintf+0x16>
 8007a5e:	bf00      	nop
 8007a60:	20000018 	.word	0x20000018

08007a64 <siprintf>:
 8007a64:	b40e      	push	{r1, r2, r3}
 8007a66:	b500      	push	{lr}
 8007a68:	b09c      	sub	sp, #112	@ 0x70
 8007a6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	9006      	str	r0, [sp, #24]
 8007a70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a74:	4809      	ldr	r0, [pc, #36]	@ (8007a9c <siprintf+0x38>)
 8007a76:	9107      	str	r1, [sp, #28]
 8007a78:	9104      	str	r1, [sp, #16]
 8007a7a:	4909      	ldr	r1, [pc, #36]	@ (8007aa0 <siprintf+0x3c>)
 8007a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a80:	9105      	str	r1, [sp, #20]
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	a902      	add	r1, sp, #8
 8007a88:	f002 fbb4 	bl	800a1f4 <_svfiprintf_r>
 8007a8c:	9b02      	ldr	r3, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	b01c      	add	sp, #112	@ 0x70
 8007a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a98:	b003      	add	sp, #12
 8007a9a:	4770      	bx	lr
 8007a9c:	20000018 	.word	0x20000018
 8007aa0:	ffff0208 	.word	0xffff0208

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 f86c 	bl	8007b88 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f840 	bl	8007b64 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b857 	b.w	8007bac <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f82d 	bl	8007b64 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b80d 	b.w	8007b44 <_close_r>

08007b2a <memset>:
 8007b2a:	4402      	add	r2, r0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d100      	bne.n	8007b34 <memset+0xa>
 8007b32:	4770      	bx	lr
 8007b34:	f803 1b01 	strb.w	r1, [r3], #1
 8007b38:	e7f9      	b.n	8007b2e <memset+0x4>
	...

08007b3c <_localeconv_r>:
 8007b3c:	4800      	ldr	r0, [pc, #0]	@ (8007b40 <_localeconv_r+0x4>)
 8007b3e:	4770      	bx	lr
 8007b40:	20000158 	.word	0x20000158

08007b44 <_close_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	@ (8007b60 <_close_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7fa f8c4 	bl	8001cdc <_close>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_close_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_close_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	200005b0 	.word	0x200005b0

08007b64 <_lseek_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	@ (8007b84 <_lseek_r+0x20>)
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	602a      	str	r2, [r5, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f7fa f8d9 	bl	8001d2a <_lseek>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_lseek_r+0x1e>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_lseek_r+0x1e>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	200005b0 	.word	0x200005b0

08007b88 <_read_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d07      	ldr	r5, [pc, #28]	@ (8007ba8 <_read_r+0x20>)
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	602a      	str	r2, [r5, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f7fa f883 	bl	8001ca2 <_read>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_read_r+0x1e>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_read_r+0x1e>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	200005b0 	.word	0x200005b0

08007bac <_write_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <_write_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 fa39 	bl	8001032 <_write>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_write_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_write_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	200005b0 	.word	0x200005b0

08007bd0 <__errno>:
 8007bd0:	4b01      	ldr	r3, [pc, #4]	@ (8007bd8 <__errno+0x8>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000018 	.word	0x20000018

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	@ (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	@ (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	@ (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	@ (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f003 fb70 	bl	800b2d4 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	0800b7f8 	.word	0x0800b7f8
 8007c18:	0800b7f8 	.word	0x0800b7f8
 8007c1c:	0800b7f8 	.word	0x0800b7f8
 8007c20:	0800b7fc 	.word	0x0800b7fc

08007c24 <__retarget_lock_init_recursive>:
 8007c24:	4770      	bx	lr

08007c26 <__retarget_lock_acquire_recursive>:
 8007c26:	4770      	bx	lr

08007c28 <__retarget_lock_release_recursive>:
 8007c28:	4770      	bx	lr
	...

08007c2c <nanf>:
 8007c2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c34 <nanf+0x8>
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	7fc00000 	.word	0x7fc00000

08007c38 <quorem>:
 8007c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	6903      	ldr	r3, [r0, #16]
 8007c3e:	690c      	ldr	r4, [r1, #16]
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	4607      	mov	r7, r0
 8007c44:	db7e      	blt.n	8007d44 <quorem+0x10c>
 8007c46:	3c01      	subs	r4, #1
 8007c48:	f101 0814 	add.w	r8, r1, #20
 8007c4c:	00a3      	lsls	r3, r4, #2
 8007c4e:	f100 0514 	add.w	r5, r0, #20
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c62:	3301      	adds	r3, #1
 8007c64:	429a      	cmp	r2, r3
 8007c66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c6e:	d32e      	bcc.n	8007cce <quorem+0x96>
 8007c70:	f04f 0a00 	mov.w	sl, #0
 8007c74:	46c4      	mov	ip, r8
 8007c76:	46ae      	mov	lr, r5
 8007c78:	46d3      	mov	fp, sl
 8007c7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c7e:	b298      	uxth	r0, r3
 8007c80:	fb06 a000 	mla	r0, r6, r0, sl
 8007c84:	0c02      	lsrs	r2, r0, #16
 8007c86:	0c1b      	lsrs	r3, r3, #16
 8007c88:	fb06 2303 	mla	r3, r6, r3, r2
 8007c8c:	f8de 2000 	ldr.w	r2, [lr]
 8007c90:	b280      	uxth	r0, r0
 8007c92:	b292      	uxth	r2, r2
 8007c94:	1a12      	subs	r2, r2, r0
 8007c96:	445a      	add	r2, fp
 8007c98:	f8de 0000 	ldr.w	r0, [lr]
 8007c9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ca6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007caa:	b292      	uxth	r2, r2
 8007cac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cb0:	45e1      	cmp	r9, ip
 8007cb2:	f84e 2b04 	str.w	r2, [lr], #4
 8007cb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007cba:	d2de      	bcs.n	8007c7a <quorem+0x42>
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	58eb      	ldr	r3, [r5, r3]
 8007cc0:	b92b      	cbnz	r3, 8007cce <quorem+0x96>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	3b04      	subs	r3, #4
 8007cc6:	429d      	cmp	r5, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	d32f      	bcc.n	8007d2c <quorem+0xf4>
 8007ccc:	613c      	str	r4, [r7, #16]
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f001 f9c2 	bl	8009058 <__mcmp>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	db25      	blt.n	8007d24 <quorem+0xec>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ce0:	f8d1 c000 	ldr.w	ip, [r1]
 8007ce4:	fa1f fe82 	uxth.w	lr, r2
 8007ce8:	fa1f f38c 	uxth.w	r3, ip
 8007cec:	eba3 030e 	sub.w	r3, r3, lr
 8007cf0:	4403      	add	r3, r0
 8007cf2:	0c12      	lsrs	r2, r2, #16
 8007cf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d02:	45c1      	cmp	r9, r8
 8007d04:	f841 3b04 	str.w	r3, [r1], #4
 8007d08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d0c:	d2e6      	bcs.n	8007cdc <quorem+0xa4>
 8007d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d16:	b922      	cbnz	r2, 8007d22 <quorem+0xea>
 8007d18:	3b04      	subs	r3, #4
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	d30b      	bcc.n	8007d38 <quorem+0x100>
 8007d20:	613c      	str	r4, [r7, #16]
 8007d22:	3601      	adds	r6, #1
 8007d24:	4630      	mov	r0, r6
 8007d26:	b003      	add	sp, #12
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	d1cb      	bne.n	8007ccc <quorem+0x94>
 8007d34:	3c01      	subs	r4, #1
 8007d36:	e7c6      	b.n	8007cc6 <quorem+0x8e>
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	3b04      	subs	r3, #4
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d1ef      	bne.n	8007d20 <quorem+0xe8>
 8007d40:	3c01      	subs	r4, #1
 8007d42:	e7ea      	b.n	8007d1a <quorem+0xe2>
 8007d44:	2000      	movs	r0, #0
 8007d46:	e7ee      	b.n	8007d26 <quorem+0xee>

08007d48 <_dtoa_r>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	69c7      	ldr	r7, [r0, #28]
 8007d4e:	b099      	sub	sp, #100	@ 0x64
 8007d50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d54:	ec55 4b10 	vmov	r4, r5, d0
 8007d58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d5c:	4683      	mov	fp, r0
 8007d5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d62:	b97f      	cbnz	r7, 8007d84 <_dtoa_r+0x3c>
 8007d64:	2010      	movs	r0, #16
 8007d66:	f000 fdfd 	bl	8008964 <malloc>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d70:	b920      	cbnz	r0, 8007d7c <_dtoa_r+0x34>
 8007d72:	4ba7      	ldr	r3, [pc, #668]	@ (8008010 <_dtoa_r+0x2c8>)
 8007d74:	21ef      	movs	r1, #239	@ 0xef
 8007d76:	48a7      	ldr	r0, [pc, #668]	@ (8008014 <_dtoa_r+0x2cc>)
 8007d78:	f002 fc36 	bl	800a5e8 <__assert_func>
 8007d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d80:	6007      	str	r7, [r0, #0]
 8007d82:	60c7      	str	r7, [r0, #12]
 8007d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b159      	cbz	r1, 8007da4 <_dtoa_r+0x5c>
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	604a      	str	r2, [r1, #4]
 8007d90:	2301      	movs	r3, #1
 8007d92:	4093      	lsls	r3, r2
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 feda 	bl	8008b50 <_Bfree>
 8007d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	1e2b      	subs	r3, r5, #0
 8007da6:	bfb9      	ittee	lt
 8007da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	9303      	strlt	r3, [sp, #12]
 8007dae:	2300      	movge	r3, #0
 8007db0:	6033      	strge	r3, [r6, #0]
 8007db2:	9f03      	ldr	r7, [sp, #12]
 8007db4:	4b98      	ldr	r3, [pc, #608]	@ (8008018 <_dtoa_r+0x2d0>)
 8007db6:	bfbc      	itt	lt
 8007db8:	2201      	movlt	r2, #1
 8007dba:	6032      	strlt	r2, [r6, #0]
 8007dbc:	43bb      	bics	r3, r7
 8007dbe:	d112      	bne.n	8007de6 <_dtoa_r+0x9e>
 8007dc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dcc:	4323      	orrs	r3, r4
 8007dce:	f000 854d 	beq.w	800886c <_dtoa_r+0xb24>
 8007dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800802c <_dtoa_r+0x2e4>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 854f 	beq.w	800887c <_dtoa_r+0xb34>
 8007dde:	f10a 0303 	add.w	r3, sl, #3
 8007de2:	f000 bd49 	b.w	8008878 <_dtoa_r+0xb30>
 8007de6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	ec51 0b17 	vmov	r0, r1, d7
 8007df0:	2300      	movs	r3, #0
 8007df2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007df6:	f7f8 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	b158      	cbz	r0, 8007e16 <_dtoa_r+0xce>
 8007dfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e00:	2301      	movs	r3, #1
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e06:	b113      	cbz	r3, 8007e0e <_dtoa_r+0xc6>
 8007e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e0a:	4b84      	ldr	r3, [pc, #528]	@ (800801c <_dtoa_r+0x2d4>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008030 <_dtoa_r+0x2e8>
 8007e12:	f000 bd33 	b.w	800887c <_dtoa_r+0xb34>
 8007e16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f001 fa3a 	bl	8009298 <__d2b>
 8007e24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e28:	4681      	mov	r9, r0
 8007e2a:	2e00      	cmp	r6, #0
 8007e2c:	d077      	beq.n	8007f1e <_dtoa_r+0x1d6>
 8007e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b74      	ldr	r3, [pc, #464]	@ (8008020 <_dtoa_r+0x2d8>)
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	a369      	add	r3, pc, #420	@ (adr r3, 8007ff8 <_dtoa_r+0x2b0>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fbce 	bl	80005f8 <__aeabi_dmul>
 8007e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8008000 <_dtoa_r+0x2b8>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fa13 	bl	800028c <__adddf3>
 8007e66:	4604      	mov	r4, r0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	f7f8 fb5a 	bl	8000524 <__aeabi_i2d>
 8007e70:	a365      	add	r3, pc, #404	@ (adr r3, 8008008 <_dtoa_r+0x2c0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fa03 	bl	800028c <__adddf3>
 8007e86:	4604      	mov	r4, r0
 8007e88:	460d      	mov	r5, r1
 8007e8a:	f7f8 fe65 	bl	8000b58 <__aeabi_d2iz>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4607      	mov	r7, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fe20 	bl	8000adc <__aeabi_dcmplt>
 8007e9c:	b140      	cbz	r0, 8007eb0 <_dtoa_r+0x168>
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7f8 fb40 	bl	8000524 <__aeabi_i2d>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	f7f8 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eac:	b900      	cbnz	r0, 8007eb0 <_dtoa_r+0x168>
 8007eae:	3f01      	subs	r7, #1
 8007eb0:	2f16      	cmp	r7, #22
 8007eb2:	d851      	bhi.n	8007f58 <_dtoa_r+0x210>
 8007eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008024 <_dtoa_r+0x2dc>)
 8007eb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	f7f8 fe0b 	bl	8000adc <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d048      	beq.n	8007f5c <_dtoa_r+0x214>
 8007eca:	3f01      	subs	r7, #1
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ed2:	1b9b      	subs	r3, r3, r6
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	bf44      	itt	mi
 8007ed8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007edc:	2300      	movmi	r3, #0
 8007ede:	9208      	str	r2, [sp, #32]
 8007ee0:	bf54      	ite	pl
 8007ee2:	f04f 0800 	movpl.w	r8, #0
 8007ee6:	9308      	strmi	r3, [sp, #32]
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	db39      	blt.n	8007f60 <_dtoa_r+0x218>
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ef0:	443b      	add	r3, r7
 8007ef2:	9308      	str	r3, [sp, #32]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d864      	bhi.n	8007fc8 <_dtoa_r+0x280>
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	bfc4      	itt	gt
 8007f02:	3b04      	subgt	r3, #4
 8007f04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	f1a3 0302 	sub.w	r3, r3, #2
 8007f0c:	bfcc      	ite	gt
 8007f0e:	2400      	movgt	r4, #0
 8007f10:	2401      	movle	r4, #1
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d863      	bhi.n	8007fde <_dtoa_r+0x296>
 8007f16:	e8df f003 	tbb	[pc, r3]
 8007f1a:	372a      	.short	0x372a
 8007f1c:	5535      	.short	0x5535
 8007f1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007f22:	441e      	add	r6, r3
 8007f24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	bfc1      	itttt	gt
 8007f2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f30:	409f      	lslgt	r7, r3
 8007f32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f3a:	bfd6      	itet	le
 8007f3c:	f1c3 0320 	rsble	r3, r3, #32
 8007f40:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f44:	fa04 f003 	lslle.w	r0, r4, r3
 8007f48:	f7f8 fadc 	bl	8000504 <__aeabi_ui2d>
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f52:	3e01      	subs	r6, #1
 8007f54:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f56:	e777      	b.n	8007e48 <_dtoa_r+0x100>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7b8      	b.n	8007ece <_dtoa_r+0x186>
 8007f5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f5e:	e7b7      	b.n	8007ed0 <_dtoa_r+0x188>
 8007f60:	427b      	negs	r3, r7
 8007f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f64:	2300      	movs	r3, #0
 8007f66:	eba8 0807 	sub.w	r8, r8, r7
 8007f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f6c:	e7c4      	b.n	8007ef8 <_dtoa_r+0x1b0>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc35      	bgt.n	8007fe4 <_dtoa_r+0x29c>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f82:	e00b      	b.n	8007f9c <_dtoa_r+0x254>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f3      	b.n	8007f70 <_dtoa_r+0x228>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	bfb8      	it	lt
 8007f9a:	2301      	movlt	r3, #1
 8007f9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	f102 0514 	add.w	r5, r2, #20
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	d91f      	bls.n	8007fec <_dtoa_r+0x2a4>
 8007fac:	6041      	str	r1, [r0, #4]
 8007fae:	4658      	mov	r0, fp
 8007fb0:	f000 fd8e 	bl	8008ad0 <_Balloc>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d13c      	bne.n	8008034 <_dtoa_r+0x2ec>
 8007fba:	4b1b      	ldr	r3, [pc, #108]	@ (8008028 <_dtoa_r+0x2e0>)
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007fc2:	e6d8      	b.n	8007d76 <_dtoa_r+0x2e>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7e0      	b.n	8007f8a <_dtoa_r+0x242>
 8007fc8:	2401      	movs	r4, #1
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2312      	movs	r3, #18
 8007fdc:	e7d0      	b.n	8007f80 <_dtoa_r+0x238>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe2:	e7f5      	b.n	8007fd0 <_dtoa_r+0x288>
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	e7d7      	b.n	8007f9c <_dtoa_r+0x254>
 8007fec:	3101      	adds	r1, #1
 8007fee:	0052      	lsls	r2, r2, #1
 8007ff0:	e7d8      	b.n	8007fa4 <_dtoa_r+0x25c>
 8007ff2:	bf00      	nop
 8007ff4:	f3af 8000 	nop.w
 8007ff8:	636f4361 	.word	0x636f4361
 8007ffc:	3fd287a7 	.word	0x3fd287a7
 8008000:	8b60c8b3 	.word	0x8b60c8b3
 8008004:	3fc68a28 	.word	0x3fc68a28
 8008008:	509f79fb 	.word	0x509f79fb
 800800c:	3fd34413 	.word	0x3fd34413
 8008010:	0800b40a 	.word	0x0800b40a
 8008014:	0800b421 	.word	0x0800b421
 8008018:	7ff00000 	.word	0x7ff00000
 800801c:	0800b3d5 	.word	0x0800b3d5
 8008020:	3ff80000 	.word	0x3ff80000
 8008024:	0800b518 	.word	0x0800b518
 8008028:	0800b479 	.word	0x0800b479
 800802c:	0800b406 	.word	0x0800b406
 8008030:	0800b3d4 	.word	0x0800b3d4
 8008034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008038:	6018      	str	r0, [r3, #0]
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b0e      	cmp	r3, #14
 800803e:	f200 80a4 	bhi.w	800818a <_dtoa_r+0x442>
 8008042:	2c00      	cmp	r4, #0
 8008044:	f000 80a1 	beq.w	800818a <_dtoa_r+0x442>
 8008048:	2f00      	cmp	r7, #0
 800804a:	dd33      	ble.n	80080b4 <_dtoa_r+0x36c>
 800804c:	4bad      	ldr	r3, [pc, #692]	@ (8008304 <_dtoa_r+0x5bc>)
 800804e:	f007 020f 	and.w	r2, r7, #15
 8008052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008056:	ed93 7b00 	vldr	d7, [r3]
 800805a:	05f8      	lsls	r0, r7, #23
 800805c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008064:	d516      	bpl.n	8008094 <_dtoa_r+0x34c>
 8008066:	4ba8      	ldr	r3, [pc, #672]	@ (8008308 <_dtoa_r+0x5c0>)
 8008068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800806c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008070:	f7f8 fbec 	bl	800084c <__aeabi_ddiv>
 8008074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008078:	f004 040f 	and.w	r4, r4, #15
 800807c:	2603      	movs	r6, #3
 800807e:	4da2      	ldr	r5, [pc, #648]	@ (8008308 <_dtoa_r+0x5c0>)
 8008080:	b954      	cbnz	r4, 8008098 <_dtoa_r+0x350>
 8008082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808a:	f7f8 fbdf 	bl	800084c <__aeabi_ddiv>
 800808e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008092:	e028      	b.n	80080e6 <_dtoa_r+0x39e>
 8008094:	2602      	movs	r6, #2
 8008096:	e7f2      	b.n	800807e <_dtoa_r+0x336>
 8008098:	07e1      	lsls	r1, r4, #31
 800809a:	d508      	bpl.n	80080ae <_dtoa_r+0x366>
 800809c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080a4:	f7f8 faa8 	bl	80005f8 <__aeabi_dmul>
 80080a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ac:	3601      	adds	r6, #1
 80080ae:	1064      	asrs	r4, r4, #1
 80080b0:	3508      	adds	r5, #8
 80080b2:	e7e5      	b.n	8008080 <_dtoa_r+0x338>
 80080b4:	f000 80d2 	beq.w	800825c <_dtoa_r+0x514>
 80080b8:	427c      	negs	r4, r7
 80080ba:	4b92      	ldr	r3, [pc, #584]	@ (8008304 <_dtoa_r+0x5bc>)
 80080bc:	4d92      	ldr	r5, [pc, #584]	@ (8008308 <_dtoa_r+0x5c0>)
 80080be:	f004 020f 	and.w	r2, r4, #15
 80080c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d6:	1124      	asrs	r4, r4, #4
 80080d8:	2300      	movs	r3, #0
 80080da:	2602      	movs	r6, #2
 80080dc:	2c00      	cmp	r4, #0
 80080de:	f040 80b2 	bne.w	8008246 <_dtoa_r+0x4fe>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1d3      	bne.n	800808e <_dtoa_r+0x346>
 80080e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80b7 	beq.w	8008260 <_dtoa_r+0x518>
 80080f2:	4b86      	ldr	r3, [pc, #536]	@ (800830c <_dtoa_r+0x5c4>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fcef 	bl	8000adc <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f000 80ae 	beq.w	8008260 <_dtoa_r+0x518>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80aa 	beq.w	8008260 <_dtoa_r+0x518>
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dd37      	ble.n	8008182 <_dtoa_r+0x43a>
 8008112:	1e7b      	subs	r3, r7, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	4620      	mov	r0, r4
 8008118:	4b7d      	ldr	r3, [pc, #500]	@ (8008310 <_dtoa_r+0x5c8>)
 800811a:	2200      	movs	r2, #0
 800811c:	4629      	mov	r1, r5
 800811e:	f7f8 fa6b 	bl	80005f8 <__aeabi_dmul>
 8008122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008126:	9c00      	ldr	r4, [sp, #0]
 8008128:	3601      	adds	r6, #1
 800812a:	4630      	mov	r0, r6
 800812c:	f7f8 f9fa 	bl	8000524 <__aeabi_i2d>
 8008130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	4b76      	ldr	r3, [pc, #472]	@ (8008314 <_dtoa_r+0x5cc>)
 800813a:	2200      	movs	r2, #0
 800813c:	f7f8 f8a6 	bl	800028c <__adddf3>
 8008140:	4605      	mov	r5, r0
 8008142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008146:	2c00      	cmp	r4, #0
 8008148:	f040 808d 	bne.w	8008266 <_dtoa_r+0x51e>
 800814c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008150:	4b71      	ldr	r3, [pc, #452]	@ (8008318 <_dtoa_r+0x5d0>)
 8008152:	2200      	movs	r2, #0
 8008154:	f7f8 f898 	bl	8000288 <__aeabi_dsub>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008160:	462a      	mov	r2, r5
 8008162:	4633      	mov	r3, r6
 8008164:	f7f8 fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 828b 	bne.w	8008684 <_dtoa_r+0x93c>
 800816e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008172:	462a      	mov	r2, r5
 8008174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008178:	f7f8 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 8128 	bne.w	80083d2 <_dtoa_r+0x68a>
 8008182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800818a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f2c0 815a 	blt.w	8008446 <_dtoa_r+0x6fe>
 8008192:	2f0e      	cmp	r7, #14
 8008194:	f300 8157 	bgt.w	8008446 <_dtoa_r+0x6fe>
 8008198:	4b5a      	ldr	r3, [pc, #360]	@ (8008304 <_dtoa_r+0x5bc>)
 800819a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800819e:	ed93 7b00 	vldr	d7, [r3]
 80081a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	ed8d 7b00 	vstr	d7, [sp]
 80081aa:	da03      	bge.n	80081b4 <_dtoa_r+0x46c>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f340 8101 	ble.w	80083b6 <_dtoa_r+0x66e>
 80081b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081b8:	4656      	mov	r6, sl
 80081ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fb43 	bl	800084c <__aeabi_ddiv>
 80081c6:	f7f8 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80081ca:	4680      	mov	r8, r0
 80081cc:	f7f8 f9aa 	bl	8000524 <__aeabi_i2d>
 80081d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081e4:	f7f8 f850 	bl	8000288 <__aeabi_dsub>
 80081e8:	f806 4b01 	strb.w	r4, [r6], #1
 80081ec:	9d07      	ldr	r5, [sp, #28]
 80081ee:	eba6 040a 	sub.w	r4, r6, sl
 80081f2:	42a5      	cmp	r5, r4
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	f040 8117 	bne.w	800842a <_dtoa_r+0x6e2>
 80081fc:	f7f8 f846 	bl	800028c <__adddf3>
 8008200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008204:	4604      	mov	r4, r0
 8008206:	460d      	mov	r5, r1
 8008208:	f7f8 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80f9 	bne.w	8008404 <_dtoa_r+0x6bc>
 8008212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800821e:	b118      	cbz	r0, 8008228 <_dtoa_r+0x4e0>
 8008220:	f018 0f01 	tst.w	r8, #1
 8008224:	f040 80ee 	bne.w	8008404 <_dtoa_r+0x6bc>
 8008228:	4649      	mov	r1, r9
 800822a:	4658      	mov	r0, fp
 800822c:	f000 fc90 	bl	8008b50 <_Bfree>
 8008230:	2300      	movs	r3, #0
 8008232:	7033      	strb	r3, [r6, #0]
 8008234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008236:	3701      	adds	r7, #1
 8008238:	601f      	str	r7, [r3, #0]
 800823a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 831d 	beq.w	800887c <_dtoa_r+0xb34>
 8008242:	601e      	str	r6, [r3, #0]
 8008244:	e31a      	b.n	800887c <_dtoa_r+0xb34>
 8008246:	07e2      	lsls	r2, r4, #31
 8008248:	d505      	bpl.n	8008256 <_dtoa_r+0x50e>
 800824a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	3601      	adds	r6, #1
 8008254:	2301      	movs	r3, #1
 8008256:	1064      	asrs	r4, r4, #1
 8008258:	3508      	adds	r5, #8
 800825a:	e73f      	b.n	80080dc <_dtoa_r+0x394>
 800825c:	2602      	movs	r6, #2
 800825e:	e742      	b.n	80080e6 <_dtoa_r+0x39e>
 8008260:	9c07      	ldr	r4, [sp, #28]
 8008262:	9704      	str	r7, [sp, #16]
 8008264:	e761      	b.n	800812a <_dtoa_r+0x3e2>
 8008266:	4b27      	ldr	r3, [pc, #156]	@ (8008304 <_dtoa_r+0x5bc>)
 8008268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800826a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800826e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008272:	4454      	add	r4, sl
 8008274:	2900      	cmp	r1, #0
 8008276:	d053      	beq.n	8008320 <_dtoa_r+0x5d8>
 8008278:	4928      	ldr	r1, [pc, #160]	@ (800831c <_dtoa_r+0x5d4>)
 800827a:	2000      	movs	r0, #0
 800827c:	f7f8 fae6 	bl	800084c <__aeabi_ddiv>
 8008280:	4633      	mov	r3, r6
 8008282:	462a      	mov	r2, r5
 8008284:	f7f8 f800 	bl	8000288 <__aeabi_dsub>
 8008288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800828c:	4656      	mov	r6, sl
 800828e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008292:	f7f8 fc61 	bl	8000b58 <__aeabi_d2iz>
 8008296:	4605      	mov	r5, r0
 8008298:	f7f8 f944 	bl	8000524 <__aeabi_i2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a4:	f7f7 fff0 	bl	8000288 <__aeabi_dsub>
 80082a8:	3530      	adds	r5, #48	@ 0x30
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082b2:	f806 5b01 	strb.w	r5, [r6], #1
 80082b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ba:	f7f8 fc0f 	bl	8000adc <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d171      	bne.n	80083a6 <_dtoa_r+0x65e>
 80082c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082c6:	4911      	ldr	r1, [pc, #68]	@ (800830c <_dtoa_r+0x5c4>)
 80082c8:	2000      	movs	r0, #0
 80082ca:	f7f7 ffdd 	bl	8000288 <__aeabi_dsub>
 80082ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082d2:	f7f8 fc03 	bl	8000adc <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8095 	bne.w	8008406 <_dtoa_r+0x6be>
 80082dc:	42a6      	cmp	r6, r4
 80082de:	f43f af50 	beq.w	8008182 <_dtoa_r+0x43a>
 80082e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <_dtoa_r+0x5c8>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	f7f8 f985 	bl	80005f8 <__aeabi_dmul>
 80082ee:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <_dtoa_r+0x5c8>)
 80082f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082f4:	2200      	movs	r2, #0
 80082f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fa:	f7f8 f97d 	bl	80005f8 <__aeabi_dmul>
 80082fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008302:	e7c4      	b.n	800828e <_dtoa_r+0x546>
 8008304:	0800b518 	.word	0x0800b518
 8008308:	0800b4f0 	.word	0x0800b4f0
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	40240000 	.word	0x40240000
 8008314:	401c0000 	.word	0x401c0000
 8008318:	40140000 	.word	0x40140000
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800832c:	9415      	str	r4, [sp, #84]	@ 0x54
 800832e:	4656      	mov	r6, sl
 8008330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008334:	f7f8 fc10 	bl	8000b58 <__aeabi_d2iz>
 8008338:	4605      	mov	r5, r0
 800833a:	f7f8 f8f3 	bl	8000524 <__aeabi_i2d>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008346:	f7f7 ff9f 	bl	8000288 <__aeabi_dsub>
 800834a:	3530      	adds	r5, #48	@ 0x30
 800834c:	f806 5b01 	strb.w	r5, [r6], #1
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	42a6      	cmp	r6, r4
 8008356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	d124      	bne.n	80083aa <_dtoa_r+0x662>
 8008360:	4bac      	ldr	r3, [pc, #688]	@ (8008614 <_dtoa_r+0x8cc>)
 8008362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008366:	f7f7 ff91 	bl	800028c <__adddf3>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	f7f8 fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8008376:	2800      	cmp	r0, #0
 8008378:	d145      	bne.n	8008406 <_dtoa_r+0x6be>
 800837a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800837e:	49a5      	ldr	r1, [pc, #660]	@ (8008614 <_dtoa_r+0x8cc>)
 8008380:	2000      	movs	r0, #0
 8008382:	f7f7 ff81 	bl	8000288 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f8 fba5 	bl	8000adc <__aeabi_dcmplt>
 8008392:	2800      	cmp	r0, #0
 8008394:	f43f aef5 	beq.w	8008182 <_dtoa_r+0x43a>
 8008398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800839a:	1e73      	subs	r3, r6, #1
 800839c:	9315      	str	r3, [sp, #84]	@ 0x54
 800839e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083a2:	2b30      	cmp	r3, #48	@ 0x30
 80083a4:	d0f8      	beq.n	8008398 <_dtoa_r+0x650>
 80083a6:	9f04      	ldr	r7, [sp, #16]
 80083a8:	e73e      	b.n	8008228 <_dtoa_r+0x4e0>
 80083aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008618 <_dtoa_r+0x8d0>)
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b4:	e7bc      	b.n	8008330 <_dtoa_r+0x5e8>
 80083b6:	d10c      	bne.n	80083d2 <_dtoa_r+0x68a>
 80083b8:	4b98      	ldr	r3, [pc, #608]	@ (800861c <_dtoa_r+0x8d4>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c0:	f7f8 f91a 	bl	80005f8 <__aeabi_dmul>
 80083c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c8:	f7f8 fb9c 	bl	8000b04 <__aeabi_dcmpge>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f000 8157 	beq.w	8008680 <_dtoa_r+0x938>
 80083d2:	2400      	movs	r4, #0
 80083d4:	4625      	mov	r5, r4
 80083d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d8:	43db      	mvns	r3, r3
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	4656      	mov	r6, sl
 80083de:	2700      	movs	r7, #0
 80083e0:	4621      	mov	r1, r4
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 fbb4 	bl	8008b50 <_Bfree>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d0dc      	beq.n	80083a6 <_dtoa_r+0x65e>
 80083ec:	b12f      	cbz	r7, 80083fa <_dtoa_r+0x6b2>
 80083ee:	42af      	cmp	r7, r5
 80083f0:	d003      	beq.n	80083fa <_dtoa_r+0x6b2>
 80083f2:	4639      	mov	r1, r7
 80083f4:	4658      	mov	r0, fp
 80083f6:	f000 fbab 	bl	8008b50 <_Bfree>
 80083fa:	4629      	mov	r1, r5
 80083fc:	4658      	mov	r0, fp
 80083fe:	f000 fba7 	bl	8008b50 <_Bfree>
 8008402:	e7d0      	b.n	80083a6 <_dtoa_r+0x65e>
 8008404:	9704      	str	r7, [sp, #16]
 8008406:	4633      	mov	r3, r6
 8008408:	461e      	mov	r6, r3
 800840a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800840e:	2a39      	cmp	r2, #57	@ 0x39
 8008410:	d107      	bne.n	8008422 <_dtoa_r+0x6da>
 8008412:	459a      	cmp	sl, r3
 8008414:	d1f8      	bne.n	8008408 <_dtoa_r+0x6c0>
 8008416:	9a04      	ldr	r2, [sp, #16]
 8008418:	3201      	adds	r2, #1
 800841a:	9204      	str	r2, [sp, #16]
 800841c:	2230      	movs	r2, #48	@ 0x30
 800841e:	f88a 2000 	strb.w	r2, [sl]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e7bd      	b.n	80083a6 <_dtoa_r+0x65e>
 800842a:	4b7b      	ldr	r3, [pc, #492]	@ (8008618 <_dtoa_r+0x8d0>)
 800842c:	2200      	movs	r2, #0
 800842e:	f7f8 f8e3 	bl	80005f8 <__aeabi_dmul>
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	f7f8 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800843e:	2800      	cmp	r0, #0
 8008440:	f43f aebb 	beq.w	80081ba <_dtoa_r+0x472>
 8008444:	e6f0      	b.n	8008228 <_dtoa_r+0x4e0>
 8008446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008448:	2a00      	cmp	r2, #0
 800844a:	f000 80db 	beq.w	8008604 <_dtoa_r+0x8bc>
 800844e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008450:	2a01      	cmp	r2, #1
 8008452:	f300 80bf 	bgt.w	80085d4 <_dtoa_r+0x88c>
 8008456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008458:	2a00      	cmp	r2, #0
 800845a:	f000 80b7 	beq.w	80085cc <_dtoa_r+0x884>
 800845e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008464:	4646      	mov	r6, r8
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	2101      	movs	r1, #1
 800846a:	441a      	add	r2, r3
 800846c:	4658      	mov	r0, fp
 800846e:	4498      	add	r8, r3
 8008470:	9208      	str	r2, [sp, #32]
 8008472:	f000 fc6b 	bl	8008d4c <__i2b>
 8008476:	4605      	mov	r5, r0
 8008478:	b15e      	cbz	r6, 8008492 <_dtoa_r+0x74a>
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd08      	ble.n	8008492 <_dtoa_r+0x74a>
 8008480:	42b3      	cmp	r3, r6
 8008482:	9a08      	ldr	r2, [sp, #32]
 8008484:	bfa8      	it	ge
 8008486:	4633      	movge	r3, r6
 8008488:	eba8 0803 	sub.w	r8, r8, r3
 800848c:	1af6      	subs	r6, r6, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008494:	b1f3      	cbz	r3, 80084d4 <_dtoa_r+0x78c>
 8008496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80b7 	beq.w	800860c <_dtoa_r+0x8c4>
 800849e:	b18c      	cbz	r4, 80084c4 <_dtoa_r+0x77c>
 80084a0:	4629      	mov	r1, r5
 80084a2:	4622      	mov	r2, r4
 80084a4:	4658      	mov	r0, fp
 80084a6:	f000 fd11 	bl	8008ecc <__pow5mult>
 80084aa:	464a      	mov	r2, r9
 80084ac:	4601      	mov	r1, r0
 80084ae:	4605      	mov	r5, r0
 80084b0:	4658      	mov	r0, fp
 80084b2:	f000 fc61 	bl	8008d78 <__multiply>
 80084b6:	4649      	mov	r1, r9
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	4658      	mov	r0, fp
 80084bc:	f000 fb48 	bl	8008b50 <_Bfree>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	4699      	mov	r9, r3
 80084c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c6:	1b1a      	subs	r2, r3, r4
 80084c8:	d004      	beq.n	80084d4 <_dtoa_r+0x78c>
 80084ca:	4649      	mov	r1, r9
 80084cc:	4658      	mov	r0, fp
 80084ce:	f000 fcfd 	bl	8008ecc <__pow5mult>
 80084d2:	4681      	mov	r9, r0
 80084d4:	2101      	movs	r1, #1
 80084d6:	4658      	mov	r0, fp
 80084d8:	f000 fc38 	bl	8008d4c <__i2b>
 80084dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084de:	4604      	mov	r4, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 81cf 	beq.w	8008884 <_dtoa_r+0xb3c>
 80084e6:	461a      	mov	r2, r3
 80084e8:	4601      	mov	r1, r0
 80084ea:	4658      	mov	r0, fp
 80084ec:	f000 fcee 	bl	8008ecc <__pow5mult>
 80084f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	4604      	mov	r4, r0
 80084f6:	f300 8095 	bgt.w	8008624 <_dtoa_r+0x8dc>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8087 	bne.w	8008610 <_dtoa_r+0x8c8>
 8008502:	9b03      	ldr	r3, [sp, #12]
 8008504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 8089 	bne.w	8008620 <_dtoa_r+0x8d8>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	051b      	lsls	r3, r3, #20
 8008518:	b12b      	cbz	r3, 8008526 <_dtoa_r+0x7de>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	3301      	adds	r3, #1
 800851e:	9308      	str	r3, [sp, #32]
 8008520:	f108 0801 	add.w	r8, r8, #1
 8008524:	2301      	movs	r3, #1
 8008526:	930a      	str	r3, [sp, #40]	@ 0x28
 8008528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 81b0 	beq.w	8008890 <_dtoa_r+0xb48>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008536:	6918      	ldr	r0, [r3, #16]
 8008538:	f000 fbbc 	bl	8008cb4 <__hi0bits>
 800853c:	f1c0 0020 	rsb	r0, r0, #32
 8008540:	9b08      	ldr	r3, [sp, #32]
 8008542:	4418      	add	r0, r3
 8008544:	f010 001f 	ands.w	r0, r0, #31
 8008548:	d077      	beq.n	800863a <_dtoa_r+0x8f2>
 800854a:	f1c0 0320 	rsb	r3, r0, #32
 800854e:	2b04      	cmp	r3, #4
 8008550:	dd6b      	ble.n	800862a <_dtoa_r+0x8e2>
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	f1c0 001c 	rsb	r0, r0, #28
 8008558:	4403      	add	r3, r0
 800855a:	4480      	add	r8, r0
 800855c:	4406      	add	r6, r0
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	f1b8 0f00 	cmp.w	r8, #0
 8008564:	dd05      	ble.n	8008572 <_dtoa_r+0x82a>
 8008566:	4649      	mov	r1, r9
 8008568:	4642      	mov	r2, r8
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fd08 	bl	8008f80 <__lshift>
 8008570:	4681      	mov	r9, r0
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	2b00      	cmp	r3, #0
 8008576:	dd05      	ble.n	8008584 <_dtoa_r+0x83c>
 8008578:	4621      	mov	r1, r4
 800857a:	461a      	mov	r2, r3
 800857c:	4658      	mov	r0, fp
 800857e:	f000 fcff 	bl	8008f80 <__lshift>
 8008582:	4604      	mov	r4, r0
 8008584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008586:	2b00      	cmp	r3, #0
 8008588:	d059      	beq.n	800863e <_dtoa_r+0x8f6>
 800858a:	4621      	mov	r1, r4
 800858c:	4648      	mov	r0, r9
 800858e:	f000 fd63 	bl	8009058 <__mcmp>
 8008592:	2800      	cmp	r0, #0
 8008594:	da53      	bge.n	800863e <_dtoa_r+0x8f6>
 8008596:	1e7b      	subs	r3, r7, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	4649      	mov	r1, r9
 800859c:	2300      	movs	r3, #0
 800859e:	220a      	movs	r2, #10
 80085a0:	4658      	mov	r0, fp
 80085a2:	f000 faf7 	bl	8008b94 <__multadd>
 80085a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a8:	4681      	mov	r9, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8172 	beq.w	8008894 <_dtoa_r+0xb4c>
 80085b0:	2300      	movs	r3, #0
 80085b2:	4629      	mov	r1, r5
 80085b4:	220a      	movs	r2, #10
 80085b6:	4658      	mov	r0, fp
 80085b8:	f000 faec 	bl	8008b94 <__multadd>
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	4605      	mov	r5, r0
 80085c2:	dc67      	bgt.n	8008694 <_dtoa_r+0x94c>
 80085c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dc41      	bgt.n	800864e <_dtoa_r+0x906>
 80085ca:	e063      	b.n	8008694 <_dtoa_r+0x94c>
 80085cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085d2:	e746      	b.n	8008462 <_dtoa_r+0x71a>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	1e5c      	subs	r4, r3, #1
 80085d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085da:	42a3      	cmp	r3, r4
 80085dc:	bfbf      	itttt	lt
 80085de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80085e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085e4:	1ae3      	sublt	r3, r4, r3
 80085e6:	bfb4      	ite	lt
 80085e8:	18d2      	addlt	r2, r2, r3
 80085ea:	1b1c      	subge	r4, r3, r4
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	bfbc      	itt	lt
 80085f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80085f2:	2400      	movlt	r4, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb5      	itete	lt
 80085f8:	eba8 0603 	sublt.w	r6, r8, r3
 80085fc:	9b07      	ldrge	r3, [sp, #28]
 80085fe:	2300      	movlt	r3, #0
 8008600:	4646      	movge	r6, r8
 8008602:	e730      	b.n	8008466 <_dtoa_r+0x71e>
 8008604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008608:	4646      	mov	r6, r8
 800860a:	e735      	b.n	8008478 <_dtoa_r+0x730>
 800860c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800860e:	e75c      	b.n	80084ca <_dtoa_r+0x782>
 8008610:	2300      	movs	r3, #0
 8008612:	e788      	b.n	8008526 <_dtoa_r+0x7de>
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	40240000 	.word	0x40240000
 800861c:	40140000 	.word	0x40140000
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	e780      	b.n	8008526 <_dtoa_r+0x7de>
 8008624:	2300      	movs	r3, #0
 8008626:	930a      	str	r3, [sp, #40]	@ 0x28
 8008628:	e782      	b.n	8008530 <_dtoa_r+0x7e8>
 800862a:	d099      	beq.n	8008560 <_dtoa_r+0x818>
 800862c:	9a08      	ldr	r2, [sp, #32]
 800862e:	331c      	adds	r3, #28
 8008630:	441a      	add	r2, r3
 8008632:	4498      	add	r8, r3
 8008634:	441e      	add	r6, r3
 8008636:	9208      	str	r2, [sp, #32]
 8008638:	e792      	b.n	8008560 <_dtoa_r+0x818>
 800863a:	4603      	mov	r3, r0
 800863c:	e7f6      	b.n	800862c <_dtoa_r+0x8e4>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9704      	str	r7, [sp, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dc20      	bgt.n	8008688 <_dtoa_r+0x940>
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864a:	2b02      	cmp	r3, #2
 800864c:	dd1e      	ble.n	800868c <_dtoa_r+0x944>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f aec0 	bne.w	80083d6 <_dtoa_r+0x68e>
 8008656:	4621      	mov	r1, r4
 8008658:	2205      	movs	r2, #5
 800865a:	4658      	mov	r0, fp
 800865c:	f000 fa9a 	bl	8008b94 <__multadd>
 8008660:	4601      	mov	r1, r0
 8008662:	4604      	mov	r4, r0
 8008664:	4648      	mov	r0, r9
 8008666:	f000 fcf7 	bl	8009058 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	f77f aeb3 	ble.w	80083d6 <_dtoa_r+0x68e>
 8008670:	4656      	mov	r6, sl
 8008672:	2331      	movs	r3, #49	@ 0x31
 8008674:	f806 3b01 	strb.w	r3, [r6], #1
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	3301      	adds	r3, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	e6ae      	b.n	80083de <_dtoa_r+0x696>
 8008680:	9c07      	ldr	r4, [sp, #28]
 8008682:	9704      	str	r7, [sp, #16]
 8008684:	4625      	mov	r5, r4
 8008686:	e7f3      	b.n	8008670 <_dtoa_r+0x928>
 8008688:	9b07      	ldr	r3, [sp, #28]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8104 	beq.w	800889c <_dtoa_r+0xb54>
 8008694:	2e00      	cmp	r6, #0
 8008696:	dd05      	ble.n	80086a4 <_dtoa_r+0x95c>
 8008698:	4629      	mov	r1, r5
 800869a:	4632      	mov	r2, r6
 800869c:	4658      	mov	r0, fp
 800869e:	f000 fc6f 	bl	8008f80 <__lshift>
 80086a2:	4605      	mov	r5, r0
 80086a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d05a      	beq.n	8008760 <_dtoa_r+0xa18>
 80086aa:	6869      	ldr	r1, [r5, #4]
 80086ac:	4658      	mov	r0, fp
 80086ae:	f000 fa0f 	bl	8008ad0 <_Balloc>
 80086b2:	4606      	mov	r6, r0
 80086b4:	b928      	cbnz	r0, 80086c2 <_dtoa_r+0x97a>
 80086b6:	4b84      	ldr	r3, [pc, #528]	@ (80088c8 <_dtoa_r+0xb80>)
 80086b8:	4602      	mov	r2, r0
 80086ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80086be:	f7ff bb5a 	b.w	8007d76 <_dtoa_r+0x2e>
 80086c2:	692a      	ldr	r2, [r5, #16]
 80086c4:	3202      	adds	r2, #2
 80086c6:	0092      	lsls	r2, r2, #2
 80086c8:	f105 010c 	add.w	r1, r5, #12
 80086cc:	300c      	adds	r0, #12
 80086ce:	f001 ff75 	bl	800a5bc <memcpy>
 80086d2:	2201      	movs	r2, #1
 80086d4:	4631      	mov	r1, r6
 80086d6:	4658      	mov	r0, fp
 80086d8:	f000 fc52 	bl	8008f80 <__lshift>
 80086dc:	f10a 0301 	add.w	r3, sl, #1
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	9b00      	ldr	r3, [sp, #0]
 80086e4:	4453      	add	r3, sl
 80086e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	462f      	mov	r7, r5
 80086f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f2:	4605      	mov	r5, r0
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	4621      	mov	r1, r4
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4648      	mov	r0, r9
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	f7ff fa9b 	bl	8007c38 <quorem>
 8008702:	4639      	mov	r1, r7
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800870a:	4648      	mov	r0, r9
 800870c:	f000 fca4 	bl	8009058 <__mcmp>
 8008710:	462a      	mov	r2, r5
 8008712:	9008      	str	r0, [sp, #32]
 8008714:	4621      	mov	r1, r4
 8008716:	4658      	mov	r0, fp
 8008718:	f000 fcba 	bl	8009090 <__mdiff>
 800871c:	68c2      	ldr	r2, [r0, #12]
 800871e:	4606      	mov	r6, r0
 8008720:	bb02      	cbnz	r2, 8008764 <_dtoa_r+0xa1c>
 8008722:	4601      	mov	r1, r0
 8008724:	4648      	mov	r0, r9
 8008726:	f000 fc97 	bl	8009058 <__mcmp>
 800872a:	4602      	mov	r2, r0
 800872c:	4631      	mov	r1, r6
 800872e:	4658      	mov	r0, fp
 8008730:	920e      	str	r2, [sp, #56]	@ 0x38
 8008732:	f000 fa0d 	bl	8008b50 <_Bfree>
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800873a:	9e07      	ldr	r6, [sp, #28]
 800873c:	ea43 0102 	orr.w	r1, r3, r2
 8008740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008742:	4319      	orrs	r1, r3
 8008744:	d110      	bne.n	8008768 <_dtoa_r+0xa20>
 8008746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800874a:	d029      	beq.n	80087a0 <_dtoa_r+0xa58>
 800874c:	9b08      	ldr	r3, [sp, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd02      	ble.n	8008758 <_dtoa_r+0xa10>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	f883 8000 	strb.w	r8, [r3]
 800875e:	e63f      	b.n	80083e0 <_dtoa_r+0x698>
 8008760:	4628      	mov	r0, r5
 8008762:	e7bb      	b.n	80086dc <_dtoa_r+0x994>
 8008764:	2201      	movs	r2, #1
 8008766:	e7e1      	b.n	800872c <_dtoa_r+0x9e4>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db04      	blt.n	8008778 <_dtoa_r+0xa30>
 800876e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008770:	430b      	orrs	r3, r1
 8008772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008774:	430b      	orrs	r3, r1
 8008776:	d120      	bne.n	80087ba <_dtoa_r+0xa72>
 8008778:	2a00      	cmp	r2, #0
 800877a:	dded      	ble.n	8008758 <_dtoa_r+0xa10>
 800877c:	4649      	mov	r1, r9
 800877e:	2201      	movs	r2, #1
 8008780:	4658      	mov	r0, fp
 8008782:	f000 fbfd 	bl	8008f80 <__lshift>
 8008786:	4621      	mov	r1, r4
 8008788:	4681      	mov	r9, r0
 800878a:	f000 fc65 	bl	8009058 <__mcmp>
 800878e:	2800      	cmp	r0, #0
 8008790:	dc03      	bgt.n	800879a <_dtoa_r+0xa52>
 8008792:	d1e1      	bne.n	8008758 <_dtoa_r+0xa10>
 8008794:	f018 0f01 	tst.w	r8, #1
 8008798:	d0de      	beq.n	8008758 <_dtoa_r+0xa10>
 800879a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800879e:	d1d8      	bne.n	8008752 <_dtoa_r+0xa0a>
 80087a0:	9a00      	ldr	r2, [sp, #0]
 80087a2:	2339      	movs	r3, #57	@ 0x39
 80087a4:	7013      	strb	r3, [r2, #0]
 80087a6:	4633      	mov	r3, r6
 80087a8:	461e      	mov	r6, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087b0:	2a39      	cmp	r2, #57	@ 0x39
 80087b2:	d052      	beq.n	800885a <_dtoa_r+0xb12>
 80087b4:	3201      	adds	r2, #1
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e612      	b.n	80083e0 <_dtoa_r+0x698>
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	dd07      	ble.n	80087ce <_dtoa_r+0xa86>
 80087be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087c2:	d0ed      	beq.n	80087a0 <_dtoa_r+0xa58>
 80087c4:	9a00      	ldr	r2, [sp, #0]
 80087c6:	f108 0301 	add.w	r3, r8, #1
 80087ca:	7013      	strb	r3, [r2, #0]
 80087cc:	e608      	b.n	80083e0 <_dtoa_r+0x698>
 80087ce:	9b07      	ldr	r3, [sp, #28]
 80087d0:	9a07      	ldr	r2, [sp, #28]
 80087d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80087d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d8:	4293      	cmp	r3, r2
 80087da:	d028      	beq.n	800882e <_dtoa_r+0xae6>
 80087dc:	4649      	mov	r1, r9
 80087de:	2300      	movs	r3, #0
 80087e0:	220a      	movs	r2, #10
 80087e2:	4658      	mov	r0, fp
 80087e4:	f000 f9d6 	bl	8008b94 <__multadd>
 80087e8:	42af      	cmp	r7, r5
 80087ea:	4681      	mov	r9, r0
 80087ec:	f04f 0300 	mov.w	r3, #0
 80087f0:	f04f 020a 	mov.w	r2, #10
 80087f4:	4639      	mov	r1, r7
 80087f6:	4658      	mov	r0, fp
 80087f8:	d107      	bne.n	800880a <_dtoa_r+0xac2>
 80087fa:	f000 f9cb 	bl	8008b94 <__multadd>
 80087fe:	4607      	mov	r7, r0
 8008800:	4605      	mov	r5, r0
 8008802:	9b07      	ldr	r3, [sp, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	e774      	b.n	80086f4 <_dtoa_r+0x9ac>
 800880a:	f000 f9c3 	bl	8008b94 <__multadd>
 800880e:	4629      	mov	r1, r5
 8008810:	4607      	mov	r7, r0
 8008812:	2300      	movs	r3, #0
 8008814:	220a      	movs	r2, #10
 8008816:	4658      	mov	r0, fp
 8008818:	f000 f9bc 	bl	8008b94 <__multadd>
 800881c:	4605      	mov	r5, r0
 800881e:	e7f0      	b.n	8008802 <_dtoa_r+0xaba>
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfcc      	ite	gt
 8008826:	461e      	movgt	r6, r3
 8008828:	2601      	movle	r6, #1
 800882a:	4456      	add	r6, sl
 800882c:	2700      	movs	r7, #0
 800882e:	4649      	mov	r1, r9
 8008830:	2201      	movs	r2, #1
 8008832:	4658      	mov	r0, fp
 8008834:	f000 fba4 	bl	8008f80 <__lshift>
 8008838:	4621      	mov	r1, r4
 800883a:	4681      	mov	r9, r0
 800883c:	f000 fc0c 	bl	8009058 <__mcmp>
 8008840:	2800      	cmp	r0, #0
 8008842:	dcb0      	bgt.n	80087a6 <_dtoa_r+0xa5e>
 8008844:	d102      	bne.n	800884c <_dtoa_r+0xb04>
 8008846:	f018 0f01 	tst.w	r8, #1
 800884a:	d1ac      	bne.n	80087a6 <_dtoa_r+0xa5e>
 800884c:	4633      	mov	r3, r6
 800884e:	461e      	mov	r6, r3
 8008850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008854:	2a30      	cmp	r2, #48	@ 0x30
 8008856:	d0fa      	beq.n	800884e <_dtoa_r+0xb06>
 8008858:	e5c2      	b.n	80083e0 <_dtoa_r+0x698>
 800885a:	459a      	cmp	sl, r3
 800885c:	d1a4      	bne.n	80087a8 <_dtoa_r+0xa60>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	2331      	movs	r3, #49	@ 0x31
 8008866:	f88a 3000 	strb.w	r3, [sl]
 800886a:	e5b9      	b.n	80083e0 <_dtoa_r+0x698>
 800886c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800886e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80088cc <_dtoa_r+0xb84>
 8008872:	b11b      	cbz	r3, 800887c <_dtoa_r+0xb34>
 8008874:	f10a 0308 	add.w	r3, sl, #8
 8008878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	4650      	mov	r0, sl
 800887e:	b019      	add	sp, #100	@ 0x64
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008886:	2b01      	cmp	r3, #1
 8008888:	f77f ae37 	ble.w	80084fa <_dtoa_r+0x7b2>
 800888c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800888e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008890:	2001      	movs	r0, #1
 8008892:	e655      	b.n	8008540 <_dtoa_r+0x7f8>
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f77f aed6 	ble.w	8008648 <_dtoa_r+0x900>
 800889c:	4656      	mov	r6, sl
 800889e:	4621      	mov	r1, r4
 80088a0:	4648      	mov	r0, r9
 80088a2:	f7ff f9c9 	bl	8007c38 <quorem>
 80088a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088aa:	f806 8b01 	strb.w	r8, [r6], #1
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	eba6 020a 	sub.w	r2, r6, sl
 80088b4:	4293      	cmp	r3, r2
 80088b6:	ddb3      	ble.n	8008820 <_dtoa_r+0xad8>
 80088b8:	4649      	mov	r1, r9
 80088ba:	2300      	movs	r3, #0
 80088bc:	220a      	movs	r2, #10
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 f968 	bl	8008b94 <__multadd>
 80088c4:	4681      	mov	r9, r0
 80088c6:	e7ea      	b.n	800889e <_dtoa_r+0xb56>
 80088c8:	0800b479 	.word	0x0800b479
 80088cc:	0800b3fd 	.word	0x0800b3fd

080088d0 <_free_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d041      	beq.n	800895c <_free_r+0x8c>
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f0c      	subs	r4, r1, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	18e4      	addlt	r4, r4, r3
 80088e4:	f000 f8e8 	bl	8008ab8 <__malloc_lock>
 80088e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <_free_r+0x90>)
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x2c>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f8:	f000 b8e4 	b.w	8008ac4 <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x42>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x1e>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x4c>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x42>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1850      	adds	r0, r2, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x6c>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1850      	adds	r0, r2, r1
 800892a:	4283      	cmp	r3, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x22>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	4408      	add	r0, r1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x22>
 800893c:	d902      	bls.n	8008944 <_free_r+0x74>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x22>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x22>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	200005bc 	.word	0x200005bc

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b825 	b.w	80089b8 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	20000018 	.word	0x20000018

08008974 <sbrk_aligned>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0f      	ldr	r6, [pc, #60]	@ (80089b4 <sbrk_aligned+0x40>)
 8008978:	460c      	mov	r4, r1
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	4605      	mov	r5, r0
 800897e:	b911      	cbnz	r1, 8008986 <sbrk_aligned+0x12>
 8008980:	f001 fe0c 	bl	800a59c <_sbrk_r>
 8008984:	6030      	str	r0, [r6, #0]
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f001 fe07 	bl	800a59c <_sbrk_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d103      	bne.n	800899a <sbrk_aligned+0x26>
 8008992:	f04f 34ff 	mov.w	r4, #4294967295
 8008996:	4620      	mov	r0, r4
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d0f8      	beq.n	8008996 <sbrk_aligned+0x22>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f001 fdf8 	bl	800a59c <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d1f2      	bne.n	8008996 <sbrk_aligned+0x22>
 80089b0:	e7ef      	b.n	8008992 <sbrk_aligned+0x1e>
 80089b2:	bf00      	nop
 80089b4:	200005b8 	.word	0x200005b8

080089b8 <_malloc_r>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	1ccd      	adds	r5, r1, #3
 80089be:	f025 0503 	bic.w	r5, r5, #3
 80089c2:	3508      	adds	r5, #8
 80089c4:	2d0c      	cmp	r5, #12
 80089c6:	bf38      	it	cc
 80089c8:	250c      	movcc	r5, #12
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	4606      	mov	r6, r0
 80089ce:	db01      	blt.n	80089d4 <_malloc_r+0x1c>
 80089d0:	42a9      	cmp	r1, r5
 80089d2:	d904      	bls.n	80089de <_malloc_r+0x26>
 80089d4:	230c      	movs	r3, #12
 80089d6:	6033      	str	r3, [r6, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ab4 <_malloc_r+0xfc>
 80089e2:	f000 f869 	bl	8008ab8 <__malloc_lock>
 80089e6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ea:	461c      	mov	r4, r3
 80089ec:	bb44      	cbnz	r4, 8008a40 <_malloc_r+0x88>
 80089ee:	4629      	mov	r1, r5
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff ffbf 	bl	8008974 <sbrk_aligned>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	4604      	mov	r4, r0
 80089fa:	d158      	bne.n	8008aae <_malloc_r+0xf6>
 80089fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008a00:	4627      	mov	r7, r4
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d143      	bne.n	8008a8e <_malloc_r+0xd6>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d04b      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4630      	mov	r0, r6
 8008a10:	eb04 0903 	add.w	r9, r4, r3
 8008a14:	f001 fdc2 	bl	800a59c <_sbrk_r>
 8008a18:	4581      	cmp	r9, r0
 8008a1a:	d142      	bne.n	8008aa2 <_malloc_r+0xea>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	1a6d      	subs	r5, r5, r1
 8008a20:	4629      	mov	r1, r5
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff ffa6 	bl	8008974 <sbrk_aligned>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d03a      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	442b      	add	r3, r5
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	f8d8 3000 	ldr.w	r3, [r8]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	bb62      	cbnz	r2, 8008a94 <_malloc_r+0xdc>
 8008a3a:	f8c8 7000 	str.w	r7, [r8]
 8008a3e:	e00f      	b.n	8008a60 <_malloc_r+0xa8>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	1b52      	subs	r2, r2, r5
 8008a44:	d420      	bmi.n	8008a88 <_malloc_r+0xd0>
 8008a46:	2a0b      	cmp	r2, #11
 8008a48:	d917      	bls.n	8008a7a <_malloc_r+0xc2>
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	6025      	str	r5, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	6059      	strne	r1, [r3, #4]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	bf08      	it	eq
 8008a58:	f8c8 1000 	streq.w	r1, [r8]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 f82f 	bl	8008ac4 <__malloc_unlock>
 8008a66:	f104 000b 	add.w	r0, r4, #11
 8008a6a:	1d23      	adds	r3, r4, #4
 8008a6c:	f020 0007 	bic.w	r0, r0, #7
 8008a70:	1ac2      	subs	r2, r0, r3
 8008a72:	bf1c      	itt	ne
 8008a74:	1a1b      	subne	r3, r3, r0
 8008a76:	50a3      	strne	r3, [r4, r2]
 8008a78:	e7af      	b.n	80089da <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	f8c8 2000 	streq.w	r2, [r8]
 8008a84:	605a      	strne	r2, [r3, #4]
 8008a86:	e7eb      	b.n	8008a60 <_malloc_r+0xa8>
 8008a88:	4623      	mov	r3, r4
 8008a8a:	6864      	ldr	r4, [r4, #4]
 8008a8c:	e7ae      	b.n	80089ec <_malloc_r+0x34>
 8008a8e:	463c      	mov	r4, r7
 8008a90:	687f      	ldr	r7, [r7, #4]
 8008a92:	e7b6      	b.n	8008a02 <_malloc_r+0x4a>
 8008a94:	461a      	mov	r2, r3
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d1fb      	bne.n	8008a94 <_malloc_r+0xdc>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6053      	str	r3, [r2, #4]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa8>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f000 f80c 	bl	8008ac4 <__malloc_unlock>
 8008aac:	e794      	b.n	80089d8 <_malloc_r+0x20>
 8008aae:	6005      	str	r5, [r0, #0]
 8008ab0:	e7d6      	b.n	8008a60 <_malloc_r+0xa8>
 8008ab2:	bf00      	nop
 8008ab4:	200005bc 	.word	0x200005bc

08008ab8 <__malloc_lock>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	@ (8008ac0 <__malloc_lock+0x8>)
 8008aba:	f7ff b8b4 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 8008abe:	bf00      	nop
 8008ac0:	200005b4 	.word	0x200005b4

08008ac4 <__malloc_unlock>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	@ (8008acc <__malloc_unlock+0x8>)
 8008ac6:	f7ff b8af 	b.w	8007c28 <__retarget_lock_release_recursive>
 8008aca:	bf00      	nop
 8008acc:	200005b4 	.word	0x200005b4

08008ad0 <_Balloc>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	69c6      	ldr	r6, [r0, #28]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	b976      	cbnz	r6, 8008af8 <_Balloc+0x28>
 8008ada:	2010      	movs	r0, #16
 8008adc:	f7ff ff42 	bl	8008964 <malloc>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	61e0      	str	r0, [r4, #28]
 8008ae4:	b920      	cbnz	r0, 8008af0 <_Balloc+0x20>
 8008ae6:	4b18      	ldr	r3, [pc, #96]	@ (8008b48 <_Balloc+0x78>)
 8008ae8:	4818      	ldr	r0, [pc, #96]	@ (8008b4c <_Balloc+0x7c>)
 8008aea:	216b      	movs	r1, #107	@ 0x6b
 8008aec:	f001 fd7c 	bl	800a5e8 <__assert_func>
 8008af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af4:	6006      	str	r6, [r0, #0]
 8008af6:	60c6      	str	r6, [r0, #12]
 8008af8:	69e6      	ldr	r6, [r4, #28]
 8008afa:	68f3      	ldr	r3, [r6, #12]
 8008afc:	b183      	cbz	r3, 8008b20 <_Balloc+0x50>
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b06:	b9b8      	cbnz	r0, 8008b38 <_Balloc+0x68>
 8008b08:	2101      	movs	r1, #1
 8008b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b0e:	1d72      	adds	r2, r6, #5
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 fd86 	bl	800a624 <_calloc_r>
 8008b18:	b160      	cbz	r0, 8008b34 <_Balloc+0x64>
 8008b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b1e:	e00e      	b.n	8008b3e <_Balloc+0x6e>
 8008b20:	2221      	movs	r2, #33	@ 0x21
 8008b22:	2104      	movs	r1, #4
 8008b24:	4620      	mov	r0, r4
 8008b26:	f001 fd7d 	bl	800a624 <_calloc_r>
 8008b2a:	69e3      	ldr	r3, [r4, #28]
 8008b2c:	60f0      	str	r0, [r6, #12]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e4      	bne.n	8008afe <_Balloc+0x2e>
 8008b34:	2000      	movs	r0, #0
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	6802      	ldr	r2, [r0, #0]
 8008b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b44:	e7f7      	b.n	8008b36 <_Balloc+0x66>
 8008b46:	bf00      	nop
 8008b48:	0800b40a 	.word	0x0800b40a
 8008b4c:	0800b48a 	.word	0x0800b48a

08008b50 <_Bfree>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	69c6      	ldr	r6, [r0, #28]
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b976      	cbnz	r6, 8008b78 <_Bfree+0x28>
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	f7ff ff02 	bl	8008964 <malloc>
 8008b60:	4602      	mov	r2, r0
 8008b62:	61e8      	str	r0, [r5, #28]
 8008b64:	b920      	cbnz	r0, 8008b70 <_Bfree+0x20>
 8008b66:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <_Bfree+0x3c>)
 8008b68:	4809      	ldr	r0, [pc, #36]	@ (8008b90 <_Bfree+0x40>)
 8008b6a:	218f      	movs	r1, #143	@ 0x8f
 8008b6c:	f001 fd3c 	bl	800a5e8 <__assert_func>
 8008b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b74:	6006      	str	r6, [r0, #0]
 8008b76:	60c6      	str	r6, [r0, #12]
 8008b78:	b13c      	cbz	r4, 8008b8a <_Bfree+0x3a>
 8008b7a:	69eb      	ldr	r3, [r5, #28]
 8008b7c:	6862      	ldr	r2, [r4, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b84:	6021      	str	r1, [r4, #0]
 8008b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	0800b40a 	.word	0x0800b40a
 8008b90:	0800b48a 	.word	0x0800b48a

08008b94 <__multadd>:
 8008b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	690d      	ldr	r5, [r1, #16]
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	461e      	mov	r6, r3
 8008ba0:	f101 0c14 	add.w	ip, r1, #20
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8008baa:	b299      	uxth	r1, r3
 8008bac:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb0:	0c1e      	lsrs	r6, r3, #16
 8008bb2:	0c0b      	lsrs	r3, r1, #16
 8008bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008bb8:	b289      	uxth	r1, r1
 8008bba:	3001      	adds	r0, #1
 8008bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc0:	4285      	cmp	r5, r0
 8008bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8008bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bca:	dcec      	bgt.n	8008ba6 <__multadd+0x12>
 8008bcc:	b30e      	cbz	r6, 8008c12 <__multadd+0x7e>
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc19      	bgt.n	8008c08 <__multadd+0x74>
 8008bd4:	6861      	ldr	r1, [r4, #4]
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	3101      	adds	r1, #1
 8008bda:	f7ff ff79 	bl	8008ad0 <_Balloc>
 8008bde:	4680      	mov	r8, r0
 8008be0:	b928      	cbnz	r0, 8008bee <__multadd+0x5a>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <__multadd+0x84>)
 8008be6:	480d      	ldr	r0, [pc, #52]	@ (8008c1c <__multadd+0x88>)
 8008be8:	21ba      	movs	r1, #186	@ 0xba
 8008bea:	f001 fcfd 	bl	800a5e8 <__assert_func>
 8008bee:	6922      	ldr	r2, [r4, #16]
 8008bf0:	3202      	adds	r2, #2
 8008bf2:	f104 010c 	add.w	r1, r4, #12
 8008bf6:	0092      	lsls	r2, r2, #2
 8008bf8:	300c      	adds	r0, #12
 8008bfa:	f001 fcdf 	bl	800a5bc <memcpy>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ffa5 	bl	8008b50 <_Bfree>
 8008c06:	4644      	mov	r4, r8
 8008c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	615e      	str	r6, [r3, #20]
 8008c10:	6125      	str	r5, [r4, #16]
 8008c12:	4620      	mov	r0, r4
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	0800b479 	.word	0x0800b479
 8008c1c:	0800b48a 	.word	0x0800b48a

08008c20 <__s2b>:
 8008c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	460c      	mov	r4, r1
 8008c26:	4615      	mov	r5, r2
 8008c28:	461f      	mov	r7, r3
 8008c2a:	2209      	movs	r2, #9
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	4606      	mov	r6, r0
 8008c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c34:	2100      	movs	r1, #0
 8008c36:	2201      	movs	r2, #1
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	db09      	blt.n	8008c50 <__s2b+0x30>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff ff47 	bl	8008ad0 <_Balloc>
 8008c42:	b940      	cbnz	r0, 8008c56 <__s2b+0x36>
 8008c44:	4602      	mov	r2, r0
 8008c46:	4b19      	ldr	r3, [pc, #100]	@ (8008cac <__s2b+0x8c>)
 8008c48:	4819      	ldr	r0, [pc, #100]	@ (8008cb0 <__s2b+0x90>)
 8008c4a:	21d3      	movs	r1, #211	@ 0xd3
 8008c4c:	f001 fccc 	bl	800a5e8 <__assert_func>
 8008c50:	0052      	lsls	r2, r2, #1
 8008c52:	3101      	adds	r1, #1
 8008c54:	e7f0      	b.n	8008c38 <__s2b+0x18>
 8008c56:	9b08      	ldr	r3, [sp, #32]
 8008c58:	6143      	str	r3, [r0, #20]
 8008c5a:	2d09      	cmp	r5, #9
 8008c5c:	f04f 0301 	mov.w	r3, #1
 8008c60:	6103      	str	r3, [r0, #16]
 8008c62:	dd16      	ble.n	8008c92 <__s2b+0x72>
 8008c64:	f104 0909 	add.w	r9, r4, #9
 8008c68:	46c8      	mov	r8, r9
 8008c6a:	442c      	add	r4, r5
 8008c6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c70:	4601      	mov	r1, r0
 8008c72:	3b30      	subs	r3, #48	@ 0x30
 8008c74:	220a      	movs	r2, #10
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff ff8c 	bl	8008b94 <__multadd>
 8008c7c:	45a0      	cmp	r8, r4
 8008c7e:	d1f5      	bne.n	8008c6c <__s2b+0x4c>
 8008c80:	f1a5 0408 	sub.w	r4, r5, #8
 8008c84:	444c      	add	r4, r9
 8008c86:	1b2d      	subs	r5, r5, r4
 8008c88:	1963      	adds	r3, r4, r5
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	db04      	blt.n	8008c98 <__s2b+0x78>
 8008c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c92:	340a      	adds	r4, #10
 8008c94:	2509      	movs	r5, #9
 8008c96:	e7f6      	b.n	8008c86 <__s2b+0x66>
 8008c98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	3b30      	subs	r3, #48	@ 0x30
 8008ca0:	220a      	movs	r2, #10
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff ff76 	bl	8008b94 <__multadd>
 8008ca8:	e7ee      	b.n	8008c88 <__s2b+0x68>
 8008caa:	bf00      	nop
 8008cac:	0800b479 	.word	0x0800b479
 8008cb0:	0800b48a 	.word	0x0800b48a

08008cb4 <__hi0bits>:
 8008cb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008cb8:	4603      	mov	r3, r0
 8008cba:	bf36      	itet	cc
 8008cbc:	0403      	lslcc	r3, r0, #16
 8008cbe:	2000      	movcs	r0, #0
 8008cc0:	2010      	movcc	r0, #16
 8008cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cc6:	bf3c      	itt	cc
 8008cc8:	021b      	lslcc	r3, r3, #8
 8008cca:	3008      	addcc	r0, #8
 8008ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cd0:	bf3c      	itt	cc
 8008cd2:	011b      	lslcc	r3, r3, #4
 8008cd4:	3004      	addcc	r0, #4
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cda:	bf3c      	itt	cc
 8008cdc:	009b      	lslcc	r3, r3, #2
 8008cde:	3002      	addcc	r0, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db05      	blt.n	8008cf0 <__hi0bits+0x3c>
 8008ce4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ce8:	f100 0001 	add.w	r0, r0, #1
 8008cec:	bf08      	it	eq
 8008cee:	2020      	moveq	r0, #32
 8008cf0:	4770      	bx	lr

08008cf2 <__lo0bits>:
 8008cf2:	6803      	ldr	r3, [r0, #0]
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	f013 0007 	ands.w	r0, r3, #7
 8008cfa:	d00b      	beq.n	8008d14 <__lo0bits+0x22>
 8008cfc:	07d9      	lsls	r1, r3, #31
 8008cfe:	d421      	bmi.n	8008d44 <__lo0bits+0x52>
 8008d00:	0798      	lsls	r0, r3, #30
 8008d02:	bf49      	itett	mi
 8008d04:	085b      	lsrmi	r3, r3, #1
 8008d06:	089b      	lsrpl	r3, r3, #2
 8008d08:	2001      	movmi	r0, #1
 8008d0a:	6013      	strmi	r3, [r2, #0]
 8008d0c:	bf5c      	itt	pl
 8008d0e:	6013      	strpl	r3, [r2, #0]
 8008d10:	2002      	movpl	r0, #2
 8008d12:	4770      	bx	lr
 8008d14:	b299      	uxth	r1, r3
 8008d16:	b909      	cbnz	r1, 8008d1c <__lo0bits+0x2a>
 8008d18:	0c1b      	lsrs	r3, r3, #16
 8008d1a:	2010      	movs	r0, #16
 8008d1c:	b2d9      	uxtb	r1, r3
 8008d1e:	b909      	cbnz	r1, 8008d24 <__lo0bits+0x32>
 8008d20:	3008      	adds	r0, #8
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	0719      	lsls	r1, r3, #28
 8008d26:	bf04      	itt	eq
 8008d28:	091b      	lsreq	r3, r3, #4
 8008d2a:	3004      	addeq	r0, #4
 8008d2c:	0799      	lsls	r1, r3, #30
 8008d2e:	bf04      	itt	eq
 8008d30:	089b      	lsreq	r3, r3, #2
 8008d32:	3002      	addeq	r0, #2
 8008d34:	07d9      	lsls	r1, r3, #31
 8008d36:	d403      	bmi.n	8008d40 <__lo0bits+0x4e>
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	f100 0001 	add.w	r0, r0, #1
 8008d3e:	d003      	beq.n	8008d48 <__lo0bits+0x56>
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	4770      	bx	lr
 8008d44:	2000      	movs	r0, #0
 8008d46:	4770      	bx	lr
 8008d48:	2020      	movs	r0, #32
 8008d4a:	4770      	bx	lr

08008d4c <__i2b>:
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	460c      	mov	r4, r1
 8008d50:	2101      	movs	r1, #1
 8008d52:	f7ff febd 	bl	8008ad0 <_Balloc>
 8008d56:	4602      	mov	r2, r0
 8008d58:	b928      	cbnz	r0, 8008d66 <__i2b+0x1a>
 8008d5a:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <__i2b+0x24>)
 8008d5c:	4805      	ldr	r0, [pc, #20]	@ (8008d74 <__i2b+0x28>)
 8008d5e:	f240 1145 	movw	r1, #325	@ 0x145
 8008d62:	f001 fc41 	bl	800a5e8 <__assert_func>
 8008d66:	2301      	movs	r3, #1
 8008d68:	6144      	str	r4, [r0, #20]
 8008d6a:	6103      	str	r3, [r0, #16]
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	bf00      	nop
 8008d70:	0800b479 	.word	0x0800b479
 8008d74:	0800b48a 	.word	0x0800b48a

08008d78 <__multiply>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	690a      	ldr	r2, [r1, #16]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	bfa8      	it	ge
 8008d86:	4623      	movge	r3, r4
 8008d88:	460f      	mov	r7, r1
 8008d8a:	bfa4      	itt	ge
 8008d8c:	460c      	movge	r4, r1
 8008d8e:	461f      	movge	r7, r3
 8008d90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d98:	68a3      	ldr	r3, [r4, #8]
 8008d9a:	6861      	ldr	r1, [r4, #4]
 8008d9c:	eb0a 0609 	add.w	r6, sl, r9
 8008da0:	42b3      	cmp	r3, r6
 8008da2:	b085      	sub	sp, #20
 8008da4:	bfb8      	it	lt
 8008da6:	3101      	addlt	r1, #1
 8008da8:	f7ff fe92 	bl	8008ad0 <_Balloc>
 8008dac:	b930      	cbnz	r0, 8008dbc <__multiply+0x44>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b44      	ldr	r3, [pc, #272]	@ (8008ec4 <__multiply+0x14c>)
 8008db2:	4845      	ldr	r0, [pc, #276]	@ (8008ec8 <__multiply+0x150>)
 8008db4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008db8:	f001 fc16 	bl	800a5e8 <__assert_func>
 8008dbc:	f100 0514 	add.w	r5, r0, #20
 8008dc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4543      	cmp	r3, r8
 8008dca:	d321      	bcc.n	8008e10 <__multiply+0x98>
 8008dcc:	f107 0114 	add.w	r1, r7, #20
 8008dd0:	f104 0214 	add.w	r2, r4, #20
 8008dd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008dd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ddc:	9302      	str	r3, [sp, #8]
 8008dde:	1b13      	subs	r3, r2, r4
 8008de0:	3b15      	subs	r3, #21
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	3304      	adds	r3, #4
 8008de8:	f104 0715 	add.w	r7, r4, #21
 8008dec:	42ba      	cmp	r2, r7
 8008dee:	bf38      	it	cc
 8008df0:	2304      	movcc	r3, #4
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	d80c      	bhi.n	8008e16 <__multiply+0x9e>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	dd03      	ble.n	8008e08 <__multiply+0x90>
 8008e00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d05b      	beq.n	8008ec0 <__multiply+0x148>
 8008e08:	6106      	str	r6, [r0, #16]
 8008e0a:	b005      	add	sp, #20
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	f843 2b04 	str.w	r2, [r3], #4
 8008e14:	e7d8      	b.n	8008dc8 <__multiply+0x50>
 8008e16:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e1a:	f1ba 0f00 	cmp.w	sl, #0
 8008e1e:	d024      	beq.n	8008e6a <__multiply+0xf2>
 8008e20:	f104 0e14 	add.w	lr, r4, #20
 8008e24:	46a9      	mov	r9, r5
 8008e26:	f04f 0c00 	mov.w	ip, #0
 8008e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e32:	fa1f fb87 	uxth.w	fp, r7
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008e40:	f8d9 7000 	ldr.w	r7, [r9]
 8008e44:	4463      	add	r3, ip
 8008e46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e4a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008e4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e58:	4572      	cmp	r2, lr
 8008e5a:	f849 3b04 	str.w	r3, [r9], #4
 8008e5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e62:	d8e2      	bhi.n	8008e2a <__multiply+0xb2>
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	f845 c003 	str.w	ip, [r5, r3]
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e70:	3104      	adds	r1, #4
 8008e72:	f1b9 0f00 	cmp.w	r9, #0
 8008e76:	d021      	beq.n	8008ebc <__multiply+0x144>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	f104 0c14 	add.w	ip, r4, #20
 8008e7e:	46ae      	mov	lr, r5
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	f8bc b000 	ldrh.w	fp, [ip]
 8008e88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e8c:	fb09 770b 	mla	r7, r9, fp, r7
 8008e90:	4457      	add	r7, sl
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e98:	f84e 3b04 	str.w	r3, [lr], #4
 8008e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ea4:	f8be 3000 	ldrh.w	r3, [lr]
 8008ea8:	fb09 330a 	mla	r3, r9, sl, r3
 8008eac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008eb0:	4562      	cmp	r2, ip
 8008eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eb6:	d8e5      	bhi.n	8008e84 <__multiply+0x10c>
 8008eb8:	9f01      	ldr	r7, [sp, #4]
 8008eba:	51eb      	str	r3, [r5, r7]
 8008ebc:	3504      	adds	r5, #4
 8008ebe:	e799      	b.n	8008df4 <__multiply+0x7c>
 8008ec0:	3e01      	subs	r6, #1
 8008ec2:	e79b      	b.n	8008dfc <__multiply+0x84>
 8008ec4:	0800b479 	.word	0x0800b479
 8008ec8:	0800b48a 	.word	0x0800b48a

08008ecc <__pow5mult>:
 8008ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	f012 0203 	ands.w	r2, r2, #3
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	460e      	mov	r6, r1
 8008eda:	d007      	beq.n	8008eec <__pow5mult+0x20>
 8008edc:	4c25      	ldr	r4, [pc, #148]	@ (8008f74 <__pow5mult+0xa8>)
 8008ede:	3a01      	subs	r2, #1
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ee6:	f7ff fe55 	bl	8008b94 <__multadd>
 8008eea:	4606      	mov	r6, r0
 8008eec:	10ad      	asrs	r5, r5, #2
 8008eee:	d03d      	beq.n	8008f6c <__pow5mult+0xa0>
 8008ef0:	69fc      	ldr	r4, [r7, #28]
 8008ef2:	b97c      	cbnz	r4, 8008f14 <__pow5mult+0x48>
 8008ef4:	2010      	movs	r0, #16
 8008ef6:	f7ff fd35 	bl	8008964 <malloc>
 8008efa:	4602      	mov	r2, r0
 8008efc:	61f8      	str	r0, [r7, #28]
 8008efe:	b928      	cbnz	r0, 8008f0c <__pow5mult+0x40>
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <__pow5mult+0xac>)
 8008f02:	481e      	ldr	r0, [pc, #120]	@ (8008f7c <__pow5mult+0xb0>)
 8008f04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f08:	f001 fb6e 	bl	800a5e8 <__assert_func>
 8008f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f10:	6004      	str	r4, [r0, #0]
 8008f12:	60c4      	str	r4, [r0, #12]
 8008f14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f1c:	b94c      	cbnz	r4, 8008f32 <__pow5mult+0x66>
 8008f1e:	f240 2171 	movw	r1, #625	@ 0x271
 8008f22:	4638      	mov	r0, r7
 8008f24:	f7ff ff12 	bl	8008d4c <__i2b>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f2e:	4604      	mov	r4, r0
 8008f30:	6003      	str	r3, [r0, #0]
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	07eb      	lsls	r3, r5, #31
 8008f38:	d50a      	bpl.n	8008f50 <__pow5mult+0x84>
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff ff1a 	bl	8008d78 <__multiply>
 8008f44:	4631      	mov	r1, r6
 8008f46:	4680      	mov	r8, r0
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff fe01 	bl	8008b50 <_Bfree>
 8008f4e:	4646      	mov	r6, r8
 8008f50:	106d      	asrs	r5, r5, #1
 8008f52:	d00b      	beq.n	8008f6c <__pow5mult+0xa0>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	b938      	cbnz	r0, 8008f68 <__pow5mult+0x9c>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f7ff ff0b 	bl	8008d78 <__multiply>
 8008f62:	6020      	str	r0, [r4, #0]
 8008f64:	f8c0 9000 	str.w	r9, [r0]
 8008f68:	4604      	mov	r4, r0
 8008f6a:	e7e4      	b.n	8008f36 <__pow5mult+0x6a>
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f72:	bf00      	nop
 8008f74:	0800b4e4 	.word	0x0800b4e4
 8008f78:	0800b40a 	.word	0x0800b40a
 8008f7c:	0800b48a 	.word	0x0800b48a

08008f80 <__lshift>:
 8008f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	6849      	ldr	r1, [r1, #4]
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	4607      	mov	r7, r0
 8008f92:	4691      	mov	r9, r2
 8008f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f98:	f108 0601 	add.w	r6, r8, #1
 8008f9c:	42b3      	cmp	r3, r6
 8008f9e:	db0b      	blt.n	8008fb8 <__lshift+0x38>
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff fd95 	bl	8008ad0 <_Balloc>
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	b948      	cbnz	r0, 8008fbe <__lshift+0x3e>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b28      	ldr	r3, [pc, #160]	@ (8009050 <__lshift+0xd0>)
 8008fae:	4829      	ldr	r0, [pc, #164]	@ (8009054 <__lshift+0xd4>)
 8008fb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fb4:	f001 fb18 	bl	800a5e8 <__assert_func>
 8008fb8:	3101      	adds	r1, #1
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	e7ee      	b.n	8008f9c <__lshift+0x1c>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f100 0114 	add.w	r1, r0, #20
 8008fc4:	f100 0210 	add.w	r2, r0, #16
 8008fc8:	4618      	mov	r0, r3
 8008fca:	4553      	cmp	r3, sl
 8008fcc:	db33      	blt.n	8009036 <__lshift+0xb6>
 8008fce:	6920      	ldr	r0, [r4, #16]
 8008fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fd4:	f104 0314 	add.w	r3, r4, #20
 8008fd8:	f019 091f 	ands.w	r9, r9, #31
 8008fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fe4:	d02b      	beq.n	800903e <__lshift+0xbe>
 8008fe6:	f1c9 0e20 	rsb	lr, r9, #32
 8008fea:	468a      	mov	sl, r1
 8008fec:	2200      	movs	r2, #0
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ff4:	4310      	orrs	r0, r2
 8008ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8008ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffe:	459c      	cmp	ip, r3
 8009000:	fa22 f20e 	lsr.w	r2, r2, lr
 8009004:	d8f3      	bhi.n	8008fee <__lshift+0x6e>
 8009006:	ebac 0304 	sub.w	r3, ip, r4
 800900a:	3b15      	subs	r3, #21
 800900c:	f023 0303 	bic.w	r3, r3, #3
 8009010:	3304      	adds	r3, #4
 8009012:	f104 0015 	add.w	r0, r4, #21
 8009016:	4584      	cmp	ip, r0
 8009018:	bf38      	it	cc
 800901a:	2304      	movcc	r3, #4
 800901c:	50ca      	str	r2, [r1, r3]
 800901e:	b10a      	cbz	r2, 8009024 <__lshift+0xa4>
 8009020:	f108 0602 	add.w	r6, r8, #2
 8009024:	3e01      	subs	r6, #1
 8009026:	4638      	mov	r0, r7
 8009028:	612e      	str	r6, [r5, #16]
 800902a:	4621      	mov	r1, r4
 800902c:	f7ff fd90 	bl	8008b50 <_Bfree>
 8009030:	4628      	mov	r0, r5
 8009032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009036:	f842 0f04 	str.w	r0, [r2, #4]!
 800903a:	3301      	adds	r3, #1
 800903c:	e7c5      	b.n	8008fca <__lshift+0x4a>
 800903e:	3904      	subs	r1, #4
 8009040:	f853 2b04 	ldr.w	r2, [r3], #4
 8009044:	f841 2f04 	str.w	r2, [r1, #4]!
 8009048:	459c      	cmp	ip, r3
 800904a:	d8f9      	bhi.n	8009040 <__lshift+0xc0>
 800904c:	e7ea      	b.n	8009024 <__lshift+0xa4>
 800904e:	bf00      	nop
 8009050:	0800b479 	.word	0x0800b479
 8009054:	0800b48a 	.word	0x0800b48a

08009058 <__mcmp>:
 8009058:	690a      	ldr	r2, [r1, #16]
 800905a:	4603      	mov	r3, r0
 800905c:	6900      	ldr	r0, [r0, #16]
 800905e:	1a80      	subs	r0, r0, r2
 8009060:	b530      	push	{r4, r5, lr}
 8009062:	d10e      	bne.n	8009082 <__mcmp+0x2a>
 8009064:	3314      	adds	r3, #20
 8009066:	3114      	adds	r1, #20
 8009068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800906c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009078:	4295      	cmp	r5, r2
 800907a:	d003      	beq.n	8009084 <__mcmp+0x2c>
 800907c:	d205      	bcs.n	800908a <__mcmp+0x32>
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	bd30      	pop	{r4, r5, pc}
 8009084:	42a3      	cmp	r3, r4
 8009086:	d3f3      	bcc.n	8009070 <__mcmp+0x18>
 8009088:	e7fb      	b.n	8009082 <__mcmp+0x2a>
 800908a:	2001      	movs	r0, #1
 800908c:	e7f9      	b.n	8009082 <__mcmp+0x2a>
	...

08009090 <__mdiff>:
 8009090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4689      	mov	r9, r1
 8009096:	4606      	mov	r6, r0
 8009098:	4611      	mov	r1, r2
 800909a:	4648      	mov	r0, r9
 800909c:	4614      	mov	r4, r2
 800909e:	f7ff ffdb 	bl	8009058 <__mcmp>
 80090a2:	1e05      	subs	r5, r0, #0
 80090a4:	d112      	bne.n	80090cc <__mdiff+0x3c>
 80090a6:	4629      	mov	r1, r5
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff fd11 	bl	8008ad0 <_Balloc>
 80090ae:	4602      	mov	r2, r0
 80090b0:	b928      	cbnz	r0, 80090be <__mdiff+0x2e>
 80090b2:	4b3f      	ldr	r3, [pc, #252]	@ (80091b0 <__mdiff+0x120>)
 80090b4:	f240 2137 	movw	r1, #567	@ 0x237
 80090b8:	483e      	ldr	r0, [pc, #248]	@ (80091b4 <__mdiff+0x124>)
 80090ba:	f001 fa95 	bl	800a5e8 <__assert_func>
 80090be:	2301      	movs	r3, #1
 80090c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090c4:	4610      	mov	r0, r2
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	bfbc      	itt	lt
 80090ce:	464b      	movlt	r3, r9
 80090d0:	46a1      	movlt	r9, r4
 80090d2:	4630      	mov	r0, r6
 80090d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090d8:	bfba      	itte	lt
 80090da:	461c      	movlt	r4, r3
 80090dc:	2501      	movlt	r5, #1
 80090de:	2500      	movge	r5, #0
 80090e0:	f7ff fcf6 	bl	8008ad0 <_Balloc>
 80090e4:	4602      	mov	r2, r0
 80090e6:	b918      	cbnz	r0, 80090f0 <__mdiff+0x60>
 80090e8:	4b31      	ldr	r3, [pc, #196]	@ (80091b0 <__mdiff+0x120>)
 80090ea:	f240 2145 	movw	r1, #581	@ 0x245
 80090ee:	e7e3      	b.n	80090b8 <__mdiff+0x28>
 80090f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090f4:	6926      	ldr	r6, [r4, #16]
 80090f6:	60c5      	str	r5, [r0, #12]
 80090f8:	f109 0310 	add.w	r3, r9, #16
 80090fc:	f109 0514 	add.w	r5, r9, #20
 8009100:	f104 0e14 	add.w	lr, r4, #20
 8009104:	f100 0b14 	add.w	fp, r0, #20
 8009108:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800910c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	46d9      	mov	r9, fp
 8009114:	f04f 0c00 	mov.w	ip, #0
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800911e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	fa1f f38a 	uxth.w	r3, sl
 8009128:	4619      	mov	r1, r3
 800912a:	b283      	uxth	r3, r0
 800912c:	1acb      	subs	r3, r1, r3
 800912e:	0c00      	lsrs	r0, r0, #16
 8009130:	4463      	add	r3, ip
 8009132:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009136:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800913a:	b29b      	uxth	r3, r3
 800913c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009140:	4576      	cmp	r6, lr
 8009142:	f849 3b04 	str.w	r3, [r9], #4
 8009146:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800914a:	d8e5      	bhi.n	8009118 <__mdiff+0x88>
 800914c:	1b33      	subs	r3, r6, r4
 800914e:	3b15      	subs	r3, #21
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	3415      	adds	r4, #21
 8009156:	3304      	adds	r3, #4
 8009158:	42a6      	cmp	r6, r4
 800915a:	bf38      	it	cc
 800915c:	2304      	movcc	r3, #4
 800915e:	441d      	add	r5, r3
 8009160:	445b      	add	r3, fp
 8009162:	461e      	mov	r6, r3
 8009164:	462c      	mov	r4, r5
 8009166:	4544      	cmp	r4, r8
 8009168:	d30e      	bcc.n	8009188 <__mdiff+0xf8>
 800916a:	f108 0103 	add.w	r1, r8, #3
 800916e:	1b49      	subs	r1, r1, r5
 8009170:	f021 0103 	bic.w	r1, r1, #3
 8009174:	3d03      	subs	r5, #3
 8009176:	45a8      	cmp	r8, r5
 8009178:	bf38      	it	cc
 800917a:	2100      	movcc	r1, #0
 800917c:	440b      	add	r3, r1
 800917e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009182:	b191      	cbz	r1, 80091aa <__mdiff+0x11a>
 8009184:	6117      	str	r7, [r2, #16]
 8009186:	e79d      	b.n	80090c4 <__mdiff+0x34>
 8009188:	f854 1b04 	ldr.w	r1, [r4], #4
 800918c:	46e6      	mov	lr, ip
 800918e:	0c08      	lsrs	r0, r1, #16
 8009190:	fa1c fc81 	uxtah	ip, ip, r1
 8009194:	4471      	add	r1, lr
 8009196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800919a:	b289      	uxth	r1, r1
 800919c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091a0:	f846 1b04 	str.w	r1, [r6], #4
 80091a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091a8:	e7dd      	b.n	8009166 <__mdiff+0xd6>
 80091aa:	3f01      	subs	r7, #1
 80091ac:	e7e7      	b.n	800917e <__mdiff+0xee>
 80091ae:	bf00      	nop
 80091b0:	0800b479 	.word	0x0800b479
 80091b4:	0800b48a 	.word	0x0800b48a

080091b8 <__ulp>:
 80091b8:	b082      	sub	sp, #8
 80091ba:	ed8d 0b00 	vstr	d0, [sp]
 80091be:	9a01      	ldr	r2, [sp, #4]
 80091c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <__ulp+0x48>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dc08      	bgt.n	80091de <__ulp+0x26>
 80091cc:	425b      	negs	r3, r3
 80091ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80091d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80091d6:	da04      	bge.n	80091e2 <__ulp+0x2a>
 80091d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80091dc:	4113      	asrs	r3, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	e008      	b.n	80091f4 <__ulp+0x3c>
 80091e2:	f1a2 0314 	sub.w	r3, r2, #20
 80091e6:	2b1e      	cmp	r3, #30
 80091e8:	bfda      	itte	le
 80091ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80091ee:	40da      	lsrle	r2, r3
 80091f0:	2201      	movgt	r2, #1
 80091f2:	2300      	movs	r3, #0
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	ec41 0b10 	vmov	d0, r0, r1
 80091fc:	b002      	add	sp, #8
 80091fe:	4770      	bx	lr
 8009200:	7ff00000 	.word	0x7ff00000

08009204 <__b2d>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	6906      	ldr	r6, [r0, #16]
 800920a:	f100 0814 	add.w	r8, r0, #20
 800920e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009212:	1f37      	subs	r7, r6, #4
 8009214:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009218:	4610      	mov	r0, r2
 800921a:	f7ff fd4b 	bl	8008cb4 <__hi0bits>
 800921e:	f1c0 0320 	rsb	r3, r0, #32
 8009222:	280a      	cmp	r0, #10
 8009224:	600b      	str	r3, [r1, #0]
 8009226:	491b      	ldr	r1, [pc, #108]	@ (8009294 <__b2d+0x90>)
 8009228:	dc15      	bgt.n	8009256 <__b2d+0x52>
 800922a:	f1c0 0c0b 	rsb	ip, r0, #11
 800922e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009232:	45b8      	cmp	r8, r7
 8009234:	ea43 0501 	orr.w	r5, r3, r1
 8009238:	bf34      	ite	cc
 800923a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800923e:	2300      	movcs	r3, #0
 8009240:	3015      	adds	r0, #21
 8009242:	fa02 f000 	lsl.w	r0, r2, r0
 8009246:	fa23 f30c 	lsr.w	r3, r3, ip
 800924a:	4303      	orrs	r3, r0
 800924c:	461c      	mov	r4, r3
 800924e:	ec45 4b10 	vmov	d0, r4, r5
 8009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009256:	45b8      	cmp	r8, r7
 8009258:	bf3a      	itte	cc
 800925a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800925e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009262:	2300      	movcs	r3, #0
 8009264:	380b      	subs	r0, #11
 8009266:	d012      	beq.n	800928e <__b2d+0x8a>
 8009268:	f1c0 0120 	rsb	r1, r0, #32
 800926c:	fa23 f401 	lsr.w	r4, r3, r1
 8009270:	4082      	lsls	r2, r0
 8009272:	4322      	orrs	r2, r4
 8009274:	4547      	cmp	r7, r8
 8009276:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800927a:	bf8c      	ite	hi
 800927c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009280:	2200      	movls	r2, #0
 8009282:	4083      	lsls	r3, r0
 8009284:	40ca      	lsrs	r2, r1
 8009286:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800928a:	4313      	orrs	r3, r2
 800928c:	e7de      	b.n	800924c <__b2d+0x48>
 800928e:	ea42 0501 	orr.w	r5, r2, r1
 8009292:	e7db      	b.n	800924c <__b2d+0x48>
 8009294:	3ff00000 	.word	0x3ff00000

08009298 <__d2b>:
 8009298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800929c:	460f      	mov	r7, r1
 800929e:	2101      	movs	r1, #1
 80092a0:	ec59 8b10 	vmov	r8, r9, d0
 80092a4:	4616      	mov	r6, r2
 80092a6:	f7ff fc13 	bl	8008ad0 <_Balloc>
 80092aa:	4604      	mov	r4, r0
 80092ac:	b930      	cbnz	r0, 80092bc <__d2b+0x24>
 80092ae:	4602      	mov	r2, r0
 80092b0:	4b23      	ldr	r3, [pc, #140]	@ (8009340 <__d2b+0xa8>)
 80092b2:	4824      	ldr	r0, [pc, #144]	@ (8009344 <__d2b+0xac>)
 80092b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80092b8:	f001 f996 	bl	800a5e8 <__assert_func>
 80092bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092c4:	b10d      	cbz	r5, 80092ca <__d2b+0x32>
 80092c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	f1b8 0300 	subs.w	r3, r8, #0
 80092d0:	d023      	beq.n	800931a <__d2b+0x82>
 80092d2:	4668      	mov	r0, sp
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	f7ff fd0c 	bl	8008cf2 <__lo0bits>
 80092da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092de:	b1d0      	cbz	r0, 8009316 <__d2b+0x7e>
 80092e0:	f1c0 0320 	rsb	r3, r0, #32
 80092e4:	fa02 f303 	lsl.w	r3, r2, r3
 80092e8:	430b      	orrs	r3, r1
 80092ea:	40c2      	lsrs	r2, r0
 80092ec:	6163      	str	r3, [r4, #20]
 80092ee:	9201      	str	r2, [sp, #4]
 80092f0:	9b01      	ldr	r3, [sp, #4]
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bf0c      	ite	eq
 80092f8:	2201      	moveq	r2, #1
 80092fa:	2202      	movne	r2, #2
 80092fc:	6122      	str	r2, [r4, #16]
 80092fe:	b1a5      	cbz	r5, 800932a <__d2b+0x92>
 8009300:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009304:	4405      	add	r5, r0
 8009306:	603d      	str	r5, [r7, #0]
 8009308:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800930c:	6030      	str	r0, [r6, #0]
 800930e:	4620      	mov	r0, r4
 8009310:	b003      	add	sp, #12
 8009312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009316:	6161      	str	r1, [r4, #20]
 8009318:	e7ea      	b.n	80092f0 <__d2b+0x58>
 800931a:	a801      	add	r0, sp, #4
 800931c:	f7ff fce9 	bl	8008cf2 <__lo0bits>
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	6163      	str	r3, [r4, #20]
 8009324:	3020      	adds	r0, #32
 8009326:	2201      	movs	r2, #1
 8009328:	e7e8      	b.n	80092fc <__d2b+0x64>
 800932a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800932e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009332:	6038      	str	r0, [r7, #0]
 8009334:	6918      	ldr	r0, [r3, #16]
 8009336:	f7ff fcbd 	bl	8008cb4 <__hi0bits>
 800933a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800933e:	e7e5      	b.n	800930c <__d2b+0x74>
 8009340:	0800b479 	.word	0x0800b479
 8009344:	0800b48a 	.word	0x0800b48a

08009348 <__ratio>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	b085      	sub	sp, #20
 800934e:	e9cd 1000 	strd	r1, r0, [sp]
 8009352:	a902      	add	r1, sp, #8
 8009354:	f7ff ff56 	bl	8009204 <__b2d>
 8009358:	9800      	ldr	r0, [sp, #0]
 800935a:	a903      	add	r1, sp, #12
 800935c:	ec55 4b10 	vmov	r4, r5, d0
 8009360:	f7ff ff50 	bl	8009204 <__b2d>
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	6919      	ldr	r1, [r3, #16]
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	1ac9      	subs	r1, r1, r3
 800936e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	ec5b ab10 	vmov	sl, fp, d0
 8009378:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfce      	itee	gt
 8009380:	462a      	movgt	r2, r5
 8009382:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009386:	465a      	movle	r2, fp
 8009388:	462f      	mov	r7, r5
 800938a:	46d9      	mov	r9, fp
 800938c:	bfcc      	ite	gt
 800938e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009392:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009396:	464b      	mov	r3, r9
 8009398:	4652      	mov	r2, sl
 800939a:	4620      	mov	r0, r4
 800939c:	4639      	mov	r1, r7
 800939e:	f7f7 fa55 	bl	800084c <__aeabi_ddiv>
 80093a2:	ec41 0b10 	vmov	d0, r0, r1
 80093a6:	b005      	add	sp, #20
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093ac <__copybits>:
 80093ac:	3901      	subs	r1, #1
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	1149      	asrs	r1, r1, #5
 80093b2:	6914      	ldr	r4, [r2, #16]
 80093b4:	3101      	adds	r1, #1
 80093b6:	f102 0314 	add.w	r3, r2, #20
 80093ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093c2:	1f05      	subs	r5, r0, #4
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d30c      	bcc.n	80093e2 <__copybits+0x36>
 80093c8:	1aa3      	subs	r3, r4, r2
 80093ca:	3b11      	subs	r3, #17
 80093cc:	f023 0303 	bic.w	r3, r3, #3
 80093d0:	3211      	adds	r2, #17
 80093d2:	42a2      	cmp	r2, r4
 80093d4:	bf88      	it	hi
 80093d6:	2300      	movhi	r3, #0
 80093d8:	4418      	add	r0, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	4288      	cmp	r0, r1
 80093de:	d305      	bcc.n	80093ec <__copybits+0x40>
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80093e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80093ea:	e7eb      	b.n	80093c4 <__copybits+0x18>
 80093ec:	f840 3b04 	str.w	r3, [r0], #4
 80093f0:	e7f4      	b.n	80093dc <__copybits+0x30>

080093f2 <__any_on>:
 80093f2:	f100 0214 	add.w	r2, r0, #20
 80093f6:	6900      	ldr	r0, [r0, #16]
 80093f8:	114b      	asrs	r3, r1, #5
 80093fa:	4298      	cmp	r0, r3
 80093fc:	b510      	push	{r4, lr}
 80093fe:	db11      	blt.n	8009424 <__any_on+0x32>
 8009400:	dd0a      	ble.n	8009418 <__any_on+0x26>
 8009402:	f011 011f 	ands.w	r1, r1, #31
 8009406:	d007      	beq.n	8009418 <__any_on+0x26>
 8009408:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800940c:	fa24 f001 	lsr.w	r0, r4, r1
 8009410:	fa00 f101 	lsl.w	r1, r0, r1
 8009414:	428c      	cmp	r4, r1
 8009416:	d10b      	bne.n	8009430 <__any_on+0x3e>
 8009418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800941c:	4293      	cmp	r3, r2
 800941e:	d803      	bhi.n	8009428 <__any_on+0x36>
 8009420:	2000      	movs	r0, #0
 8009422:	bd10      	pop	{r4, pc}
 8009424:	4603      	mov	r3, r0
 8009426:	e7f7      	b.n	8009418 <__any_on+0x26>
 8009428:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800942c:	2900      	cmp	r1, #0
 800942e:	d0f5      	beq.n	800941c <__any_on+0x2a>
 8009430:	2001      	movs	r0, #1
 8009432:	e7f6      	b.n	8009422 <__any_on+0x30>

08009434 <sulp>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	4604      	mov	r4, r0
 8009438:	460d      	mov	r5, r1
 800943a:	ec45 4b10 	vmov	d0, r4, r5
 800943e:	4616      	mov	r6, r2
 8009440:	f7ff feba 	bl	80091b8 <__ulp>
 8009444:	ec51 0b10 	vmov	r0, r1, d0
 8009448:	b17e      	cbz	r6, 800946a <sulp+0x36>
 800944a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800944e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009452:	2b00      	cmp	r3, #0
 8009454:	dd09      	ble.n	800946a <sulp+0x36>
 8009456:	051b      	lsls	r3, r3, #20
 8009458:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800945c:	2400      	movs	r4, #0
 800945e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	ec41 0b10 	vmov	d0, r0, r1
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <_strtod_l>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	b09f      	sub	sp, #124	@ 0x7c
 8009476:	460c      	mov	r4, r1
 8009478:	9217      	str	r2, [sp, #92]	@ 0x5c
 800947a:	2200      	movs	r2, #0
 800947c:	921a      	str	r2, [sp, #104]	@ 0x68
 800947e:	9005      	str	r0, [sp, #20]
 8009480:	f04f 0a00 	mov.w	sl, #0
 8009484:	f04f 0b00 	mov.w	fp, #0
 8009488:	460a      	mov	r2, r1
 800948a:	9219      	str	r2, [sp, #100]	@ 0x64
 800948c:	7811      	ldrb	r1, [r2, #0]
 800948e:	292b      	cmp	r1, #43	@ 0x2b
 8009490:	d04a      	beq.n	8009528 <_strtod_l+0xb8>
 8009492:	d838      	bhi.n	8009506 <_strtod_l+0x96>
 8009494:	290d      	cmp	r1, #13
 8009496:	d832      	bhi.n	80094fe <_strtod_l+0x8e>
 8009498:	2908      	cmp	r1, #8
 800949a:	d832      	bhi.n	8009502 <_strtod_l+0x92>
 800949c:	2900      	cmp	r1, #0
 800949e:	d03b      	beq.n	8009518 <_strtod_l+0xa8>
 80094a0:	2200      	movs	r2, #0
 80094a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80094a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80094a6:	782a      	ldrb	r2, [r5, #0]
 80094a8:	2a30      	cmp	r2, #48	@ 0x30
 80094aa:	f040 80b3 	bne.w	8009614 <_strtod_l+0x1a4>
 80094ae:	786a      	ldrb	r2, [r5, #1]
 80094b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094b4:	2a58      	cmp	r2, #88	@ 0x58
 80094b6:	d16e      	bne.n	8009596 <_strtod_l+0x126>
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	ab1a      	add	r3, sp, #104	@ 0x68
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4a8e      	ldr	r2, [pc, #568]	@ (80096fc <_strtod_l+0x28c>)
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094c8:	a919      	add	r1, sp, #100	@ 0x64
 80094ca:	f001 f927 	bl	800a71c <__gethex>
 80094ce:	f010 060f 	ands.w	r6, r0, #15
 80094d2:	4604      	mov	r4, r0
 80094d4:	d005      	beq.n	80094e2 <_strtod_l+0x72>
 80094d6:	2e06      	cmp	r6, #6
 80094d8:	d128      	bne.n	800952c <_strtod_l+0xbc>
 80094da:	3501      	adds	r5, #1
 80094dc:	2300      	movs	r3, #0
 80094de:	9519      	str	r5, [sp, #100]	@ 0x64
 80094e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f040 858e 	bne.w	800a006 <_strtod_l+0xb96>
 80094ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ec:	b1cb      	cbz	r3, 8009522 <_strtod_l+0xb2>
 80094ee:	4652      	mov	r2, sl
 80094f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80094f4:	ec43 2b10 	vmov	d0, r2, r3
 80094f8:	b01f      	add	sp, #124	@ 0x7c
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	2920      	cmp	r1, #32
 8009500:	d1ce      	bne.n	80094a0 <_strtod_l+0x30>
 8009502:	3201      	adds	r2, #1
 8009504:	e7c1      	b.n	800948a <_strtod_l+0x1a>
 8009506:	292d      	cmp	r1, #45	@ 0x2d
 8009508:	d1ca      	bne.n	80094a0 <_strtod_l+0x30>
 800950a:	2101      	movs	r1, #1
 800950c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800950e:	1c51      	adds	r1, r2, #1
 8009510:	9119      	str	r1, [sp, #100]	@ 0x64
 8009512:	7852      	ldrb	r2, [r2, #1]
 8009514:	2a00      	cmp	r2, #0
 8009516:	d1c5      	bne.n	80094a4 <_strtod_l+0x34>
 8009518:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800951a:	9419      	str	r4, [sp, #100]	@ 0x64
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8570 	bne.w	800a002 <_strtod_l+0xb92>
 8009522:	4652      	mov	r2, sl
 8009524:	465b      	mov	r3, fp
 8009526:	e7e5      	b.n	80094f4 <_strtod_l+0x84>
 8009528:	2100      	movs	r1, #0
 800952a:	e7ef      	b.n	800950c <_strtod_l+0x9c>
 800952c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800952e:	b13a      	cbz	r2, 8009540 <_strtod_l+0xd0>
 8009530:	2135      	movs	r1, #53	@ 0x35
 8009532:	a81c      	add	r0, sp, #112	@ 0x70
 8009534:	f7ff ff3a 	bl	80093ac <__copybits>
 8009538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800953a:	9805      	ldr	r0, [sp, #20]
 800953c:	f7ff fb08 	bl	8008b50 <_Bfree>
 8009540:	3e01      	subs	r6, #1
 8009542:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009544:	2e04      	cmp	r6, #4
 8009546:	d806      	bhi.n	8009556 <_strtod_l+0xe6>
 8009548:	e8df f006 	tbb	[pc, r6]
 800954c:	201d0314 	.word	0x201d0314
 8009550:	14          	.byte	0x14
 8009551:	00          	.byte	0x00
 8009552:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009556:	05e1      	lsls	r1, r4, #23
 8009558:	bf48      	it	mi
 800955a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800955e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009562:	0d1b      	lsrs	r3, r3, #20
 8009564:	051b      	lsls	r3, r3, #20
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1bb      	bne.n	80094e2 <_strtod_l+0x72>
 800956a:	f7fe fb31 	bl	8007bd0 <__errno>
 800956e:	2322      	movs	r3, #34	@ 0x22
 8009570:	6003      	str	r3, [r0, #0]
 8009572:	e7b6      	b.n	80094e2 <_strtod_l+0x72>
 8009574:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009578:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800957c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009580:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009584:	e7e7      	b.n	8009556 <_strtod_l+0xe6>
 8009586:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009704 <_strtod_l+0x294>
 800958a:	e7e4      	b.n	8009556 <_strtod_l+0xe6>
 800958c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009590:	f04f 3aff 	mov.w	sl, #4294967295
 8009594:	e7df      	b.n	8009556 <_strtod_l+0xe6>
 8009596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	9219      	str	r2, [sp, #100]	@ 0x64
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	2b30      	cmp	r3, #48	@ 0x30
 80095a0:	d0f9      	beq.n	8009596 <_strtod_l+0x126>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d09d      	beq.n	80094e2 <_strtod_l+0x72>
 80095a6:	2301      	movs	r3, #1
 80095a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80095ae:	2300      	movs	r3, #0
 80095b0:	9308      	str	r3, [sp, #32]
 80095b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80095b4:	461f      	mov	r7, r3
 80095b6:	220a      	movs	r2, #10
 80095b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80095ba:	7805      	ldrb	r5, [r0, #0]
 80095bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80095c0:	b2d9      	uxtb	r1, r3
 80095c2:	2909      	cmp	r1, #9
 80095c4:	d928      	bls.n	8009618 <_strtod_l+0x1a8>
 80095c6:	494e      	ldr	r1, [pc, #312]	@ (8009700 <_strtod_l+0x290>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	f000 ffd5 	bl	800a578 <strncmp>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d032      	beq.n	8009638 <_strtod_l+0x1c8>
 80095d2:	2000      	movs	r0, #0
 80095d4:	462a      	mov	r2, r5
 80095d6:	4681      	mov	r9, r0
 80095d8:	463d      	mov	r5, r7
 80095da:	4603      	mov	r3, r0
 80095dc:	2a65      	cmp	r2, #101	@ 0x65
 80095de:	d001      	beq.n	80095e4 <_strtod_l+0x174>
 80095e0:	2a45      	cmp	r2, #69	@ 0x45
 80095e2:	d114      	bne.n	800960e <_strtod_l+0x19e>
 80095e4:	b91d      	cbnz	r5, 80095ee <_strtod_l+0x17e>
 80095e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095e8:	4302      	orrs	r2, r0
 80095ea:	d095      	beq.n	8009518 <_strtod_l+0xa8>
 80095ec:	2500      	movs	r5, #0
 80095ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80095f0:	1c62      	adds	r2, r4, #1
 80095f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095f4:	7862      	ldrb	r2, [r4, #1]
 80095f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80095f8:	d077      	beq.n	80096ea <_strtod_l+0x27a>
 80095fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80095fc:	d07b      	beq.n	80096f6 <_strtod_l+0x286>
 80095fe:	f04f 0c00 	mov.w	ip, #0
 8009602:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009606:	2909      	cmp	r1, #9
 8009608:	f240 8082 	bls.w	8009710 <_strtod_l+0x2a0>
 800960c:	9419      	str	r4, [sp, #100]	@ 0x64
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	e0a2      	b.n	800975a <_strtod_l+0x2ea>
 8009614:	2300      	movs	r3, #0
 8009616:	e7c7      	b.n	80095a8 <_strtod_l+0x138>
 8009618:	2f08      	cmp	r7, #8
 800961a:	bfd5      	itete	le
 800961c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800961e:	9908      	ldrgt	r1, [sp, #32]
 8009620:	fb02 3301 	mlale	r3, r2, r1, r3
 8009624:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009628:	f100 0001 	add.w	r0, r0, #1
 800962c:	bfd4      	ite	le
 800962e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009630:	9308      	strgt	r3, [sp, #32]
 8009632:	3701      	adds	r7, #1
 8009634:	9019      	str	r0, [sp, #100]	@ 0x64
 8009636:	e7bf      	b.n	80095b8 <_strtod_l+0x148>
 8009638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	9219      	str	r2, [sp, #100]	@ 0x64
 800963e:	785a      	ldrb	r2, [r3, #1]
 8009640:	b37f      	cbz	r7, 80096a2 <_strtod_l+0x232>
 8009642:	4681      	mov	r9, r0
 8009644:	463d      	mov	r5, r7
 8009646:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800964a:	2b09      	cmp	r3, #9
 800964c:	d912      	bls.n	8009674 <_strtod_l+0x204>
 800964e:	2301      	movs	r3, #1
 8009650:	e7c4      	b.n	80095dc <_strtod_l+0x16c>
 8009652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	9219      	str	r2, [sp, #100]	@ 0x64
 8009658:	785a      	ldrb	r2, [r3, #1]
 800965a:	3001      	adds	r0, #1
 800965c:	2a30      	cmp	r2, #48	@ 0x30
 800965e:	d0f8      	beq.n	8009652 <_strtod_l+0x1e2>
 8009660:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009664:	2b08      	cmp	r3, #8
 8009666:	f200 84d3 	bhi.w	800a010 <_strtod_l+0xba0>
 800966a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800966c:	930c      	str	r3, [sp, #48]	@ 0x30
 800966e:	4681      	mov	r9, r0
 8009670:	2000      	movs	r0, #0
 8009672:	4605      	mov	r5, r0
 8009674:	3a30      	subs	r2, #48	@ 0x30
 8009676:	f100 0301 	add.w	r3, r0, #1
 800967a:	d02a      	beq.n	80096d2 <_strtod_l+0x262>
 800967c:	4499      	add	r9, r3
 800967e:	eb00 0c05 	add.w	ip, r0, r5
 8009682:	462b      	mov	r3, r5
 8009684:	210a      	movs	r1, #10
 8009686:	4563      	cmp	r3, ip
 8009688:	d10d      	bne.n	80096a6 <_strtod_l+0x236>
 800968a:	1c69      	adds	r1, r5, #1
 800968c:	4401      	add	r1, r0
 800968e:	4428      	add	r0, r5
 8009690:	2808      	cmp	r0, #8
 8009692:	dc16      	bgt.n	80096c2 <_strtod_l+0x252>
 8009694:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009696:	230a      	movs	r3, #10
 8009698:	fb03 2300 	mla	r3, r3, r0, r2
 800969c:	930a      	str	r3, [sp, #40]	@ 0x28
 800969e:	2300      	movs	r3, #0
 80096a0:	e018      	b.n	80096d4 <_strtod_l+0x264>
 80096a2:	4638      	mov	r0, r7
 80096a4:	e7da      	b.n	800965c <_strtod_l+0x1ec>
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	f103 0301 	add.w	r3, r3, #1
 80096ac:	dc03      	bgt.n	80096b6 <_strtod_l+0x246>
 80096ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80096b0:	434e      	muls	r6, r1
 80096b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80096b4:	e7e7      	b.n	8009686 <_strtod_l+0x216>
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	bfde      	ittt	le
 80096ba:	9e08      	ldrle	r6, [sp, #32]
 80096bc:	434e      	mulle	r6, r1
 80096be:	9608      	strle	r6, [sp, #32]
 80096c0:	e7e1      	b.n	8009686 <_strtod_l+0x216>
 80096c2:	280f      	cmp	r0, #15
 80096c4:	dceb      	bgt.n	800969e <_strtod_l+0x22e>
 80096c6:	9808      	ldr	r0, [sp, #32]
 80096c8:	230a      	movs	r3, #10
 80096ca:	fb03 2300 	mla	r3, r3, r0, r2
 80096ce:	9308      	str	r3, [sp, #32]
 80096d0:	e7e5      	b.n	800969e <_strtod_l+0x22e>
 80096d2:	4629      	mov	r1, r5
 80096d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096d6:	1c50      	adds	r0, r2, #1
 80096d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80096da:	7852      	ldrb	r2, [r2, #1]
 80096dc:	4618      	mov	r0, r3
 80096de:	460d      	mov	r5, r1
 80096e0:	e7b1      	b.n	8009646 <_strtod_l+0x1d6>
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	2301      	movs	r3, #1
 80096e8:	e77d      	b.n	80095e6 <_strtod_l+0x176>
 80096ea:	f04f 0c00 	mov.w	ip, #0
 80096ee:	1ca2      	adds	r2, r4, #2
 80096f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80096f2:	78a2      	ldrb	r2, [r4, #2]
 80096f4:	e785      	b.n	8009602 <_strtod_l+0x192>
 80096f6:	f04f 0c01 	mov.w	ip, #1
 80096fa:	e7f8      	b.n	80096ee <_strtod_l+0x27e>
 80096fc:	0800b5f8 	.word	0x0800b5f8
 8009700:	0800b5e0 	.word	0x0800b5e0
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800970a:	1c51      	adds	r1, r2, #1
 800970c:	9119      	str	r1, [sp, #100]	@ 0x64
 800970e:	7852      	ldrb	r2, [r2, #1]
 8009710:	2a30      	cmp	r2, #48	@ 0x30
 8009712:	d0f9      	beq.n	8009708 <_strtod_l+0x298>
 8009714:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009718:	2908      	cmp	r1, #8
 800971a:	f63f af78 	bhi.w	800960e <_strtod_l+0x19e>
 800971e:	3a30      	subs	r2, #48	@ 0x30
 8009720:	920e      	str	r2, [sp, #56]	@ 0x38
 8009722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009724:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009726:	f04f 080a 	mov.w	r8, #10
 800972a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800972c:	1c56      	adds	r6, r2, #1
 800972e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009730:	7852      	ldrb	r2, [r2, #1]
 8009732:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009736:	f1be 0f09 	cmp.w	lr, #9
 800973a:	d939      	bls.n	80097b0 <_strtod_l+0x340>
 800973c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800973e:	1a76      	subs	r6, r6, r1
 8009740:	2e08      	cmp	r6, #8
 8009742:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009746:	dc03      	bgt.n	8009750 <_strtod_l+0x2e0>
 8009748:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800974a:	4588      	cmp	r8, r1
 800974c:	bfa8      	it	ge
 800974e:	4688      	movge	r8, r1
 8009750:	f1bc 0f00 	cmp.w	ip, #0
 8009754:	d001      	beq.n	800975a <_strtod_l+0x2ea>
 8009756:	f1c8 0800 	rsb	r8, r8, #0
 800975a:	2d00      	cmp	r5, #0
 800975c:	d14e      	bne.n	80097fc <_strtod_l+0x38c>
 800975e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009760:	4308      	orrs	r0, r1
 8009762:	f47f aebe 	bne.w	80094e2 <_strtod_l+0x72>
 8009766:	2b00      	cmp	r3, #0
 8009768:	f47f aed6 	bne.w	8009518 <_strtod_l+0xa8>
 800976c:	2a69      	cmp	r2, #105	@ 0x69
 800976e:	d028      	beq.n	80097c2 <_strtod_l+0x352>
 8009770:	dc25      	bgt.n	80097be <_strtod_l+0x34e>
 8009772:	2a49      	cmp	r2, #73	@ 0x49
 8009774:	d025      	beq.n	80097c2 <_strtod_l+0x352>
 8009776:	2a4e      	cmp	r2, #78	@ 0x4e
 8009778:	f47f aece 	bne.w	8009518 <_strtod_l+0xa8>
 800977c:	499b      	ldr	r1, [pc, #620]	@ (80099ec <_strtod_l+0x57c>)
 800977e:	a819      	add	r0, sp, #100	@ 0x64
 8009780:	f001 f9ee 	bl	800ab60 <__match>
 8009784:	2800      	cmp	r0, #0
 8009786:	f43f aec7 	beq.w	8009518 <_strtod_l+0xa8>
 800978a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b28      	cmp	r3, #40	@ 0x28
 8009790:	d12e      	bne.n	80097f0 <_strtod_l+0x380>
 8009792:	4997      	ldr	r1, [pc, #604]	@ (80099f0 <_strtod_l+0x580>)
 8009794:	aa1c      	add	r2, sp, #112	@ 0x70
 8009796:	a819      	add	r0, sp, #100	@ 0x64
 8009798:	f001 f9f6 	bl	800ab88 <__hexnan>
 800979c:	2805      	cmp	r0, #5
 800979e:	d127      	bne.n	80097f0 <_strtod_l+0x380>
 80097a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80097a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80097aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80097ae:	e698      	b.n	80094e2 <_strtod_l+0x72>
 80097b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80097b2:	fb08 2101 	mla	r1, r8, r1, r2
 80097b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80097ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80097bc:	e7b5      	b.n	800972a <_strtod_l+0x2ba>
 80097be:	2a6e      	cmp	r2, #110	@ 0x6e
 80097c0:	e7da      	b.n	8009778 <_strtod_l+0x308>
 80097c2:	498c      	ldr	r1, [pc, #560]	@ (80099f4 <_strtod_l+0x584>)
 80097c4:	a819      	add	r0, sp, #100	@ 0x64
 80097c6:	f001 f9cb 	bl	800ab60 <__match>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f43f aea4 	beq.w	8009518 <_strtod_l+0xa8>
 80097d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097d2:	4989      	ldr	r1, [pc, #548]	@ (80099f8 <_strtod_l+0x588>)
 80097d4:	3b01      	subs	r3, #1
 80097d6:	a819      	add	r0, sp, #100	@ 0x64
 80097d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80097da:	f001 f9c1 	bl	800ab60 <__match>
 80097de:	b910      	cbnz	r0, 80097e6 <_strtod_l+0x376>
 80097e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097e2:	3301      	adds	r3, #1
 80097e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80097e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009a08 <_strtod_l+0x598>
 80097ea:	f04f 0a00 	mov.w	sl, #0
 80097ee:	e678      	b.n	80094e2 <_strtod_l+0x72>
 80097f0:	4882      	ldr	r0, [pc, #520]	@ (80099fc <_strtod_l+0x58c>)
 80097f2:	f000 fef1 	bl	800a5d8 <nan>
 80097f6:	ec5b ab10 	vmov	sl, fp, d0
 80097fa:	e672      	b.n	80094e2 <_strtod_l+0x72>
 80097fc:	eba8 0309 	sub.w	r3, r8, r9
 8009800:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009802:	9309      	str	r3, [sp, #36]	@ 0x24
 8009804:	2f00      	cmp	r7, #0
 8009806:	bf08      	it	eq
 8009808:	462f      	moveq	r7, r5
 800980a:	2d10      	cmp	r5, #16
 800980c:	462c      	mov	r4, r5
 800980e:	bfa8      	it	ge
 8009810:	2410      	movge	r4, #16
 8009812:	f7f6 fe77 	bl	8000504 <__aeabi_ui2d>
 8009816:	2d09      	cmp	r5, #9
 8009818:	4682      	mov	sl, r0
 800981a:	468b      	mov	fp, r1
 800981c:	dc13      	bgt.n	8009846 <_strtod_l+0x3d6>
 800981e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	f43f ae5e 	beq.w	80094e2 <_strtod_l+0x72>
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	dd78      	ble.n	800991c <_strtod_l+0x4ac>
 800982a:	2b16      	cmp	r3, #22
 800982c:	dc5f      	bgt.n	80098ee <_strtod_l+0x47e>
 800982e:	4974      	ldr	r1, [pc, #464]	@ (8009a00 <_strtod_l+0x590>)
 8009830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009838:	4652      	mov	r2, sl
 800983a:	465b      	mov	r3, fp
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	4682      	mov	sl, r0
 8009842:	468b      	mov	fp, r1
 8009844:	e64d      	b.n	80094e2 <_strtod_l+0x72>
 8009846:	4b6e      	ldr	r3, [pc, #440]	@ (8009a00 <_strtod_l+0x590>)
 8009848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800984c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	4682      	mov	sl, r0
 8009856:	9808      	ldr	r0, [sp, #32]
 8009858:	468b      	mov	fp, r1
 800985a:	f7f6 fe53 	bl	8000504 <__aeabi_ui2d>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4650      	mov	r0, sl
 8009864:	4659      	mov	r1, fp
 8009866:	f7f6 fd11 	bl	800028c <__adddf3>
 800986a:	2d0f      	cmp	r5, #15
 800986c:	4682      	mov	sl, r0
 800986e:	468b      	mov	fp, r1
 8009870:	ddd5      	ble.n	800981e <_strtod_l+0x3ae>
 8009872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009874:	1b2c      	subs	r4, r5, r4
 8009876:	441c      	add	r4, r3
 8009878:	2c00      	cmp	r4, #0
 800987a:	f340 8096 	ble.w	80099aa <_strtod_l+0x53a>
 800987e:	f014 030f 	ands.w	r3, r4, #15
 8009882:	d00a      	beq.n	800989a <_strtod_l+0x42a>
 8009884:	495e      	ldr	r1, [pc, #376]	@ (8009a00 <_strtod_l+0x590>)
 8009886:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800988a:	4652      	mov	r2, sl
 800988c:	465b      	mov	r3, fp
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	4682      	mov	sl, r0
 8009898:	468b      	mov	fp, r1
 800989a:	f034 040f 	bics.w	r4, r4, #15
 800989e:	d073      	beq.n	8009988 <_strtod_l+0x518>
 80098a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80098a4:	dd48      	ble.n	8009938 <_strtod_l+0x4c8>
 80098a6:	2400      	movs	r4, #0
 80098a8:	46a0      	mov	r8, r4
 80098aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80098ac:	46a1      	mov	r9, r4
 80098ae:	9a05      	ldr	r2, [sp, #20]
 80098b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009a08 <_strtod_l+0x598>
 80098b4:	2322      	movs	r3, #34	@ 0x22
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	f04f 0a00 	mov.w	sl, #0
 80098bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f43f ae0f 	beq.w	80094e2 <_strtod_l+0x72>
 80098c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	f7ff f942 	bl	8008b50 <_Bfree>
 80098cc:	9805      	ldr	r0, [sp, #20]
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7ff f93e 	bl	8008b50 <_Bfree>
 80098d4:	9805      	ldr	r0, [sp, #20]
 80098d6:	4641      	mov	r1, r8
 80098d8:	f7ff f93a 	bl	8008b50 <_Bfree>
 80098dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098de:	9805      	ldr	r0, [sp, #20]
 80098e0:	f7ff f936 	bl	8008b50 <_Bfree>
 80098e4:	9805      	ldr	r0, [sp, #20]
 80098e6:	4621      	mov	r1, r4
 80098e8:	f7ff f932 	bl	8008b50 <_Bfree>
 80098ec:	e5f9      	b.n	80094e2 <_strtod_l+0x72>
 80098ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80098f4:	4293      	cmp	r3, r2
 80098f6:	dbbc      	blt.n	8009872 <_strtod_l+0x402>
 80098f8:	4c41      	ldr	r4, [pc, #260]	@ (8009a00 <_strtod_l+0x590>)
 80098fa:	f1c5 050f 	rsb	r5, r5, #15
 80098fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009902:	4652      	mov	r2, sl
 8009904:	465b      	mov	r3, fp
 8009906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800990a:	f7f6 fe75 	bl	80005f8 <__aeabi_dmul>
 800990e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009910:	1b5d      	subs	r5, r3, r5
 8009912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009916:	e9d4 2300 	ldrd	r2, r3, [r4]
 800991a:	e78f      	b.n	800983c <_strtod_l+0x3cc>
 800991c:	3316      	adds	r3, #22
 800991e:	dba8      	blt.n	8009872 <_strtod_l+0x402>
 8009920:	4b37      	ldr	r3, [pc, #220]	@ (8009a00 <_strtod_l+0x590>)
 8009922:	eba9 0808 	sub.w	r8, r9, r8
 8009926:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800992a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800992e:	4650      	mov	r0, sl
 8009930:	4659      	mov	r1, fp
 8009932:	f7f6 ff8b 	bl	800084c <__aeabi_ddiv>
 8009936:	e783      	b.n	8009840 <_strtod_l+0x3d0>
 8009938:	4b32      	ldr	r3, [pc, #200]	@ (8009a04 <_strtod_l+0x594>)
 800993a:	9308      	str	r3, [sp, #32]
 800993c:	2300      	movs	r3, #0
 800993e:	1124      	asrs	r4, r4, #4
 8009940:	4650      	mov	r0, sl
 8009942:	4659      	mov	r1, fp
 8009944:	461e      	mov	r6, r3
 8009946:	2c01      	cmp	r4, #1
 8009948:	dc21      	bgt.n	800998e <_strtod_l+0x51e>
 800994a:	b10b      	cbz	r3, 8009950 <_strtod_l+0x4e0>
 800994c:	4682      	mov	sl, r0
 800994e:	468b      	mov	fp, r1
 8009950:	492c      	ldr	r1, [pc, #176]	@ (8009a04 <_strtod_l+0x594>)
 8009952:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009956:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800995a:	4652      	mov	r2, sl
 800995c:	465b      	mov	r3, fp
 800995e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009962:	f7f6 fe49 	bl	80005f8 <__aeabi_dmul>
 8009966:	4b28      	ldr	r3, [pc, #160]	@ (8009a08 <_strtod_l+0x598>)
 8009968:	460a      	mov	r2, r1
 800996a:	400b      	ands	r3, r1
 800996c:	4927      	ldr	r1, [pc, #156]	@ (8009a0c <_strtod_l+0x59c>)
 800996e:	428b      	cmp	r3, r1
 8009970:	4682      	mov	sl, r0
 8009972:	d898      	bhi.n	80098a6 <_strtod_l+0x436>
 8009974:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009978:	428b      	cmp	r3, r1
 800997a:	bf86      	itte	hi
 800997c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009a10 <_strtod_l+0x5a0>
 8009980:	f04f 3aff 	movhi.w	sl, #4294967295
 8009984:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009988:	2300      	movs	r3, #0
 800998a:	9308      	str	r3, [sp, #32]
 800998c:	e07a      	b.n	8009a84 <_strtod_l+0x614>
 800998e:	07e2      	lsls	r2, r4, #31
 8009990:	d505      	bpl.n	800999e <_strtod_l+0x52e>
 8009992:	9b08      	ldr	r3, [sp, #32]
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fe2e 	bl	80005f8 <__aeabi_dmul>
 800999c:	2301      	movs	r3, #1
 800999e:	9a08      	ldr	r2, [sp, #32]
 80099a0:	3208      	adds	r2, #8
 80099a2:	3601      	adds	r6, #1
 80099a4:	1064      	asrs	r4, r4, #1
 80099a6:	9208      	str	r2, [sp, #32]
 80099a8:	e7cd      	b.n	8009946 <_strtod_l+0x4d6>
 80099aa:	d0ed      	beq.n	8009988 <_strtod_l+0x518>
 80099ac:	4264      	negs	r4, r4
 80099ae:	f014 020f 	ands.w	r2, r4, #15
 80099b2:	d00a      	beq.n	80099ca <_strtod_l+0x55a>
 80099b4:	4b12      	ldr	r3, [pc, #72]	@ (8009a00 <_strtod_l+0x590>)
 80099b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ba:	4650      	mov	r0, sl
 80099bc:	4659      	mov	r1, fp
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 ff43 	bl	800084c <__aeabi_ddiv>
 80099c6:	4682      	mov	sl, r0
 80099c8:	468b      	mov	fp, r1
 80099ca:	1124      	asrs	r4, r4, #4
 80099cc:	d0dc      	beq.n	8009988 <_strtod_l+0x518>
 80099ce:	2c1f      	cmp	r4, #31
 80099d0:	dd20      	ble.n	8009a14 <_strtod_l+0x5a4>
 80099d2:	2400      	movs	r4, #0
 80099d4:	46a0      	mov	r8, r4
 80099d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80099d8:	46a1      	mov	r9, r4
 80099da:	9a05      	ldr	r2, [sp, #20]
 80099dc:	2322      	movs	r3, #34	@ 0x22
 80099de:	f04f 0a00 	mov.w	sl, #0
 80099e2:	f04f 0b00 	mov.w	fp, #0
 80099e6:	6013      	str	r3, [r2, #0]
 80099e8:	e768      	b.n	80098bc <_strtod_l+0x44c>
 80099ea:	bf00      	nop
 80099ec:	0800b3d1 	.word	0x0800b3d1
 80099f0:	0800b5e4 	.word	0x0800b5e4
 80099f4:	0800b3c9 	.word	0x0800b3c9
 80099f8:	0800b400 	.word	0x0800b400
 80099fc:	0800b78d 	.word	0x0800b78d
 8009a00:	0800b518 	.word	0x0800b518
 8009a04:	0800b4f0 	.word	0x0800b4f0
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	7ca00000 	.word	0x7ca00000
 8009a10:	7fefffff 	.word	0x7fefffff
 8009a14:	f014 0310 	ands.w	r3, r4, #16
 8009a18:	bf18      	it	ne
 8009a1a:	236a      	movne	r3, #106	@ 0x6a
 8009a1c:	4ea9      	ldr	r6, [pc, #676]	@ (8009cc4 <_strtod_l+0x854>)
 8009a1e:	9308      	str	r3, [sp, #32]
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	2300      	movs	r3, #0
 8009a26:	07e2      	lsls	r2, r4, #31
 8009a28:	d504      	bpl.n	8009a34 <_strtod_l+0x5c4>
 8009a2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a2e:	f7f6 fde3 	bl	80005f8 <__aeabi_dmul>
 8009a32:	2301      	movs	r3, #1
 8009a34:	1064      	asrs	r4, r4, #1
 8009a36:	f106 0608 	add.w	r6, r6, #8
 8009a3a:	d1f4      	bne.n	8009a26 <_strtod_l+0x5b6>
 8009a3c:	b10b      	cbz	r3, 8009a42 <_strtod_l+0x5d2>
 8009a3e:	4682      	mov	sl, r0
 8009a40:	468b      	mov	fp, r1
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	b1b3      	cbz	r3, 8009a74 <_strtod_l+0x604>
 8009a46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	4659      	mov	r1, fp
 8009a52:	dd0f      	ble.n	8009a74 <_strtod_l+0x604>
 8009a54:	2b1f      	cmp	r3, #31
 8009a56:	dd55      	ble.n	8009b04 <_strtod_l+0x694>
 8009a58:	2b34      	cmp	r3, #52	@ 0x34
 8009a5a:	bfde      	ittt	le
 8009a5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009a60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a64:	4093      	lslle	r3, r2
 8009a66:	f04f 0a00 	mov.w	sl, #0
 8009a6a:	bfcc      	ite	gt
 8009a6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a70:	ea03 0b01 	andle.w	fp, r3, r1
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	4650      	mov	r0, sl
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	f7f7 f824 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1a6      	bne.n	80099d2 <_strtod_l+0x562>
 8009a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a8a:	9805      	ldr	r0, [sp, #20]
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	463a      	mov	r2, r7
 8009a90:	f7ff f8c6 	bl	8008c20 <__s2b>
 8009a94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f af05 	beq.w	80098a6 <_strtod_l+0x436>
 8009a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	eba9 0308 	sub.w	r3, r9, r8
 8009aa4:	bfa8      	it	ge
 8009aa6:	2300      	movge	r3, #0
 8009aa8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009aaa:	2400      	movs	r4, #0
 8009aac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ab0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009ab2:	46a0      	mov	r8, r4
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	9805      	ldr	r0, [sp, #20]
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	f7ff f809 	bl	8008ad0 <_Balloc>
 8009abe:	4681      	mov	r9, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	f43f aef4 	beq.w	80098ae <_strtod_l+0x43e>
 8009ac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac8:	691a      	ldr	r2, [r3, #16]
 8009aca:	3202      	adds	r2, #2
 8009acc:	f103 010c 	add.w	r1, r3, #12
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	300c      	adds	r0, #12
 8009ad4:	f000 fd72 	bl	800a5bc <memcpy>
 8009ad8:	ec4b ab10 	vmov	d0, sl, fp
 8009adc:	9805      	ldr	r0, [sp, #20]
 8009ade:	aa1c      	add	r2, sp, #112	@ 0x70
 8009ae0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009ae2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009ae6:	f7ff fbd7 	bl	8009298 <__d2b>
 8009aea:	901a      	str	r0, [sp, #104]	@ 0x68
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f aede 	beq.w	80098ae <_strtod_l+0x43e>
 8009af2:	9805      	ldr	r0, [sp, #20]
 8009af4:	2101      	movs	r1, #1
 8009af6:	f7ff f929 	bl	8008d4c <__i2b>
 8009afa:	4680      	mov	r8, r0
 8009afc:	b948      	cbnz	r0, 8009b12 <_strtod_l+0x6a2>
 8009afe:	f04f 0800 	mov.w	r8, #0
 8009b02:	e6d4      	b.n	80098ae <_strtod_l+0x43e>
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0c:	ea03 0a0a 	and.w	sl, r3, sl
 8009b10:	e7b0      	b.n	8009a74 <_strtod_l+0x604>
 8009b12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	bfab      	itete	ge
 8009b1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009b22:	bfac      	ite	ge
 8009b24:	18ef      	addge	r7, r5, r3
 8009b26:	1b5e      	sublt	r6, r3, r5
 8009b28:	9b08      	ldr	r3, [sp, #32]
 8009b2a:	1aed      	subs	r5, r5, r3
 8009b2c:	4415      	add	r5, r2
 8009b2e:	4b66      	ldr	r3, [pc, #408]	@ (8009cc8 <_strtod_l+0x858>)
 8009b30:	3d01      	subs	r5, #1
 8009b32:	429d      	cmp	r5, r3
 8009b34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009b38:	da50      	bge.n	8009bdc <_strtod_l+0x76c>
 8009b3a:	1b5b      	subs	r3, r3, r5
 8009b3c:	2b1f      	cmp	r3, #31
 8009b3e:	eba2 0203 	sub.w	r2, r2, r3
 8009b42:	f04f 0101 	mov.w	r1, #1
 8009b46:	dc3d      	bgt.n	8009bc4 <_strtod_l+0x754>
 8009b48:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b52:	18bd      	adds	r5, r7, r2
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	42af      	cmp	r7, r5
 8009b58:	4416      	add	r6, r2
 8009b5a:	441e      	add	r6, r3
 8009b5c:	463b      	mov	r3, r7
 8009b5e:	bfa8      	it	ge
 8009b60:	462b      	movge	r3, r5
 8009b62:	42b3      	cmp	r3, r6
 8009b64:	bfa8      	it	ge
 8009b66:	4633      	movge	r3, r6
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfc2      	ittt	gt
 8009b6c:	1aed      	subgt	r5, r5, r3
 8009b6e:	1af6      	subgt	r6, r6, r3
 8009b70:	1aff      	subgt	r7, r7, r3
 8009b72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd16      	ble.n	8009ba6 <_strtod_l+0x736>
 8009b78:	4641      	mov	r1, r8
 8009b7a:	9805      	ldr	r0, [sp, #20]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	f7ff f9a5 	bl	8008ecc <__pow5mult>
 8009b82:	4680      	mov	r8, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d0ba      	beq.n	8009afe <_strtod_l+0x68e>
 8009b88:	4601      	mov	r1, r0
 8009b8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	f7ff f8f3 	bl	8008d78 <__multiply>
 8009b92:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f ae8a 	beq.w	80098ae <_strtod_l+0x43e>
 8009b9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b9c:	9805      	ldr	r0, [sp, #20]
 8009b9e:	f7fe ffd7 	bl	8008b50 <_Bfree>
 8009ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ba6:	2d00      	cmp	r5, #0
 8009ba8:	dc1d      	bgt.n	8009be6 <_strtod_l+0x776>
 8009baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd23      	ble.n	8009bf8 <_strtod_l+0x788>
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009bb4:	9805      	ldr	r0, [sp, #20]
 8009bb6:	f7ff f989 	bl	8008ecc <__pow5mult>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	b9e0      	cbnz	r0, 8009bf8 <_strtod_l+0x788>
 8009bbe:	f04f 0900 	mov.w	r9, #0
 8009bc2:	e674      	b.n	80098ae <_strtod_l+0x43e>
 8009bc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009bc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009bcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009bd0:	35e2      	adds	r5, #226	@ 0xe2
 8009bd2:	fa01 f305 	lsl.w	r3, r1, r5
 8009bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009bda:	e7ba      	b.n	8009b52 <_strtod_l+0x6e2>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8009be0:	2301      	movs	r3, #1
 8009be2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009be4:	e7b5      	b.n	8009b52 <_strtod_l+0x6e2>
 8009be6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009be8:	9805      	ldr	r0, [sp, #20]
 8009bea:	462a      	mov	r2, r5
 8009bec:	f7ff f9c8 	bl	8008f80 <__lshift>
 8009bf0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d1d9      	bne.n	8009baa <_strtod_l+0x73a>
 8009bf6:	e65a      	b.n	80098ae <_strtod_l+0x43e>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	dd07      	ble.n	8009c0c <_strtod_l+0x79c>
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	9805      	ldr	r0, [sp, #20]
 8009c00:	4632      	mov	r2, r6
 8009c02:	f7ff f9bd 	bl	8008f80 <__lshift>
 8009c06:	4681      	mov	r9, r0
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0d8      	beq.n	8009bbe <_strtod_l+0x74e>
 8009c0c:	2f00      	cmp	r7, #0
 8009c0e:	dd08      	ble.n	8009c22 <_strtod_l+0x7b2>
 8009c10:	4641      	mov	r1, r8
 8009c12:	9805      	ldr	r0, [sp, #20]
 8009c14:	463a      	mov	r2, r7
 8009c16:	f7ff f9b3 	bl	8008f80 <__lshift>
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f43f ae46 	beq.w	80098ae <_strtod_l+0x43e>
 8009c22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c24:	9805      	ldr	r0, [sp, #20]
 8009c26:	464a      	mov	r2, r9
 8009c28:	f7ff fa32 	bl	8009090 <__mdiff>
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f ae3d 	beq.w	80098ae <_strtod_l+0x43e>
 8009c34:	68c3      	ldr	r3, [r0, #12]
 8009c36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60c3      	str	r3, [r0, #12]
 8009c3c:	4641      	mov	r1, r8
 8009c3e:	f7ff fa0b 	bl	8009058 <__mcmp>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	da46      	bge.n	8009cd4 <_strtod_l+0x864>
 8009c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c48:	ea53 030a 	orrs.w	r3, r3, sl
 8009c4c:	d16c      	bne.n	8009d28 <_strtod_l+0x8b8>
 8009c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d168      	bne.n	8009d28 <_strtod_l+0x8b8>
 8009c56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c5a:	0d1b      	lsrs	r3, r3, #20
 8009c5c:	051b      	lsls	r3, r3, #20
 8009c5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c62:	d961      	bls.n	8009d28 <_strtod_l+0x8b8>
 8009c64:	6963      	ldr	r3, [r4, #20]
 8009c66:	b913      	cbnz	r3, 8009c6e <_strtod_l+0x7fe>
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	dd5c      	ble.n	8009d28 <_strtod_l+0x8b8>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	2201      	movs	r2, #1
 8009c72:	9805      	ldr	r0, [sp, #20]
 8009c74:	f7ff f984 	bl	8008f80 <__lshift>
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	f7ff f9ec 	bl	8009058 <__mcmp>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	dd51      	ble.n	8009d28 <_strtod_l+0x8b8>
 8009c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c88:	9a08      	ldr	r2, [sp, #32]
 8009c8a:	0d1b      	lsrs	r3, r3, #20
 8009c8c:	051b      	lsls	r3, r3, #20
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	d06b      	beq.n	8009d6a <_strtod_l+0x8fa>
 8009c92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c96:	d868      	bhi.n	8009d6a <_strtod_l+0x8fa>
 8009c98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c9c:	f67f ae9d 	bls.w	80099da <_strtod_l+0x56a>
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ccc <_strtod_l+0x85c>)
 8009ca2:	4650      	mov	r0, sl
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f7f6 fca6 	bl	80005f8 <__aeabi_dmul>
 8009cac:	4b08      	ldr	r3, [pc, #32]	@ (8009cd0 <_strtod_l+0x860>)
 8009cae:	400b      	ands	r3, r1
 8009cb0:	4682      	mov	sl, r0
 8009cb2:	468b      	mov	fp, r1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f47f ae05 	bne.w	80098c4 <_strtod_l+0x454>
 8009cba:	9a05      	ldr	r2, [sp, #20]
 8009cbc:	2322      	movs	r3, #34	@ 0x22
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	e600      	b.n	80098c4 <_strtod_l+0x454>
 8009cc2:	bf00      	nop
 8009cc4:	0800b610 	.word	0x0800b610
 8009cc8:	fffffc02 	.word	0xfffffc02
 8009ccc:	39500000 	.word	0x39500000
 8009cd0:	7ff00000 	.word	0x7ff00000
 8009cd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009cd8:	d165      	bne.n	8009da6 <_strtod_l+0x936>
 8009cda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce0:	b35a      	cbz	r2, 8009d3a <_strtod_l+0x8ca>
 8009ce2:	4a9f      	ldr	r2, [pc, #636]	@ (8009f60 <_strtod_l+0xaf0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d12b      	bne.n	8009d40 <_strtod_l+0x8d0>
 8009ce8:	9b08      	ldr	r3, [sp, #32]
 8009cea:	4651      	mov	r1, sl
 8009cec:	b303      	cbz	r3, 8009d30 <_strtod_l+0x8c0>
 8009cee:	4b9d      	ldr	r3, [pc, #628]	@ (8009f64 <_strtod_l+0xaf4>)
 8009cf0:	465a      	mov	r2, fp
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	d81b      	bhi.n	8009d36 <_strtod_l+0x8c6>
 8009cfe:	0d1b      	lsrs	r3, r3, #20
 8009d00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d04:	fa02 f303 	lsl.w	r3, r2, r3
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d119      	bne.n	8009d40 <_strtod_l+0x8d0>
 8009d0c:	4b96      	ldr	r3, [pc, #600]	@ (8009f68 <_strtod_l+0xaf8>)
 8009d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d102      	bne.n	8009d1a <_strtod_l+0x8aa>
 8009d14:	3101      	adds	r1, #1
 8009d16:	f43f adca 	beq.w	80098ae <_strtod_l+0x43e>
 8009d1a:	4b92      	ldr	r3, [pc, #584]	@ (8009f64 <_strtod_l+0xaf4>)
 8009d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d1e:	401a      	ands	r2, r3
 8009d20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009d24:	f04f 0a00 	mov.w	sl, #0
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1b8      	bne.n	8009ca0 <_strtod_l+0x830>
 8009d2e:	e5c9      	b.n	80098c4 <_strtod_l+0x454>
 8009d30:	f04f 33ff 	mov.w	r3, #4294967295
 8009d34:	e7e8      	b.n	8009d08 <_strtod_l+0x898>
 8009d36:	4613      	mov	r3, r2
 8009d38:	e7e6      	b.n	8009d08 <_strtod_l+0x898>
 8009d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d3e:	d0a1      	beq.n	8009c84 <_strtod_l+0x814>
 8009d40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d42:	b1db      	cbz	r3, 8009d7c <_strtod_l+0x90c>
 8009d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d46:	4213      	tst	r3, r2
 8009d48:	d0ee      	beq.n	8009d28 <_strtod_l+0x8b8>
 8009d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d4c:	9a08      	ldr	r2, [sp, #32]
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	b1bb      	cbz	r3, 8009d84 <_strtod_l+0x914>
 8009d54:	f7ff fb6e 	bl	8009434 <sulp>
 8009d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d5c:	ec53 2b10 	vmov	r2, r3, d0
 8009d60:	f7f6 fa94 	bl	800028c <__adddf3>
 8009d64:	4682      	mov	sl, r0
 8009d66:	468b      	mov	fp, r1
 8009d68:	e7de      	b.n	8009d28 <_strtod_l+0x8b8>
 8009d6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d76:	f04f 3aff 	mov.w	sl, #4294967295
 8009d7a:	e7d5      	b.n	8009d28 <_strtod_l+0x8b8>
 8009d7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d7e:	ea13 0f0a 	tst.w	r3, sl
 8009d82:	e7e1      	b.n	8009d48 <_strtod_l+0x8d8>
 8009d84:	f7ff fb56 	bl	8009434 <sulp>
 8009d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d8c:	ec53 2b10 	vmov	r2, r3, d0
 8009d90:	f7f6 fa7a 	bl	8000288 <__aeabi_dsub>
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	4682      	mov	sl, r0
 8009d9a:	468b      	mov	fp, r1
 8009d9c:	f7f6 fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d0c1      	beq.n	8009d28 <_strtod_l+0x8b8>
 8009da4:	e619      	b.n	80099da <_strtod_l+0x56a>
 8009da6:	4641      	mov	r1, r8
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff facd 	bl	8009348 <__ratio>
 8009dae:	ec57 6b10 	vmov	r6, r7, d0
 8009db2:	2200      	movs	r2, #0
 8009db4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fe98 	bl	8000af0 <__aeabi_dcmple>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d06f      	beq.n	8009ea4 <_strtod_l+0xa34>
 8009dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d17a      	bne.n	8009ec0 <_strtod_l+0xa50>
 8009dca:	f1ba 0f00 	cmp.w	sl, #0
 8009dce:	d158      	bne.n	8009e82 <_strtod_l+0xa12>
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d15a      	bne.n	8009e90 <_strtod_l+0xa20>
 8009dda:	4b64      	ldr	r3, [pc, #400]	@ (8009f6c <_strtod_l+0xafc>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d159      	bne.n	8009e9e <_strtod_l+0xa2e>
 8009dea:	4630      	mov	r0, r6
 8009dec:	4639      	mov	r1, r7
 8009dee:	4b60      	ldr	r3, [pc, #384]	@ (8009f70 <_strtod_l+0xb00>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	f7f6 fc01 	bl	80005f8 <__aeabi_dmul>
 8009df6:	4606      	mov	r6, r0
 8009df8:	460f      	mov	r7, r1
 8009dfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009dfe:	9606      	str	r6, [sp, #24]
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e06:	4d57      	ldr	r5, [pc, #348]	@ (8009f64 <_strtod_l+0xaf4>)
 8009e08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0e:	401d      	ands	r5, r3
 8009e10:	4b58      	ldr	r3, [pc, #352]	@ (8009f74 <_strtod_l+0xb04>)
 8009e12:	429d      	cmp	r5, r3
 8009e14:	f040 80b2 	bne.w	8009f7c <_strtod_l+0xb0c>
 8009e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e1e:	ec4b ab10 	vmov	d0, sl, fp
 8009e22:	f7ff f9c9 	bl	80091b8 <__ulp>
 8009e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e2a:	ec51 0b10 	vmov	r0, r1, d0
 8009e2e:	f7f6 fbe3 	bl	80005f8 <__aeabi_dmul>
 8009e32:	4652      	mov	r2, sl
 8009e34:	465b      	mov	r3, fp
 8009e36:	f7f6 fa29 	bl	800028c <__adddf3>
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4949      	ldr	r1, [pc, #292]	@ (8009f64 <_strtod_l+0xaf4>)
 8009e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8009f78 <_strtod_l+0xb08>)
 8009e40:	4019      	ands	r1, r3
 8009e42:	4291      	cmp	r1, r2
 8009e44:	4682      	mov	sl, r0
 8009e46:	d942      	bls.n	8009ece <_strtod_l+0xa5e>
 8009e48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e4a:	4b47      	ldr	r3, [pc, #284]	@ (8009f68 <_strtod_l+0xaf8>)
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d103      	bne.n	8009e58 <_strtod_l+0x9e8>
 8009e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e52:	3301      	adds	r3, #1
 8009e54:	f43f ad2b 	beq.w	80098ae <_strtod_l+0x43e>
 8009e58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009f68 <_strtod_l+0xaf8>
 8009e5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e62:	9805      	ldr	r0, [sp, #20]
 8009e64:	f7fe fe74 	bl	8008b50 <_Bfree>
 8009e68:	9805      	ldr	r0, [sp, #20]
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7fe fe70 	bl	8008b50 <_Bfree>
 8009e70:	9805      	ldr	r0, [sp, #20]
 8009e72:	4641      	mov	r1, r8
 8009e74:	f7fe fe6c 	bl	8008b50 <_Bfree>
 8009e78:	9805      	ldr	r0, [sp, #20]
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	f7fe fe68 	bl	8008b50 <_Bfree>
 8009e80:	e618      	b.n	8009ab4 <_strtod_l+0x644>
 8009e82:	f1ba 0f01 	cmp.w	sl, #1
 8009e86:	d103      	bne.n	8009e90 <_strtod_l+0xa20>
 8009e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f43f ada5 	beq.w	80099da <_strtod_l+0x56a>
 8009e90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009f40 <_strtod_l+0xad0>
 8009e94:	4f35      	ldr	r7, [pc, #212]	@ (8009f6c <_strtod_l+0xafc>)
 8009e96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	e7b1      	b.n	8009e02 <_strtod_l+0x992>
 8009e9e:	4f34      	ldr	r7, [pc, #208]	@ (8009f70 <_strtod_l+0xb00>)
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	e7aa      	b.n	8009dfa <_strtod_l+0x98a>
 8009ea4:	4b32      	ldr	r3, [pc, #200]	@ (8009f70 <_strtod_l+0xb00>)
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f7f6 fba4 	bl	80005f8 <__aeabi_dmul>
 8009eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d09f      	beq.n	8009dfa <_strtod_l+0x98a>
 8009eba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ebe:	e7a0      	b.n	8009e02 <_strtod_l+0x992>
 8009ec0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009f48 <_strtod_l+0xad8>
 8009ec4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ec8:	ec57 6b17 	vmov	r6, r7, d7
 8009ecc:	e799      	b.n	8009e02 <_strtod_l+0x992>
 8009ece:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1c1      	bne.n	8009e60 <_strtod_l+0x9f0>
 8009edc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ee0:	0d1b      	lsrs	r3, r3, #20
 8009ee2:	051b      	lsls	r3, r3, #20
 8009ee4:	429d      	cmp	r5, r3
 8009ee6:	d1bb      	bne.n	8009e60 <_strtod_l+0x9f0>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fee4 	bl	8000cb8 <__aeabi_d2lz>
 8009ef0:	f7f6 fb54 	bl	800059c <__aeabi_l2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 f9c4 	bl	8000288 <__aeabi_dsub>
 8009f00:	460b      	mov	r3, r1
 8009f02:	4602      	mov	r2, r0
 8009f04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f0e:	ea46 060a 	orr.w	r6, r6, sl
 8009f12:	431e      	orrs	r6, r3
 8009f14:	d06f      	beq.n	8009ff6 <_strtod_l+0xb86>
 8009f16:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f50 <_strtod_l+0xae0>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 fdde 	bl	8000adc <__aeabi_dcmplt>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f47f accf 	bne.w	80098c4 <_strtod_l+0x454>
 8009f26:	a30c      	add	r3, pc, #48	@ (adr r3, 8009f58 <_strtod_l+0xae8>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f30:	f7f6 fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d093      	beq.n	8009e60 <_strtod_l+0x9f0>
 8009f38:	e4c4      	b.n	80098c4 <_strtod_l+0x454>
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w
 8009f40:	00000000 	.word	0x00000000
 8009f44:	bff00000 	.word	0xbff00000
 8009f48:	00000000 	.word	0x00000000
 8009f4c:	3ff00000 	.word	0x3ff00000
 8009f50:	94a03595 	.word	0x94a03595
 8009f54:	3fdfffff 	.word	0x3fdfffff
 8009f58:	35afe535 	.word	0x35afe535
 8009f5c:	3fe00000 	.word	0x3fe00000
 8009f60:	000fffff 	.word	0x000fffff
 8009f64:	7ff00000 	.word	0x7ff00000
 8009f68:	7fefffff 	.word	0x7fefffff
 8009f6c:	3ff00000 	.word	0x3ff00000
 8009f70:	3fe00000 	.word	0x3fe00000
 8009f74:	7fe00000 	.word	0x7fe00000
 8009f78:	7c9fffff 	.word	0x7c9fffff
 8009f7c:	9b08      	ldr	r3, [sp, #32]
 8009f7e:	b323      	cbz	r3, 8009fca <_strtod_l+0xb5a>
 8009f80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f84:	d821      	bhi.n	8009fca <_strtod_l+0xb5a>
 8009f86:	a328      	add	r3, pc, #160	@ (adr r3, 800a028 <_strtod_l+0xbb8>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 fdae 	bl	8000af0 <__aeabi_dcmple>
 8009f94:	b1a0      	cbz	r0, 8009fc0 <_strtod_l+0xb50>
 8009f96:	4639      	mov	r1, r7
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7f6 fe05 	bl	8000ba8 <__aeabi_d2uiz>
 8009f9e:	2801      	cmp	r0, #1
 8009fa0:	bf38      	it	cc
 8009fa2:	2001      	movcc	r0, #1
 8009fa4:	f7f6 faae 	bl	8000504 <__aeabi_ui2d>
 8009fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009faa:	4606      	mov	r6, r0
 8009fac:	460f      	mov	r7, r1
 8009fae:	b9fb      	cbnz	r3, 8009ff0 <_strtod_l+0xb80>
 8009fb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009fb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009fbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009fc6:	1b5b      	subs	r3, r3, r5
 8009fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009fd2:	f7ff f8f1 	bl	80091b8 <__ulp>
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	ec53 2b10 	vmov	r2, r3, d0
 8009fdc:	4659      	mov	r1, fp
 8009fde:	f7f6 fb0b 	bl	80005f8 <__aeabi_dmul>
 8009fe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009fe6:	f7f6 f951 	bl	800028c <__adddf3>
 8009fea:	4682      	mov	sl, r0
 8009fec:	468b      	mov	fp, r1
 8009fee:	e770      	b.n	8009ed2 <_strtod_l+0xa62>
 8009ff0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ff4:	e7e0      	b.n	8009fb8 <_strtod_l+0xb48>
 8009ff6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a030 <_strtod_l+0xbc0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800a000:	e798      	b.n	8009f34 <_strtod_l+0xac4>
 800a002:	2300      	movs	r3, #0
 800a004:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a006:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	f7ff ba6d 	b.w	80094ea <_strtod_l+0x7a>
 800a010:	2a65      	cmp	r2, #101	@ 0x65
 800a012:	f43f ab66 	beq.w	80096e2 <_strtod_l+0x272>
 800a016:	2a45      	cmp	r2, #69	@ 0x45
 800a018:	f43f ab63 	beq.w	80096e2 <_strtod_l+0x272>
 800a01c:	2301      	movs	r3, #1
 800a01e:	f7ff bb9e 	b.w	800975e <_strtod_l+0x2ee>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	ffc00000 	.word	0xffc00000
 800a02c:	41dfffff 	.word	0x41dfffff
 800a030:	94a03595 	.word	0x94a03595
 800a034:	3fcfffff 	.word	0x3fcfffff

0800a038 <_strtod_r>:
 800a038:	4b01      	ldr	r3, [pc, #4]	@ (800a040 <_strtod_r+0x8>)
 800a03a:	f7ff ba19 	b.w	8009470 <_strtod_l>
 800a03e:	bf00      	nop
 800a040:	20000068 	.word	0x20000068

0800a044 <_strtol_l.constprop.0>:
 800a044:	2b24      	cmp	r3, #36	@ 0x24
 800a046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04a:	4686      	mov	lr, r0
 800a04c:	4690      	mov	r8, r2
 800a04e:	d801      	bhi.n	800a054 <_strtol_l.constprop.0+0x10>
 800a050:	2b01      	cmp	r3, #1
 800a052:	d106      	bne.n	800a062 <_strtol_l.constprop.0+0x1e>
 800a054:	f7fd fdbc 	bl	8007bd0 <__errno>
 800a058:	2316      	movs	r3, #22
 800a05a:	6003      	str	r3, [r0, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	4834      	ldr	r0, [pc, #208]	@ (800a134 <_strtol_l.constprop.0+0xf0>)
 800a064:	460d      	mov	r5, r1
 800a066:	462a      	mov	r2, r5
 800a068:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06c:	5d06      	ldrb	r6, [r0, r4]
 800a06e:	f016 0608 	ands.w	r6, r6, #8
 800a072:	d1f8      	bne.n	800a066 <_strtol_l.constprop.0+0x22>
 800a074:	2c2d      	cmp	r4, #45	@ 0x2d
 800a076:	d12d      	bne.n	800a0d4 <_strtol_l.constprop.0+0x90>
 800a078:	782c      	ldrb	r4, [r5, #0]
 800a07a:	2601      	movs	r6, #1
 800a07c:	1c95      	adds	r5, r2, #2
 800a07e:	f033 0210 	bics.w	r2, r3, #16
 800a082:	d109      	bne.n	800a098 <_strtol_l.constprop.0+0x54>
 800a084:	2c30      	cmp	r4, #48	@ 0x30
 800a086:	d12a      	bne.n	800a0de <_strtol_l.constprop.0+0x9a>
 800a088:	782a      	ldrb	r2, [r5, #0]
 800a08a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a08e:	2a58      	cmp	r2, #88	@ 0x58
 800a090:	d125      	bne.n	800a0de <_strtol_l.constprop.0+0x9a>
 800a092:	786c      	ldrb	r4, [r5, #1]
 800a094:	2310      	movs	r3, #16
 800a096:	3502      	adds	r5, #2
 800a098:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a09c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	fbbc f9f3 	udiv	r9, ip, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a0ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a0b0:	2f09      	cmp	r7, #9
 800a0b2:	d81b      	bhi.n	800a0ec <_strtol_l.constprop.0+0xa8>
 800a0b4:	463c      	mov	r4, r7
 800a0b6:	42a3      	cmp	r3, r4
 800a0b8:	dd27      	ble.n	800a10a <_strtol_l.constprop.0+0xc6>
 800a0ba:	1c57      	adds	r7, r2, #1
 800a0bc:	d007      	beq.n	800a0ce <_strtol_l.constprop.0+0x8a>
 800a0be:	4581      	cmp	r9, r0
 800a0c0:	d320      	bcc.n	800a104 <_strtol_l.constprop.0+0xc0>
 800a0c2:	d101      	bne.n	800a0c8 <_strtol_l.constprop.0+0x84>
 800a0c4:	45a2      	cmp	sl, r4
 800a0c6:	db1d      	blt.n	800a104 <_strtol_l.constprop.0+0xc0>
 800a0c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0d2:	e7eb      	b.n	800a0ac <_strtol_l.constprop.0+0x68>
 800a0d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0d6:	bf04      	itt	eq
 800a0d8:	782c      	ldrbeq	r4, [r5, #0]
 800a0da:	1c95      	addeq	r5, r2, #2
 800a0dc:	e7cf      	b.n	800a07e <_strtol_l.constprop.0+0x3a>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1da      	bne.n	800a098 <_strtol_l.constprop.0+0x54>
 800a0e2:	2c30      	cmp	r4, #48	@ 0x30
 800a0e4:	bf0c      	ite	eq
 800a0e6:	2308      	moveq	r3, #8
 800a0e8:	230a      	movne	r3, #10
 800a0ea:	e7d5      	b.n	800a098 <_strtol_l.constprop.0+0x54>
 800a0ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a0f0:	2f19      	cmp	r7, #25
 800a0f2:	d801      	bhi.n	800a0f8 <_strtol_l.constprop.0+0xb4>
 800a0f4:	3c37      	subs	r4, #55	@ 0x37
 800a0f6:	e7de      	b.n	800a0b6 <_strtol_l.constprop.0+0x72>
 800a0f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a0fc:	2f19      	cmp	r7, #25
 800a0fe:	d804      	bhi.n	800a10a <_strtol_l.constprop.0+0xc6>
 800a100:	3c57      	subs	r4, #87	@ 0x57
 800a102:	e7d8      	b.n	800a0b6 <_strtol_l.constprop.0+0x72>
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	e7e1      	b.n	800a0ce <_strtol_l.constprop.0+0x8a>
 800a10a:	1c53      	adds	r3, r2, #1
 800a10c:	d108      	bne.n	800a120 <_strtol_l.constprop.0+0xdc>
 800a10e:	2322      	movs	r3, #34	@ 0x22
 800a110:	f8ce 3000 	str.w	r3, [lr]
 800a114:	4660      	mov	r0, ip
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	d0a0      	beq.n	800a05e <_strtol_l.constprop.0+0x1a>
 800a11c:	1e69      	subs	r1, r5, #1
 800a11e:	e006      	b.n	800a12e <_strtol_l.constprop.0+0xea>
 800a120:	b106      	cbz	r6, 800a124 <_strtol_l.constprop.0+0xe0>
 800a122:	4240      	negs	r0, r0
 800a124:	f1b8 0f00 	cmp.w	r8, #0
 800a128:	d099      	beq.n	800a05e <_strtol_l.constprop.0+0x1a>
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	d1f6      	bne.n	800a11c <_strtol_l.constprop.0+0xd8>
 800a12e:	f8c8 1000 	str.w	r1, [r8]
 800a132:	e794      	b.n	800a05e <_strtol_l.constprop.0+0x1a>
 800a134:	0800b639 	.word	0x0800b639

0800a138 <_strtol_r>:
 800a138:	f7ff bf84 	b.w	800a044 <_strtol_l.constprop.0>

0800a13c <__ssputs_r>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	688e      	ldr	r6, [r1, #8]
 800a142:	461f      	mov	r7, r3
 800a144:	42be      	cmp	r6, r7
 800a146:	680b      	ldr	r3, [r1, #0]
 800a148:	4682      	mov	sl, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	4690      	mov	r8, r2
 800a14e:	d82d      	bhi.n	800a1ac <__ssputs_r+0x70>
 800a150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a158:	d026      	beq.n	800a1a8 <__ssputs_r+0x6c>
 800a15a:	6965      	ldr	r5, [r4, #20]
 800a15c:	6909      	ldr	r1, [r1, #16]
 800a15e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a162:	eba3 0901 	sub.w	r9, r3, r1
 800a166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a16a:	1c7b      	adds	r3, r7, #1
 800a16c:	444b      	add	r3, r9
 800a16e:	106d      	asrs	r5, r5, #1
 800a170:	429d      	cmp	r5, r3
 800a172:	bf38      	it	cc
 800a174:	461d      	movcc	r5, r3
 800a176:	0553      	lsls	r3, r2, #21
 800a178:	d527      	bpl.n	800a1ca <__ssputs_r+0x8e>
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7fe fc1c 	bl	80089b8 <_malloc_r>
 800a180:	4606      	mov	r6, r0
 800a182:	b360      	cbz	r0, 800a1de <__ssputs_r+0xa2>
 800a184:	6921      	ldr	r1, [r4, #16]
 800a186:	464a      	mov	r2, r9
 800a188:	f000 fa18 	bl	800a5bc <memcpy>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	6126      	str	r6, [r4, #16]
 800a19a:	6165      	str	r5, [r4, #20]
 800a19c:	444e      	add	r6, r9
 800a19e:	eba5 0509 	sub.w	r5, r5, r9
 800a1a2:	6026      	str	r6, [r4, #0]
 800a1a4:	60a5      	str	r5, [r4, #8]
 800a1a6:	463e      	mov	r6, r7
 800a1a8:	42be      	cmp	r6, r7
 800a1aa:	d900      	bls.n	800a1ae <__ssputs_r+0x72>
 800a1ac:	463e      	mov	r6, r7
 800a1ae:	6820      	ldr	r0, [r4, #0]
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	4641      	mov	r1, r8
 800a1b4:	f000 f9c6 	bl	800a544 <memmove>
 800a1b8:	68a3      	ldr	r3, [r4, #8]
 800a1ba:	1b9b      	subs	r3, r3, r6
 800a1bc:	60a3      	str	r3, [r4, #8]
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	4433      	add	r3, r6
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	f000 fd89 	bl	800ace2 <_realloc_r>
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1e0      	bne.n	800a198 <__ssputs_r+0x5c>
 800a1d6:	6921      	ldr	r1, [r4, #16]
 800a1d8:	4650      	mov	r0, sl
 800a1da:	f7fe fb79 	bl	80088d0 <_free_r>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	f8ca 3000 	str.w	r3, [sl]
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	e7e9      	b.n	800a1c6 <__ssputs_r+0x8a>
	...

0800a1f4 <_svfiprintf_r>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	4698      	mov	r8, r3
 800a1fa:	898b      	ldrh	r3, [r1, #12]
 800a1fc:	061b      	lsls	r3, r3, #24
 800a1fe:	b09d      	sub	sp, #116	@ 0x74
 800a200:	4607      	mov	r7, r0
 800a202:	460d      	mov	r5, r1
 800a204:	4614      	mov	r4, r2
 800a206:	d510      	bpl.n	800a22a <_svfiprintf_r+0x36>
 800a208:	690b      	ldr	r3, [r1, #16]
 800a20a:	b973      	cbnz	r3, 800a22a <_svfiprintf_r+0x36>
 800a20c:	2140      	movs	r1, #64	@ 0x40
 800a20e:	f7fe fbd3 	bl	80089b8 <_malloc_r>
 800a212:	6028      	str	r0, [r5, #0]
 800a214:	6128      	str	r0, [r5, #16]
 800a216:	b930      	cbnz	r0, 800a226 <_svfiprintf_r+0x32>
 800a218:	230c      	movs	r3, #12
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	b01d      	add	sp, #116	@ 0x74
 800a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a226:	2340      	movs	r3, #64	@ 0x40
 800a228:	616b      	str	r3, [r5, #20]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a22e:	2320      	movs	r3, #32
 800a230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a234:	f8cd 800c 	str.w	r8, [sp, #12]
 800a238:	2330      	movs	r3, #48	@ 0x30
 800a23a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3d8 <_svfiprintf_r+0x1e4>
 800a23e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a242:	f04f 0901 	mov.w	r9, #1
 800a246:	4623      	mov	r3, r4
 800a248:	469a      	mov	sl, r3
 800a24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24e:	b10a      	cbz	r2, 800a254 <_svfiprintf_r+0x60>
 800a250:	2a25      	cmp	r2, #37	@ 0x25
 800a252:	d1f9      	bne.n	800a248 <_svfiprintf_r+0x54>
 800a254:	ebba 0b04 	subs.w	fp, sl, r4
 800a258:	d00b      	beq.n	800a272 <_svfiprintf_r+0x7e>
 800a25a:	465b      	mov	r3, fp
 800a25c:	4622      	mov	r2, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ff6b 	bl	800a13c <__ssputs_r>
 800a266:	3001      	adds	r0, #1
 800a268:	f000 80a7 	beq.w	800a3ba <_svfiprintf_r+0x1c6>
 800a26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a26e:	445a      	add	r2, fp
 800a270:	9209      	str	r2, [sp, #36]	@ 0x24
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 809f 	beq.w	800a3ba <_svfiprintf_r+0x1c6>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295
 800a282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a286:	f10a 0a01 	add.w	sl, sl, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a292:	931a      	str	r3, [sp, #104]	@ 0x68
 800a294:	4654      	mov	r4, sl
 800a296:	2205      	movs	r2, #5
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	484e      	ldr	r0, [pc, #312]	@ (800a3d8 <_svfiprintf_r+0x1e4>)
 800a29e:	f7f5 ff97 	bl	80001d0 <memchr>
 800a2a2:	9a04      	ldr	r2, [sp, #16]
 800a2a4:	b9d8      	cbnz	r0, 800a2de <_svfiprintf_r+0xea>
 800a2a6:	06d0      	lsls	r0, r2, #27
 800a2a8:	bf44      	itt	mi
 800a2aa:	2320      	movmi	r3, #32
 800a2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2b0:	0711      	lsls	r1, r2, #28
 800a2b2:	bf44      	itt	mi
 800a2b4:	232b      	movmi	r3, #43	@ 0x2b
 800a2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c0:	d015      	beq.n	800a2ee <_svfiprintf_r+0xfa>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	4654      	mov	r4, sl
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f04f 0c0a 	mov.w	ip, #10
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d2:	3b30      	subs	r3, #48	@ 0x30
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	d94b      	bls.n	800a370 <_svfiprintf_r+0x17c>
 800a2d8:	b1b0      	cbz	r0, 800a308 <_svfiprintf_r+0x114>
 800a2da:	9207      	str	r2, [sp, #28]
 800a2dc:	e014      	b.n	800a308 <_svfiprintf_r+0x114>
 800a2de:	eba0 0308 	sub.w	r3, r0, r8
 800a2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	46a2      	mov	sl, r4
 800a2ec:	e7d2      	b.n	800a294 <_svfiprintf_r+0xa0>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	1d19      	adds	r1, r3, #4
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	9103      	str	r1, [sp, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfbb      	ittet	lt
 800a2fa:	425b      	neglt	r3, r3
 800a2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a300:	9307      	strge	r3, [sp, #28]
 800a302:	9307      	strlt	r3, [sp, #28]
 800a304:	bfb8      	it	lt
 800a306:	9204      	strlt	r2, [sp, #16]
 800a308:	7823      	ldrb	r3, [r4, #0]
 800a30a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a30c:	d10a      	bne.n	800a324 <_svfiprintf_r+0x130>
 800a30e:	7863      	ldrb	r3, [r4, #1]
 800a310:	2b2a      	cmp	r3, #42	@ 0x2a
 800a312:	d132      	bne.n	800a37a <_svfiprintf_r+0x186>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9203      	str	r2, [sp, #12]
 800a31c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a320:	3402      	adds	r4, #2
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3e8 <_svfiprintf_r+0x1f4>
 800a328:	7821      	ldrb	r1, [r4, #0]
 800a32a:	2203      	movs	r2, #3
 800a32c:	4650      	mov	r0, sl
 800a32e:	f7f5 ff4f 	bl	80001d0 <memchr>
 800a332:	b138      	cbz	r0, 800a344 <_svfiprintf_r+0x150>
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	eba0 000a 	sub.w	r0, r0, sl
 800a33a:	2240      	movs	r2, #64	@ 0x40
 800a33c:	4082      	lsls	r2, r0
 800a33e:	4313      	orrs	r3, r2
 800a340:	3401      	adds	r4, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a348:	4824      	ldr	r0, [pc, #144]	@ (800a3dc <_svfiprintf_r+0x1e8>)
 800a34a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a34e:	2206      	movs	r2, #6
 800a350:	f7f5 ff3e 	bl	80001d0 <memchr>
 800a354:	2800      	cmp	r0, #0
 800a356:	d036      	beq.n	800a3c6 <_svfiprintf_r+0x1d2>
 800a358:	4b21      	ldr	r3, [pc, #132]	@ (800a3e0 <_svfiprintf_r+0x1ec>)
 800a35a:	bb1b      	cbnz	r3, 800a3a4 <_svfiprintf_r+0x1b0>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	3307      	adds	r3, #7
 800a360:	f023 0307 	bic.w	r3, r3, #7
 800a364:	3308      	adds	r3, #8
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36a:	4433      	add	r3, r6
 800a36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36e:	e76a      	b.n	800a246 <_svfiprintf_r+0x52>
 800a370:	fb0c 3202 	mla	r2, ip, r2, r3
 800a374:	460c      	mov	r4, r1
 800a376:	2001      	movs	r0, #1
 800a378:	e7a8      	b.n	800a2cc <_svfiprintf_r+0xd8>
 800a37a:	2300      	movs	r3, #0
 800a37c:	3401      	adds	r4, #1
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	4619      	mov	r1, r3
 800a382:	f04f 0c0a 	mov.w	ip, #10
 800a386:	4620      	mov	r0, r4
 800a388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38c:	3a30      	subs	r2, #48	@ 0x30
 800a38e:	2a09      	cmp	r2, #9
 800a390:	d903      	bls.n	800a39a <_svfiprintf_r+0x1a6>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c6      	beq.n	800a324 <_svfiprintf_r+0x130>
 800a396:	9105      	str	r1, [sp, #20]
 800a398:	e7c4      	b.n	800a324 <_svfiprintf_r+0x130>
 800a39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39e:	4604      	mov	r4, r0
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7f0      	b.n	800a386 <_svfiprintf_r+0x192>
 800a3a4:	ab03      	add	r3, sp, #12
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e4 <_svfiprintf_r+0x1f0>)
 800a3ac:	a904      	add	r1, sp, #16
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7fc fc96 	bl	8006ce0 <_printf_float>
 800a3b4:	1c42      	adds	r2, r0, #1
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	d1d6      	bne.n	800a368 <_svfiprintf_r+0x174>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	065b      	lsls	r3, r3, #25
 800a3be:	f53f af2d 	bmi.w	800a21c <_svfiprintf_r+0x28>
 800a3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c4:	e72c      	b.n	800a220 <_svfiprintf_r+0x2c>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <_svfiprintf_r+0x1f0>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7fc ff1d 	bl	8007210 <_printf_i>
 800a3d6:	e7ed      	b.n	800a3b4 <_svfiprintf_r+0x1c0>
 800a3d8:	0800b739 	.word	0x0800b739
 800a3dc:	0800b743 	.word	0x0800b743
 800a3e0:	08006ce1 	.word	0x08006ce1
 800a3e4:	0800a13d 	.word	0x0800a13d
 800a3e8:	0800b73f 	.word	0x0800b73f

0800a3ec <__sflush_r>:
 800a3ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f4:	0716      	lsls	r6, r2, #28
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	d454      	bmi.n	800a4a6 <__sflush_r+0xba>
 800a3fc:	684b      	ldr	r3, [r1, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dc02      	bgt.n	800a408 <__sflush_r+0x1c>
 800a402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd48      	ble.n	800a49a <__sflush_r+0xae>
 800a408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a40a:	2e00      	cmp	r6, #0
 800a40c:	d045      	beq.n	800a49a <__sflush_r+0xae>
 800a40e:	2300      	movs	r3, #0
 800a410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a414:	682f      	ldr	r7, [r5, #0]
 800a416:	6a21      	ldr	r1, [r4, #32]
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	d030      	beq.n	800a47e <__sflush_r+0x92>
 800a41c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	0759      	lsls	r1, r3, #29
 800a422:	d505      	bpl.n	800a430 <__sflush_r+0x44>
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	1ad2      	subs	r2, r2, r3
 800a428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a42a:	b10b      	cbz	r3, 800a430 <__sflush_r+0x44>
 800a42c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	2300      	movs	r3, #0
 800a432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a434:	6a21      	ldr	r1, [r4, #32]
 800a436:	4628      	mov	r0, r5
 800a438:	47b0      	blx	r6
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	d106      	bne.n	800a44e <__sflush_r+0x62>
 800a440:	6829      	ldr	r1, [r5, #0]
 800a442:	291d      	cmp	r1, #29
 800a444:	d82b      	bhi.n	800a49e <__sflush_r+0xb2>
 800a446:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f0 <__sflush_r+0x104>)
 800a448:	410a      	asrs	r2, r1
 800a44a:	07d6      	lsls	r6, r2, #31
 800a44c:	d427      	bmi.n	800a49e <__sflush_r+0xb2>
 800a44e:	2200      	movs	r2, #0
 800a450:	6062      	str	r2, [r4, #4]
 800a452:	04d9      	lsls	r1, r3, #19
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	d504      	bpl.n	800a464 <__sflush_r+0x78>
 800a45a:	1c42      	adds	r2, r0, #1
 800a45c:	d101      	bne.n	800a462 <__sflush_r+0x76>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	b903      	cbnz	r3, 800a464 <__sflush_r+0x78>
 800a462:	6560      	str	r0, [r4, #84]	@ 0x54
 800a464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a466:	602f      	str	r7, [r5, #0]
 800a468:	b1b9      	cbz	r1, 800a49a <__sflush_r+0xae>
 800a46a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a46e:	4299      	cmp	r1, r3
 800a470:	d002      	beq.n	800a478 <__sflush_r+0x8c>
 800a472:	4628      	mov	r0, r5
 800a474:	f7fe fa2c 	bl	80088d0 <_free_r>
 800a478:	2300      	movs	r3, #0
 800a47a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a47c:	e00d      	b.n	800a49a <__sflush_r+0xae>
 800a47e:	2301      	movs	r3, #1
 800a480:	4628      	mov	r0, r5
 800a482:	47b0      	blx	r6
 800a484:	4602      	mov	r2, r0
 800a486:	1c50      	adds	r0, r2, #1
 800a488:	d1c9      	bne.n	800a41e <__sflush_r+0x32>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0c6      	beq.n	800a41e <__sflush_r+0x32>
 800a490:	2b1d      	cmp	r3, #29
 800a492:	d001      	beq.n	800a498 <__sflush_r+0xac>
 800a494:	2b16      	cmp	r3, #22
 800a496:	d11e      	bne.n	800a4d6 <__sflush_r+0xea>
 800a498:	602f      	str	r7, [r5, #0]
 800a49a:	2000      	movs	r0, #0
 800a49c:	e022      	b.n	800a4e4 <__sflush_r+0xf8>
 800a49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	e01b      	b.n	800a4de <__sflush_r+0xf2>
 800a4a6:	690f      	ldr	r7, [r1, #16]
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	d0f6      	beq.n	800a49a <__sflush_r+0xae>
 800a4ac:	0793      	lsls	r3, r2, #30
 800a4ae:	680e      	ldr	r6, [r1, #0]
 800a4b0:	bf08      	it	eq
 800a4b2:	694b      	ldreq	r3, [r1, #20]
 800a4b4:	600f      	str	r7, [r1, #0]
 800a4b6:	bf18      	it	ne
 800a4b8:	2300      	movne	r3, #0
 800a4ba:	eba6 0807 	sub.w	r8, r6, r7
 800a4be:	608b      	str	r3, [r1, #8]
 800a4c0:	f1b8 0f00 	cmp.w	r8, #0
 800a4c4:	dde9      	ble.n	800a49a <__sflush_r+0xae>
 800a4c6:	6a21      	ldr	r1, [r4, #32]
 800a4c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4ca:	4643      	mov	r3, r8
 800a4cc:	463a      	mov	r2, r7
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b0      	blx	r6
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	dc08      	bgt.n	800a4e8 <__sflush_r+0xfc>
 800a4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e8:	4407      	add	r7, r0
 800a4ea:	eba8 0800 	sub.w	r8, r8, r0
 800a4ee:	e7e7      	b.n	800a4c0 <__sflush_r+0xd4>
 800a4f0:	dfbffffe 	.word	0xdfbffffe

0800a4f4 <_fflush_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	690b      	ldr	r3, [r1, #16]
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	b913      	cbnz	r3, 800a504 <_fflush_r+0x10>
 800a4fe:	2500      	movs	r5, #0
 800a500:	4628      	mov	r0, r5
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	b118      	cbz	r0, 800a50e <_fflush_r+0x1a>
 800a506:	6a03      	ldr	r3, [r0, #32]
 800a508:	b90b      	cbnz	r3, 800a50e <_fflush_r+0x1a>
 800a50a:	f7fd fa41 	bl	8007990 <__sinit>
 800a50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f3      	beq.n	800a4fe <_fflush_r+0xa>
 800a516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a518:	07d0      	lsls	r0, r2, #31
 800a51a:	d404      	bmi.n	800a526 <_fflush_r+0x32>
 800a51c:	0599      	lsls	r1, r3, #22
 800a51e:	d402      	bmi.n	800a526 <_fflush_r+0x32>
 800a520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a522:	f7fd fb80 	bl	8007c26 <__retarget_lock_acquire_recursive>
 800a526:	4628      	mov	r0, r5
 800a528:	4621      	mov	r1, r4
 800a52a:	f7ff ff5f 	bl	800a3ec <__sflush_r>
 800a52e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a530:	07da      	lsls	r2, r3, #31
 800a532:	4605      	mov	r5, r0
 800a534:	d4e4      	bmi.n	800a500 <_fflush_r+0xc>
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	059b      	lsls	r3, r3, #22
 800a53a:	d4e1      	bmi.n	800a500 <_fflush_r+0xc>
 800a53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a53e:	f7fd fb73 	bl	8007c28 <__retarget_lock_release_recursive>
 800a542:	e7dd      	b.n	800a500 <_fflush_r+0xc>

0800a544 <memmove>:
 800a544:	4288      	cmp	r0, r1
 800a546:	b510      	push	{r4, lr}
 800a548:	eb01 0402 	add.w	r4, r1, r2
 800a54c:	d902      	bls.n	800a554 <memmove+0x10>
 800a54e:	4284      	cmp	r4, r0
 800a550:	4623      	mov	r3, r4
 800a552:	d807      	bhi.n	800a564 <memmove+0x20>
 800a554:	1e43      	subs	r3, r0, #1
 800a556:	42a1      	cmp	r1, r4
 800a558:	d008      	beq.n	800a56c <memmove+0x28>
 800a55a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a55e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a562:	e7f8      	b.n	800a556 <memmove+0x12>
 800a564:	4402      	add	r2, r0
 800a566:	4601      	mov	r1, r0
 800a568:	428a      	cmp	r2, r1
 800a56a:	d100      	bne.n	800a56e <memmove+0x2a>
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a576:	e7f7      	b.n	800a568 <memmove+0x24>

0800a578 <strncmp>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	b16a      	cbz	r2, 800a598 <strncmp+0x20>
 800a57c:	3901      	subs	r1, #1
 800a57e:	1884      	adds	r4, r0, r2
 800a580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a584:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a588:	429a      	cmp	r2, r3
 800a58a:	d103      	bne.n	800a594 <strncmp+0x1c>
 800a58c:	42a0      	cmp	r0, r4
 800a58e:	d001      	beq.n	800a594 <strncmp+0x1c>
 800a590:	2a00      	cmp	r2, #0
 800a592:	d1f5      	bne.n	800a580 <strncmp+0x8>
 800a594:	1ad0      	subs	r0, r2, r3
 800a596:	bd10      	pop	{r4, pc}
 800a598:	4610      	mov	r0, r2
 800a59a:	e7fc      	b.n	800a596 <strncmp+0x1e>

0800a59c <_sbrk_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d06      	ldr	r5, [pc, #24]	@ (800a5b8 <_sbrk_r+0x1c>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	602b      	str	r3, [r5, #0]
 800a5a8:	f7f7 fbcc 	bl	8001d44 <_sbrk>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_sbrk_r+0x1a>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_sbrk_r+0x1a>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	200005b0 	.word	0x200005b0

0800a5bc <memcpy>:
 800a5bc:	440a      	add	r2, r1
 800a5be:	4291      	cmp	r1, r2
 800a5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c4:	d100      	bne.n	800a5c8 <memcpy+0xc>
 800a5c6:	4770      	bx	lr
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d2:	4291      	cmp	r1, r2
 800a5d4:	d1f9      	bne.n	800a5ca <memcpy+0xe>
 800a5d6:	bd10      	pop	{r4, pc}

0800a5d8 <nan>:
 800a5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a5e0 <nan+0x8>
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	7ff80000 	.word	0x7ff80000

0800a5e8 <__assert_func>:
 800a5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ea:	4614      	mov	r4, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4b09      	ldr	r3, [pc, #36]	@ (800a614 <__assert_func+0x2c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	68d8      	ldr	r0, [r3, #12]
 800a5f6:	b954      	cbnz	r4, 800a60e <__assert_func+0x26>
 800a5f8:	4b07      	ldr	r3, [pc, #28]	@ (800a618 <__assert_func+0x30>)
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a600:	9100      	str	r1, [sp, #0]
 800a602:	462b      	mov	r3, r5
 800a604:	4905      	ldr	r1, [pc, #20]	@ (800a61c <__assert_func+0x34>)
 800a606:	f000 fba7 	bl	800ad58 <fiprintf>
 800a60a:	f000 fbb7 	bl	800ad7c <abort>
 800a60e:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <__assert_func+0x38>)
 800a610:	e7f4      	b.n	800a5fc <__assert_func+0x14>
 800a612:	bf00      	nop
 800a614:	20000018 	.word	0x20000018
 800a618:	0800b78d 	.word	0x0800b78d
 800a61c:	0800b75f 	.word	0x0800b75f
 800a620:	0800b752 	.word	0x0800b752

0800a624 <_calloc_r>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	fba1 5402 	umull	r5, r4, r1, r2
 800a62a:	b93c      	cbnz	r4, 800a63c <_calloc_r+0x18>
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7fe f9c3 	bl	80089b8 <_malloc_r>
 800a632:	4606      	mov	r6, r0
 800a634:	b928      	cbnz	r0, 800a642 <_calloc_r+0x1e>
 800a636:	2600      	movs	r6, #0
 800a638:	4630      	mov	r0, r6
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	220c      	movs	r2, #12
 800a63e:	6002      	str	r2, [r0, #0]
 800a640:	e7f9      	b.n	800a636 <_calloc_r+0x12>
 800a642:	462a      	mov	r2, r5
 800a644:	4621      	mov	r1, r4
 800a646:	f7fd fa70 	bl	8007b2a <memset>
 800a64a:	e7f5      	b.n	800a638 <_calloc_r+0x14>

0800a64c <rshift>:
 800a64c:	6903      	ldr	r3, [r0, #16]
 800a64e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a656:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a65a:	f100 0414 	add.w	r4, r0, #20
 800a65e:	dd45      	ble.n	800a6ec <rshift+0xa0>
 800a660:	f011 011f 	ands.w	r1, r1, #31
 800a664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a66c:	d10c      	bne.n	800a688 <rshift+0x3c>
 800a66e:	f100 0710 	add.w	r7, r0, #16
 800a672:	4629      	mov	r1, r5
 800a674:	42b1      	cmp	r1, r6
 800a676:	d334      	bcc.n	800a6e2 <rshift+0x96>
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	1eea      	subs	r2, r5, #3
 800a67e:	4296      	cmp	r6, r2
 800a680:	bf38      	it	cc
 800a682:	2300      	movcc	r3, #0
 800a684:	4423      	add	r3, r4
 800a686:	e015      	b.n	800a6b4 <rshift+0x68>
 800a688:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a68c:	f1c1 0820 	rsb	r8, r1, #32
 800a690:	40cf      	lsrs	r7, r1
 800a692:	f105 0e04 	add.w	lr, r5, #4
 800a696:	46a1      	mov	r9, r4
 800a698:	4576      	cmp	r6, lr
 800a69a:	46f4      	mov	ip, lr
 800a69c:	d815      	bhi.n	800a6ca <rshift+0x7e>
 800a69e:	1a9a      	subs	r2, r3, r2
 800a6a0:	0092      	lsls	r2, r2, #2
 800a6a2:	3a04      	subs	r2, #4
 800a6a4:	3501      	adds	r5, #1
 800a6a6:	42ae      	cmp	r6, r5
 800a6a8:	bf38      	it	cc
 800a6aa:	2200      	movcc	r2, #0
 800a6ac:	18a3      	adds	r3, r4, r2
 800a6ae:	50a7      	str	r7, [r4, r2]
 800a6b0:	b107      	cbz	r7, 800a6b4 <rshift+0x68>
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	1b1a      	subs	r2, r3, r4
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6bc:	bf08      	it	eq
 800a6be:	2300      	moveq	r3, #0
 800a6c0:	6102      	str	r2, [r0, #16]
 800a6c2:	bf08      	it	eq
 800a6c4:	6143      	streq	r3, [r0, #20]
 800a6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ca:	f8dc c000 	ldr.w	ip, [ip]
 800a6ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6d2:	ea4c 0707 	orr.w	r7, ip, r7
 800a6d6:	f849 7b04 	str.w	r7, [r9], #4
 800a6da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6de:	40cf      	lsrs	r7, r1
 800a6e0:	e7da      	b.n	800a698 <rshift+0x4c>
 800a6e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6ea:	e7c3      	b.n	800a674 <rshift+0x28>
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	e7e1      	b.n	800a6b4 <rshift+0x68>

0800a6f0 <__hexdig_fun>:
 800a6f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	d802      	bhi.n	800a6fe <__hexdig_fun+0xe>
 800a6f8:	3820      	subs	r0, #32
 800a6fa:	b2c0      	uxtb	r0, r0
 800a6fc:	4770      	bx	lr
 800a6fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a702:	2b05      	cmp	r3, #5
 800a704:	d801      	bhi.n	800a70a <__hexdig_fun+0x1a>
 800a706:	3847      	subs	r0, #71	@ 0x47
 800a708:	e7f7      	b.n	800a6fa <__hexdig_fun+0xa>
 800a70a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a70e:	2b05      	cmp	r3, #5
 800a710:	d801      	bhi.n	800a716 <__hexdig_fun+0x26>
 800a712:	3827      	subs	r0, #39	@ 0x27
 800a714:	e7f1      	b.n	800a6fa <__hexdig_fun+0xa>
 800a716:	2000      	movs	r0, #0
 800a718:	4770      	bx	lr
	...

0800a71c <__gethex>:
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	b085      	sub	sp, #20
 800a722:	468a      	mov	sl, r1
 800a724:	9302      	str	r3, [sp, #8]
 800a726:	680b      	ldr	r3, [r1, #0]
 800a728:	9001      	str	r0, [sp, #4]
 800a72a:	4690      	mov	r8, r2
 800a72c:	1c9c      	adds	r4, r3, #2
 800a72e:	46a1      	mov	r9, r4
 800a730:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a734:	2830      	cmp	r0, #48	@ 0x30
 800a736:	d0fa      	beq.n	800a72e <__gethex+0x12>
 800a738:	eba9 0303 	sub.w	r3, r9, r3
 800a73c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a740:	f7ff ffd6 	bl	800a6f0 <__hexdig_fun>
 800a744:	4605      	mov	r5, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	d168      	bne.n	800a81c <__gethex+0x100>
 800a74a:	49a0      	ldr	r1, [pc, #640]	@ (800a9cc <__gethex+0x2b0>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	4648      	mov	r0, r9
 800a750:	f7ff ff12 	bl	800a578 <strncmp>
 800a754:	4607      	mov	r7, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	d167      	bne.n	800a82a <__gethex+0x10e>
 800a75a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a75e:	4626      	mov	r6, r4
 800a760:	f7ff ffc6 	bl	800a6f0 <__hexdig_fun>
 800a764:	2800      	cmp	r0, #0
 800a766:	d062      	beq.n	800a82e <__gethex+0x112>
 800a768:	4623      	mov	r3, r4
 800a76a:	7818      	ldrb	r0, [r3, #0]
 800a76c:	2830      	cmp	r0, #48	@ 0x30
 800a76e:	4699      	mov	r9, r3
 800a770:	f103 0301 	add.w	r3, r3, #1
 800a774:	d0f9      	beq.n	800a76a <__gethex+0x4e>
 800a776:	f7ff ffbb 	bl	800a6f0 <__hexdig_fun>
 800a77a:	fab0 f580 	clz	r5, r0
 800a77e:	096d      	lsrs	r5, r5, #5
 800a780:	f04f 0b01 	mov.w	fp, #1
 800a784:	464a      	mov	r2, r9
 800a786:	4616      	mov	r6, r2
 800a788:	3201      	adds	r2, #1
 800a78a:	7830      	ldrb	r0, [r6, #0]
 800a78c:	f7ff ffb0 	bl	800a6f0 <__hexdig_fun>
 800a790:	2800      	cmp	r0, #0
 800a792:	d1f8      	bne.n	800a786 <__gethex+0x6a>
 800a794:	498d      	ldr	r1, [pc, #564]	@ (800a9cc <__gethex+0x2b0>)
 800a796:	2201      	movs	r2, #1
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff feed 	bl	800a578 <strncmp>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d13f      	bne.n	800a822 <__gethex+0x106>
 800a7a2:	b944      	cbnz	r4, 800a7b6 <__gethex+0x9a>
 800a7a4:	1c74      	adds	r4, r6, #1
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	3201      	adds	r2, #1
 800a7ac:	7830      	ldrb	r0, [r6, #0]
 800a7ae:	f7ff ff9f 	bl	800a6f0 <__hexdig_fun>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d1f8      	bne.n	800a7a8 <__gethex+0x8c>
 800a7b6:	1ba4      	subs	r4, r4, r6
 800a7b8:	00a7      	lsls	r7, r4, #2
 800a7ba:	7833      	ldrb	r3, [r6, #0]
 800a7bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a7c0:	2b50      	cmp	r3, #80	@ 0x50
 800a7c2:	d13e      	bne.n	800a842 <__gethex+0x126>
 800a7c4:	7873      	ldrb	r3, [r6, #1]
 800a7c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7c8:	d033      	beq.n	800a832 <__gethex+0x116>
 800a7ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800a7cc:	d034      	beq.n	800a838 <__gethex+0x11c>
 800a7ce:	1c71      	adds	r1, r6, #1
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	7808      	ldrb	r0, [r1, #0]
 800a7d4:	f7ff ff8c 	bl	800a6f0 <__hexdig_fun>
 800a7d8:	1e43      	subs	r3, r0, #1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b18      	cmp	r3, #24
 800a7de:	d830      	bhi.n	800a842 <__gethex+0x126>
 800a7e0:	f1a0 0210 	sub.w	r2, r0, #16
 800a7e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7e8:	f7ff ff82 	bl	800a6f0 <__hexdig_fun>
 800a7ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800a7f0:	fa5f fc8c 	uxtb.w	ip, ip
 800a7f4:	f1bc 0f18 	cmp.w	ip, #24
 800a7f8:	f04f 030a 	mov.w	r3, #10
 800a7fc:	d91e      	bls.n	800a83c <__gethex+0x120>
 800a7fe:	b104      	cbz	r4, 800a802 <__gethex+0xe6>
 800a800:	4252      	negs	r2, r2
 800a802:	4417      	add	r7, r2
 800a804:	f8ca 1000 	str.w	r1, [sl]
 800a808:	b1ed      	cbz	r5, 800a846 <__gethex+0x12a>
 800a80a:	f1bb 0f00 	cmp.w	fp, #0
 800a80e:	bf0c      	ite	eq
 800a810:	2506      	moveq	r5, #6
 800a812:	2500      	movne	r5, #0
 800a814:	4628      	mov	r0, r5
 800a816:	b005      	add	sp, #20
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	2500      	movs	r5, #0
 800a81e:	462c      	mov	r4, r5
 800a820:	e7b0      	b.n	800a784 <__gethex+0x68>
 800a822:	2c00      	cmp	r4, #0
 800a824:	d1c7      	bne.n	800a7b6 <__gethex+0x9a>
 800a826:	4627      	mov	r7, r4
 800a828:	e7c7      	b.n	800a7ba <__gethex+0x9e>
 800a82a:	464e      	mov	r6, r9
 800a82c:	462f      	mov	r7, r5
 800a82e:	2501      	movs	r5, #1
 800a830:	e7c3      	b.n	800a7ba <__gethex+0x9e>
 800a832:	2400      	movs	r4, #0
 800a834:	1cb1      	adds	r1, r6, #2
 800a836:	e7cc      	b.n	800a7d2 <__gethex+0xb6>
 800a838:	2401      	movs	r4, #1
 800a83a:	e7fb      	b.n	800a834 <__gethex+0x118>
 800a83c:	fb03 0002 	mla	r0, r3, r2, r0
 800a840:	e7ce      	b.n	800a7e0 <__gethex+0xc4>
 800a842:	4631      	mov	r1, r6
 800a844:	e7de      	b.n	800a804 <__gethex+0xe8>
 800a846:	eba6 0309 	sub.w	r3, r6, r9
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4629      	mov	r1, r5
 800a84e:	2b07      	cmp	r3, #7
 800a850:	dc0a      	bgt.n	800a868 <__gethex+0x14c>
 800a852:	9801      	ldr	r0, [sp, #4]
 800a854:	f7fe f93c 	bl	8008ad0 <_Balloc>
 800a858:	4604      	mov	r4, r0
 800a85a:	b940      	cbnz	r0, 800a86e <__gethex+0x152>
 800a85c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9d0 <__gethex+0x2b4>)
 800a85e:	4602      	mov	r2, r0
 800a860:	21e4      	movs	r1, #228	@ 0xe4
 800a862:	485c      	ldr	r0, [pc, #368]	@ (800a9d4 <__gethex+0x2b8>)
 800a864:	f7ff fec0 	bl	800a5e8 <__assert_func>
 800a868:	3101      	adds	r1, #1
 800a86a:	105b      	asrs	r3, r3, #1
 800a86c:	e7ef      	b.n	800a84e <__gethex+0x132>
 800a86e:	f100 0a14 	add.w	sl, r0, #20
 800a872:	2300      	movs	r3, #0
 800a874:	4655      	mov	r5, sl
 800a876:	469b      	mov	fp, r3
 800a878:	45b1      	cmp	r9, r6
 800a87a:	d337      	bcc.n	800a8ec <__gethex+0x1d0>
 800a87c:	f845 bb04 	str.w	fp, [r5], #4
 800a880:	eba5 050a 	sub.w	r5, r5, sl
 800a884:	10ad      	asrs	r5, r5, #2
 800a886:	6125      	str	r5, [r4, #16]
 800a888:	4658      	mov	r0, fp
 800a88a:	f7fe fa13 	bl	8008cb4 <__hi0bits>
 800a88e:	016d      	lsls	r5, r5, #5
 800a890:	f8d8 6000 	ldr.w	r6, [r8]
 800a894:	1a2d      	subs	r5, r5, r0
 800a896:	42b5      	cmp	r5, r6
 800a898:	dd54      	ble.n	800a944 <__gethex+0x228>
 800a89a:	1bad      	subs	r5, r5, r6
 800a89c:	4629      	mov	r1, r5
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7fe fda7 	bl	80093f2 <__any_on>
 800a8a4:	4681      	mov	r9, r0
 800a8a6:	b178      	cbz	r0, 800a8c8 <__gethex+0x1ac>
 800a8a8:	1e6b      	subs	r3, r5, #1
 800a8aa:	1159      	asrs	r1, r3, #5
 800a8ac:	f003 021f 	and.w	r2, r3, #31
 800a8b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a8b4:	f04f 0901 	mov.w	r9, #1
 800a8b8:	fa09 f202 	lsl.w	r2, r9, r2
 800a8bc:	420a      	tst	r2, r1
 800a8be:	d003      	beq.n	800a8c8 <__gethex+0x1ac>
 800a8c0:	454b      	cmp	r3, r9
 800a8c2:	dc36      	bgt.n	800a932 <__gethex+0x216>
 800a8c4:	f04f 0902 	mov.w	r9, #2
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7ff febe 	bl	800a64c <rshift>
 800a8d0:	442f      	add	r7, r5
 800a8d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8d6:	42bb      	cmp	r3, r7
 800a8d8:	da42      	bge.n	800a960 <__gethex+0x244>
 800a8da:	9801      	ldr	r0, [sp, #4]
 800a8dc:	4621      	mov	r1, r4
 800a8de:	f7fe f937 	bl	8008b50 <_Bfree>
 800a8e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	25a3      	movs	r5, #163	@ 0xa3
 800a8ea:	e793      	b.n	800a814 <__gethex+0xf8>
 800a8ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a8f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a8f2:	d012      	beq.n	800a91a <__gethex+0x1fe>
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d104      	bne.n	800a902 <__gethex+0x1e6>
 800a8f8:	f845 bb04 	str.w	fp, [r5], #4
 800a8fc:	f04f 0b00 	mov.w	fp, #0
 800a900:	465b      	mov	r3, fp
 800a902:	7830      	ldrb	r0, [r6, #0]
 800a904:	9303      	str	r3, [sp, #12]
 800a906:	f7ff fef3 	bl	800a6f0 <__hexdig_fun>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	f000 000f 	and.w	r0, r0, #15
 800a910:	4098      	lsls	r0, r3
 800a912:	ea4b 0b00 	orr.w	fp, fp, r0
 800a916:	3304      	adds	r3, #4
 800a918:	e7ae      	b.n	800a878 <__gethex+0x15c>
 800a91a:	45b1      	cmp	r9, r6
 800a91c:	d8ea      	bhi.n	800a8f4 <__gethex+0x1d8>
 800a91e:	492b      	ldr	r1, [pc, #172]	@ (800a9cc <__gethex+0x2b0>)
 800a920:	9303      	str	r3, [sp, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff fe27 	bl	800a578 <strncmp>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d1e1      	bne.n	800a8f4 <__gethex+0x1d8>
 800a930:	e7a2      	b.n	800a878 <__gethex+0x15c>
 800a932:	1ea9      	subs	r1, r5, #2
 800a934:	4620      	mov	r0, r4
 800a936:	f7fe fd5c 	bl	80093f2 <__any_on>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d0c2      	beq.n	800a8c4 <__gethex+0x1a8>
 800a93e:	f04f 0903 	mov.w	r9, #3
 800a942:	e7c1      	b.n	800a8c8 <__gethex+0x1ac>
 800a944:	da09      	bge.n	800a95a <__gethex+0x23e>
 800a946:	1b75      	subs	r5, r6, r5
 800a948:	4621      	mov	r1, r4
 800a94a:	9801      	ldr	r0, [sp, #4]
 800a94c:	462a      	mov	r2, r5
 800a94e:	f7fe fb17 	bl	8008f80 <__lshift>
 800a952:	1b7f      	subs	r7, r7, r5
 800a954:	4604      	mov	r4, r0
 800a956:	f100 0a14 	add.w	sl, r0, #20
 800a95a:	f04f 0900 	mov.w	r9, #0
 800a95e:	e7b8      	b.n	800a8d2 <__gethex+0x1b6>
 800a960:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a964:	42bd      	cmp	r5, r7
 800a966:	dd6f      	ble.n	800aa48 <__gethex+0x32c>
 800a968:	1bed      	subs	r5, r5, r7
 800a96a:	42ae      	cmp	r6, r5
 800a96c:	dc34      	bgt.n	800a9d8 <__gethex+0x2bc>
 800a96e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d022      	beq.n	800a9bc <__gethex+0x2a0>
 800a976:	2b03      	cmp	r3, #3
 800a978:	d024      	beq.n	800a9c4 <__gethex+0x2a8>
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d115      	bne.n	800a9aa <__gethex+0x28e>
 800a97e:	42ae      	cmp	r6, r5
 800a980:	d113      	bne.n	800a9aa <__gethex+0x28e>
 800a982:	2e01      	cmp	r6, #1
 800a984:	d10b      	bne.n	800a99e <__gethex+0x282>
 800a986:	9a02      	ldr	r2, [sp, #8]
 800a988:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	2301      	movs	r3, #1
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	f8ca 3000 	str.w	r3, [sl]
 800a996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a998:	2562      	movs	r5, #98	@ 0x62
 800a99a:	601c      	str	r4, [r3, #0]
 800a99c:	e73a      	b.n	800a814 <__gethex+0xf8>
 800a99e:	1e71      	subs	r1, r6, #1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7fe fd26 	bl	80093f2 <__any_on>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d1ed      	bne.n	800a986 <__gethex+0x26a>
 800a9aa:	9801      	ldr	r0, [sp, #4]
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	f7fe f8cf 	bl	8008b50 <_Bfree>
 800a9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	2550      	movs	r5, #80	@ 0x50
 800a9ba:	e72b      	b.n	800a814 <__gethex+0xf8>
 800a9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f3      	bne.n	800a9aa <__gethex+0x28e>
 800a9c2:	e7e0      	b.n	800a986 <__gethex+0x26a>
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1dd      	bne.n	800a986 <__gethex+0x26a>
 800a9ca:	e7ee      	b.n	800a9aa <__gethex+0x28e>
 800a9cc:	0800b5e0 	.word	0x0800b5e0
 800a9d0:	0800b479 	.word	0x0800b479
 800a9d4:	0800b78e 	.word	0x0800b78e
 800a9d8:	1e6f      	subs	r7, r5, #1
 800a9da:	f1b9 0f00 	cmp.w	r9, #0
 800a9de:	d130      	bne.n	800aa42 <__gethex+0x326>
 800a9e0:	b127      	cbz	r7, 800a9ec <__gethex+0x2d0>
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7fe fd04 	bl	80093f2 <__any_on>
 800a9ea:	4681      	mov	r9, r0
 800a9ec:	117a      	asrs	r2, r7, #5
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a9f4:	f007 071f 	and.w	r7, r7, #31
 800a9f8:	40bb      	lsls	r3, r7
 800a9fa:	4213      	tst	r3, r2
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4620      	mov	r0, r4
 800aa00:	bf18      	it	ne
 800aa02:	f049 0902 	orrne.w	r9, r9, #2
 800aa06:	f7ff fe21 	bl	800a64c <rshift>
 800aa0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa0e:	1b76      	subs	r6, r6, r5
 800aa10:	2502      	movs	r5, #2
 800aa12:	f1b9 0f00 	cmp.w	r9, #0
 800aa16:	d047      	beq.n	800aaa8 <__gethex+0x38c>
 800aa18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d015      	beq.n	800aa4c <__gethex+0x330>
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d017      	beq.n	800aa54 <__gethex+0x338>
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d109      	bne.n	800aa3c <__gethex+0x320>
 800aa28:	f019 0f02 	tst.w	r9, #2
 800aa2c:	d006      	beq.n	800aa3c <__gethex+0x320>
 800aa2e:	f8da 3000 	ldr.w	r3, [sl]
 800aa32:	ea49 0903 	orr.w	r9, r9, r3
 800aa36:	f019 0f01 	tst.w	r9, #1
 800aa3a:	d10e      	bne.n	800aa5a <__gethex+0x33e>
 800aa3c:	f045 0510 	orr.w	r5, r5, #16
 800aa40:	e032      	b.n	800aaa8 <__gethex+0x38c>
 800aa42:	f04f 0901 	mov.w	r9, #1
 800aa46:	e7d1      	b.n	800a9ec <__gethex+0x2d0>
 800aa48:	2501      	movs	r5, #1
 800aa4a:	e7e2      	b.n	800aa12 <__gethex+0x2f6>
 800aa4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa4e:	f1c3 0301 	rsb	r3, r3, #1
 800aa52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f0      	beq.n	800aa3c <__gethex+0x320>
 800aa5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa5e:	f104 0314 	add.w	r3, r4, #20
 800aa62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa6a:	f04f 0c00 	mov.w	ip, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa78:	d01b      	beq.n	800aab2 <__gethex+0x396>
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	6002      	str	r2, [r0, #0]
 800aa7e:	2d02      	cmp	r5, #2
 800aa80:	f104 0314 	add.w	r3, r4, #20
 800aa84:	d13c      	bne.n	800ab00 <__gethex+0x3e4>
 800aa86:	f8d8 2000 	ldr.w	r2, [r8]
 800aa8a:	3a01      	subs	r2, #1
 800aa8c:	42b2      	cmp	r2, r6
 800aa8e:	d109      	bne.n	800aaa4 <__gethex+0x388>
 800aa90:	1171      	asrs	r1, r6, #5
 800aa92:	2201      	movs	r2, #1
 800aa94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa98:	f006 061f 	and.w	r6, r6, #31
 800aa9c:	fa02 f606 	lsl.w	r6, r2, r6
 800aaa0:	421e      	tst	r6, r3
 800aaa2:	d13a      	bne.n	800ab1a <__gethex+0x3fe>
 800aaa4:	f045 0520 	orr.w	r5, r5, #32
 800aaa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaaa:	601c      	str	r4, [r3, #0]
 800aaac:	9b02      	ldr	r3, [sp, #8]
 800aaae:	601f      	str	r7, [r3, #0]
 800aab0:	e6b0      	b.n	800a814 <__gethex+0xf8>
 800aab2:	4299      	cmp	r1, r3
 800aab4:	f843 cc04 	str.w	ip, [r3, #-4]
 800aab8:	d8d9      	bhi.n	800aa6e <__gethex+0x352>
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	459b      	cmp	fp, r3
 800aabe:	db17      	blt.n	800aaf0 <__gethex+0x3d4>
 800aac0:	6861      	ldr	r1, [r4, #4]
 800aac2:	9801      	ldr	r0, [sp, #4]
 800aac4:	3101      	adds	r1, #1
 800aac6:	f7fe f803 	bl	8008ad0 <_Balloc>
 800aaca:	4681      	mov	r9, r0
 800aacc:	b918      	cbnz	r0, 800aad6 <__gethex+0x3ba>
 800aace:	4b1a      	ldr	r3, [pc, #104]	@ (800ab38 <__gethex+0x41c>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	2184      	movs	r1, #132	@ 0x84
 800aad4:	e6c5      	b.n	800a862 <__gethex+0x146>
 800aad6:	6922      	ldr	r2, [r4, #16]
 800aad8:	3202      	adds	r2, #2
 800aada:	f104 010c 	add.w	r1, r4, #12
 800aade:	0092      	lsls	r2, r2, #2
 800aae0:	300c      	adds	r0, #12
 800aae2:	f7ff fd6b 	bl	800a5bc <memcpy>
 800aae6:	4621      	mov	r1, r4
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	f7fe f831 	bl	8008b50 <_Bfree>
 800aaee:	464c      	mov	r4, r9
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aaf8:	6122      	str	r2, [r4, #16]
 800aafa:	2201      	movs	r2, #1
 800aafc:	615a      	str	r2, [r3, #20]
 800aafe:	e7be      	b.n	800aa7e <__gethex+0x362>
 800ab00:	6922      	ldr	r2, [r4, #16]
 800ab02:	455a      	cmp	r2, fp
 800ab04:	dd0b      	ble.n	800ab1e <__gethex+0x402>
 800ab06:	2101      	movs	r1, #1
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff fd9f 	bl	800a64c <rshift>
 800ab0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab12:	3701      	adds	r7, #1
 800ab14:	42bb      	cmp	r3, r7
 800ab16:	f6ff aee0 	blt.w	800a8da <__gethex+0x1be>
 800ab1a:	2501      	movs	r5, #1
 800ab1c:	e7c2      	b.n	800aaa4 <__gethex+0x388>
 800ab1e:	f016 061f 	ands.w	r6, r6, #31
 800ab22:	d0fa      	beq.n	800ab1a <__gethex+0x3fe>
 800ab24:	4453      	add	r3, sl
 800ab26:	f1c6 0620 	rsb	r6, r6, #32
 800ab2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab2e:	f7fe f8c1 	bl	8008cb4 <__hi0bits>
 800ab32:	42b0      	cmp	r0, r6
 800ab34:	dbe7      	blt.n	800ab06 <__gethex+0x3ea>
 800ab36:	e7f0      	b.n	800ab1a <__gethex+0x3fe>
 800ab38:	0800b479 	.word	0x0800b479

0800ab3c <L_shift>:
 800ab3c:	f1c2 0208 	rsb	r2, r2, #8
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	b570      	push	{r4, r5, r6, lr}
 800ab44:	f1c2 0620 	rsb	r6, r2, #32
 800ab48:	6843      	ldr	r3, [r0, #4]
 800ab4a:	6804      	ldr	r4, [r0, #0]
 800ab4c:	fa03 f506 	lsl.w	r5, r3, r6
 800ab50:	432c      	orrs	r4, r5
 800ab52:	40d3      	lsrs	r3, r2
 800ab54:	6004      	str	r4, [r0, #0]
 800ab56:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab5a:	4288      	cmp	r0, r1
 800ab5c:	d3f4      	bcc.n	800ab48 <L_shift+0xc>
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}

0800ab60 <__match>:
 800ab60:	b530      	push	{r4, r5, lr}
 800ab62:	6803      	ldr	r3, [r0, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab6a:	b914      	cbnz	r4, 800ab72 <__match+0x12>
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	2001      	movs	r0, #1
 800ab70:	bd30      	pop	{r4, r5, pc}
 800ab72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab7a:	2d19      	cmp	r5, #25
 800ab7c:	bf98      	it	ls
 800ab7e:	3220      	addls	r2, #32
 800ab80:	42a2      	cmp	r2, r4
 800ab82:	d0f0      	beq.n	800ab66 <__match+0x6>
 800ab84:	2000      	movs	r0, #0
 800ab86:	e7f3      	b.n	800ab70 <__match+0x10>

0800ab88 <__hexnan>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	680b      	ldr	r3, [r1, #0]
 800ab8e:	6801      	ldr	r1, [r0, #0]
 800ab90:	115e      	asrs	r6, r3, #5
 800ab92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab96:	f013 031f 	ands.w	r3, r3, #31
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	bf18      	it	ne
 800ab9e:	3604      	addne	r6, #4
 800aba0:	2500      	movs	r5, #0
 800aba2:	1f37      	subs	r7, r6, #4
 800aba4:	4682      	mov	sl, r0
 800aba6:	4690      	mov	r8, r2
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800abae:	46b9      	mov	r9, r7
 800abb0:	463c      	mov	r4, r7
 800abb2:	9502      	str	r5, [sp, #8]
 800abb4:	46ab      	mov	fp, r5
 800abb6:	784a      	ldrb	r2, [r1, #1]
 800abb8:	1c4b      	adds	r3, r1, #1
 800abba:	9303      	str	r3, [sp, #12]
 800abbc:	b342      	cbz	r2, 800ac10 <__hexnan+0x88>
 800abbe:	4610      	mov	r0, r2
 800abc0:	9105      	str	r1, [sp, #20]
 800abc2:	9204      	str	r2, [sp, #16]
 800abc4:	f7ff fd94 	bl	800a6f0 <__hexdig_fun>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d151      	bne.n	800ac70 <__hexnan+0xe8>
 800abcc:	9a04      	ldr	r2, [sp, #16]
 800abce:	9905      	ldr	r1, [sp, #20]
 800abd0:	2a20      	cmp	r2, #32
 800abd2:	d818      	bhi.n	800ac06 <__hexnan+0x7e>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	459b      	cmp	fp, r3
 800abd8:	dd13      	ble.n	800ac02 <__hexnan+0x7a>
 800abda:	454c      	cmp	r4, r9
 800abdc:	d206      	bcs.n	800abec <__hexnan+0x64>
 800abde:	2d07      	cmp	r5, #7
 800abe0:	dc04      	bgt.n	800abec <__hexnan+0x64>
 800abe2:	462a      	mov	r2, r5
 800abe4:	4649      	mov	r1, r9
 800abe6:	4620      	mov	r0, r4
 800abe8:	f7ff ffa8 	bl	800ab3c <L_shift>
 800abec:	4544      	cmp	r4, r8
 800abee:	d952      	bls.n	800ac96 <__hexnan+0x10e>
 800abf0:	2300      	movs	r3, #0
 800abf2:	f1a4 0904 	sub.w	r9, r4, #4
 800abf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800abfa:	f8cd b008 	str.w	fp, [sp, #8]
 800abfe:	464c      	mov	r4, r9
 800ac00:	461d      	mov	r5, r3
 800ac02:	9903      	ldr	r1, [sp, #12]
 800ac04:	e7d7      	b.n	800abb6 <__hexnan+0x2e>
 800ac06:	2a29      	cmp	r2, #41	@ 0x29
 800ac08:	d157      	bne.n	800acba <__hexnan+0x132>
 800ac0a:	3102      	adds	r1, #2
 800ac0c:	f8ca 1000 	str.w	r1, [sl]
 800ac10:	f1bb 0f00 	cmp.w	fp, #0
 800ac14:	d051      	beq.n	800acba <__hexnan+0x132>
 800ac16:	454c      	cmp	r4, r9
 800ac18:	d206      	bcs.n	800ac28 <__hexnan+0xa0>
 800ac1a:	2d07      	cmp	r5, #7
 800ac1c:	dc04      	bgt.n	800ac28 <__hexnan+0xa0>
 800ac1e:	462a      	mov	r2, r5
 800ac20:	4649      	mov	r1, r9
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff ff8a 	bl	800ab3c <L_shift>
 800ac28:	4544      	cmp	r4, r8
 800ac2a:	d936      	bls.n	800ac9a <__hexnan+0x112>
 800ac2c:	f1a8 0204 	sub.w	r2, r8, #4
 800ac30:	4623      	mov	r3, r4
 800ac32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac36:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac3a:	429f      	cmp	r7, r3
 800ac3c:	d2f9      	bcs.n	800ac32 <__hexnan+0xaa>
 800ac3e:	1b3b      	subs	r3, r7, r4
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	3401      	adds	r4, #1
 800ac48:	3e03      	subs	r6, #3
 800ac4a:	42b4      	cmp	r4, r6
 800ac4c:	bf88      	it	hi
 800ac4e:	2304      	movhi	r3, #4
 800ac50:	4443      	add	r3, r8
 800ac52:	2200      	movs	r2, #0
 800ac54:	f843 2b04 	str.w	r2, [r3], #4
 800ac58:	429f      	cmp	r7, r3
 800ac5a:	d2fb      	bcs.n	800ac54 <__hexnan+0xcc>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	b91b      	cbnz	r3, 800ac68 <__hexnan+0xe0>
 800ac60:	4547      	cmp	r7, r8
 800ac62:	d128      	bne.n	800acb6 <__hexnan+0x12e>
 800ac64:	2301      	movs	r3, #1
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	2005      	movs	r0, #5
 800ac6a:	b007      	add	sp, #28
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	3501      	adds	r5, #1
 800ac72:	2d08      	cmp	r5, #8
 800ac74:	f10b 0b01 	add.w	fp, fp, #1
 800ac78:	dd06      	ble.n	800ac88 <__hexnan+0x100>
 800ac7a:	4544      	cmp	r4, r8
 800ac7c:	d9c1      	bls.n	800ac02 <__hexnan+0x7a>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac84:	2501      	movs	r5, #1
 800ac86:	3c04      	subs	r4, #4
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	f000 000f 	and.w	r0, r0, #15
 800ac8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac92:	6020      	str	r0, [r4, #0]
 800ac94:	e7b5      	b.n	800ac02 <__hexnan+0x7a>
 800ac96:	2508      	movs	r5, #8
 800ac98:	e7b3      	b.n	800ac02 <__hexnan+0x7a>
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0dd      	beq.n	800ac5c <__hexnan+0xd4>
 800aca0:	f1c3 0320 	rsb	r3, r3, #32
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295
 800aca8:	40da      	lsrs	r2, r3
 800acaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800acae:	4013      	ands	r3, r2
 800acb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800acb4:	e7d2      	b.n	800ac5c <__hexnan+0xd4>
 800acb6:	3f04      	subs	r7, #4
 800acb8:	e7d0      	b.n	800ac5c <__hexnan+0xd4>
 800acba:	2004      	movs	r0, #4
 800acbc:	e7d5      	b.n	800ac6a <__hexnan+0xe2>

0800acbe <__ascii_mbtowc>:
 800acbe:	b082      	sub	sp, #8
 800acc0:	b901      	cbnz	r1, 800acc4 <__ascii_mbtowc+0x6>
 800acc2:	a901      	add	r1, sp, #4
 800acc4:	b142      	cbz	r2, 800acd8 <__ascii_mbtowc+0x1a>
 800acc6:	b14b      	cbz	r3, 800acdc <__ascii_mbtowc+0x1e>
 800acc8:	7813      	ldrb	r3, [r2, #0]
 800acca:	600b      	str	r3, [r1, #0]
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	1e10      	subs	r0, r2, #0
 800acd0:	bf18      	it	ne
 800acd2:	2001      	movne	r0, #1
 800acd4:	b002      	add	sp, #8
 800acd6:	4770      	bx	lr
 800acd8:	4610      	mov	r0, r2
 800acda:	e7fb      	b.n	800acd4 <__ascii_mbtowc+0x16>
 800acdc:	f06f 0001 	mvn.w	r0, #1
 800ace0:	e7f8      	b.n	800acd4 <__ascii_mbtowc+0x16>

0800ace2 <_realloc_r>:
 800ace2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace6:	4680      	mov	r8, r0
 800ace8:	4615      	mov	r5, r2
 800acea:	460c      	mov	r4, r1
 800acec:	b921      	cbnz	r1, 800acf8 <_realloc_r+0x16>
 800acee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	4611      	mov	r1, r2
 800acf4:	f7fd be60 	b.w	80089b8 <_malloc_r>
 800acf8:	b92a      	cbnz	r2, 800ad06 <_realloc_r+0x24>
 800acfa:	f7fd fde9 	bl	80088d0 <_free_r>
 800acfe:	2400      	movs	r4, #0
 800ad00:	4620      	mov	r0, r4
 800ad02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad06:	f000 f840 	bl	800ad8a <_malloc_usable_size_r>
 800ad0a:	4285      	cmp	r5, r0
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	d802      	bhi.n	800ad16 <_realloc_r+0x34>
 800ad10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad14:	d8f4      	bhi.n	800ad00 <_realloc_r+0x1e>
 800ad16:	4629      	mov	r1, r5
 800ad18:	4640      	mov	r0, r8
 800ad1a:	f7fd fe4d 	bl	80089b8 <_malloc_r>
 800ad1e:	4607      	mov	r7, r0
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d0ec      	beq.n	800acfe <_realloc_r+0x1c>
 800ad24:	42b5      	cmp	r5, r6
 800ad26:	462a      	mov	r2, r5
 800ad28:	4621      	mov	r1, r4
 800ad2a:	bf28      	it	cs
 800ad2c:	4632      	movcs	r2, r6
 800ad2e:	f7ff fc45 	bl	800a5bc <memcpy>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4640      	mov	r0, r8
 800ad36:	f7fd fdcb 	bl	80088d0 <_free_r>
 800ad3a:	463c      	mov	r4, r7
 800ad3c:	e7e0      	b.n	800ad00 <_realloc_r+0x1e>

0800ad3e <__ascii_wctomb>:
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	b141      	cbz	r1, 800ad56 <__ascii_wctomb+0x18>
 800ad44:	2aff      	cmp	r2, #255	@ 0xff
 800ad46:	d904      	bls.n	800ad52 <__ascii_wctomb+0x14>
 800ad48:	228a      	movs	r2, #138	@ 0x8a
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	4770      	bx	lr
 800ad52:	700a      	strb	r2, [r1, #0]
 800ad54:	2001      	movs	r0, #1
 800ad56:	4770      	bx	lr

0800ad58 <fiprintf>:
 800ad58:	b40e      	push	{r1, r2, r3}
 800ad5a:	b503      	push	{r0, r1, lr}
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	4805      	ldr	r0, [pc, #20]	@ (800ad78 <fiprintf+0x20>)
 800ad62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad66:	6800      	ldr	r0, [r0, #0]
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	f000 f83f 	bl	800adec <_vfiprintf_r>
 800ad6e:	b002      	add	sp, #8
 800ad70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad74:	b003      	add	sp, #12
 800ad76:	4770      	bx	lr
 800ad78:	20000018 	.word	0x20000018

0800ad7c <abort>:
 800ad7c:	b508      	push	{r3, lr}
 800ad7e:	2006      	movs	r0, #6
 800ad80:	f000 fa08 	bl	800b194 <raise>
 800ad84:	2001      	movs	r0, #1
 800ad86:	f7f6 ff81 	bl	8001c8c <_exit>

0800ad8a <_malloc_usable_size_r>:
 800ad8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad8e:	1f18      	subs	r0, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfbc      	itt	lt
 800ad94:	580b      	ldrlt	r3, [r1, r0]
 800ad96:	18c0      	addlt	r0, r0, r3
 800ad98:	4770      	bx	lr

0800ad9a <__sfputc_r>:
 800ad9a:	6893      	ldr	r3, [r2, #8]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	b410      	push	{r4}
 800ada2:	6093      	str	r3, [r2, #8]
 800ada4:	da08      	bge.n	800adb8 <__sfputc_r+0x1e>
 800ada6:	6994      	ldr	r4, [r2, #24]
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	db01      	blt.n	800adb0 <__sfputc_r+0x16>
 800adac:	290a      	cmp	r1, #10
 800adae:	d103      	bne.n	800adb8 <__sfputc_r+0x1e>
 800adb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb4:	f000 b932 	b.w	800b01c <__swbuf_r>
 800adb8:	6813      	ldr	r3, [r2, #0]
 800adba:	1c58      	adds	r0, r3, #1
 800adbc:	6010      	str	r0, [r2, #0]
 800adbe:	7019      	strb	r1, [r3, #0]
 800adc0:	4608      	mov	r0, r1
 800adc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <__sfputs_r>:
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	4614      	mov	r4, r2
 800add0:	18d5      	adds	r5, r2, r3
 800add2:	42ac      	cmp	r4, r5
 800add4:	d101      	bne.n	800adda <__sfputs_r+0x12>
 800add6:	2000      	movs	r0, #0
 800add8:	e007      	b.n	800adea <__sfputs_r+0x22>
 800adda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adde:	463a      	mov	r2, r7
 800ade0:	4630      	mov	r0, r6
 800ade2:	f7ff ffda 	bl	800ad9a <__sfputc_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d1f3      	bne.n	800add2 <__sfputs_r+0xa>
 800adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adec <_vfiprintf_r>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	460d      	mov	r5, r1
 800adf2:	b09d      	sub	sp, #116	@ 0x74
 800adf4:	4614      	mov	r4, r2
 800adf6:	4698      	mov	r8, r3
 800adf8:	4606      	mov	r6, r0
 800adfa:	b118      	cbz	r0, 800ae04 <_vfiprintf_r+0x18>
 800adfc:	6a03      	ldr	r3, [r0, #32]
 800adfe:	b90b      	cbnz	r3, 800ae04 <_vfiprintf_r+0x18>
 800ae00:	f7fc fdc6 	bl	8007990 <__sinit>
 800ae04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae06:	07d9      	lsls	r1, r3, #31
 800ae08:	d405      	bmi.n	800ae16 <_vfiprintf_r+0x2a>
 800ae0a:	89ab      	ldrh	r3, [r5, #12]
 800ae0c:	059a      	lsls	r2, r3, #22
 800ae0e:	d402      	bmi.n	800ae16 <_vfiprintf_r+0x2a>
 800ae10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae12:	f7fc ff08 	bl	8007c26 <__retarget_lock_acquire_recursive>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	071b      	lsls	r3, r3, #28
 800ae1a:	d501      	bpl.n	800ae20 <_vfiprintf_r+0x34>
 800ae1c:	692b      	ldr	r3, [r5, #16]
 800ae1e:	b99b      	cbnz	r3, 800ae48 <_vfiprintf_r+0x5c>
 800ae20:	4629      	mov	r1, r5
 800ae22:	4630      	mov	r0, r6
 800ae24:	f000 f938 	bl	800b098 <__swsetup_r>
 800ae28:	b170      	cbz	r0, 800ae48 <_vfiprintf_r+0x5c>
 800ae2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae2c:	07dc      	lsls	r4, r3, #31
 800ae2e:	d504      	bpl.n	800ae3a <_vfiprintf_r+0x4e>
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	b01d      	add	sp, #116	@ 0x74
 800ae36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3a:	89ab      	ldrh	r3, [r5, #12]
 800ae3c:	0598      	lsls	r0, r3, #22
 800ae3e:	d4f7      	bmi.n	800ae30 <_vfiprintf_r+0x44>
 800ae40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae42:	f7fc fef1 	bl	8007c28 <__retarget_lock_release_recursive>
 800ae46:	e7f3      	b.n	800ae30 <_vfiprintf_r+0x44>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae4c:	2320      	movs	r3, #32
 800ae4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae52:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae56:	2330      	movs	r3, #48	@ 0x30
 800ae58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b008 <_vfiprintf_r+0x21c>
 800ae5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae60:	f04f 0901 	mov.w	r9, #1
 800ae64:	4623      	mov	r3, r4
 800ae66:	469a      	mov	sl, r3
 800ae68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6c:	b10a      	cbz	r2, 800ae72 <_vfiprintf_r+0x86>
 800ae6e:	2a25      	cmp	r2, #37	@ 0x25
 800ae70:	d1f9      	bne.n	800ae66 <_vfiprintf_r+0x7a>
 800ae72:	ebba 0b04 	subs.w	fp, sl, r4
 800ae76:	d00b      	beq.n	800ae90 <_vfiprintf_r+0xa4>
 800ae78:	465b      	mov	r3, fp
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f7ff ffa2 	bl	800adc8 <__sfputs_r>
 800ae84:	3001      	adds	r0, #1
 800ae86:	f000 80a7 	beq.w	800afd8 <_vfiprintf_r+0x1ec>
 800ae8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae8c:	445a      	add	r2, fp
 800ae8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae90:	f89a 3000 	ldrb.w	r3, [sl]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 809f 	beq.w	800afd8 <_vfiprintf_r+0x1ec>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea4:	f10a 0a01 	add.w	sl, sl, #1
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	9307      	str	r3, [sp, #28]
 800aeac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aeb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aeb2:	4654      	mov	r4, sl
 800aeb4:	2205      	movs	r2, #5
 800aeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeba:	4853      	ldr	r0, [pc, #332]	@ (800b008 <_vfiprintf_r+0x21c>)
 800aebc:	f7f5 f988 	bl	80001d0 <memchr>
 800aec0:	9a04      	ldr	r2, [sp, #16]
 800aec2:	b9d8      	cbnz	r0, 800aefc <_vfiprintf_r+0x110>
 800aec4:	06d1      	lsls	r1, r2, #27
 800aec6:	bf44      	itt	mi
 800aec8:	2320      	movmi	r3, #32
 800aeca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aece:	0713      	lsls	r3, r2, #28
 800aed0:	bf44      	itt	mi
 800aed2:	232b      	movmi	r3, #43	@ 0x2b
 800aed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aed8:	f89a 3000 	ldrb.w	r3, [sl]
 800aedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800aede:	d015      	beq.n	800af0c <_vfiprintf_r+0x120>
 800aee0:	9a07      	ldr	r2, [sp, #28]
 800aee2:	4654      	mov	r4, sl
 800aee4:	2000      	movs	r0, #0
 800aee6:	f04f 0c0a 	mov.w	ip, #10
 800aeea:	4621      	mov	r1, r4
 800aeec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef0:	3b30      	subs	r3, #48	@ 0x30
 800aef2:	2b09      	cmp	r3, #9
 800aef4:	d94b      	bls.n	800af8e <_vfiprintf_r+0x1a2>
 800aef6:	b1b0      	cbz	r0, 800af26 <_vfiprintf_r+0x13a>
 800aef8:	9207      	str	r2, [sp, #28]
 800aefa:	e014      	b.n	800af26 <_vfiprintf_r+0x13a>
 800aefc:	eba0 0308 	sub.w	r3, r0, r8
 800af00:	fa09 f303 	lsl.w	r3, r9, r3
 800af04:	4313      	orrs	r3, r2
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	46a2      	mov	sl, r4
 800af0a:	e7d2      	b.n	800aeb2 <_vfiprintf_r+0xc6>
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	1d19      	adds	r1, r3, #4
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	9103      	str	r1, [sp, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	bfbb      	ittet	lt
 800af18:	425b      	neglt	r3, r3
 800af1a:	f042 0202 	orrlt.w	r2, r2, #2
 800af1e:	9307      	strge	r3, [sp, #28]
 800af20:	9307      	strlt	r3, [sp, #28]
 800af22:	bfb8      	it	lt
 800af24:	9204      	strlt	r2, [sp, #16]
 800af26:	7823      	ldrb	r3, [r4, #0]
 800af28:	2b2e      	cmp	r3, #46	@ 0x2e
 800af2a:	d10a      	bne.n	800af42 <_vfiprintf_r+0x156>
 800af2c:	7863      	ldrb	r3, [r4, #1]
 800af2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af30:	d132      	bne.n	800af98 <_vfiprintf_r+0x1ac>
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	1d1a      	adds	r2, r3, #4
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	9203      	str	r2, [sp, #12]
 800af3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af3e:	3402      	adds	r4, #2
 800af40:	9305      	str	r3, [sp, #20]
 800af42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b018 <_vfiprintf_r+0x22c>
 800af46:	7821      	ldrb	r1, [r4, #0]
 800af48:	2203      	movs	r2, #3
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7f5 f940 	bl	80001d0 <memchr>
 800af50:	b138      	cbz	r0, 800af62 <_vfiprintf_r+0x176>
 800af52:	9b04      	ldr	r3, [sp, #16]
 800af54:	eba0 000a 	sub.w	r0, r0, sl
 800af58:	2240      	movs	r2, #64	@ 0x40
 800af5a:	4082      	lsls	r2, r0
 800af5c:	4313      	orrs	r3, r2
 800af5e:	3401      	adds	r4, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af66:	4829      	ldr	r0, [pc, #164]	@ (800b00c <_vfiprintf_r+0x220>)
 800af68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af6c:	2206      	movs	r2, #6
 800af6e:	f7f5 f92f 	bl	80001d0 <memchr>
 800af72:	2800      	cmp	r0, #0
 800af74:	d03f      	beq.n	800aff6 <_vfiprintf_r+0x20a>
 800af76:	4b26      	ldr	r3, [pc, #152]	@ (800b010 <_vfiprintf_r+0x224>)
 800af78:	bb1b      	cbnz	r3, 800afc2 <_vfiprintf_r+0x1d6>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	3307      	adds	r3, #7
 800af7e:	f023 0307 	bic.w	r3, r3, #7
 800af82:	3308      	adds	r3, #8
 800af84:	9303      	str	r3, [sp, #12]
 800af86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af88:	443b      	add	r3, r7
 800af8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8c:	e76a      	b.n	800ae64 <_vfiprintf_r+0x78>
 800af8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af92:	460c      	mov	r4, r1
 800af94:	2001      	movs	r0, #1
 800af96:	e7a8      	b.n	800aeea <_vfiprintf_r+0xfe>
 800af98:	2300      	movs	r3, #0
 800af9a:	3401      	adds	r4, #1
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	4619      	mov	r1, r3
 800afa0:	f04f 0c0a 	mov.w	ip, #10
 800afa4:	4620      	mov	r0, r4
 800afa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afaa:	3a30      	subs	r2, #48	@ 0x30
 800afac:	2a09      	cmp	r2, #9
 800afae:	d903      	bls.n	800afb8 <_vfiprintf_r+0x1cc>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0c6      	beq.n	800af42 <_vfiprintf_r+0x156>
 800afb4:	9105      	str	r1, [sp, #20]
 800afb6:	e7c4      	b.n	800af42 <_vfiprintf_r+0x156>
 800afb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afbc:	4604      	mov	r4, r0
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7f0      	b.n	800afa4 <_vfiprintf_r+0x1b8>
 800afc2:	ab03      	add	r3, sp, #12
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	462a      	mov	r2, r5
 800afc8:	4b12      	ldr	r3, [pc, #72]	@ (800b014 <_vfiprintf_r+0x228>)
 800afca:	a904      	add	r1, sp, #16
 800afcc:	4630      	mov	r0, r6
 800afce:	f7fb fe87 	bl	8006ce0 <_printf_float>
 800afd2:	4607      	mov	r7, r0
 800afd4:	1c78      	adds	r0, r7, #1
 800afd6:	d1d6      	bne.n	800af86 <_vfiprintf_r+0x19a>
 800afd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afda:	07d9      	lsls	r1, r3, #31
 800afdc:	d405      	bmi.n	800afea <_vfiprintf_r+0x1fe>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	059a      	lsls	r2, r3, #22
 800afe2:	d402      	bmi.n	800afea <_vfiprintf_r+0x1fe>
 800afe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afe6:	f7fc fe1f 	bl	8007c28 <__retarget_lock_release_recursive>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	065b      	lsls	r3, r3, #25
 800afee:	f53f af1f 	bmi.w	800ae30 <_vfiprintf_r+0x44>
 800aff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aff4:	e71e      	b.n	800ae34 <_vfiprintf_r+0x48>
 800aff6:	ab03      	add	r3, sp, #12
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	462a      	mov	r2, r5
 800affc:	4b05      	ldr	r3, [pc, #20]	@ (800b014 <_vfiprintf_r+0x228>)
 800affe:	a904      	add	r1, sp, #16
 800b000:	4630      	mov	r0, r6
 800b002:	f7fc f905 	bl	8007210 <_printf_i>
 800b006:	e7e4      	b.n	800afd2 <_vfiprintf_r+0x1e6>
 800b008:	0800b739 	.word	0x0800b739
 800b00c:	0800b743 	.word	0x0800b743
 800b010:	08006ce1 	.word	0x08006ce1
 800b014:	0800adc9 	.word	0x0800adc9
 800b018:	0800b73f 	.word	0x0800b73f

0800b01c <__swbuf_r>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	4614      	mov	r4, r2
 800b022:	4605      	mov	r5, r0
 800b024:	b118      	cbz	r0, 800b02e <__swbuf_r+0x12>
 800b026:	6a03      	ldr	r3, [r0, #32]
 800b028:	b90b      	cbnz	r3, 800b02e <__swbuf_r+0x12>
 800b02a:	f7fc fcb1 	bl	8007990 <__sinit>
 800b02e:	69a3      	ldr	r3, [r4, #24]
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	071a      	lsls	r2, r3, #28
 800b036:	d501      	bpl.n	800b03c <__swbuf_r+0x20>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b943      	cbnz	r3, 800b04e <__swbuf_r+0x32>
 800b03c:	4621      	mov	r1, r4
 800b03e:	4628      	mov	r0, r5
 800b040:	f000 f82a 	bl	800b098 <__swsetup_r>
 800b044:	b118      	cbz	r0, 800b04e <__swbuf_r+0x32>
 800b046:	f04f 37ff 	mov.w	r7, #4294967295
 800b04a:	4638      	mov	r0, r7
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	6922      	ldr	r2, [r4, #16]
 800b052:	1a98      	subs	r0, r3, r2
 800b054:	6963      	ldr	r3, [r4, #20]
 800b056:	b2f6      	uxtb	r6, r6
 800b058:	4283      	cmp	r3, r0
 800b05a:	4637      	mov	r7, r6
 800b05c:	dc05      	bgt.n	800b06a <__swbuf_r+0x4e>
 800b05e:	4621      	mov	r1, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f7ff fa47 	bl	800a4f4 <_fflush_r>
 800b066:	2800      	cmp	r0, #0
 800b068:	d1ed      	bne.n	800b046 <__swbuf_r+0x2a>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	60a3      	str	r3, [r4, #8]
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	701e      	strb	r6, [r3, #0]
 800b078:	6962      	ldr	r2, [r4, #20]
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d004      	beq.n	800b08a <__swbuf_r+0x6e>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	07db      	lsls	r3, r3, #31
 800b084:	d5e1      	bpl.n	800b04a <__swbuf_r+0x2e>
 800b086:	2e0a      	cmp	r6, #10
 800b088:	d1df      	bne.n	800b04a <__swbuf_r+0x2e>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7ff fa31 	bl	800a4f4 <_fflush_r>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0d9      	beq.n	800b04a <__swbuf_r+0x2e>
 800b096:	e7d6      	b.n	800b046 <__swbuf_r+0x2a>

0800b098 <__swsetup_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4b29      	ldr	r3, [pc, #164]	@ (800b140 <__swsetup_r+0xa8>)
 800b09c:	4605      	mov	r5, r0
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	b118      	cbz	r0, 800b0ac <__swsetup_r+0x14>
 800b0a4:	6a03      	ldr	r3, [r0, #32]
 800b0a6:	b90b      	cbnz	r3, 800b0ac <__swsetup_r+0x14>
 800b0a8:	f7fc fc72 	bl	8007990 <__sinit>
 800b0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b0:	0719      	lsls	r1, r3, #28
 800b0b2:	d422      	bmi.n	800b0fa <__swsetup_r+0x62>
 800b0b4:	06da      	lsls	r2, r3, #27
 800b0b6:	d407      	bmi.n	800b0c8 <__swsetup_r+0x30>
 800b0b8:	2209      	movs	r2, #9
 800b0ba:	602a      	str	r2, [r5, #0]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	e033      	b.n	800b130 <__swsetup_r+0x98>
 800b0c8:	0758      	lsls	r0, r3, #29
 800b0ca:	d512      	bpl.n	800b0f2 <__swsetup_r+0x5a>
 800b0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ce:	b141      	cbz	r1, 800b0e2 <__swsetup_r+0x4a>
 800b0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	d002      	beq.n	800b0de <__swsetup_r+0x46>
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7fd fbf9 	bl	80088d0 <_free_r>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f043 0308 	orr.w	r3, r3, #8
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	b94b      	cbnz	r3, 800b112 <__swsetup_r+0x7a>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b108:	d003      	beq.n	800b112 <__swsetup_r+0x7a>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4628      	mov	r0, r5
 800b10e:	f000 f883 	bl	800b218 <__smakebuf_r>
 800b112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b116:	f013 0201 	ands.w	r2, r3, #1
 800b11a:	d00a      	beq.n	800b132 <__swsetup_r+0x9a>
 800b11c:	2200      	movs	r2, #0
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	6962      	ldr	r2, [r4, #20]
 800b122:	4252      	negs	r2, r2
 800b124:	61a2      	str	r2, [r4, #24]
 800b126:	6922      	ldr	r2, [r4, #16]
 800b128:	b942      	cbnz	r2, 800b13c <__swsetup_r+0xa4>
 800b12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b12e:	d1c5      	bne.n	800b0bc <__swsetup_r+0x24>
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	0799      	lsls	r1, r3, #30
 800b134:	bf58      	it	pl
 800b136:	6962      	ldrpl	r2, [r4, #20]
 800b138:	60a2      	str	r2, [r4, #8]
 800b13a:	e7f4      	b.n	800b126 <__swsetup_r+0x8e>
 800b13c:	2000      	movs	r0, #0
 800b13e:	e7f7      	b.n	800b130 <__swsetup_r+0x98>
 800b140:	20000018 	.word	0x20000018

0800b144 <_raise_r>:
 800b144:	291f      	cmp	r1, #31
 800b146:	b538      	push	{r3, r4, r5, lr}
 800b148:	4605      	mov	r5, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	d904      	bls.n	800b158 <_raise_r+0x14>
 800b14e:	2316      	movs	r3, #22
 800b150:	6003      	str	r3, [r0, #0]
 800b152:	f04f 30ff 	mov.w	r0, #4294967295
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b15a:	b112      	cbz	r2, 800b162 <_raise_r+0x1e>
 800b15c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b160:	b94b      	cbnz	r3, 800b176 <_raise_r+0x32>
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f830 	bl	800b1c8 <_getpid_r>
 800b168:	4622      	mov	r2, r4
 800b16a:	4601      	mov	r1, r0
 800b16c:	4628      	mov	r0, r5
 800b16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b172:	f000 b817 	b.w	800b1a4 <_kill_r>
 800b176:	2b01      	cmp	r3, #1
 800b178:	d00a      	beq.n	800b190 <_raise_r+0x4c>
 800b17a:	1c59      	adds	r1, r3, #1
 800b17c:	d103      	bne.n	800b186 <_raise_r+0x42>
 800b17e:	2316      	movs	r3, #22
 800b180:	6003      	str	r3, [r0, #0]
 800b182:	2001      	movs	r0, #1
 800b184:	e7e7      	b.n	800b156 <_raise_r+0x12>
 800b186:	2100      	movs	r1, #0
 800b188:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b18c:	4620      	mov	r0, r4
 800b18e:	4798      	blx	r3
 800b190:	2000      	movs	r0, #0
 800b192:	e7e0      	b.n	800b156 <_raise_r+0x12>

0800b194 <raise>:
 800b194:	4b02      	ldr	r3, [pc, #8]	@ (800b1a0 <raise+0xc>)
 800b196:	4601      	mov	r1, r0
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	f7ff bfd3 	b.w	800b144 <_raise_r>
 800b19e:	bf00      	nop
 800b1a0:	20000018 	.word	0x20000018

0800b1a4 <_kill_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d07      	ldr	r5, [pc, #28]	@ (800b1c4 <_kill_r+0x20>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	f7f6 fd5b 	bl	8001c6c <_kill>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d102      	bne.n	800b1c0 <_kill_r+0x1c>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	b103      	cbz	r3, 800b1c0 <_kill_r+0x1c>
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	bf00      	nop
 800b1c4:	200005b0 	.word	0x200005b0

0800b1c8 <_getpid_r>:
 800b1c8:	f7f6 bd48 	b.w	8001c5c <_getpid>

0800b1cc <__swhatbuf_r>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d4:	2900      	cmp	r1, #0
 800b1d6:	b096      	sub	sp, #88	@ 0x58
 800b1d8:	4615      	mov	r5, r2
 800b1da:	461e      	mov	r6, r3
 800b1dc:	da0d      	bge.n	800b1fa <__swhatbuf_r+0x2e>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1e4:	f04f 0100 	mov.w	r1, #0
 800b1e8:	bf14      	ite	ne
 800b1ea:	2340      	movne	r3, #64	@ 0x40
 800b1ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	6031      	str	r1, [r6, #0]
 800b1f4:	602b      	str	r3, [r5, #0]
 800b1f6:	b016      	add	sp, #88	@ 0x58
 800b1f8:	bd70      	pop	{r4, r5, r6, pc}
 800b1fa:	466a      	mov	r2, sp
 800b1fc:	f000 f848 	bl	800b290 <_fstat_r>
 800b200:	2800      	cmp	r0, #0
 800b202:	dbec      	blt.n	800b1de <__swhatbuf_r+0x12>
 800b204:	9901      	ldr	r1, [sp, #4]
 800b206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b20a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b20e:	4259      	negs	r1, r3
 800b210:	4159      	adcs	r1, r3
 800b212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b216:	e7eb      	b.n	800b1f0 <__swhatbuf_r+0x24>

0800b218 <__smakebuf_r>:
 800b218:	898b      	ldrh	r3, [r1, #12]
 800b21a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b21c:	079d      	lsls	r5, r3, #30
 800b21e:	4606      	mov	r6, r0
 800b220:	460c      	mov	r4, r1
 800b222:	d507      	bpl.n	800b234 <__smakebuf_r+0x1c>
 800b224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	6123      	str	r3, [r4, #16]
 800b22c:	2301      	movs	r3, #1
 800b22e:	6163      	str	r3, [r4, #20]
 800b230:	b003      	add	sp, #12
 800b232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b234:	ab01      	add	r3, sp, #4
 800b236:	466a      	mov	r2, sp
 800b238:	f7ff ffc8 	bl	800b1cc <__swhatbuf_r>
 800b23c:	9f00      	ldr	r7, [sp, #0]
 800b23e:	4605      	mov	r5, r0
 800b240:	4639      	mov	r1, r7
 800b242:	4630      	mov	r0, r6
 800b244:	f7fd fbb8 	bl	80089b8 <_malloc_r>
 800b248:	b948      	cbnz	r0, 800b25e <__smakebuf_r+0x46>
 800b24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24e:	059a      	lsls	r2, r3, #22
 800b250:	d4ee      	bmi.n	800b230 <__smakebuf_r+0x18>
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	f043 0302 	orr.w	r3, r3, #2
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	e7e2      	b.n	800b224 <__smakebuf_r+0xc>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	6020      	str	r0, [r4, #0]
 800b262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b26e:	b15b      	cbz	r3, 800b288 <__smakebuf_r+0x70>
 800b270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b274:	4630      	mov	r0, r6
 800b276:	f000 f81d 	bl	800b2b4 <_isatty_r>
 800b27a:	b128      	cbz	r0, 800b288 <__smakebuf_r+0x70>
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	431d      	orrs	r5, r3
 800b28c:	81a5      	strh	r5, [r4, #12]
 800b28e:	e7cf      	b.n	800b230 <__smakebuf_r+0x18>

0800b290 <_fstat_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d07      	ldr	r5, [pc, #28]	@ (800b2b0 <_fstat_r+0x20>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	4611      	mov	r1, r2
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	f7f6 fd29 	bl	8001cf4 <_fstat>
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	d102      	bne.n	800b2ac <_fstat_r+0x1c>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	b103      	cbz	r3, 800b2ac <_fstat_r+0x1c>
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	bd38      	pop	{r3, r4, r5, pc}
 800b2ae:	bf00      	nop
 800b2b0:	200005b0 	.word	0x200005b0

0800b2b4 <_isatty_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d06      	ldr	r5, [pc, #24]	@ (800b2d0 <_isatty_r+0x1c>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	602b      	str	r3, [r5, #0]
 800b2c0:	f7f6 fd28 	bl	8001d14 <_isatty>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_isatty_r+0x1a>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_isatty_r+0x1a>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	200005b0 	.word	0x200005b0

0800b2d4 <_init>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	bf00      	nop
 800b2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2da:	bc08      	pop	{r3}
 800b2dc:	469e      	mov	lr, r3
 800b2de:	4770      	bx	lr

0800b2e0 <_fini>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr
