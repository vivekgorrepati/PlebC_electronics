
Nucleo-L476RG -BNO055-IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800a088  0800a088  0001a088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a634  0800a634  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a63c  0800a63c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e0  0800a824  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800a824  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010680  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002387  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271f0  00000000  00000000  00034650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c67  00000000  00000000  0005b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec299  00000000  00000000  0006c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158740  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e40  00000000  00000000  00158790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a06c 	.word	0x0800a06c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a06c 	.word	0x0800a06c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0; i<len; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{

		ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
	for(i=0; i<len; i++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}

	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <BNO055_WriteReg>:

HAL_StatusTypeDef BNO055_WriteReg(uint8_t reg, uint8_t value) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af04      	add	r7, sp, #16
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, BNO055_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	b29a      	uxth	r2, r3
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	1dbb      	adds	r3, r7, #6
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2150      	movs	r1, #80	; 0x50
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <BNO055_WriteReg+0x34>)
 80010a6:	f001 f915 	bl	80022d4 <HAL_I2C_Mem_Write>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001fc 	.word	0x200001fc

080010b8 <BNO055_ReadRegs>:

HAL_StatusTypeDef BNO055_ReadRegs(uint8_t reg, uint8_t *buffer, uint16_t size) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buffer, size, 100);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	88bb      	ldrh	r3, [r7, #4]
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2150      	movs	r1, #80	; 0x50
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <BNO055_ReadRegs+0x34>)
 80010de:	f001 fa0d 	bl	80024fc <HAL_I2C_Mem_Read>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001fc 	.word	0x200001fc

080010f0 <BNO055_Init>:

HAL_StatusTypeDef BNO055_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;

    // Reset the BNO055
    ret = BNO055_WriteReg(BNO055_SYS_TRIGGER_REG, 0x20);
 80010f6:	2120      	movs	r1, #32
 80010f8:	203f      	movs	r0, #63	; 0x3f
 80010fa:	f7ff ffc1 	bl	8001080 <BNO055_WriteReg>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <BNO055_Init+0x1c>
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	e020      	b.n	800114e <BNO055_Init+0x5e>
    HAL_Delay(650); // Wait for the reset to complete
 800110c:	f240 208a 	movw	r0, #650	; 0x28a
 8001110:	f000 fcda 	bl	8001ac8 <HAL_Delay>

    // Set power mode to normal
    ret = BNO055_WriteReg(BNO055_PWR_MODE_REG, 0x00);
 8001114:	2100      	movs	r1, #0
 8001116:	203e      	movs	r0, #62	; 0x3e
 8001118:	f7ff ffb2 	bl	8001080 <BNO055_WriteReg>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <BNO055_Init+0x3a>
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	e011      	b.n	800114e <BNO055_Init+0x5e>
    HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f000 fccc 	bl	8001ac8 <HAL_Delay>

    // Set operation mode to NDOF
    ret = BNO055_WriteReg(BNO055_OPR_MODE_REG, BNO055_OPR_MODE_NDOF);
 8001130:	210c      	movs	r1, #12
 8001132:	203d      	movs	r0, #61	; 0x3d
 8001134:	f7ff ffa4 	bl	8001080 <BNO055_WriteReg>
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <BNO055_Init+0x56>
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	e003      	b.n	800114e <BNO055_Init+0x5e>
    HAL_Delay(20);
 8001146:	2014      	movs	r0, #20
 8001148:	f000 fcbe 	bl	8001ac8 <HAL_Delay>

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <BNO055_ReadQuaternion>:
//    *acc_z = (int16_t)((buffer[5] << 8) | buffer[4]);
//
//    return HAL_OK;
//}

HAL_StatusTypeDef BNO055_ReadQuaternion(Quaternion *quat) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[8];
    HAL_StatusTypeDef ret;

    ret = BNO055_ReadRegs(BNO055_QUATERNION_DATA_W, buffer, 8);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2208      	movs	r2, #8
 8001166:	4619      	mov	r1, r3
 8001168:	2020      	movs	r0, #32
 800116a:	f7ff ffa5 	bl	80010b8 <BNO055_ReadRegs>
 800116e:	4603      	mov	r3, r0
 8001170:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) return ret;
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <BNO055_ReadQuaternion+0x24>
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	e050      	b.n	800121e <BNO055_ReadQuaternion+0xc6>

    int16_t w_raw = (int16_t)((buffer[1] << 8) | buffer[0]);
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	83bb      	strh	r3, [r7, #28]
    int16_t x_raw = (int16_t)((buffer[3] << 8) | buffer[2]);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	837b      	strh	r3, [r7, #26]
    int16_t y_raw = (int16_t)((buffer[5] << 8) | buffer[4]);
 8001198:	7c7b      	ldrb	r3, [r7, #17]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7c3b      	ldrb	r3, [r7, #16]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	833b      	strh	r3, [r7, #24]
    int16_t z_raw = (int16_t)((buffer[7] << 8) | buffer[6]);
 80011a6:	7cfb      	ldrb	r3, [r7, #19]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7cbb      	ldrb	r3, [r7, #18]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	82fb      	strh	r3, [r7, #22]

    quat->w = w_raw / 16384.0f;  // 2^14 = 16384
 80011b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001228 <BNO055_ReadQuaternion+0xd0>
 80011c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edc3 7a00 	vstr	s15, [r3]
    quat->x = x_raw / 16384.0f;
 80011ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011da:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001228 <BNO055_ReadQuaternion+0xd0>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edc3 7a01 	vstr	s15, [r3, #4]
    quat->y = y_raw / 16384.0f;
 80011e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001228 <BNO055_ReadQuaternion+0xd0>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a02 	vstr	s15, [r3, #8]
    quat->z = z_raw / 16384.0f;
 8001202:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001228 <BNO055_ReadQuaternion+0xd0>
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edc3 7a03 	vstr	s15, [r3, #12]



    return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	46800000 	.word	0x46800000

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001230:	b0be      	sub	sp, #248	; 0xf8
 8001232:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fbcc 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f8be 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 f97e 	bl	800153c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001240:	f000 f90c 	bl	800145c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001244:	f000 f94a 	bl	80014dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char uart_buffer[100];
  /* Initialize BNO055 */
    if (BNO055_Init() != HAL_OK) {
 8001248:	f7ff ff52 	bl	80010f0 <BNO055_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01a      	beq.n	8001288 <main+0x5c>
        printf("BNO055 initialization failed\n");
 8001252:	4851      	ldr	r0, [pc, #324]	; (8001398 <main+0x16c>)
 8001254:	f005 f8dc 	bl	8006410 <puts>

        snprintf(uart_buffer, sizeof(uart_buffer),"BNO055 initialization failed\n");
 8001258:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <main+0x170>)
 800125e:	2164      	movs	r1, #100	; 0x64
 8001260:	4618      	mov	r0, r3
 8001262:	f005 f8e3 	bl	800642c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001266:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800126a:	4618      	mov	r0, r3
 800126c:	f7fe ffb0 	bl	80001d0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	4848      	ldr	r0, [pc, #288]	; (80013a0 <main+0x174>)
 800127e:	f003 f903 	bl	8004488 <HAL_UART_Transmit>
        return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e082      	b.n	800138e <main+0x162>
    }
//    printf("BNO055 initialized successfully\n");
      snprintf(uart_buffer, sizeof(uart_buffer),"BNO055 initialized successfully\n");
 8001288:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <main+0x178>)
 800128e:	2164      	movs	r1, #100	; 0x64
 8001290:	4618      	mov	r0, r3
 8001292:	f005 f8cb 	bl	800642c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001296:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ff98 	bl	80001d0 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	483c      	ldr	r0, [pc, #240]	; (80013a0 <main+0x174>)
 80012ae:	f003 f8eb 	bl	8004488 <HAL_UART_Transmit>
//	   }

	   // Buffer to hold formatted strings
	   char uart_buffer[100];

	   if (BNO055_ReadQuaternion(&quat) == HAL_OK) {
 80012b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff4e 	bl	8001158 <BNO055_ReadQuaternion>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d131      	bne.n	8001326 <main+0xfa>
		   //printf("Quaternion: W=%.4f, X=%.4f, Y=%.4f, Z=%.4f\n", quat.w, quat.x, quat.y, quat.z);

		   // Format the quaternion data into a string
//		   snprintf(uart_buffer, sizeof(uart_buffer), "Quaternion: W=%.4f, X=%.4f, Y=%.4f, Z=%.4f\r\n", quat.w, quat.x, quat.y, quat.z);
		   snprintf(uart_buffer, sizeof(uart_buffer), "%.4f,%.4f,%.4f,%.4f\r\n", quat.w, quat.x, quat.y, quat.z);
 80012c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f939 	bl	8000548 <__aeabi_f2d>
 80012d6:	4680      	mov	r8, r0
 80012d8:	4689      	mov	r9, r1
 80012da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4682      	mov	sl, r0
 80012e4:	468b      	mov	fp, r1
 80012e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f92d 	bl	8000548 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4638      	mov	r0, r7
 80012f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012f8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80012fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001300:	e9cd 4500 	strd	r4, r5, [sp]
 8001304:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <main+0x17c>)
 8001306:	2164      	movs	r1, #100	; 0x64
 8001308:	f005 f890 	bl	800642c <sniprintf>

		   // Transmit the formatted string over UART2
		   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800130c:	463b      	mov	r3, r7
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff5e 	bl	80001d0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	4639      	mov	r1, r7
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	4820      	ldr	r0, [pc, #128]	; (80013a0 <main+0x174>)
 8001320:	f003 f8b2 	bl	8004488 <HAL_UART_Transmit>
 8001324:	e011      	b.n	800134a <main+0x11e>

	   } else {
		   //printf("Failed to read quaternion data\n");

		   // Format the error message
		   snprintf(uart_buffer, sizeof(uart_buffer), "Failed to read quaternion data\r\n");
 8001326:	463b      	mov	r3, r7
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <main+0x180>)
 800132a:	2164      	movs	r1, #100	; 0x64
 800132c:	4618      	mov	r0, r3
 800132e:	f005 f87d 	bl	800642c <sniprintf>

		   // Transmit the error message over UART2
		   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001332:	463b      	mov	r3, r7
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff4b 	bl	80001d0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	4639      	mov	r1, r7
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	4816      	ldr	r0, [pc, #88]	; (80013a0 <main+0x174>)
 8001346:	f003 f89f 	bl	8004488 <HAL_UART_Transmit>
	   }

	   if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 800134a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <main+0x184>)
 8001350:	f000 ff18 	bl	8002184 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d114      	bne.n	8001384 <main+0x158>
	   {

		   //printf("BUTTON_PRESSED\n");

		   // Format the button press message
		   snprintf(uart_buffer, sizeof(uart_buffer), "BUTTON_PRESSED\r\n");
 800135a:	463b      	mov	r3, r7
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <main+0x188>)
 800135e:	2164      	movs	r1, #100	; 0x64
 8001360:	4618      	mov	r0, r3
 8001362:	f005 f863 	bl	800642c <sniprintf>
		   // Transmit the button press message over UART2
		   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001366:	463b      	mov	r3, r7
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff31 	bl	80001d0 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	4639      	mov	r1, r7
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <main+0x174>)
 800137a:	f003 f885 	bl	8004488 <HAL_UART_Transmit>

		   HAL_Delay(10); // Debounce delay
 800137e:	200a      	movs	r0, #10
 8001380:	f000 fba2 	bl	8001ac8 <HAL_Delay>
	   }

	   HAL_Delay(500);
 8001384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001388:	f000 fb9e 	bl	8001ac8 <HAL_Delay>
  {
 800138c:	e791      	b.n	80012b2 <main+0x86>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800138e:	4618      	mov	r0, r3
 8001390:	37d8      	adds	r7, #216	; 0xd8
 8001392:	46bd      	mov	sp, r7
 8001394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001398:	0800a088 	.word	0x0800a088
 800139c:	0800a0a8 	.word	0x0800a0a8
 80013a0:	20000250 	.word	0x20000250
 80013a4:	0800a0c8 	.word	0x0800a0c8
 80013a8:	0800a0ec 	.word	0x0800a0ec
 80013ac:	0800a104 	.word	0x0800a104
 80013b0:	48000800 	.word	0x48000800
 80013b4:	0800a128 	.word	0x0800a128

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2244      	movs	r2, #68	; 0x44
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 f932 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013de:	f001 fcf3 	bl	8002dc8 <HAL_PWREx_ControlVoltageScaling>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e8:	f000 f8ec 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ec:	2302      	movs	r3, #2
 80013ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f6:	2310      	movs	r3, #16
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013fe:	2302      	movs	r3, #2
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001406:	230a      	movs	r3, #10
 8001408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800140a:	2307      	movs	r3, #7
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fd2a 	bl	8002e74 <HAL_RCC_OscConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001426:	f000 f8cd 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2303      	movs	r3, #3
 8001430:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	2104      	movs	r1, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f8f2 	bl	800362c <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144e:	f000 f8b9 	bl	80015c4 <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	3758      	adds	r7, #88	; 0x58
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_I2C1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_I2C1_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001498:	f000 fe8c 	bl	80021b4 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 f88f 	bl	80015c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_I2C1_Init+0x74>)
 80014aa:	f001 fbe7 	bl	8002c7c <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 f886 	bl	80015c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C1_Init+0x74>)
 80014bc:	f001 fc29 	bl	8002d12 <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f87d 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	40005400 	.word	0x40005400
 80014d8:	10909cec 	.word	0x10909cec

080014dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART2_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART2_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x58>)
 8001520:	f002 ff64 	bl	80043ec <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f84b 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000250 	.word	0x20000250
 8001538:	40004400 	.word	0x40004400

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_GPIO_Init+0x80>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <MX_GPIO_Init+0x80>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_GPIO_Init+0x80>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_GPIO_Init+0x80>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_GPIO_Init+0x80>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_GPIO_Init+0x80>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_GPIO_Init+0x80>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <MX_GPIO_Init+0x80>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_GPIO_Init+0x80>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_GPIO_Init+0x84>)
 80015b0:	f000 fc3e 	bl	8001e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	48000800 	.word	0x48000800

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x8>
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x44>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6613      	str	r3, [r2, #96]	; 0x60
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x44>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_MspInit+0x44>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ac      	sub	sp, #176	; 0xb0
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2288      	movs	r2, #136	; 0x88
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fff9 	bl	8005630 <memset>
  if(hi2c->Instance==I2C1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_I2C_MspInit+0xb0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d13b      	bne.n	80016c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800164c:	2300      	movs	r3, #0
 800164e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fa0d 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001660:	f7ff ffb0 	bl	80015c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a18      	ldr	r2, [pc, #96]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800167c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001696:	2304      	movs	r3, #4
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016a0:	4619      	mov	r1, r3
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_I2C_MspInit+0xb8>)
 80016a4:	f000 fbc4 	bl	8001e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 80016ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_I2C_MspInit+0xb4>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	37b0      	adds	r7, #176	; 0xb0
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0ac      	sub	sp, #176	; 0xb0
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2288      	movs	r2, #136	; 0x88
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 ff9b 	bl	8005630 <memset>
  if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_UART_MspInit+0xc0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d143      	bne.n	800178c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001704:	2302      	movs	r3, #2
 8001706:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4618      	mov	r0, r3
 8001712:	f002 f9af 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800171c:	f7ff ff52 	bl	80015c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_UART_MspInit+0xc4>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_UART_MspInit+0xc4>)
 8001726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_UART_MspInit+0xc4>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_MspInit+0xc4>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4a16      	ldr	r2, [pc, #88]	; (8001798 <HAL_UART_MspInit+0xc4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_MspInit+0xc4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001750:	230c      	movs	r3, #12
 8001752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001768:	2307      	movs	r3, #7
 800176a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f000 fb5a 	bl	8001e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2026      	movs	r0, #38	; 0x26
 8001782:	f000 faa0 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001786:	2026      	movs	r0, #38	; 0x26
 8001788:	f000 fab9 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	37b0      	adds	r7, #176	; 0xb0
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	40021000 	.word	0x40021000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f94e 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART2_IRQHandler+0x10>)
 80017f6:	f002 fedb 	bl	80045b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000250 	.word	0x20000250

08001804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_kill>:

int _kill(int pid, int sig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181e:	f003 fedd 	bl	80055dc <__errno>
 8001822:	4603      	mov	r3, r0
 8001824:	2216      	movs	r2, #22
 8001826:	601a      	str	r2, [r3, #0]
  return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_exit>:

void _exit (int status)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ffe7 	bl	8001814 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001846:	e7fe      	b.n	8001846 <_exit+0x12>

08001848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
  }

  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f003 fe5e 	bl	80055dc <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	200002d4 	.word	0x200002d4
 8001954:	200002f0 	.word	0x200002f0

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001980:	f7ff ffea 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LoopForever+0xe>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <LoopForever+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f003 fe1d 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ae:	f7ff fc3d 	bl	800122c <main>

080019b2 <LoopForever>:

LoopForever:
    b LoopForever
 80019b2:	e7fe      	b.n	80019b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c0:	0800a644 	.word	0x0800a644
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c8:	200002ec 	.word	0x200002ec

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_Init+0x3c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_Init+0x3c>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f000 f962 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f80f 	bl	8001a10 <HAL_InitTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e001      	b.n	8001a02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fe:	f7ff fde7 	bl	80015d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d023      	beq.n	8001a6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_InitTick+0x70>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_InitTick+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f96d 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d809      	bhi.n	8001a60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f937 	bl	8001cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_InitTick+0x74>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e004      	b.n	8001a70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e001      	b.n	8001a70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	200002d8 	.word	0x200002d8

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200002d8 	.word	0x200002d8

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d008      	beq.n	8001d5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e022      	b.n	8001da2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 020e 	bic.w	r2, r2, #14
 8001d6a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f003 021c 	and.w	r2, r3, #28
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d005      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e029      	b.n	8001e26 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 020e 	bic.w	r2, r2, #14
 8001de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f003 021c 	and.w	r2, r3, #28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    }
  }
  return status;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3e:	e17f      	b.n	8002140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8171 	beq.w	800213a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d005      	beq.n	8001e70 <HAL_GPIO_Init+0x40>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d130      	bne.n	8001ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 0201 	and.w	r2, r3, #1
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d118      	bne.n	8001f10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d017      	beq.n	8001f4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	6939      	ldr	r1, [r7, #16]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80ac 	beq.w	800213a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_GPIO_Init+0x330>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	; (8002160 <HAL_GPIO_Init+0x330>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6613      	str	r3, [r2, #96]	; 0x60
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_GPIO_Init+0x330>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	; (8002164 <HAL_GPIO_Init+0x334>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002024:	d025      	beq.n	8002072 <HAL_GPIO_Init+0x242>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4f      	ldr	r2, [pc, #316]	; (8002168 <HAL_GPIO_Init+0x338>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <HAL_GPIO_Init+0x23e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4e      	ldr	r2, [pc, #312]	; (800216c <HAL_GPIO_Init+0x33c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x23a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_GPIO_Init+0x340>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x236>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_GPIO_Init+0x344>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x232>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_GPIO_Init+0x348>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x22e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4a      	ldr	r2, [pc, #296]	; (800217c <HAL_GPIO_Init+0x34c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x22a>
 8002056:	2306      	movs	r3, #6
 8002058:	e00c      	b.n	8002074 <HAL_GPIO_Init+0x244>
 800205a:	2307      	movs	r3, #7
 800205c:	e00a      	b.n	8002074 <HAL_GPIO_Init+0x244>
 800205e:	2305      	movs	r3, #5
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x244>
 8002062:	2304      	movs	r3, #4
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x244>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x244>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x244>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x244>
 8002072:	2300      	movs	r3, #0
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002084:	4937      	ldr	r1, [pc, #220]	; (8002164 <HAL_GPIO_Init+0x334>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_GPIO_Init+0x350>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b6:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_GPIO_Init+0x350>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020bc:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_GPIO_Init+0x350>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e0:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_GPIO_Init+0x350>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_GPIO_Init+0x350>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_GPIO_Init+0x350>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_GPIO_Init+0x350>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_GPIO_Init+0x350>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	f47f ae78 	bne.w	8001e40 <HAL_GPIO_Init+0x10>
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800
 8002170:	48000c00 	.word	0x48000c00
 8002174:	48001000 	.word	0x48001000
 8002178:	48001400 	.word	0x48001400
 800217c:	48001800 	.word	0x48001800
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e081      	b.n	80022ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fa1c 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e006      	b.n	800223c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800223a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d104      	bne.n	800224e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800224c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	f040 80f9 	bne.w	80024ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_I2C_Mem_Write+0x34>
 8002302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0ed      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Mem_Write+0x4e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0e6      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800232a:	f7ff fbc1 	bl	8001ab0 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fac3 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d1      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2221      	movs	r2, #33	; 0x21
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002374:	88f8      	ldrh	r0, [r7, #6]
 8002376:	893a      	ldrh	r2, [r7, #8]
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4603      	mov	r3, r0
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f9d3 	bl	8002730 <I2C_RequestMemoryWrite>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0a9      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d90e      	bls.n	80023c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fc2b 	bl	8002c18 <I2C_TransferConfig>
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fc1a 	bl	8002c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 faad 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e07b      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d034      	beq.n	800249c <HAL_I2C_Mem_Write+0x1c8>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d130      	bne.n	800249c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2200      	movs	r2, #0
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fa3f 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e04d      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2bff      	cmp	r3, #255	; 0xff
 800245c:	d90e      	bls.n	800247c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	22ff      	movs	r2, #255	; 0xff
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	b2da      	uxtb	r2, r3
 800246a:	8979      	ldrh	r1, [r7, #10]
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fbcf 	bl	8002c18 <I2C_TransferConfig>
 800247a:	e00f      	b.n	800249c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	b2da      	uxtb	r2, r3
 800248c:	8979      	ldrh	r1, [r7, #10]
 800248e:	2300      	movs	r3, #0
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fbbe 	bl	8002c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d19e      	bne.n	80023e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fa8c 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01a      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2220      	movs	r2, #32
 80024c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_I2C_Mem_Write+0x224>)
 80024ce:	400b      	ands	r3, r1
 80024d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	fe00e800 	.word	0xfe00e800

080024fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	f040 80fd 	bne.w	800271e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_I2C_Mem_Read+0x34>
 800252a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0f1      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_I2C_Mem_Read+0x4e>
 8002546:	2302      	movs	r3, #2
 8002548:	e0ea      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002552:	f7ff faad 	bl	8001ab0 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2319      	movs	r3, #25
 800255e:	2201      	movs	r2, #1
 8002560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f9af 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0d5      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2222      	movs	r2, #34	; 0x22
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800259c:	88f8      	ldrh	r0, [r7, #6]
 800259e:	893a      	ldrh	r2, [r7, #8]
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4603      	mov	r3, r0
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f913 	bl	80027d8 <I2C_RequestMemoryRead>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0ad      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d90e      	bls.n	80025ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	8979      	ldrh	r1, [r7, #10]
 80025dc:	4b52      	ldr	r3, [pc, #328]	; (8002728 <HAL_I2C_Mem_Read+0x22c>)
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fb17 	bl	8002c18 <I2C_TransferConfig>
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	8979      	ldrh	r1, [r7, #10]
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_I2C_Mem_Read+0x22c>)
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fb06 	bl	8002c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2200      	movs	r2, #0
 8002614:	2104      	movs	r1, #4
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f956 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07c      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d034      	beq.n	80026cc <HAL_I2C_Mem_Read+0x1d0>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d130      	bne.n	80026cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	2200      	movs	r2, #0
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f927 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e04d      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2bff      	cmp	r3, #255	; 0xff
 800268c:	d90e      	bls.n	80026ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	b2da      	uxtb	r2, r3
 800269a:	8979      	ldrh	r1, [r7, #10]
 800269c:	2300      	movs	r3, #0
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fab7 	bl	8002c18 <I2C_TransferConfig>
 80026aa:	e00f      	b.n	80026cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	8979      	ldrh	r1, [r7, #10]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 faa6 	bl	8002c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d19a      	bne.n	800260c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f974 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e01a      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_I2C_Mem_Read+0x230>)
 80026fe:	400b      	ands	r3, r1
 8002700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	80002400 	.word	0x80002400
 800272c:	fe00e800 	.word	0xfe00e800

08002730 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	817b      	strh	r3, [r7, #10]
 8002742:	460b      	mov	r3, r1
 8002744:	813b      	strh	r3, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <I2C_RequestMemoryWrite+0xa4>)
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa5d 	bl	8002c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8f0 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e02c      	b.n	80027cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002778:	893b      	ldrh	r3, [r7, #8]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
 8002782:	e015      	b.n	80027b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b29b      	uxth	r3, r3
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f8d6 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e012      	b.n	80027cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027a6:	893b      	ldrh	r3, [r7, #8]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f884 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	80002000 	.word	0x80002000

080027d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <I2C_RequestMemoryRead+0xa4>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa0a 	bl	8002c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f89d 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e02c      	b.n	8002872 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281e:	893b      	ldrh	r3, [r7, #8]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
 8002828:	e015      	b.n	8002856 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800282a:	893b      	ldrh	r3, [r7, #8]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29b      	uxth	r3, r3
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f883 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e012      	b.n	8002872 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284c:	893b      	ldrh	r3, [r7, #8]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2200      	movs	r2, #0
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f831 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	80002000 	.word	0x80002000

08002880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d103      	bne.n	800289e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d007      	beq.n	80028bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	619a      	str	r2, [r3, #24]
  }
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d8:	e022      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d01e      	beq.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e2:	f7ff f8e5 	bl	8001ab0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d113      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00f      	b.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	429a      	cmp	r2, r3
 800293c:	d0cd      	beq.n	80028da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002954:	e02c      	b.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f870 	bl	8002a40 <I2C_IsErrorOccurred>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02a      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d01e      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7ff f89d 	bl	8001ab0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d1cb      	bne.n	8002956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d4:	e028      	b.n	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f830 	bl	8002a40 <I2C_IsErrorOccurred>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e026      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7ff f861 	bl	8001ab0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d113      	bne.n	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d1cf      	bne.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d075      	beq.n	8002b58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2210      	movs	r2, #16
 8002a72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a74:	e056      	b.n	8002b24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d052      	beq.n	8002b24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f817 	bl	8001ab0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_IsErrorOccurred+0x54>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d147      	bne.n	8002b24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab6:	d12e      	bne.n	8002b16 <I2C_IsErrorOccurred+0xd6>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abe:	d02a      	beq.n	8002b16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d027      	beq.n	8002b16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ad6:	f7fe ffeb 	bl	8001ab0 <HAL_GetTick>
 8002ada:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e01b      	b.n	8002b16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ade:	f7fe ffe7 	bl	8001ab0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b19      	cmp	r3, #25
 8002aea:	d914      	bls.n	8002b16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d1dc      	bne.n	8002ade <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d003      	beq.n	8002b3a <I2C_IsErrorOccurred+0xfa>
 8002b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d09d      	beq.n	8002a76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2220      	movs	r2, #32
 8002b48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01c      	beq.n	8002c08 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff fe56 	bl	8002880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <I2C_IsErrorOccurred+0x1d4>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	4613      	mov	r3, r2
 8002c28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c30:	7a7b      	ldrb	r3, [r7, #9]
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	0d5b      	lsrs	r3, r3, #21
 8002c52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <I2C_TransferConfig+0x60>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	ea02 0103 	and.w	r1, r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	03ff63ff 	.word	0x03ff63ff

08002c7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d138      	bne.n	8002d04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e032      	b.n	8002d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	; 0x24
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d139      	bne.n	8002d9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e033      	b.n	8002d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2224      	movs	r2, #36	; 0x24
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd6:	d130      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d038      	beq.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2232      	movs	r2, #50	; 0x32
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0c:	e002      	b.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e20:	d102      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f2      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d110      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e00f      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d007      	beq.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	431bde83 	.word	0x431bde83

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e3ca      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e86:	4b97      	ldr	r3, [pc, #604]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e90:	4b94      	ldr	r3, [pc, #592]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80e4 	beq.w	8003070 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4a>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	f040 808b 	bne.w	8002fcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 8087 	bne.w	8002fcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3a2      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x7c>
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eee:	e005      	b.n	8002efc <HAL_RCC_OscConfig+0x88>
 8002ef0:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d223      	bcs.n	8002f48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd55 	bl	80039b4 <RCC_SetFlashLatencyFromMSIRange>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e383      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f14:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f043 0308 	orr.w	r3, r3, #8
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	496d      	ldr	r1, [pc, #436]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	4968      	ldr	r1, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 8002f46:	e025      	b.n	8002f94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	f043 0308 	orr.w	r3, r3, #8
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4960      	ldr	r1, [pc, #384]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	495b      	ldr	r1, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fd15 	bl	80039b4 <RCC_SetFlashLatencyFromMSIRange>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e343      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f94:	f000 fc4a 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	4950      	ldr	r1, [pc, #320]	; (80030e8 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <HAL_RCC_OscConfig+0x278>)
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fb4:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fd29 	bl	8001a10 <HAL_InitTick>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d052      	beq.n	800306e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	e327      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d032      	beq.n	800303a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a42      	ldr	r2, [pc, #264]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fd66 	bl	8001ab0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fd62 	bl	8001ab0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e310      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 800300c:	f043 0308 	orr.w	r3, r3, #8
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4931      	ldr	r1, [pc, #196]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	492c      	ldr	r1, [pc, #176]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e01a      	b.n	8003070 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003046:	f7fe fd33 	bl	8001ab0 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304e:	f7fe fd2f 	bl	8001ab0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e2dd      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x1da>
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d074      	beq.n	8003166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b08      	cmp	r3, #8
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x21a>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d10e      	bne.n	80030a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d10b      	bne.n	80030a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d064      	beq.n	8003164 <HAL_RCC_OscConfig+0x2f0>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d160      	bne.n	8003164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e2ba      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x24a>
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e026      	b.n	800310c <HAL_RCC_OscConfig+0x298>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_OscConfig+0x280>
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a02      	ldr	r2, [pc, #8]	; (80030e4 <HAL_RCC_OscConfig+0x270>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e014      	b.n	800310c <HAL_RCC_OscConfig+0x298>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	0800a13c 	.word	0x0800a13c
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000004 	.word	0x20000004
 80030f4:	4ba0      	ldr	r3, [pc, #640]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a9f      	ldr	r2, [pc, #636]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b9d      	ldr	r3, [pc, #628]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a9c      	ldr	r2, [pc, #624]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fccc 	bl	8001ab0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fcc8 	bl	8001ab0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e276      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312e:	4b92      	ldr	r3, [pc, #584]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x2a8>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fcb8 	bl	8001ab0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fcb4 	bl	8001ab0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e262      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d0>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d060      	beq.n	8003234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x310>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d119      	bne.n	80031b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d116      	bne.n	80031b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003184:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_OscConfig+0x328>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e23f      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	4973      	ldr	r1, [pc, #460]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b0:	e040      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d023      	beq.n	8003202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fc73 	bl	8001ab0 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe fc6f 	bl	8001ab0 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e21d      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e0:	4b65      	ldr	r3, [pc, #404]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b62      	ldr	r3, [pc, #392]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	495f      	ldr	r1, [pc, #380]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e018      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a5c      	ldr	r2, [pc, #368]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fc4f 	bl	8001ab0 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe fc4b 	bl	8001ab0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1f9      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03c      	beq.n	80032ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	4a4a      	ldr	r2, [pc, #296]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fc2a 	bl	8001ab0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe fc26 	bl	8001ab0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1d4      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <HAL_RCC_OscConfig+0x3ec>
 8003280:	e01b      	b.n	80032ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003288:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe fc0d 	bl	8001ab0 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329a:	f7fe fc09 	bl	8001ab0 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1b7      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ac:	4b32      	ldr	r3, [pc, #200]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ef      	bne.n	800329a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a6 	beq.w	8003414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f0:	2301      	movs	r3, #1
 80032f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x508>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d118      	bne.n	8003332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003300:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_RCC_OscConfig+0x508>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x508>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330c:	f7fe fbd0 	bl	8001ab0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fe fbcc 	bl	8001ab0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e17a      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_RCC_OscConfig+0x508>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <HAL_RCC_OscConfig+0x4d8>
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800334a:	e029      	b.n	80033a0 <HAL_RCC_OscConfig+0x52c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d115      	bne.n	8003380 <HAL_RCC_OscConfig+0x50c>
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a03      	ldr	r2, [pc, #12]	; (8003378 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x52c>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	40007000 	.word	0x40007000
 8003380:	4b9c      	ldr	r3, [pc, #624]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a9b      	ldr	r2, [pc, #620]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003390:	4b98      	ldr	r3, [pc, #608]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	4a97      	ldr	r2, [pc, #604]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d016      	beq.n	80033d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe fb82 	bl	8001ab0 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe fb7e 	bl	8001ab0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e12a      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ed      	beq.n	80033b0 <HAL_RCC_OscConfig+0x53c>
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fb6b 	bl	8001ab0 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fb67 	bl	8001ab0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e113      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f4:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ed      	bne.n	80033de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003402:	7ffb      	ldrb	r3, [r7, #31]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a79      	ldr	r2, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80fe 	beq.w	800361a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	2b02      	cmp	r3, #2
 8003424:	f040 80d0 	bne.w	80035c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003428:	4b72      	ldr	r3, [pc, #456]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	429a      	cmp	r2, r3
 800343a:	d130      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	3b01      	subs	r3, #1
 8003448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d127      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d11f      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003468:	2a07      	cmp	r2, #7
 800346a:	bf14      	ite	ne
 800346c:	2201      	movne	r2, #1
 800346e:	2200      	moveq	r2, #0
 8003470:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003472:	4293      	cmp	r3, r2
 8003474:	d113      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d109      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d06e      	beq.n	800357c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d069      	beq.n	8003578 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0ad      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c0:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034cc:	f7fe faf0 	bl	8001ab0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe faec 	bl	8001ab0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e09a      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e6:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f2:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <HAL_RCC_OscConfig+0x784>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003502:	3a01      	subs	r2, #1
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350c:	0212      	lsls	r2, r2, #8
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003514:	0852      	lsrs	r2, r2, #1
 8003516:	3a01      	subs	r2, #1
 8003518:	0552      	lsls	r2, r2, #21
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0652      	lsls	r2, r2, #25
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352c:	0912      	lsrs	r2, r2, #4
 800352e:	0452      	lsls	r2, r2, #17
 8003530:	430a      	orrs	r2, r1
 8003532:	4930      	ldr	r1, [pc, #192]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fe faae 	bl	8001ab0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe faaa 	bl	8001ab0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e058      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e050      	b.n	800361a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e04f      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d148      	bne.n	800361a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a0:	f7fe fa86 	bl	8001ab0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fa82 	bl	8001ab0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e030      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x734>
 80035c6:	e028      	b.n	800361a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d023      	beq.n	8003616 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCC_OscConfig+0x780>)
 80035d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe fa69 	bl	8001ab0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	e00c      	b.n	80035fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fa65 	bl	8001ab0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d905      	bls.n	80035fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e013      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x7b0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ec      	bne.n	80035e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x7b0>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4905      	ldr	r1, [pc, #20]	; (8003624 <HAL_RCC_OscConfig+0x7b0>)
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_OscConfig+0x7b4>)
 8003610:	4013      	ands	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e001      	b.n	800361a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	feeefffc 	.word	0xfeeefffc

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0e7      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b75      	ldr	r3, [pc, #468]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b72      	ldr	r3, [pc, #456]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	4970      	ldr	r1, [pc, #448]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b6e      	ldr	r3, [pc, #440]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cf      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b63      	ldr	r3, [pc, #396]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4960      	ldr	r1, [pc, #384]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04c      	beq.n	8003744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b5a      	ldr	r3, [pc, #360]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a6      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	4b54      	ldr	r3, [pc, #336]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e09a      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	4b4e      	ldr	r3, [pc, #312]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e08e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e086      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4943      	ldr	r1, [pc, #268]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fe f9cc 	bl	8001ab0 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe f9c8 	bl	8001ab0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	429a      	cmp	r2, r3
 800375e:	d208      	bcs.n	8003772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	492b      	ldr	r1, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d210      	bcs.n	80037a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4923      	ldr	r1, [pc, #140]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e036      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4918      	ldr	r1, [pc, #96]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4910      	ldr	r1, [pc, #64]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e0:	f000 f824 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	490b      	ldr	r1, [pc, #44]	; (8003820 <HAL_RCC_ClockConfig+0x1f4>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_ClockConfig+0x1fc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe f903 	bl	8001a10 <HAL_InitTick>
 800380a:	4603      	mov	r3, r0
 800380c:	72fb      	strb	r3, [r7, #11]

  return status;
 800380e:	7afb      	ldrb	r3, [r7, #11]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40022000 	.word	0x40022000
 800381c:	40021000 	.word	0x40021000
 8003820:	0800a13c 	.word	0x0800a13c
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x34>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d121      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11e      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003860:	4b34      	ldr	r3, [pc, #208]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e004      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b0:	4b23      	ldr	r3, [pc, #140]	; (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d134      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d003      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0xac>
 80038d0:	e005      	b.n	80038de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038da:	617b      	str	r3, [r7, #20]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	617b      	str	r3, [r7, #20]
      break;
 80038e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	0e5b      	lsrs	r3, r3, #25
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	3301      	adds	r3, #1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	0800a154 	.word	0x0800a154
 800393c:	00f42400 	.word	0x00f42400
 8003940:	007a1200 	.word	0x007a1200

08003944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	0800a14c 	.word	0x0800a14c

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800398c:	f7ff ffda 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0adb      	lsrs	r3, r3, #11
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	0800a14c 	.word	0x0800a14c

080039b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039cc:	f7ff f9ee 	bl	8002dac <HAL_PWREx_GetVoltageRange>
 80039d0:	6178      	str	r0, [r7, #20]
 80039d2:	e014      	b.n	80039fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	; 0x58
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039ec:	f7ff f9de 	bl	8002dac <HAL_PWREx_GetVoltageRange>
 80039f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a04:	d10b      	bne.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d919      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a10:	d902      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a12:	2302      	movs	r3, #2
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e013      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a18:	2301      	movs	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	e010      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d902      	bls.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a24:	2303      	movs	r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e00a      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d102      	bne.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a30:	2302      	movs	r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e004      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d101      	bne.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 0207 	bic.w	r2, r3, #7
 8003a48:	4909      	ldr	r1, [pc, #36]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a80:	2300      	movs	r3, #0
 8003a82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d041      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a98:	d02a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a9e:	d824      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aaa:	d81e      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab4:	d010      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ab6:	e018      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ab8:	4b86      	ldr	r3, [pc, #536]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a85      	ldr	r2, [pc, #532]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac4:	e015      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fabb 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad6:	e00c      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3320      	adds	r3, #32
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fba6 	bl	8004230 <RCCEx_PLLSAI2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	74fb      	strb	r3, [r7, #19]
      break;
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b06:	4973      	ldr	r1, [pc, #460]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b0e:	e001      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d041      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b28:	d02a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b2e:	d824      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3a:	d81e      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b44:	d010      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b46:	e018      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b48:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a61      	ldr	r2, [pc, #388]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b54:	e015      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa73 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b66:	e00c      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3320      	adds	r3, #32
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fb5e 	bl	8004230 <RCCEx_PLLSAI2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b88:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b96:	494f      	ldr	r1, [pc, #316]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b9e:	e001      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a0 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	4a40      	ldr	r2, [pc, #256]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd ff5c 	bl	8001ab0 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfc:	f7fd ff58 	bl	8001ab0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d902      	bls.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c10:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ef      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d15c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01f      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d019      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c6c:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fd ff17 	bl	8001ab0 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	e00b      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd ff13 	bl	8001ab0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d902      	bls.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c9c:	e006      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ec      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	4904      	ldr	r1, [pc, #16]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cca:	e009      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce0:	7c7b      	ldrb	r3, [r7, #17]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4b9e      	ldr	r3, [pc, #632]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	4a9d      	ldr	r2, [pc, #628]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cfe:	4b98      	ldr	r3, [pc, #608]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 0203 	bic.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	4994      	ldr	r1, [pc, #592]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d20:	4b8f      	ldr	r3, [pc, #572]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 020c 	bic.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	498c      	ldr	r1, [pc, #560]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d42:	4b87      	ldr	r3, [pc, #540]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4983      	ldr	r1, [pc, #524]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	497b      	ldr	r1, [pc, #492]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d86:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d94:	4972      	ldr	r1, [pc, #456]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	496a      	ldr	r1, [pc, #424]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dca:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	4961      	ldr	r1, [pc, #388]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dec:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	4959      	ldr	r1, [pc, #356]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	4950      	ldr	r1, [pc, #320]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e30:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	4948      	ldr	r1, [pc, #288]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e52:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	493f      	ldr	r1, [pc, #252]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d028      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e74:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	4937      	ldr	r1, [pc, #220]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a31      	ldr	r2, [pc, #196]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
 8003ea0:	e011      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f8c8 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	491f      	ldr	r1, [pc, #124]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4a1a      	ldr	r2, [pc, #104]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	60d3      	str	r3, [r2, #12]
 8003efe:	e011      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f899 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d02b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	4908      	ldr	r1, [pc, #32]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
 8003f5c:	e014      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f867 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	4928      	ldr	r1, [pc, #160]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2102      	movs	r1, #2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f844 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d014      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
 8003fce:	e011      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3320      	adds	r3, #32
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f925 	bl	8004230 <RCCEx_PLLSAI2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400e:	490d      	ldr	r1, [pc, #52]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	4904      	ldr	r1, [pc, #16]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800403a:	7cbb      	ldrb	r3, [r7, #18]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000

08004048 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004056:	4b75      	ldr	r3, [pc, #468]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004062:	4b72      	ldr	r3, [pc, #456]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0203 	and.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d10d      	bne.n	800408e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
       ||
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800407a:	4b6c      	ldr	r3, [pc, #432]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
       ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d047      	beq.n	800411e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
 8004092:	e044      	b.n	800411e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d018      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x86>
 800409c:	2b03      	cmp	r3, #3
 800409e:	d825      	bhi.n	80040ec <RCCEx_PLLSAI1_Config+0xa4>
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d002      	beq.n	80040aa <RCCEx_PLLSAI1_Config+0x62>
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d009      	beq.n	80040bc <RCCEx_PLLSAI1_Config+0x74>
 80040a8:	e020      	b.n	80040ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040aa:	4b60      	ldr	r3, [pc, #384]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11d      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ba:	e01a      	b.n	80040f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040bc:	4b5b      	ldr	r3, [pc, #364]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d116      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040cc:	e013      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ce:	4b57      	ldr	r3, [pc, #348]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040da:	4b54      	ldr	r3, [pc, #336]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040ea:	e006      	b.n	80040fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      break;
 80040f0:	e004      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	430b      	orrs	r3, r1
 8004118:	4944      	ldr	r1, [pc, #272]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d17d      	bne.n	8004220 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a40      	ldr	r2, [pc, #256]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800412e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004130:	f7fd fcbe 	bl	8001ab0 <HAL_GetTick>
 8004134:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004136:	e009      	b.n	800414c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004138:	f7fd fcba 	bl	8001ab0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d902      	bls.n	800414c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	73fb      	strb	r3, [r7, #15]
        break;
 800414a:	e005      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800414c:	4b37      	ldr	r3, [pc, #220]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ef      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d160      	bne.n	8004220 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d111      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6892      	ldr	r2, [r2, #8]
 8004174:	0211      	lsls	r1, r2, #8
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	0912      	lsrs	r2, r2, #4
 800417c:	0452      	lsls	r2, r2, #17
 800417e:	430a      	orrs	r2, r1
 8004180:	492a      	ldr	r1, [pc, #168]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]
 8004186:	e027      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d112      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004196:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6892      	ldr	r2, [r2, #8]
 800419e:	0211      	lsls	r1, r2, #8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6912      	ldr	r2, [r2, #16]
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	0552      	lsls	r2, r2, #21
 80041aa:	430a      	orrs	r2, r1
 80041ac:	491f      	ldr	r1, [pc, #124]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
 80041b2:	e011      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6952      	ldr	r2, [r2, #20]
 80041ca:	0852      	lsrs	r2, r2, #1
 80041cc:	3a01      	subs	r2, #1
 80041ce:	0652      	lsls	r2, r2, #25
 80041d0:	430a      	orrs	r2, r1
 80041d2:	4916      	ldr	r1, [pc, #88]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a13      	ldr	r2, [pc, #76]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fc64 	bl	8001ab0 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ea:	e009      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ec:	f7fd fc60 	bl	8001ab0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	73fb      	strb	r3, [r7, #15]
          break;
 80041fe:	e005      	b.n	800420c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	4904      	ldr	r1, [pc, #16]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423e:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d018      	beq.n	800427c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800424a:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0203 	and.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d10d      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
       ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
       ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d047      	beq.n	8004306 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e044      	b.n	8004306 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d018      	beq.n	80042b6 <RCCEx_PLLSAI2_Config+0x86>
 8004284:	2b03      	cmp	r3, #3
 8004286:	d825      	bhi.n	80042d4 <RCCEx_PLLSAI2_Config+0xa4>
 8004288:	2b01      	cmp	r3, #1
 800428a:	d002      	beq.n	8004292 <RCCEx_PLLSAI2_Config+0x62>
 800428c:	2b02      	cmp	r3, #2
 800428e:	d009      	beq.n	80042a4 <RCCEx_PLLSAI2_Config+0x74>
 8004290:	e020      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004292:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11d      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a2:	e01a      	b.n	80042da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a4:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e013      	b.n	80042de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042b6:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042d2:	e006      	b.n	80042e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e004      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ea:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	430b      	orrs	r3, r1
 8004300:	4939      	ldr	r1, [pc, #228]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d167      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800430c:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a35      	ldr	r2, [pc, #212]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fd fbca 	bl	8001ab0 <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800431e:	e009      	b.n	8004334 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004320:	f7fd fbc6 	bl	8001ab0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d902      	bls.n	8004334 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	73fb      	strb	r3, [r7, #15]
        break;
 8004332:	e005      	b.n	8004340 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004334:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ef      	bne.n	8004320 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d14a      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d111      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6892      	ldr	r2, [r2, #8]
 800435c:	0211      	lsls	r1, r2, #8
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	0912      	lsrs	r2, r2, #4
 8004364:	0452      	lsls	r2, r2, #17
 8004366:	430a      	orrs	r2, r1
 8004368:	491f      	ldr	r1, [pc, #124]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	614b      	str	r3, [r1, #20]
 800436e:	e011      	b.n	8004394 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	0211      	lsls	r1, r2, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6912      	ldr	r2, [r2, #16]
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0652      	lsls	r2, r2, #25
 800438c:	430a      	orrs	r2, r1
 800438e:	4916      	ldr	r1, [pc, #88]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fd fb86 	bl	8001ab0 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043a6:	e009      	b.n	80043bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043a8:	f7fd fb82 	bl	8001ab0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d902      	bls.n	80043bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ba:	e005      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ef      	beq.n	80043a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4904      	ldr	r1, [pc, #16]	; (80043e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e040      	b.n	8004480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f960 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fbc2 	bl	8004bb4 <UART_SetConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fe6e 	bl	8005124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fef5 	bl	8005268 <UART_CheckIdleState>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449c:	2b20      	cmp	r3, #32
 800449e:	f040 8082 	bne.w	80045a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x26>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07a      	b.n	80045a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Transmit+0x38>
 80044bc:	2302      	movs	r3, #2
 80044be:	e073      	b.n	80045a8 <HAL_UART_Transmit+0x120>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2221      	movs	r2, #33	; 0x21
 80044d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d6:	f7fd faeb 	bl	8001ab0 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f4:	d108      	bne.n	8004508 <HAL_UART_Transmit+0x80>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e003      	b.n	8004510 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004518:	e02d      	b.n	8004576 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fee8 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e039      	b.n	80045a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004546:	b292      	uxth	r2, r2
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3302      	adds	r3, #2
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e008      	b.n	8004564 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b292      	uxth	r2, r2
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1cb      	bne.n	800451a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	2140      	movs	r1, #64	; 0x40
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 feb4 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e005      	b.n	80045a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0ba      	sub	sp, #232	; 0xe8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045da:	f640 030f 	movw	r3, #2063	; 0x80f
 80045de:	4013      	ands	r3, r2
 80045e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00f      	beq.n	8004618 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 82a6 	beq.w	8004b5a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
      }
      return;
 8004616:	e2a0      	b.n	8004b5a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8117 	beq.w	8004850 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800462e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004632:	4b85      	ldr	r3, [pc, #532]	; (8004848 <HAL_UART_IRQHandler+0x298>)
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 810a 	beq.w	8004850 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HAL_UART_IRQHandler+0xbc>
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2201      	movs	r2, #1
 800465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d011      	beq.n	800469c <HAL_UART_IRQHandler+0xec>
 8004678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d011      	beq.n	80046cc <HAL_UART_IRQHandler+0x11c>
 80046a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2204      	movs	r2, #4
 80046ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c2:	f043 0202 	orr.w	r2, r3, #2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fe:	f043 0208 	orr.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <HAL_UART_IRQHandler+0x18a>
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 820c 	beq.w	8004b5e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d005      	beq.n	8004792 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800478a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04f      	beq.n	8004832 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fe75 	bl	8005482 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d141      	bne.n	800482a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1d9      	bne.n	80047a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d013      	beq.n	8004822 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_UART_IRQHandler+0x29c>)
 8004800:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fad1 	bl	8001dae <HAL_DMA_Abort_IT>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800481c:	4610      	mov	r0, r2
 800481e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	e00f      	b.n	8004842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f9b0 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	e00b      	b.n	8004842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9ac 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e007      	b.n	8004842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f9a8 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004840:	e18d      	b.n	8004b5e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004842:	bf00      	nop
    return;
 8004844:	e18b      	b.n	8004b5e <HAL_UART_IRQHandler+0x5ae>
 8004846:	bf00      	nop
 8004848:	04000120 	.word	0x04000120
 800484c:	08005549 	.word	0x08005549

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 8146 	bne.w	8004ae6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 813f 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8138 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2210      	movs	r2, #16
 800487c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	f040 80b4 	bne.w	80049f6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800489a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 815f 	beq.w	8004b62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ae:	429a      	cmp	r2, r3
 80048b0:	f080 8157 	bcs.w	8004b62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 8085 	bne.w	80049da <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1da      	bne.n	80048d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800492a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800493e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e1      	bne.n	800491a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800497a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800497c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e3      	bne.n	8004956 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80049be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e4      	bne.n	800499a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd f9ac 	bl	8001d32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8d4 	bl	8004b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049f4:	e0b5      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a7 	beq.w	8004b66 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a2 	beq.w	8004b66 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e4      	bne.n	8004a22 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	623b      	str	r3, [r7, #32]
   return(result);
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e3      	bne.n	8004a58 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e4      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004adc:	4619      	mov	r1, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f85c 	bl	8004b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ae4:	e03f      	b.n	8004b66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00e      	beq.n	8004b10 <HAL_UART_IRQHandler+0x560>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fd5d 	bl	80055c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b0e:	e02d      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01c      	beq.n	8004b6a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
    }
    return;
 8004b38:	e017      	b.n	8004b6a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d012      	beq.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fd0e 	bl	8005574 <UART_EndTransmit_IT>
    return;
 8004b58:	e008      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b5a:	bf00      	nop
 8004b5c:	e006      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004b5e:	bf00      	nop
 8004b60:	e004      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b62:	bf00      	nop
 8004b64:	e002      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004b6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b6c:	37e8      	adds	r7, #232	; 0xe8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb8:	b08a      	sub	sp, #40	; 0x28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4ba4      	ldr	r3, [pc, #656]	; (8004e74 <UART_SetConfig+0x2c0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a99      	ldr	r2, [pc, #612]	; (8004e78 <UART_SetConfig+0x2c4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a90      	ldr	r2, [pc, #576]	; (8004e7c <UART_SetConfig+0x2c8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d126      	bne.n	8004c8c <UART_SetConfig+0xd8>
 8004c3e:	4b90      	ldr	r3, [pc, #576]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d81b      	bhi.n	8004c84 <UART_SetConfig+0xd0>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0xa0>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c65 	.word	0x08004c65
 8004c58:	08004c75 	.word	0x08004c75
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e116      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e112      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004c74:	2304      	movs	r3, #4
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e10e      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e10a      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004c84:	2310      	movs	r3, #16
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e106      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a7c      	ldr	r2, [pc, #496]	; (8004e84 <UART_SetConfig+0x2d0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d138      	bne.n	8004d08 <UART_SetConfig+0x154>
 8004c96:	4b7a      	ldr	r3, [pc, #488]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d82d      	bhi.n	8004d00 <UART_SetConfig+0x14c>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0xf8>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004d01 	.word	0x08004d01
 8004cb4:	08004d01 	.word	0x08004d01
 8004cb8:	08004d01 	.word	0x08004d01
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d01 	.word	0x08004d01
 8004cc4:	08004d01 	.word	0x08004d01
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	08004d01 	.word	0x08004d01
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e0d8      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e0d4      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e0d0      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e0cc      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e0c8      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a5e      	ldr	r2, [pc, #376]	; (8004e88 <UART_SetConfig+0x2d4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d125      	bne.n	8004d5e <UART_SetConfig+0x1aa>
 8004d12:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d1c:	2b30      	cmp	r3, #48	; 0x30
 8004d1e:	d016      	beq.n	8004d4e <UART_SetConfig+0x19a>
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d818      	bhi.n	8004d56 <UART_SetConfig+0x1a2>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d00a      	beq.n	8004d3e <UART_SetConfig+0x18a>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d814      	bhi.n	8004d56 <UART_SetConfig+0x1a2>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <UART_SetConfig+0x182>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d008      	beq.n	8004d46 <UART_SetConfig+0x192>
 8004d34:	e00f      	b.n	8004d56 <UART_SetConfig+0x1a2>
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3c:	e0ad      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e0a9      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d46:	2304      	movs	r3, #4
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4c:	e0a5      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d4e:	2308      	movs	r3, #8
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d54:	e0a1      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d56:	2310      	movs	r3, #16
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5c:	e09d      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4a      	ldr	r2, [pc, #296]	; (8004e8c <UART_SetConfig+0x2d8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d125      	bne.n	8004db4 <UART_SetConfig+0x200>
 8004d68:	4b45      	ldr	r3, [pc, #276]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d72:	2bc0      	cmp	r3, #192	; 0xc0
 8004d74:	d016      	beq.n	8004da4 <UART_SetConfig+0x1f0>
 8004d76:	2bc0      	cmp	r3, #192	; 0xc0
 8004d78:	d818      	bhi.n	8004dac <UART_SetConfig+0x1f8>
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d00a      	beq.n	8004d94 <UART_SetConfig+0x1e0>
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d814      	bhi.n	8004dac <UART_SetConfig+0x1f8>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <UART_SetConfig+0x1d8>
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d008      	beq.n	8004d9c <UART_SetConfig+0x1e8>
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x1f8>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e082      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e07e      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e07a      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e076      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e072      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a35      	ldr	r2, [pc, #212]	; (8004e90 <UART_SetConfig+0x2dc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d12a      	bne.n	8004e14 <UART_SetConfig+0x260>
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dcc:	d01a      	beq.n	8004e04 <UART_SetConfig+0x250>
 8004dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd2:	d81b      	bhi.n	8004e0c <UART_SetConfig+0x258>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d00c      	beq.n	8004df4 <UART_SetConfig+0x240>
 8004dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dde:	d815      	bhi.n	8004e0c <UART_SetConfig+0x258>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <UART_SetConfig+0x238>
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d008      	beq.n	8004dfc <UART_SetConfig+0x248>
 8004dea:	e00f      	b.n	8004e0c <UART_SetConfig+0x258>
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e052      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e04e      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e04a      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e046      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e042      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <UART_SetConfig+0x2c4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d13a      	bne.n	8004e94 <UART_SetConfig+0x2e0>
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <UART_SetConfig+0x2cc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e2c:	d01a      	beq.n	8004e64 <UART_SetConfig+0x2b0>
 8004e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e32:	d81b      	bhi.n	8004e6c <UART_SetConfig+0x2b8>
 8004e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e38:	d00c      	beq.n	8004e54 <UART_SetConfig+0x2a0>
 8004e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3e:	d815      	bhi.n	8004e6c <UART_SetConfig+0x2b8>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <UART_SetConfig+0x298>
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d008      	beq.n	8004e5c <UART_SetConfig+0x2a8>
 8004e4a:	e00f      	b.n	8004e6c <UART_SetConfig+0x2b8>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e022      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e01e      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e01a      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e016      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e012      	b.n	8004e9a <UART_SetConfig+0x2e6>
 8004e74:	efff69f3 	.word	0xefff69f3
 8004e78:	40008000 	.word	0x40008000
 8004e7c:	40013800 	.word	0x40013800
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40004400 	.word	0x40004400
 8004e88:	40004800 	.word	0x40004800
 8004e8c:	40004c00 	.word	0x40004c00
 8004e90:	40005000 	.word	0x40005000
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a9f      	ldr	r2, [pc, #636]	; (800511c <UART_SetConfig+0x568>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d17a      	bne.n	8004f9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d824      	bhi.n	8004ef6 <UART_SetConfig+0x342>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0x300>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ee7 	.word	0x08004ee7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004ef7 	.word	0x08004ef7
 8004ed0:	08004ef7 	.word	0x08004ef7
 8004ed4:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fd40 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004edc:	61f8      	str	r0, [r7, #28]
        break;
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b8f      	ldr	r3, [pc, #572]	; (8005120 <UART_SetConfig+0x56c>)
 8004ee2:	61fb      	str	r3, [r7, #28]
        break;
 8004ee4:	e00d      	b.n	8004f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe fca1 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004eea:	61f8      	str	r0, [r7, #28]
        break;
 8004eec:	e009      	b.n	8004f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	61fb      	str	r3, [r7, #28]
        break;
 8004ef4:	e005      	b.n	8004f02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80fb 	beq.w	8005100 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d305      	bcc.n	8004f26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d903      	bls.n	8004f2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f2c:	e0e8      	b.n	8005100 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2200      	movs	r2, #0
 8004f32:	461c      	mov	r4, r3
 8004f34:	4615      	mov	r5, r2
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	022b      	lsls	r3, r5, #8
 8004f40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f44:	0222      	lsls	r2, r4, #8
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	6849      	ldr	r1, [r1, #4]
 8004f4a:	0849      	lsrs	r1, r1, #1
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	4688      	mov	r8, r1
 8004f50:	4681      	mov	r9, r0
 8004f52:	eb12 0a08 	adds.w	sl, r2, r8
 8004f56:	eb43 0b09 	adc.w	fp, r3, r9
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f68:	4650      	mov	r0, sl
 8004f6a:	4659      	mov	r1, fp
 8004f6c:	f7fb fe8c 	bl	8000c88 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4613      	mov	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d308      	bcc.n	8004f92 <UART_SetConfig+0x3de>
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f86:	d204      	bcs.n	8004f92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	60da      	str	r2, [r3, #12]
 8004f90:	e0b6      	b.n	8005100 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f98:	e0b2      	b.n	8005100 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d15e      	bne.n	8005062 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d828      	bhi.n	8004ffe <UART_SetConfig+0x44a>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x400>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fff 	.word	0x08004fff
 8004fc4:	08004fef 	.word	0x08004fef
 8004fc8:	08004fff 	.word	0x08004fff
 8004fcc:	08004fff 	.word	0x08004fff
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7fe fcc0 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004fdc:	61f8      	str	r0, [r7, #28]
        break;
 8004fde:	e014      	b.n	800500a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe0:	f7fe fcd2 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004fe4:	61f8      	str	r0, [r7, #28]
        break;
 8004fe6:	e010      	b.n	800500a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <UART_SetConfig+0x56c>)
 8004fea:	61fb      	str	r3, [r7, #28]
        break;
 8004fec:	e00d      	b.n	800500a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fee:	f7fe fc1d 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004ff2:	61f8      	str	r0, [r7, #28]
        break;
 8004ff4:	e009      	b.n	800500a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	61fb      	str	r3, [r7, #28]
        break;
 8004ffc:	e005      	b.n	800500a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d077      	beq.n	8005100 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005a      	lsls	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	441a      	add	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d916      	bls.n	800505a <UART_SetConfig+0x4a6>
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d212      	bcs.n	800505a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	b29a      	uxth	r2, r3
 800504a:	8afb      	ldrh	r3, [r7, #22]
 800504c:	4313      	orrs	r3, r2
 800504e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	8afa      	ldrh	r2, [r7, #22]
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	e052      	b.n	8005100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005060:	e04e      	b.n	8005100 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005066:	2b08      	cmp	r3, #8
 8005068:	d827      	bhi.n	80050ba <UART_SetConfig+0x506>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x4bc>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005095 	.word	0x08005095
 8005074:	0800509d 	.word	0x0800509d
 8005078:	080050a5 	.word	0x080050a5
 800507c:	080050bb 	.word	0x080050bb
 8005080:	080050ab 	.word	0x080050ab
 8005084:	080050bb 	.word	0x080050bb
 8005088:	080050bb 	.word	0x080050bb
 800508c:	080050bb 	.word	0x080050bb
 8005090:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe fc62 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8005098:	61f8      	str	r0, [r7, #28]
        break;
 800509a:	e014      	b.n	80050c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7fe fc74 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80050a0:	61f8      	str	r0, [r7, #28]
        break;
 80050a2:	e010      	b.n	80050c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <UART_SetConfig+0x56c>)
 80050a6:	61fb      	str	r3, [r7, #28]
        break;
 80050a8:	e00d      	b.n	80050c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe fbbf 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80050ae:	61f8      	str	r0, [r7, #28]
        break;
 80050b0:	e009      	b.n	80050c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b6:	61fb      	str	r3, [r7, #28]
        break;
 80050b8:	e005      	b.n	80050c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050c4:	bf00      	nop
    }

    if (pclk != 0U)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d019      	beq.n	8005100 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	085a      	lsrs	r2, r3, #1
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b0f      	cmp	r3, #15
 80050e4:	d909      	bls.n	80050fa <UART_SetConfig+0x546>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d205      	bcs.n	80050fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e002      	b.n	8005100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800510c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005110:	4618      	mov	r0, r3
 8005112:	3728      	adds	r7, #40	; 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511a:	bf00      	nop
 800511c:	40008000 	.word	0x40008000
 8005120:	00f42400 	.word	0x00f42400

08005124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005222:	d10a      	bne.n	800523a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005278:	f7fc fc1a 	bl	8001ab0 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10e      	bne.n	80052aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f82d 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e023      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f817 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00d      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b09c      	sub	sp, #112	; 0x70
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e0a5      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	f000 80a1 	beq.w	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc fbcb 	bl	8001ab0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
 8005326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005328:	2b00      	cmp	r3, #0
 800532a:	d13e      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	667b      	str	r3, [r7, #100]	; 0x64
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	663b      	str	r3, [r7, #96]	; 0x60
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e067      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d04f      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d147      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	66bb      	str	r3, [r7, #104]	; 0x68
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005424:	623a      	str	r2, [r7, #32]
 8005426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	61bb      	str	r3, [r7, #24]
   return(result);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e010      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	f43f af4a 	beq.w	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3770      	adds	r7, #112	; 0x70
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005482:	b480      	push	{r7}
 8005484:	b095      	sub	sp, #84	; 0x54
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a8:	643b      	str	r3, [r7, #64]	; 0x40
 80054aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e6      	bne.n	800548a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3308      	adds	r3, #8
 80054c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d118      	bne.n	800552a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	60bb      	str	r3, [r7, #8]
   return(result);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800553c:	bf00      	nop
 800553e:	3754      	adds	r7, #84	; 0x54
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff fb0e 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	60bb      	str	r3, [r7, #8]
   return(result);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e6      	bne.n	800557c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fada 	bl	8004b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c0:	bf00      	nop
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	2000000c 	.word	0x2000000c

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4d0d      	ldr	r5, [pc, #52]	; (8005620 <__libc_init_array+0x38>)
 80055ec:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	2600      	movs	r6, #0
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4d0b      	ldr	r5, [pc, #44]	; (8005628 <__libc_init_array+0x40>)
 80055fa:	4c0c      	ldr	r4, [pc, #48]	; (800562c <__libc_init_array+0x44>)
 80055fc:	f004 fd36 	bl	800a06c <_init>
 8005600:	1b64      	subs	r4, r4, r5
 8005602:	10a4      	asrs	r4, r4, #2
 8005604:	2600      	movs	r6, #0
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	0800a63c 	.word	0x0800a63c
 8005624:	0800a63c 	.word	0x0800a63c
 8005628:	0800a63c 	.word	0x0800a63c
 800562c:	0800a640 	.word	0x0800a640

08005630 <memset>:
 8005630:	4402      	add	r2, r0
 8005632:	4603      	mov	r3, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <__cvt>:
 8005640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	ec55 4b10 	vmov	r4, r5, d0
 8005648:	2d00      	cmp	r5, #0
 800564a:	460e      	mov	r6, r1
 800564c:	4619      	mov	r1, r3
 800564e:	462b      	mov	r3, r5
 8005650:	bfbb      	ittet	lt
 8005652:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005656:	461d      	movlt	r5, r3
 8005658:	2300      	movge	r3, #0
 800565a:	232d      	movlt	r3, #45	; 0x2d
 800565c:	700b      	strb	r3, [r1, #0]
 800565e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005660:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005664:	4691      	mov	r9, r2
 8005666:	f023 0820 	bic.w	r8, r3, #32
 800566a:	bfbc      	itt	lt
 800566c:	4622      	movlt	r2, r4
 800566e:	4614      	movlt	r4, r2
 8005670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005674:	d005      	beq.n	8005682 <__cvt+0x42>
 8005676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800567a:	d100      	bne.n	800567e <__cvt+0x3e>
 800567c:	3601      	adds	r6, #1
 800567e:	2102      	movs	r1, #2
 8005680:	e000      	b.n	8005684 <__cvt+0x44>
 8005682:	2103      	movs	r1, #3
 8005684:	ab03      	add	r3, sp, #12
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	ab02      	add	r3, sp, #8
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	ec45 4b10 	vmov	d0, r4, r5
 8005690:	4653      	mov	r3, sl
 8005692:	4632      	mov	r2, r6
 8005694:	f001 ff18 	bl	80074c8 <_dtoa_r>
 8005698:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800569c:	4607      	mov	r7, r0
 800569e:	d102      	bne.n	80056a6 <__cvt+0x66>
 80056a0:	f019 0f01 	tst.w	r9, #1
 80056a4:	d022      	beq.n	80056ec <__cvt+0xac>
 80056a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056aa:	eb07 0906 	add.w	r9, r7, r6
 80056ae:	d110      	bne.n	80056d2 <__cvt+0x92>
 80056b0:	783b      	ldrb	r3, [r7, #0]
 80056b2:	2b30      	cmp	r3, #48	; 0x30
 80056b4:	d10a      	bne.n	80056cc <__cvt+0x8c>
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	4620      	mov	r0, r4
 80056bc:	4629      	mov	r1, r5
 80056be:	f7fb fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c2:	b918      	cbnz	r0, 80056cc <__cvt+0x8c>
 80056c4:	f1c6 0601 	rsb	r6, r6, #1
 80056c8:	f8ca 6000 	str.w	r6, [sl]
 80056cc:	f8da 3000 	ldr.w	r3, [sl]
 80056d0:	4499      	add	r9, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80056de:	b108      	cbz	r0, 80056e4 <__cvt+0xa4>
 80056e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056e4:	2230      	movs	r2, #48	; 0x30
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	454b      	cmp	r3, r9
 80056ea:	d307      	bcc.n	80056fc <__cvt+0xbc>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f0:	1bdb      	subs	r3, r3, r7
 80056f2:	4638      	mov	r0, r7
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	b004      	add	sp, #16
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	9103      	str	r1, [sp, #12]
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e7f0      	b.n	80056e6 <__cvt+0xa6>

08005704 <__exponent>:
 8005704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005706:	4603      	mov	r3, r0
 8005708:	2900      	cmp	r1, #0
 800570a:	bfb8      	it	lt
 800570c:	4249      	neglt	r1, r1
 800570e:	f803 2b02 	strb.w	r2, [r3], #2
 8005712:	bfb4      	ite	lt
 8005714:	222d      	movlt	r2, #45	; 0x2d
 8005716:	222b      	movge	r2, #43	; 0x2b
 8005718:	2909      	cmp	r1, #9
 800571a:	7042      	strb	r2, [r0, #1]
 800571c:	dd2a      	ble.n	8005774 <__exponent+0x70>
 800571e:	f10d 0407 	add.w	r4, sp, #7
 8005722:	46a4      	mov	ip, r4
 8005724:	270a      	movs	r7, #10
 8005726:	46a6      	mov	lr, r4
 8005728:	460a      	mov	r2, r1
 800572a:	fb91 f6f7 	sdiv	r6, r1, r7
 800572e:	fb07 1516 	mls	r5, r7, r6, r1
 8005732:	3530      	adds	r5, #48	; 0x30
 8005734:	2a63      	cmp	r2, #99	; 0x63
 8005736:	f104 34ff 	add.w	r4, r4, #4294967295
 800573a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800573e:	4631      	mov	r1, r6
 8005740:	dcf1      	bgt.n	8005726 <__exponent+0x22>
 8005742:	3130      	adds	r1, #48	; 0x30
 8005744:	f1ae 0502 	sub.w	r5, lr, #2
 8005748:	f804 1c01 	strb.w	r1, [r4, #-1]
 800574c:	1c44      	adds	r4, r0, #1
 800574e:	4629      	mov	r1, r5
 8005750:	4561      	cmp	r1, ip
 8005752:	d30a      	bcc.n	800576a <__exponent+0x66>
 8005754:	f10d 0209 	add.w	r2, sp, #9
 8005758:	eba2 020e 	sub.w	r2, r2, lr
 800575c:	4565      	cmp	r5, ip
 800575e:	bf88      	it	hi
 8005760:	2200      	movhi	r2, #0
 8005762:	4413      	add	r3, r2
 8005764:	1a18      	subs	r0, r3, r0
 8005766:	b003      	add	sp, #12
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800576e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005772:	e7ed      	b.n	8005750 <__exponent+0x4c>
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	3130      	adds	r1, #48	; 0x30
 8005778:	7083      	strb	r3, [r0, #2]
 800577a:	70c1      	strb	r1, [r0, #3]
 800577c:	1d03      	adds	r3, r0, #4
 800577e:	e7f1      	b.n	8005764 <__exponent+0x60>

08005780 <_printf_float>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	ed2d 8b02 	vpush	{d8}
 8005788:	b08d      	sub	sp, #52	; 0x34
 800578a:	460c      	mov	r4, r1
 800578c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005790:	4616      	mov	r6, r2
 8005792:	461f      	mov	r7, r3
 8005794:	4605      	mov	r5, r0
 8005796:	f003 f9ab 	bl	8008af0 <_localeconv_r>
 800579a:	f8d0 a000 	ldr.w	sl, [r0]
 800579e:	4650      	mov	r0, sl
 80057a0:	f7fa fd16 	bl	80001d0 <strlen>
 80057a4:	2300      	movs	r3, #0
 80057a6:	930a      	str	r3, [sp, #40]	; 0x28
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	f8d8 3000 	ldr.w	r3, [r8]
 80057b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	f8c8 2000 	str.w	r2, [r8]
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057d2:	9307      	str	r3, [sp, #28]
 80057d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057d8:	ee08 0a10 	vmov	s16, r0
 80057dc:	4b9f      	ldr	r3, [pc, #636]	; (8005a5c <_printf_float+0x2dc>)
 80057de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295
 80057e6:	f7fb f9a1 	bl	8000b2c <__aeabi_dcmpun>
 80057ea:	bb88      	cbnz	r0, 8005850 <_printf_float+0xd0>
 80057ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f0:	4b9a      	ldr	r3, [pc, #616]	; (8005a5c <_printf_float+0x2dc>)
 80057f2:	f04f 32ff 	mov.w	r2, #4294967295
 80057f6:	f7fb f97b 	bl	8000af0 <__aeabi_dcmple>
 80057fa:	bb48      	cbnz	r0, 8005850 <_printf_float+0xd0>
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	f7fb f96a 	bl	8000adc <__aeabi_dcmplt>
 8005808:	b110      	cbz	r0, 8005810 <_printf_float+0x90>
 800580a:	232d      	movs	r3, #45	; 0x2d
 800580c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005810:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <_printf_float+0x2e0>)
 8005812:	4894      	ldr	r0, [pc, #592]	; (8005a64 <_printf_float+0x2e4>)
 8005814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005818:	bf94      	ite	ls
 800581a:	4698      	movls	r8, r3
 800581c:	4680      	movhi	r8, r0
 800581e:	2303      	movs	r3, #3
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	9b05      	ldr	r3, [sp, #20]
 8005824:	f023 0204 	bic.w	r2, r3, #4
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	9700      	str	r7, [sp, #0]
 8005830:	4633      	mov	r3, r6
 8005832:	aa0b      	add	r2, sp, #44	; 0x2c
 8005834:	4621      	mov	r1, r4
 8005836:	4628      	mov	r0, r5
 8005838:	f000 f9d8 	bl	8005bec <_printf_common>
 800583c:	3001      	adds	r0, #1
 800583e:	f040 8090 	bne.w	8005962 <_printf_float+0x1e2>
 8005842:	f04f 30ff 	mov.w	r0, #4294967295
 8005846:	b00d      	add	sp, #52	; 0x34
 8005848:	ecbd 8b02 	vpop	{d8}
 800584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	4640      	mov	r0, r8
 8005856:	4649      	mov	r1, r9
 8005858:	f7fb f968 	bl	8000b2c <__aeabi_dcmpun>
 800585c:	b140      	cbz	r0, 8005870 <_printf_float+0xf0>
 800585e:	464b      	mov	r3, r9
 8005860:	2b00      	cmp	r3, #0
 8005862:	bfbc      	itt	lt
 8005864:	232d      	movlt	r3, #45	; 0x2d
 8005866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800586a:	487f      	ldr	r0, [pc, #508]	; (8005a68 <_printf_float+0x2e8>)
 800586c:	4b7f      	ldr	r3, [pc, #508]	; (8005a6c <_printf_float+0x2ec>)
 800586e:	e7d1      	b.n	8005814 <_printf_float+0x94>
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005876:	9206      	str	r2, [sp, #24]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	d13f      	bne.n	80058fc <_printf_float+0x17c>
 800587c:	2306      	movs	r3, #6
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	9b05      	ldr	r3, [sp, #20]
 8005882:	6861      	ldr	r1, [r4, #4]
 8005884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005888:	2300      	movs	r3, #0
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	ab0a      	add	r3, sp, #40	; 0x28
 800588e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005892:	ab09      	add	r3, sp, #36	; 0x24
 8005894:	ec49 8b10 	vmov	d0, r8, r9
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058a0:	4628      	mov	r0, r5
 80058a2:	f7ff fecd 	bl	8005640 <__cvt>
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058aa:	2b47      	cmp	r3, #71	; 0x47
 80058ac:	4680      	mov	r8, r0
 80058ae:	d108      	bne.n	80058c2 <_printf_float+0x142>
 80058b0:	1cc8      	adds	r0, r1, #3
 80058b2:	db02      	blt.n	80058ba <_printf_float+0x13a>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	dd41      	ble.n	800593e <_printf_float+0x1be>
 80058ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80058be:	fa5f fb8b 	uxtb.w	fp, fp
 80058c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058c6:	d820      	bhi.n	800590a <_printf_float+0x18a>
 80058c8:	3901      	subs	r1, #1
 80058ca:	465a      	mov	r2, fp
 80058cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058d0:	9109      	str	r1, [sp, #36]	; 0x24
 80058d2:	f7ff ff17 	bl	8005704 <__exponent>
 80058d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d8:	1813      	adds	r3, r2, r0
 80058da:	2a01      	cmp	r2, #1
 80058dc:	4681      	mov	r9, r0
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	dc02      	bgt.n	80058e8 <_printf_float+0x168>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	07d2      	lsls	r2, r2, #31
 80058e6:	d501      	bpl.n	80058ec <_printf_float+0x16c>
 80058e8:	3301      	adds	r3, #1
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d09c      	beq.n	800582e <_printf_float+0xae>
 80058f4:	232d      	movs	r3, #45	; 0x2d
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fa:	e798      	b.n	800582e <_printf_float+0xae>
 80058fc:	9a06      	ldr	r2, [sp, #24]
 80058fe:	2a47      	cmp	r2, #71	; 0x47
 8005900:	d1be      	bne.n	8005880 <_printf_float+0x100>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1bc      	bne.n	8005880 <_printf_float+0x100>
 8005906:	2301      	movs	r3, #1
 8005908:	e7b9      	b.n	800587e <_printf_float+0xfe>
 800590a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800590e:	d118      	bne.n	8005942 <_printf_float+0x1c2>
 8005910:	2900      	cmp	r1, #0
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	dd0b      	ble.n	800592e <_printf_float+0x1ae>
 8005916:	6121      	str	r1, [r4, #16]
 8005918:	b913      	cbnz	r3, 8005920 <_printf_float+0x1a0>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	07d0      	lsls	r0, r2, #31
 800591e:	d502      	bpl.n	8005926 <_printf_float+0x1a6>
 8005920:	3301      	adds	r3, #1
 8005922:	440b      	add	r3, r1
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	65a1      	str	r1, [r4, #88]	; 0x58
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	e7de      	b.n	80058ec <_printf_float+0x16c>
 800592e:	b913      	cbnz	r3, 8005936 <_printf_float+0x1b6>
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	07d2      	lsls	r2, r2, #31
 8005934:	d501      	bpl.n	800593a <_printf_float+0x1ba>
 8005936:	3302      	adds	r3, #2
 8005938:	e7f4      	b.n	8005924 <_printf_float+0x1a4>
 800593a:	2301      	movs	r3, #1
 800593c:	e7f2      	b.n	8005924 <_printf_float+0x1a4>
 800593e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005944:	4299      	cmp	r1, r3
 8005946:	db05      	blt.n	8005954 <_printf_float+0x1d4>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	6121      	str	r1, [r4, #16]
 800594c:	07d8      	lsls	r0, r3, #31
 800594e:	d5ea      	bpl.n	8005926 <_printf_float+0x1a6>
 8005950:	1c4b      	adds	r3, r1, #1
 8005952:	e7e7      	b.n	8005924 <_printf_float+0x1a4>
 8005954:	2900      	cmp	r1, #0
 8005956:	bfd4      	ite	le
 8005958:	f1c1 0202 	rsble	r2, r1, #2
 800595c:	2201      	movgt	r2, #1
 800595e:	4413      	add	r3, r2
 8005960:	e7e0      	b.n	8005924 <_printf_float+0x1a4>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	055a      	lsls	r2, r3, #21
 8005966:	d407      	bmi.n	8005978 <_printf_float+0x1f8>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	4642      	mov	r2, r8
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	d12c      	bne.n	80059d0 <_printf_float+0x250>
 8005976:	e764      	b.n	8005842 <_printf_float+0xc2>
 8005978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800597c:	f240 80e0 	bls.w	8005b40 <_printf_float+0x3c0>
 8005980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	f7fb f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800598c:	2800      	cmp	r0, #0
 800598e:	d034      	beq.n	80059fa <_printf_float+0x27a>
 8005990:	4a37      	ldr	r2, [pc, #220]	; (8005a70 <_printf_float+0x2f0>)
 8005992:	2301      	movs	r3, #1
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f af51 	beq.w	8005842 <_printf_float+0xc2>
 80059a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a4:	429a      	cmp	r2, r3
 80059a6:	db02      	blt.n	80059ae <_printf_float+0x22e>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	07d8      	lsls	r0, r3, #31
 80059ac:	d510      	bpl.n	80059d0 <_printf_float+0x250>
 80059ae:	ee18 3a10 	vmov	r3, s16
 80059b2:	4652      	mov	r2, sl
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f af41 	beq.w	8005842 <_printf_float+0xc2>
 80059c0:	f04f 0800 	mov.w	r8, #0
 80059c4:	f104 091a 	add.w	r9, r4, #26
 80059c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ca:	3b01      	subs	r3, #1
 80059cc:	4543      	cmp	r3, r8
 80059ce:	dc09      	bgt.n	80059e4 <_printf_float+0x264>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	079b      	lsls	r3, r3, #30
 80059d4:	f100 8105 	bmi.w	8005be2 <_printf_float+0x462>
 80059d8:	68e0      	ldr	r0, [r4, #12]
 80059da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059dc:	4298      	cmp	r0, r3
 80059de:	bfb8      	it	lt
 80059e0:	4618      	movlt	r0, r3
 80059e2:	e730      	b.n	8005846 <_printf_float+0xc6>
 80059e4:	2301      	movs	r3, #1
 80059e6:	464a      	mov	r2, r9
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f af27 	beq.w	8005842 <_printf_float+0xc2>
 80059f4:	f108 0801 	add.w	r8, r8, #1
 80059f8:	e7e6      	b.n	80059c8 <_printf_float+0x248>
 80059fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dc39      	bgt.n	8005a74 <_printf_float+0x2f4>
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <_printf_float+0x2f0>)
 8005a02:	2301      	movs	r3, #1
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f af19 	beq.w	8005842 <_printf_float+0xc2>
 8005a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a14:	4313      	orrs	r3, r2
 8005a16:	d102      	bne.n	8005a1e <_printf_float+0x29e>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d5d8      	bpl.n	80059d0 <_printf_float+0x250>
 8005a1e:	ee18 3a10 	vmov	r3, s16
 8005a22:	4652      	mov	r2, sl
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f af09 	beq.w	8005842 <_printf_float+0xc2>
 8005a30:	f04f 0900 	mov.w	r9, #0
 8005a34:	f104 0a1a 	add.w	sl, r4, #26
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	454b      	cmp	r3, r9
 8005a3e:	dc01      	bgt.n	8005a44 <_printf_float+0x2c4>
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	e792      	b.n	800596a <_printf_float+0x1ea>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4652      	mov	r2, sl
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f aef7 	beq.w	8005842 <_printf_float+0xc2>
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	e7ee      	b.n	8005a38 <_printf_float+0x2b8>
 8005a5a:	bf00      	nop
 8005a5c:	7fefffff 	.word	0x7fefffff
 8005a60:	0800a188 	.word	0x0800a188
 8005a64:	0800a18c 	.word	0x0800a18c
 8005a68:	0800a194 	.word	0x0800a194
 8005a6c:	0800a190 	.word	0x0800a190
 8005a70:	0800a198 	.word	0x0800a198
 8005a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	bfa8      	it	ge
 8005a7c:	461a      	movge	r2, r3
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	4691      	mov	r9, r2
 8005a82:	dc37      	bgt.n	8005af4 <_printf_float+0x374>
 8005a84:	f04f 0b00 	mov.w	fp, #0
 8005a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a8c:	f104 021a 	add.w	r2, r4, #26
 8005a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	eba3 0309 	sub.w	r3, r3, r9
 8005a98:	455b      	cmp	r3, fp
 8005a9a:	dc33      	bgt.n	8005b04 <_printf_float+0x384>
 8005a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	db3b      	blt.n	8005b1c <_printf_float+0x39c>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07da      	lsls	r2, r3, #31
 8005aa8:	d438      	bmi.n	8005b1c <_printf_float+0x39c>
 8005aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aac:	9a05      	ldr	r2, [sp, #20]
 8005aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab0:	1a9a      	subs	r2, r3, r2
 8005ab2:	eba3 0901 	sub.w	r9, r3, r1
 8005ab6:	4591      	cmp	r9, r2
 8005ab8:	bfa8      	it	ge
 8005aba:	4691      	movge	r9, r2
 8005abc:	f1b9 0f00 	cmp.w	r9, #0
 8005ac0:	dc35      	bgt.n	8005b2e <_printf_float+0x3ae>
 8005ac2:	f04f 0800 	mov.w	r8, #0
 8005ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aca:	f104 0a1a 	add.w	sl, r4, #26
 8005ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	eba3 0309 	sub.w	r3, r3, r9
 8005ad8:	4543      	cmp	r3, r8
 8005ada:	f77f af79 	ble.w	80059d0 <_printf_float+0x250>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f aeaa 	beq.w	8005842 <_printf_float+0xc2>
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	e7ec      	b.n	8005ace <_printf_float+0x34e>
 8005af4:	4613      	mov	r3, r2
 8005af6:	4631      	mov	r1, r6
 8005af8:	4642      	mov	r2, r8
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	d1c0      	bne.n	8005a84 <_printf_float+0x304>
 8005b02:	e69e      	b.n	8005842 <_printf_float+0xc2>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	9205      	str	r2, [sp, #20]
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f ae97 	beq.w	8005842 <_printf_float+0xc2>
 8005b14:	9a05      	ldr	r2, [sp, #20]
 8005b16:	f10b 0b01 	add.w	fp, fp, #1
 8005b1a:	e7b9      	b.n	8005a90 <_printf_float+0x310>
 8005b1c:	ee18 3a10 	vmov	r3, s16
 8005b20:	4652      	mov	r2, sl
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d1be      	bne.n	8005aaa <_printf_float+0x32a>
 8005b2c:	e689      	b.n	8005842 <_printf_float+0xc2>
 8005b2e:	9a05      	ldr	r2, [sp, #20]
 8005b30:	464b      	mov	r3, r9
 8005b32:	4442      	add	r2, r8
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d1c1      	bne.n	8005ac2 <_printf_float+0x342>
 8005b3e:	e680      	b.n	8005842 <_printf_float+0xc2>
 8005b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b42:	2a01      	cmp	r2, #1
 8005b44:	dc01      	bgt.n	8005b4a <_printf_float+0x3ca>
 8005b46:	07db      	lsls	r3, r3, #31
 8005b48:	d538      	bpl.n	8005bbc <_printf_float+0x43c>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f ae74 	beq.w	8005842 <_printf_float+0xc2>
 8005b5a:	ee18 3a10 	vmov	r3, s16
 8005b5e:	4652      	mov	r2, sl
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f ae6b 	beq.w	8005842 <_printf_float+0xc2>
 8005b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b70:	2200      	movs	r2, #0
 8005b72:	2300      	movs	r3, #0
 8005b74:	f7fa ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_printf_float+0x432>
 8005b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7c:	f108 0201 	add.w	r2, r8, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d10e      	bne.n	8005baa <_printf_float+0x42a>
 8005b8c:	e659      	b.n	8005842 <_printf_float+0xc2>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4652      	mov	r2, sl
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae52 	beq.w	8005842 <_printf_float+0xc2>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4543      	cmp	r3, r8
 8005ba8:	dcf1      	bgt.n	8005b8e <_printf_float+0x40e>
 8005baa:	464b      	mov	r3, r9
 8005bac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bb0:	e6dc      	b.n	800596c <_printf_float+0x1ec>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 0a1a 	add.w	sl, r4, #26
 8005bba:	e7f2      	b.n	8005ba2 <_printf_float+0x422>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	e7df      	b.n	8005b82 <_printf_float+0x402>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	464a      	mov	r2, r9
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae38 	beq.w	8005842 <_printf_float+0xc2>
 8005bd2:	f108 0801 	add.w	r8, r8, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	dcf0      	bgt.n	8005bc2 <_printf_float+0x442>
 8005be0:	e6fa      	b.n	80059d8 <_printf_float+0x258>
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	f104 0919 	add.w	r9, r4, #25
 8005bea:	e7f4      	b.n	8005bd6 <_printf_float+0x456>

08005bec <_printf_common>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	688a      	ldr	r2, [r1, #8]
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bfb8      	it	lt
 8005c00:	4613      	movlt	r3, r2
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c08:	4607      	mov	r7, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	b10a      	cbz	r2, 8005c12 <_printf_common+0x26>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	0699      	lsls	r1, r3, #26
 8005c16:	bf42      	ittt	mi
 8005c18:	6833      	ldrmi	r3, [r6, #0]
 8005c1a:	3302      	addmi	r3, #2
 8005c1c:	6033      	strmi	r3, [r6, #0]
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	f015 0506 	ands.w	r5, r5, #6
 8005c24:	d106      	bne.n	8005c34 <_printf_common+0x48>
 8005c26:	f104 0a19 	add.w	sl, r4, #25
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	6832      	ldr	r2, [r6, #0]
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc26      	bgt.n	8005c82 <_printf_common+0x96>
 8005c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c38:	1e13      	subs	r3, r2, #0
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	bf18      	it	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	0692      	lsls	r2, r2, #26
 8005c42:	d42b      	bmi.n	8005c9c <_printf_common+0xb0>
 8005c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d01e      	beq.n	8005c90 <_printf_common+0xa4>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	68e5      	ldr	r5, [r4, #12]
 8005c56:	6832      	ldr	r2, [r6, #0]
 8005c58:	f003 0306 	and.w	r3, r3, #6
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	bf08      	it	eq
 8005c60:	1aad      	subeq	r5, r5, r2
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	2600      	movs	r6, #0
 8005c78:	341a      	adds	r4, #26
 8005c7a:	42b5      	cmp	r5, r6
 8005c7c:	d11a      	bne.n	8005cb4 <_printf_common+0xc8>
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e008      	b.n	8005c94 <_printf_common+0xa8>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4652      	mov	r2, sl
 8005c86:	4649      	mov	r1, r9
 8005c88:	4638      	mov	r0, r7
 8005c8a:	47c0      	blx	r8
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d103      	bne.n	8005c98 <_printf_common+0xac>
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	3501      	adds	r5, #1
 8005c9a:	e7c6      	b.n	8005c2a <_printf_common+0x3e>
 8005c9c:	18e1      	adds	r1, r4, r3
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	2030      	movs	r0, #48	; 0x30
 8005ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca6:	4422      	add	r2, r4
 8005ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	e7c7      	b.n	8005c44 <_printf_common+0x58>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d0e6      	beq.n	8005c90 <_printf_common+0xa4>
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7d9      	b.n	8005c7a <_printf_common+0x8e>
	...

08005cc8 <_printf_i>:
 8005cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	7e0f      	ldrb	r7, [r1, #24]
 8005cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd0:	2f78      	cmp	r7, #120	; 0x78
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	469a      	mov	sl, r3
 8005cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cde:	d807      	bhi.n	8005cf0 <_printf_i+0x28>
 8005ce0:	2f62      	cmp	r7, #98	; 0x62
 8005ce2:	d80a      	bhi.n	8005cfa <_printf_i+0x32>
 8005ce4:	2f00      	cmp	r7, #0
 8005ce6:	f000 80d8 	beq.w	8005e9a <_printf_i+0x1d2>
 8005cea:	2f58      	cmp	r7, #88	; 0x58
 8005cec:	f000 80a3 	beq.w	8005e36 <_printf_i+0x16e>
 8005cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf8:	e03a      	b.n	8005d70 <_printf_i+0xa8>
 8005cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cfe:	2b15      	cmp	r3, #21
 8005d00:	d8f6      	bhi.n	8005cf0 <_printf_i+0x28>
 8005d02:	a101      	add	r1, pc, #4	; (adr r1, 8005d08 <_printf_i+0x40>)
 8005d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d08:	08005d61 	.word	0x08005d61
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005cf1 	.word	0x08005cf1
 8005d14:	08005cf1 	.word	0x08005cf1
 8005d18:	08005cf1 	.word	0x08005cf1
 8005d1c:	08005cf1 	.word	0x08005cf1
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005cf1 	.word	0x08005cf1
 8005d28:	08005cf1 	.word	0x08005cf1
 8005d2c:	08005cf1 	.word	0x08005cf1
 8005d30:	08005cf1 	.word	0x08005cf1
 8005d34:	08005e81 	.word	0x08005e81
 8005d38:	08005da5 	.word	0x08005da5
 8005d3c:	08005e63 	.word	0x08005e63
 8005d40:	08005cf1 	.word	0x08005cf1
 8005d44:	08005cf1 	.word	0x08005cf1
 8005d48:	08005ea3 	.word	0x08005ea3
 8005d4c:	08005cf1 	.word	0x08005cf1
 8005d50:	08005da5 	.word	0x08005da5
 8005d54:	08005cf1 	.word	0x08005cf1
 8005d58:	08005cf1 	.word	0x08005cf1
 8005d5c:	08005e6b 	.word	0x08005e6b
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	602a      	str	r2, [r5, #0]
 8005d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0a3      	b.n	8005ebc <_printf_i+0x1f4>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	6829      	ldr	r1, [r5, #0]
 8005d78:	0606      	lsls	r6, r0, #24
 8005d7a:	f101 0304 	add.w	r3, r1, #4
 8005d7e:	d50a      	bpl.n	8005d96 <_printf_i+0xce>
 8005d80:	680e      	ldr	r6, [r1, #0]
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	da03      	bge.n	8005d90 <_printf_i+0xc8>
 8005d88:	232d      	movs	r3, #45	; 0x2d
 8005d8a:	4276      	negs	r6, r6
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	485e      	ldr	r0, [pc, #376]	; (8005f0c <_printf_i+0x244>)
 8005d92:	230a      	movs	r3, #10
 8005d94:	e019      	b.n	8005dca <_printf_i+0x102>
 8005d96:	680e      	ldr	r6, [r1, #0]
 8005d98:	602b      	str	r3, [r5, #0]
 8005d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d9e:	bf18      	it	ne
 8005da0:	b236      	sxthne	r6, r6
 8005da2:	e7ef      	b.n	8005d84 <_printf_i+0xbc>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1d19      	adds	r1, r3, #4
 8005daa:	6029      	str	r1, [r5, #0]
 8005dac:	0601      	lsls	r1, r0, #24
 8005dae:	d501      	bpl.n	8005db4 <_printf_i+0xec>
 8005db0:	681e      	ldr	r6, [r3, #0]
 8005db2:	e002      	b.n	8005dba <_printf_i+0xf2>
 8005db4:	0646      	lsls	r6, r0, #25
 8005db6:	d5fb      	bpl.n	8005db0 <_printf_i+0xe8>
 8005db8:	881e      	ldrh	r6, [r3, #0]
 8005dba:	4854      	ldr	r0, [pc, #336]	; (8005f0c <_printf_i+0x244>)
 8005dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2308      	moveq	r3, #8
 8005dc2:	230a      	movne	r3, #10
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dca:	6865      	ldr	r5, [r4, #4]
 8005dcc:	60a5      	str	r5, [r4, #8]
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	bfa2      	ittt	ge
 8005dd2:	6821      	ldrge	r1, [r4, #0]
 8005dd4:	f021 0104 	bicge.w	r1, r1, #4
 8005dd8:	6021      	strge	r1, [r4, #0]
 8005dda:	b90e      	cbnz	r6, 8005de0 <_printf_i+0x118>
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	d04d      	beq.n	8005e7c <_printf_i+0x1b4>
 8005de0:	4615      	mov	r5, r2
 8005de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005de6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dea:	5dc7      	ldrb	r7, [r0, r7]
 8005dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df0:	4637      	mov	r7, r6
 8005df2:	42bb      	cmp	r3, r7
 8005df4:	460e      	mov	r6, r1
 8005df6:	d9f4      	bls.n	8005de2 <_printf_i+0x11a>
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d10b      	bne.n	8005e14 <_printf_i+0x14c>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	07de      	lsls	r6, r3, #31
 8005e00:	d508      	bpl.n	8005e14 <_printf_i+0x14c>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	6861      	ldr	r1, [r4, #4]
 8005e06:	4299      	cmp	r1, r3
 8005e08:	bfde      	ittt	le
 8005e0a:	2330      	movle	r3, #48	; 0x30
 8005e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e14:	1b52      	subs	r2, r2, r5
 8005e16:	6122      	str	r2, [r4, #16]
 8005e18:	f8cd a000 	str.w	sl, [sp]
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	aa03      	add	r2, sp, #12
 8005e20:	4621      	mov	r1, r4
 8005e22:	4640      	mov	r0, r8
 8005e24:	f7ff fee2 	bl	8005bec <_printf_common>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d14c      	bne.n	8005ec6 <_printf_i+0x1fe>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	b004      	add	sp, #16
 8005e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e36:	4835      	ldr	r0, [pc, #212]	; (8005f0c <_printf_i+0x244>)
 8005e38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e44:	6029      	str	r1, [r5, #0]
 8005e46:	061d      	lsls	r5, r3, #24
 8005e48:	d514      	bpl.n	8005e74 <_printf_i+0x1ac>
 8005e4a:	07df      	lsls	r7, r3, #31
 8005e4c:	bf44      	itt	mi
 8005e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e52:	6023      	strmi	r3, [r4, #0]
 8005e54:	b91e      	cbnz	r6, 8005e5e <_printf_i+0x196>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	f023 0320 	bic.w	r3, r3, #32
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	2310      	movs	r3, #16
 8005e60:	e7b0      	b.n	8005dc4 <_printf_i+0xfc>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f043 0320 	orr.w	r3, r3, #32
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	2378      	movs	r3, #120	; 0x78
 8005e6c:	4828      	ldr	r0, [pc, #160]	; (8005f10 <_printf_i+0x248>)
 8005e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e72:	e7e3      	b.n	8005e3c <_printf_i+0x174>
 8005e74:	0659      	lsls	r1, r3, #25
 8005e76:	bf48      	it	mi
 8005e78:	b2b6      	uxthmi	r6, r6
 8005e7a:	e7e6      	b.n	8005e4a <_printf_i+0x182>
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	e7bb      	b.n	8005df8 <_printf_i+0x130>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	6826      	ldr	r6, [r4, #0]
 8005e84:	6961      	ldr	r1, [r4, #20]
 8005e86:	1d18      	adds	r0, r3, #4
 8005e88:	6028      	str	r0, [r5, #0]
 8005e8a:	0635      	lsls	r5, r6, #24
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	d501      	bpl.n	8005e94 <_printf_i+0x1cc>
 8005e90:	6019      	str	r1, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <_printf_i+0x1d2>
 8005e94:	0670      	lsls	r0, r6, #25
 8005e96:	d5fb      	bpl.n	8005e90 <_printf_i+0x1c8>
 8005e98:	8019      	strh	r1, [r3, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	4615      	mov	r5, r2
 8005ea0:	e7ba      	b.n	8005e18 <_printf_i+0x150>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	1d1a      	adds	r2, r3, #4
 8005ea6:	602a      	str	r2, [r5, #0]
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	6862      	ldr	r2, [r4, #4]
 8005eac:	2100      	movs	r1, #0
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f7fa f996 	bl	80001e0 <memchr>
 8005eb4:	b108      	cbz	r0, 8005eba <_printf_i+0x1f2>
 8005eb6:	1b40      	subs	r0, r0, r5
 8005eb8:	6060      	str	r0, [r4, #4]
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	e7a8      	b.n	8005e18 <_printf_i+0x150>
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	462a      	mov	r2, r5
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0ab      	beq.n	8005e2c <_printf_i+0x164>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	079b      	lsls	r3, r3, #30
 8005ed8:	d413      	bmi.n	8005f02 <_printf_i+0x23a>
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	bfb8      	it	lt
 8005ee2:	4618      	movlt	r0, r3
 8005ee4:	e7a4      	b.n	8005e30 <_printf_i+0x168>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4649      	mov	r1, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	47d0      	blx	sl
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d09b      	beq.n	8005e2c <_printf_i+0x164>
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dcf2      	bgt.n	8005ee6 <_printf_i+0x21e>
 8005f00:	e7eb      	b.n	8005eda <_printf_i+0x212>
 8005f02:	2500      	movs	r5, #0
 8005f04:	f104 0619 	add.w	r6, r4, #25
 8005f08:	e7f5      	b.n	8005ef6 <_printf_i+0x22e>
 8005f0a:	bf00      	nop
 8005f0c:	0800a19a 	.word	0x0800a19a
 8005f10:	0800a1ab 	.word	0x0800a1ab

08005f14 <_scanf_float>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	4617      	mov	r7, r2
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	688b      	ldr	r3, [r1, #8]
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f26:	bf83      	ittte	hi
 8005f28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f2c:	195b      	addhi	r3, r3, r5
 8005f2e:	9302      	strhi	r3, [sp, #8]
 8005f30:	2300      	movls	r3, #0
 8005f32:	bf86      	itte	hi
 8005f34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f38:	608b      	strhi	r3, [r1, #8]
 8005f3a:	9302      	strls	r3, [sp, #8]
 8005f3c:	680b      	ldr	r3, [r1, #0]
 8005f3e:	468b      	mov	fp, r1
 8005f40:	2500      	movs	r5, #0
 8005f42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f46:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f4e:	4680      	mov	r8, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	465e      	mov	r6, fp
 8005f54:	46aa      	mov	sl, r5
 8005f56:	46a9      	mov	r9, r5
 8005f58:	9501      	str	r5, [sp, #4]
 8005f5a:	68a2      	ldr	r2, [r4, #8]
 8005f5c:	b152      	cbz	r2, 8005f74 <_scanf_float+0x60>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b4e      	cmp	r3, #78	; 0x4e
 8005f64:	d864      	bhi.n	8006030 <_scanf_float+0x11c>
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d83c      	bhi.n	8005fe4 <_scanf_float+0xd0>
 8005f6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f6e:	b2c8      	uxtb	r0, r1
 8005f70:	280e      	cmp	r0, #14
 8005f72:	d93a      	bls.n	8005fea <_scanf_float+0xd6>
 8005f74:	f1b9 0f00 	cmp.w	r9, #0
 8005f78:	d003      	beq.n	8005f82 <_scanf_float+0x6e>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f86:	f1ba 0f01 	cmp.w	sl, #1
 8005f8a:	f200 8113 	bhi.w	80061b4 <_scanf_float+0x2a0>
 8005f8e:	455e      	cmp	r6, fp
 8005f90:	f200 8105 	bhi.w	800619e <_scanf_float+0x28a>
 8005f94:	2501      	movs	r5, #1
 8005f96:	4628      	mov	r0, r5
 8005f98:	b007      	add	sp, #28
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005fa2:	2a0d      	cmp	r2, #13
 8005fa4:	d8e6      	bhi.n	8005f74 <_scanf_float+0x60>
 8005fa6:	a101      	add	r1, pc, #4	; (adr r1, 8005fac <_scanf_float+0x98>)
 8005fa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fac:	080060eb 	.word	0x080060eb
 8005fb0:	08005f75 	.word	0x08005f75
 8005fb4:	08005f75 	.word	0x08005f75
 8005fb8:	08005f75 	.word	0x08005f75
 8005fbc:	0800614b 	.word	0x0800614b
 8005fc0:	08006123 	.word	0x08006123
 8005fc4:	08005f75 	.word	0x08005f75
 8005fc8:	08005f75 	.word	0x08005f75
 8005fcc:	080060f9 	.word	0x080060f9
 8005fd0:	08005f75 	.word	0x08005f75
 8005fd4:	08005f75 	.word	0x08005f75
 8005fd8:	08005f75 	.word	0x08005f75
 8005fdc:	08005f75 	.word	0x08005f75
 8005fe0:	080060b1 	.word	0x080060b1
 8005fe4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005fe8:	e7db      	b.n	8005fa2 <_scanf_float+0x8e>
 8005fea:	290e      	cmp	r1, #14
 8005fec:	d8c2      	bhi.n	8005f74 <_scanf_float+0x60>
 8005fee:	a001      	add	r0, pc, #4	; (adr r0, 8005ff4 <_scanf_float+0xe0>)
 8005ff0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ff4:	080060a3 	.word	0x080060a3
 8005ff8:	08005f75 	.word	0x08005f75
 8005ffc:	080060a3 	.word	0x080060a3
 8006000:	08006137 	.word	0x08006137
 8006004:	08005f75 	.word	0x08005f75
 8006008:	08006051 	.word	0x08006051
 800600c:	0800608d 	.word	0x0800608d
 8006010:	0800608d 	.word	0x0800608d
 8006014:	0800608d 	.word	0x0800608d
 8006018:	0800608d 	.word	0x0800608d
 800601c:	0800608d 	.word	0x0800608d
 8006020:	0800608d 	.word	0x0800608d
 8006024:	0800608d 	.word	0x0800608d
 8006028:	0800608d 	.word	0x0800608d
 800602c:	0800608d 	.word	0x0800608d
 8006030:	2b6e      	cmp	r3, #110	; 0x6e
 8006032:	d809      	bhi.n	8006048 <_scanf_float+0x134>
 8006034:	2b60      	cmp	r3, #96	; 0x60
 8006036:	d8b2      	bhi.n	8005f9e <_scanf_float+0x8a>
 8006038:	2b54      	cmp	r3, #84	; 0x54
 800603a:	d077      	beq.n	800612c <_scanf_float+0x218>
 800603c:	2b59      	cmp	r3, #89	; 0x59
 800603e:	d199      	bne.n	8005f74 <_scanf_float+0x60>
 8006040:	2d07      	cmp	r5, #7
 8006042:	d197      	bne.n	8005f74 <_scanf_float+0x60>
 8006044:	2508      	movs	r5, #8
 8006046:	e029      	b.n	800609c <_scanf_float+0x188>
 8006048:	2b74      	cmp	r3, #116	; 0x74
 800604a:	d06f      	beq.n	800612c <_scanf_float+0x218>
 800604c:	2b79      	cmp	r3, #121	; 0x79
 800604e:	e7f6      	b.n	800603e <_scanf_float+0x12a>
 8006050:	6821      	ldr	r1, [r4, #0]
 8006052:	05c8      	lsls	r0, r1, #23
 8006054:	d51a      	bpl.n	800608c <_scanf_float+0x178>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800605c:	6021      	str	r1, [r4, #0]
 800605e:	f109 0901 	add.w	r9, r9, #1
 8006062:	b11b      	cbz	r3, 800606c <_scanf_float+0x158>
 8006064:	3b01      	subs	r3, #1
 8006066:	3201      	adds	r2, #1
 8006068:	9302      	str	r3, [sp, #8]
 800606a:	60a2      	str	r2, [r4, #8]
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	3b01      	subs	r3, #1
 8006070:	60a3      	str	r3, [r4, #8]
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	3301      	adds	r3, #1
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	f340 8084 	ble.w	800618c <_scanf_float+0x278>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	e766      	b.n	8005f5a <_scanf_float+0x46>
 800608c:	eb1a 0f05 	cmn.w	sl, r5
 8006090:	f47f af70 	bne.w	8005f74 <_scanf_float+0x60>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	f806 3b01 	strb.w	r3, [r6], #1
 80060a0:	e7e4      	b.n	800606c <_scanf_float+0x158>
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	0610      	lsls	r0, r2, #24
 80060a6:	f57f af65 	bpl.w	8005f74 <_scanf_float+0x60>
 80060aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ae:	e7f4      	b.n	800609a <_scanf_float+0x186>
 80060b0:	f1ba 0f00 	cmp.w	sl, #0
 80060b4:	d10e      	bne.n	80060d4 <_scanf_float+0x1c0>
 80060b6:	f1b9 0f00 	cmp.w	r9, #0
 80060ba:	d10e      	bne.n	80060da <_scanf_float+0x1c6>
 80060bc:	6822      	ldr	r2, [r4, #0]
 80060be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060c6:	d108      	bne.n	80060da <_scanf_float+0x1c6>
 80060c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	f04f 0a01 	mov.w	sl, #1
 80060d2:	e7e3      	b.n	800609c <_scanf_float+0x188>
 80060d4:	f1ba 0f02 	cmp.w	sl, #2
 80060d8:	d055      	beq.n	8006186 <_scanf_float+0x272>
 80060da:	2d01      	cmp	r5, #1
 80060dc:	d002      	beq.n	80060e4 <_scanf_float+0x1d0>
 80060de:	2d04      	cmp	r5, #4
 80060e0:	f47f af48 	bne.w	8005f74 <_scanf_float+0x60>
 80060e4:	3501      	adds	r5, #1
 80060e6:	b2ed      	uxtb	r5, r5
 80060e8:	e7d8      	b.n	800609c <_scanf_float+0x188>
 80060ea:	f1ba 0f01 	cmp.w	sl, #1
 80060ee:	f47f af41 	bne.w	8005f74 <_scanf_float+0x60>
 80060f2:	f04f 0a02 	mov.w	sl, #2
 80060f6:	e7d1      	b.n	800609c <_scanf_float+0x188>
 80060f8:	b97d      	cbnz	r5, 800611a <_scanf_float+0x206>
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	f47f af3c 	bne.w	8005f7a <_scanf_float+0x66>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006108:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800610c:	f47f af39 	bne.w	8005f82 <_scanf_float+0x6e>
 8006110:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	2501      	movs	r5, #1
 8006118:	e7c0      	b.n	800609c <_scanf_float+0x188>
 800611a:	2d03      	cmp	r5, #3
 800611c:	d0e2      	beq.n	80060e4 <_scanf_float+0x1d0>
 800611e:	2d05      	cmp	r5, #5
 8006120:	e7de      	b.n	80060e0 <_scanf_float+0x1cc>
 8006122:	2d02      	cmp	r5, #2
 8006124:	f47f af26 	bne.w	8005f74 <_scanf_float+0x60>
 8006128:	2503      	movs	r5, #3
 800612a:	e7b7      	b.n	800609c <_scanf_float+0x188>
 800612c:	2d06      	cmp	r5, #6
 800612e:	f47f af21 	bne.w	8005f74 <_scanf_float+0x60>
 8006132:	2507      	movs	r5, #7
 8006134:	e7b2      	b.n	800609c <_scanf_float+0x188>
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	0591      	lsls	r1, r2, #22
 800613a:	f57f af1b 	bpl.w	8005f74 <_scanf_float+0x60>
 800613e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006142:	6022      	str	r2, [r4, #0]
 8006144:	f8cd 9004 	str.w	r9, [sp, #4]
 8006148:	e7a8      	b.n	800609c <_scanf_float+0x188>
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006150:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006154:	d006      	beq.n	8006164 <_scanf_float+0x250>
 8006156:	0550      	lsls	r0, r2, #21
 8006158:	f57f af0c 	bpl.w	8005f74 <_scanf_float+0x60>
 800615c:	f1b9 0f00 	cmp.w	r9, #0
 8006160:	f43f af0f 	beq.w	8005f82 <_scanf_float+0x6e>
 8006164:	0591      	lsls	r1, r2, #22
 8006166:	bf58      	it	pl
 8006168:	9901      	ldrpl	r1, [sp, #4]
 800616a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800616e:	bf58      	it	pl
 8006170:	eba9 0101 	subpl.w	r1, r9, r1
 8006174:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006178:	bf58      	it	pl
 800617a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	f04f 0900 	mov.w	r9, #0
 8006184:	e78a      	b.n	800609c <_scanf_float+0x188>
 8006186:	f04f 0a03 	mov.w	sl, #3
 800618a:	e787      	b.n	800609c <_scanf_float+0x188>
 800618c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006190:	4639      	mov	r1, r7
 8006192:	4640      	mov	r0, r8
 8006194:	4798      	blx	r3
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f aedf 	beq.w	8005f5a <_scanf_float+0x46>
 800619c:	e6ea      	b.n	8005f74 <_scanf_float+0x60>
 800619e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061a6:	463a      	mov	r2, r7
 80061a8:	4640      	mov	r0, r8
 80061aa:	4798      	blx	r3
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	e6ec      	b.n	8005f8e <_scanf_float+0x7a>
 80061b4:	1e6b      	subs	r3, r5, #1
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d825      	bhi.n	8006206 <_scanf_float+0x2f2>
 80061ba:	2d02      	cmp	r5, #2
 80061bc:	d836      	bhi.n	800622c <_scanf_float+0x318>
 80061be:	455e      	cmp	r6, fp
 80061c0:	f67f aee8 	bls.w	8005f94 <_scanf_float+0x80>
 80061c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061cc:	463a      	mov	r2, r7
 80061ce:	4640      	mov	r0, r8
 80061d0:	4798      	blx	r3
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	e7f1      	b.n	80061be <_scanf_float+0x2aa>
 80061da:	9802      	ldr	r0, [sp, #8]
 80061dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061e4:	9002      	str	r0, [sp, #8]
 80061e6:	463a      	mov	r2, r7
 80061e8:	4640      	mov	r0, r8
 80061ea:	4798      	blx	r3
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f6:	fa5f fa8a 	uxtb.w	sl, sl
 80061fa:	f1ba 0f02 	cmp.w	sl, #2
 80061fe:	d1ec      	bne.n	80061da <_scanf_float+0x2c6>
 8006200:	3d03      	subs	r5, #3
 8006202:	b2ed      	uxtb	r5, r5
 8006204:	1b76      	subs	r6, r6, r5
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	05da      	lsls	r2, r3, #23
 800620a:	d52f      	bpl.n	800626c <_scanf_float+0x358>
 800620c:	055b      	lsls	r3, r3, #21
 800620e:	d510      	bpl.n	8006232 <_scanf_float+0x31e>
 8006210:	455e      	cmp	r6, fp
 8006212:	f67f aebf 	bls.w	8005f94 <_scanf_float+0x80>
 8006216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800621a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800621e:	463a      	mov	r2, r7
 8006220:	4640      	mov	r0, r8
 8006222:	4798      	blx	r3
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	3b01      	subs	r3, #1
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	e7f1      	b.n	8006210 <_scanf_float+0x2fc>
 800622c:	46aa      	mov	sl, r5
 800622e:	9602      	str	r6, [sp, #8]
 8006230:	e7df      	b.n	80061f2 <_scanf_float+0x2de>
 8006232:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	2965      	cmp	r1, #101	; 0x65
 800623a:	f103 33ff 	add.w	r3, r3, #4294967295
 800623e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	d00c      	beq.n	8006260 <_scanf_float+0x34c>
 8006246:	2945      	cmp	r1, #69	; 0x45
 8006248:	d00a      	beq.n	8006260 <_scanf_float+0x34c>
 800624a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800624e:	463a      	mov	r2, r7
 8006250:	4640      	mov	r0, r8
 8006252:	4798      	blx	r3
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800625a:	3b01      	subs	r3, #1
 800625c:	1eb5      	subs	r5, r6, #2
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006264:	463a      	mov	r2, r7
 8006266:	4640      	mov	r0, r8
 8006268:	4798      	blx	r3
 800626a:	462e      	mov	r6, r5
 800626c:	6825      	ldr	r5, [r4, #0]
 800626e:	f015 0510 	ands.w	r5, r5, #16
 8006272:	d159      	bne.n	8006328 <_scanf_float+0x414>
 8006274:	7035      	strb	r5, [r6, #0]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006280:	d11b      	bne.n	80062ba <_scanf_float+0x3a6>
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	454b      	cmp	r3, r9
 8006286:	eba3 0209 	sub.w	r2, r3, r9
 800628a:	d123      	bne.n	80062d4 <_scanf_float+0x3c0>
 800628c:	2200      	movs	r2, #0
 800628e:	4659      	mov	r1, fp
 8006290:	4640      	mov	r0, r8
 8006292:	f000 ff43 	bl	800711c <_strtod_r>
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	f012 0f02 	tst.w	r2, #2
 800629e:	ec57 6b10 	vmov	r6, r7, d0
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	d021      	beq.n	80062ea <_scanf_float+0x3d6>
 80062a6:	9903      	ldr	r1, [sp, #12]
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	600a      	str	r2, [r1, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	e9c3 6700 	strd	r6, r7, [r3]
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60e3      	str	r3, [r4, #12]
 80062b8:	e66d      	b.n	8005f96 <_scanf_float+0x82>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0e5      	beq.n	800628c <_scanf_float+0x378>
 80062c0:	9905      	ldr	r1, [sp, #20]
 80062c2:	230a      	movs	r3, #10
 80062c4:	462a      	mov	r2, r5
 80062c6:	3101      	adds	r1, #1
 80062c8:	4640      	mov	r0, r8
 80062ca:	f000 ffaf 	bl	800722c <_strtol_r>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	9e05      	ldr	r6, [sp, #20]
 80062d2:	1ac2      	subs	r2, r0, r3
 80062d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062d8:	429e      	cmp	r6, r3
 80062da:	bf28      	it	cs
 80062dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062e0:	4912      	ldr	r1, [pc, #72]	; (800632c <_scanf_float+0x418>)
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 f8d6 	bl	8006494 <siprintf>
 80062e8:	e7d0      	b.n	800628c <_scanf_float+0x378>
 80062ea:	9903      	ldr	r1, [sp, #12]
 80062ec:	f012 0f04 	tst.w	r2, #4
 80062f0:	f103 0204 	add.w	r2, r3, #4
 80062f4:	600a      	str	r2, [r1, #0]
 80062f6:	d1d9      	bne.n	80062ac <_scanf_float+0x398>
 80062f8:	f8d3 8000 	ldr.w	r8, [r3]
 80062fc:	ee10 2a10 	vmov	r2, s0
 8006300:	ee10 0a10 	vmov	r0, s0
 8006304:	463b      	mov	r3, r7
 8006306:	4639      	mov	r1, r7
 8006308:	f7fa fc10 	bl	8000b2c <__aeabi_dcmpun>
 800630c:	b128      	cbz	r0, 800631a <_scanf_float+0x406>
 800630e:	4808      	ldr	r0, [pc, #32]	; (8006330 <_scanf_float+0x41c>)
 8006310:	f000 f886 	bl	8006420 <nanf>
 8006314:	ed88 0a00 	vstr	s0, [r8]
 8006318:	e7cb      	b.n	80062b2 <_scanf_float+0x39e>
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7fa fc63 	bl	8000be8 <__aeabi_d2f>
 8006322:	f8c8 0000 	str.w	r0, [r8]
 8006326:	e7c4      	b.n	80062b2 <_scanf_float+0x39e>
 8006328:	2500      	movs	r5, #0
 800632a:	e634      	b.n	8005f96 <_scanf_float+0x82>
 800632c:	0800a1bc 	.word	0x0800a1bc
 8006330:	0800a630 	.word	0x0800a630

08006334 <_puts_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	460e      	mov	r6, r1
 8006338:	4605      	mov	r5, r0
 800633a:	b118      	cbz	r0, 8006344 <_puts_r+0x10>
 800633c:	6983      	ldr	r3, [r0, #24]
 800633e:	b90b      	cbnz	r3, 8006344 <_puts_r+0x10>
 8006340:	f001 ffca 	bl	80082d8 <__sinit>
 8006344:	69ab      	ldr	r3, [r5, #24]
 8006346:	68ac      	ldr	r4, [r5, #8]
 8006348:	b913      	cbnz	r3, 8006350 <_puts_r+0x1c>
 800634a:	4628      	mov	r0, r5
 800634c:	f001 ffc4 	bl	80082d8 <__sinit>
 8006350:	4b2c      	ldr	r3, [pc, #176]	; (8006404 <_puts_r+0xd0>)
 8006352:	429c      	cmp	r4, r3
 8006354:	d120      	bne.n	8006398 <_puts_r+0x64>
 8006356:	686c      	ldr	r4, [r5, #4]
 8006358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	d405      	bmi.n	800636a <_puts_r+0x36>
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	0598      	lsls	r0, r3, #22
 8006362:	d402      	bmi.n	800636a <_puts_r+0x36>
 8006364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006366:	f002 fbc8 	bl	8008afa <__retarget_lock_acquire_recursive>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	0719      	lsls	r1, r3, #28
 800636e:	d51d      	bpl.n	80063ac <_puts_r+0x78>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	b1db      	cbz	r3, 80063ac <_puts_r+0x78>
 8006374:	3e01      	subs	r6, #1
 8006376:	68a3      	ldr	r3, [r4, #8]
 8006378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800637c:	3b01      	subs	r3, #1
 800637e:	60a3      	str	r3, [r4, #8]
 8006380:	bb39      	cbnz	r1, 80063d2 <_puts_r+0x9e>
 8006382:	2b00      	cmp	r3, #0
 8006384:	da38      	bge.n	80063f8 <_puts_r+0xc4>
 8006386:	4622      	mov	r2, r4
 8006388:	210a      	movs	r1, #10
 800638a:	4628      	mov	r0, r5
 800638c:	f000 ff50 	bl	8007230 <__swbuf_r>
 8006390:	3001      	adds	r0, #1
 8006392:	d011      	beq.n	80063b8 <_puts_r+0x84>
 8006394:	250a      	movs	r5, #10
 8006396:	e011      	b.n	80063bc <_puts_r+0x88>
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <_puts_r+0xd4>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <_puts_r+0x6e>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7da      	b.n	8006358 <_puts_r+0x24>
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <_puts_r+0xd8>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7d5      	b.n	8006358 <_puts_r+0x24>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 ff90 	bl	80072d4 <__swsetup_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0dd      	beq.n	8006374 <_puts_r+0x40>
 80063b8:	f04f 35ff 	mov.w	r5, #4294967295
 80063bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d405      	bmi.n	80063ce <_puts_r+0x9a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	059b      	lsls	r3, r3, #22
 80063c6:	d402      	bmi.n	80063ce <_puts_r+0x9a>
 80063c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ca:	f002 fb97 	bl	8008afc <__retarget_lock_release_recursive>
 80063ce:	4628      	mov	r0, r5
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da04      	bge.n	80063e0 <_puts_r+0xac>
 80063d6:	69a2      	ldr	r2, [r4, #24]
 80063d8:	429a      	cmp	r2, r3
 80063da:	dc06      	bgt.n	80063ea <_puts_r+0xb6>
 80063dc:	290a      	cmp	r1, #10
 80063de:	d004      	beq.n	80063ea <_puts_r+0xb6>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	7019      	strb	r1, [r3, #0]
 80063e8:	e7c5      	b.n	8006376 <_puts_r+0x42>
 80063ea:	4622      	mov	r2, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 ff1f 	bl	8007230 <__swbuf_r>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d1bf      	bne.n	8006376 <_puts_r+0x42>
 80063f6:	e7df      	b.n	80063b8 <_puts_r+0x84>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	250a      	movs	r5, #10
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	701d      	strb	r5, [r3, #0]
 8006402:	e7db      	b.n	80063bc <_puts_r+0x88>
 8006404:	0800a3cc 	.word	0x0800a3cc
 8006408:	0800a3ec 	.word	0x0800a3ec
 800640c:	0800a3ac 	.word	0x0800a3ac

08006410 <puts>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <puts+0xc>)
 8006412:	4601      	mov	r1, r0
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f7ff bf8d 	b.w	8006334 <_puts_r>
 800641a:	bf00      	nop
 800641c:	2000000c 	.word	0x2000000c

08006420 <nanf>:
 8006420:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006428 <nanf+0x8>
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	7fc00000 	.word	0x7fc00000

0800642c <sniprintf>:
 800642c:	b40c      	push	{r2, r3}
 800642e:	b530      	push	{r4, r5, lr}
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <sniprintf+0x64>)
 8006432:	1e0c      	subs	r4, r1, #0
 8006434:	681d      	ldr	r5, [r3, #0]
 8006436:	b09d      	sub	sp, #116	; 0x74
 8006438:	da08      	bge.n	800644c <sniprintf+0x20>
 800643a:	238b      	movs	r3, #139	; 0x8b
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b01d      	add	sp, #116	; 0x74
 8006444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006448:	b002      	add	sp, #8
 800644a:	4770      	bx	lr
 800644c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006454:	bf14      	ite	ne
 8006456:	f104 33ff 	addne.w	r3, r4, #4294967295
 800645a:	4623      	moveq	r3, r4
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006464:	9002      	str	r0, [sp, #8]
 8006466:	9006      	str	r0, [sp, #24]
 8006468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800646c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800646e:	ab21      	add	r3, sp, #132	; 0x84
 8006470:	a902      	add	r1, sp, #8
 8006472:	4628      	mov	r0, r5
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	f003 f9e3 	bl	8009840 <_svfiprintf_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	bfbc      	itt	lt
 800647e:	238b      	movlt	r3, #139	; 0x8b
 8006480:	602b      	strlt	r3, [r5, #0]
 8006482:	2c00      	cmp	r4, #0
 8006484:	d0dd      	beq.n	8006442 <sniprintf+0x16>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e7d9      	b.n	8006442 <sniprintf+0x16>
 800648e:	bf00      	nop
 8006490:	2000000c 	.word	0x2000000c

08006494 <siprintf>:
 8006494:	b40e      	push	{r1, r2, r3}
 8006496:	b500      	push	{lr}
 8006498:	b09c      	sub	sp, #112	; 0x70
 800649a:	ab1d      	add	r3, sp, #116	; 0x74
 800649c:	9002      	str	r0, [sp, #8]
 800649e:	9006      	str	r0, [sp, #24]
 80064a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064a4:	4809      	ldr	r0, [pc, #36]	; (80064cc <siprintf+0x38>)
 80064a6:	9107      	str	r1, [sp, #28]
 80064a8:	9104      	str	r1, [sp, #16]
 80064aa:	4909      	ldr	r1, [pc, #36]	; (80064d0 <siprintf+0x3c>)
 80064ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b0:	9105      	str	r1, [sp, #20]
 80064b2:	6800      	ldr	r0, [r0, #0]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	a902      	add	r1, sp, #8
 80064b8:	f003 f9c2 	bl	8009840 <_svfiprintf_r>
 80064bc:	9b02      	ldr	r3, [sp, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	b01c      	add	sp, #112	; 0x70
 80064c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c8:	b003      	add	sp, #12
 80064ca:	4770      	bx	lr
 80064cc:	2000000c 	.word	0x2000000c
 80064d0:	ffff0208 	.word	0xffff0208

080064d4 <sulp>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	4604      	mov	r4, r0
 80064d8:	460d      	mov	r5, r1
 80064da:	ec45 4b10 	vmov	d0, r4, r5
 80064de:	4616      	mov	r6, r2
 80064e0:	f002 ff0c 	bl	80092fc <__ulp>
 80064e4:	ec51 0b10 	vmov	r0, r1, d0
 80064e8:	b17e      	cbz	r6, 800650a <sulp+0x36>
 80064ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dd09      	ble.n	800650a <sulp+0x36>
 80064f6:	051b      	lsls	r3, r3, #20
 80064f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80064fc:	2400      	movs	r4, #0
 80064fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f7fa f877 	bl	80005f8 <__aeabi_dmul>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	0000      	movs	r0, r0
	...

08006510 <_strtod_l>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	ed2d 8b02 	vpush	{d8}
 8006518:	b09d      	sub	sp, #116	; 0x74
 800651a:	461f      	mov	r7, r3
 800651c:	2300      	movs	r3, #0
 800651e:	9318      	str	r3, [sp, #96]	; 0x60
 8006520:	4ba2      	ldr	r3, [pc, #648]	; (80067ac <_strtod_l+0x29c>)
 8006522:	9213      	str	r2, [sp, #76]	; 0x4c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	9305      	str	r3, [sp, #20]
 8006528:	4604      	mov	r4, r0
 800652a:	4618      	mov	r0, r3
 800652c:	4688      	mov	r8, r1
 800652e:	f7f9 fe4f 	bl	80001d0 <strlen>
 8006532:	f04f 0a00 	mov.w	sl, #0
 8006536:	4605      	mov	r5, r0
 8006538:	f04f 0b00 	mov.w	fp, #0
 800653c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	2a2b      	cmp	r2, #43	; 0x2b
 8006546:	d04e      	beq.n	80065e6 <_strtod_l+0xd6>
 8006548:	d83b      	bhi.n	80065c2 <_strtod_l+0xb2>
 800654a:	2a0d      	cmp	r2, #13
 800654c:	d834      	bhi.n	80065b8 <_strtod_l+0xa8>
 800654e:	2a08      	cmp	r2, #8
 8006550:	d834      	bhi.n	80065bc <_strtod_l+0xac>
 8006552:	2a00      	cmp	r2, #0
 8006554:	d03e      	beq.n	80065d4 <_strtod_l+0xc4>
 8006556:	2300      	movs	r3, #0
 8006558:	930a      	str	r3, [sp, #40]	; 0x28
 800655a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800655c:	7833      	ldrb	r3, [r6, #0]
 800655e:	2b30      	cmp	r3, #48	; 0x30
 8006560:	f040 80b0 	bne.w	80066c4 <_strtod_l+0x1b4>
 8006564:	7873      	ldrb	r3, [r6, #1]
 8006566:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800656a:	2b58      	cmp	r3, #88	; 0x58
 800656c:	d168      	bne.n	8006640 <_strtod_l+0x130>
 800656e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	ab18      	add	r3, sp, #96	; 0x60
 8006574:	9702      	str	r7, [sp, #8]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4a8d      	ldr	r2, [pc, #564]	; (80067b0 <_strtod_l+0x2a0>)
 800657a:	ab19      	add	r3, sp, #100	; 0x64
 800657c:	a917      	add	r1, sp, #92	; 0x5c
 800657e:	4620      	mov	r0, r4
 8006580:	f001 ffae 	bl	80084e0 <__gethex>
 8006584:	f010 0707 	ands.w	r7, r0, #7
 8006588:	4605      	mov	r5, r0
 800658a:	d005      	beq.n	8006598 <_strtod_l+0x88>
 800658c:	2f06      	cmp	r7, #6
 800658e:	d12c      	bne.n	80065ea <_strtod_l+0xda>
 8006590:	3601      	adds	r6, #1
 8006592:	2300      	movs	r3, #0
 8006594:	9617      	str	r6, [sp, #92]	; 0x5c
 8006596:	930a      	str	r3, [sp, #40]	; 0x28
 8006598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 8590 	bne.w	80070c0 <_strtod_l+0xbb0>
 80065a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a2:	b1eb      	cbz	r3, 80065e0 <_strtod_l+0xd0>
 80065a4:	4652      	mov	r2, sl
 80065a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80065aa:	ec43 2b10 	vmov	d0, r2, r3
 80065ae:	b01d      	add	sp, #116	; 0x74
 80065b0:	ecbd 8b02 	vpop	{d8}
 80065b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b8:	2a20      	cmp	r2, #32
 80065ba:	d1cc      	bne.n	8006556 <_strtod_l+0x46>
 80065bc:	3301      	adds	r3, #1
 80065be:	9317      	str	r3, [sp, #92]	; 0x5c
 80065c0:	e7be      	b.n	8006540 <_strtod_l+0x30>
 80065c2:	2a2d      	cmp	r2, #45	; 0x2d
 80065c4:	d1c7      	bne.n	8006556 <_strtod_l+0x46>
 80065c6:	2201      	movs	r2, #1
 80065c8:	920a      	str	r2, [sp, #40]	; 0x28
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1c2      	bne.n	800655a <_strtod_l+0x4a>
 80065d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 856e 	bne.w	80070bc <_strtod_l+0xbac>
 80065e0:	4652      	mov	r2, sl
 80065e2:	465b      	mov	r3, fp
 80065e4:	e7e1      	b.n	80065aa <_strtod_l+0x9a>
 80065e6:	2200      	movs	r2, #0
 80065e8:	e7ee      	b.n	80065c8 <_strtod_l+0xb8>
 80065ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065ec:	b13a      	cbz	r2, 80065fe <_strtod_l+0xee>
 80065ee:	2135      	movs	r1, #53	; 0x35
 80065f0:	a81a      	add	r0, sp, #104	; 0x68
 80065f2:	f002 ff8e 	bl	8009512 <__copybits>
 80065f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065f8:	4620      	mov	r0, r4
 80065fa:	f002 fb4d 	bl	8008c98 <_Bfree>
 80065fe:	3f01      	subs	r7, #1
 8006600:	2f04      	cmp	r7, #4
 8006602:	d806      	bhi.n	8006612 <_strtod_l+0x102>
 8006604:	e8df f007 	tbb	[pc, r7]
 8006608:	1714030a 	.word	0x1714030a
 800660c:	0a          	.byte	0x0a
 800660d:	00          	.byte	0x00
 800660e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006612:	0728      	lsls	r0, r5, #28
 8006614:	d5c0      	bpl.n	8006598 <_strtod_l+0x88>
 8006616:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800661a:	e7bd      	b.n	8006598 <_strtod_l+0x88>
 800661c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800662a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800662e:	e7f0      	b.n	8006612 <_strtod_l+0x102>
 8006630:	f8df b180 	ldr.w	fp, [pc, #384]	; 80067b4 <_strtod_l+0x2a4>
 8006634:	e7ed      	b.n	8006612 <_strtod_l+0x102>
 8006636:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800663a:	f04f 3aff 	mov.w	sl, #4294967295
 800663e:	e7e8      	b.n	8006612 <_strtod_l+0x102>
 8006640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	9217      	str	r2, [sp, #92]	; 0x5c
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d0f9      	beq.n	8006640 <_strtod_l+0x130>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0a3      	beq.n	8006598 <_strtod_l+0x88>
 8006650:	2301      	movs	r3, #1
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800665a:	9308      	str	r3, [sp, #32]
 800665c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006660:	464f      	mov	r7, r9
 8006662:	220a      	movs	r2, #10
 8006664:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006666:	7806      	ldrb	r6, [r0, #0]
 8006668:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800666c:	b2d9      	uxtb	r1, r3
 800666e:	2909      	cmp	r1, #9
 8006670:	d92a      	bls.n	80066c8 <_strtod_l+0x1b8>
 8006672:	9905      	ldr	r1, [sp, #20]
 8006674:	462a      	mov	r2, r5
 8006676:	f003 fa3e 	bl	8009af6 <strncmp>
 800667a:	b398      	cbz	r0, 80066e4 <_strtod_l+0x1d4>
 800667c:	2000      	movs	r0, #0
 800667e:	4632      	mov	r2, r6
 8006680:	463d      	mov	r5, r7
 8006682:	9005      	str	r0, [sp, #20]
 8006684:	4603      	mov	r3, r0
 8006686:	2a65      	cmp	r2, #101	; 0x65
 8006688:	d001      	beq.n	800668e <_strtod_l+0x17e>
 800668a:	2a45      	cmp	r2, #69	; 0x45
 800668c:	d118      	bne.n	80066c0 <_strtod_l+0x1b0>
 800668e:	b91d      	cbnz	r5, 8006698 <_strtod_l+0x188>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	4302      	orrs	r2, r0
 8006694:	d09e      	beq.n	80065d4 <_strtod_l+0xc4>
 8006696:	2500      	movs	r5, #0
 8006698:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800669c:	f108 0201 	add.w	r2, r8, #1
 80066a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80066a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80066a6:	2a2b      	cmp	r2, #43	; 0x2b
 80066a8:	d075      	beq.n	8006796 <_strtod_l+0x286>
 80066aa:	2a2d      	cmp	r2, #45	; 0x2d
 80066ac:	d07b      	beq.n	80067a6 <_strtod_l+0x296>
 80066ae:	f04f 0c00 	mov.w	ip, #0
 80066b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066b6:	2909      	cmp	r1, #9
 80066b8:	f240 8082 	bls.w	80067c0 <_strtod_l+0x2b0>
 80066bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066c0:	2600      	movs	r6, #0
 80066c2:	e09d      	b.n	8006800 <_strtod_l+0x2f0>
 80066c4:	2300      	movs	r3, #0
 80066c6:	e7c4      	b.n	8006652 <_strtod_l+0x142>
 80066c8:	2f08      	cmp	r7, #8
 80066ca:	bfd8      	it	le
 80066cc:	9907      	ldrle	r1, [sp, #28]
 80066ce:	f100 0001 	add.w	r0, r0, #1
 80066d2:	bfda      	itte	le
 80066d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80066d8:	9307      	strle	r3, [sp, #28]
 80066da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80066de:	3701      	adds	r7, #1
 80066e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80066e2:	e7bf      	b.n	8006664 <_strtod_l+0x154>
 80066e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066e6:	195a      	adds	r2, r3, r5
 80066e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80066ea:	5d5a      	ldrb	r2, [r3, r5]
 80066ec:	2f00      	cmp	r7, #0
 80066ee:	d037      	beq.n	8006760 <_strtod_l+0x250>
 80066f0:	9005      	str	r0, [sp, #20]
 80066f2:	463d      	mov	r5, r7
 80066f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	d912      	bls.n	8006722 <_strtod_l+0x212>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7c2      	b.n	8006686 <_strtod_l+0x176>
 8006700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	9217      	str	r2, [sp, #92]	; 0x5c
 8006706:	785a      	ldrb	r2, [r3, #1]
 8006708:	3001      	adds	r0, #1
 800670a:	2a30      	cmp	r2, #48	; 0x30
 800670c:	d0f8      	beq.n	8006700 <_strtod_l+0x1f0>
 800670e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006712:	2b08      	cmp	r3, #8
 8006714:	f200 84d9 	bhi.w	80070ca <_strtod_l+0xbba>
 8006718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800671a:	9005      	str	r0, [sp, #20]
 800671c:	2000      	movs	r0, #0
 800671e:	9308      	str	r3, [sp, #32]
 8006720:	4605      	mov	r5, r0
 8006722:	3a30      	subs	r2, #48	; 0x30
 8006724:	f100 0301 	add.w	r3, r0, #1
 8006728:	d014      	beq.n	8006754 <_strtod_l+0x244>
 800672a:	9905      	ldr	r1, [sp, #20]
 800672c:	4419      	add	r1, r3
 800672e:	9105      	str	r1, [sp, #20]
 8006730:	462b      	mov	r3, r5
 8006732:	eb00 0e05 	add.w	lr, r0, r5
 8006736:	210a      	movs	r1, #10
 8006738:	4573      	cmp	r3, lr
 800673a:	d113      	bne.n	8006764 <_strtod_l+0x254>
 800673c:	182b      	adds	r3, r5, r0
 800673e:	2b08      	cmp	r3, #8
 8006740:	f105 0501 	add.w	r5, r5, #1
 8006744:	4405      	add	r5, r0
 8006746:	dc1c      	bgt.n	8006782 <_strtod_l+0x272>
 8006748:	9907      	ldr	r1, [sp, #28]
 800674a:	230a      	movs	r3, #10
 800674c:	fb03 2301 	mla	r3, r3, r1, r2
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	2300      	movs	r3, #0
 8006754:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006756:	1c51      	adds	r1, r2, #1
 8006758:	9117      	str	r1, [sp, #92]	; 0x5c
 800675a:	7852      	ldrb	r2, [r2, #1]
 800675c:	4618      	mov	r0, r3
 800675e:	e7c9      	b.n	80066f4 <_strtod_l+0x1e4>
 8006760:	4638      	mov	r0, r7
 8006762:	e7d2      	b.n	800670a <_strtod_l+0x1fa>
 8006764:	2b08      	cmp	r3, #8
 8006766:	dc04      	bgt.n	8006772 <_strtod_l+0x262>
 8006768:	9e07      	ldr	r6, [sp, #28]
 800676a:	434e      	muls	r6, r1
 800676c:	9607      	str	r6, [sp, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	e7e2      	b.n	8006738 <_strtod_l+0x228>
 8006772:	f103 0c01 	add.w	ip, r3, #1
 8006776:	f1bc 0f10 	cmp.w	ip, #16
 800677a:	bfd8      	it	le
 800677c:	fb01 f909 	mulle.w	r9, r1, r9
 8006780:	e7f5      	b.n	800676e <_strtod_l+0x25e>
 8006782:	2d10      	cmp	r5, #16
 8006784:	bfdc      	itt	le
 8006786:	230a      	movle	r3, #10
 8006788:	fb03 2909 	mlale	r9, r3, r9, r2
 800678c:	e7e1      	b.n	8006752 <_strtod_l+0x242>
 800678e:	2300      	movs	r3, #0
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	2301      	movs	r3, #1
 8006794:	e77c      	b.n	8006690 <_strtod_l+0x180>
 8006796:	f04f 0c00 	mov.w	ip, #0
 800679a:	f108 0202 	add.w	r2, r8, #2
 800679e:	9217      	str	r2, [sp, #92]	; 0x5c
 80067a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80067a4:	e785      	b.n	80066b2 <_strtod_l+0x1a2>
 80067a6:	f04f 0c01 	mov.w	ip, #1
 80067aa:	e7f6      	b.n	800679a <_strtod_l+0x28a>
 80067ac:	0800a474 	.word	0x0800a474
 80067b0:	0800a1c4 	.word	0x0800a1c4
 80067b4:	7ff00000 	.word	0x7ff00000
 80067b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067ba:	1c51      	adds	r1, r2, #1
 80067bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80067be:	7852      	ldrb	r2, [r2, #1]
 80067c0:	2a30      	cmp	r2, #48	; 0x30
 80067c2:	d0f9      	beq.n	80067b8 <_strtod_l+0x2a8>
 80067c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80067c8:	2908      	cmp	r1, #8
 80067ca:	f63f af79 	bhi.w	80066c0 <_strtod_l+0x1b0>
 80067ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80067d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067d4:	9206      	str	r2, [sp, #24]
 80067d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067d8:	1c51      	adds	r1, r2, #1
 80067da:	9117      	str	r1, [sp, #92]	; 0x5c
 80067dc:	7852      	ldrb	r2, [r2, #1]
 80067de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80067e2:	2e09      	cmp	r6, #9
 80067e4:	d937      	bls.n	8006856 <_strtod_l+0x346>
 80067e6:	9e06      	ldr	r6, [sp, #24]
 80067e8:	1b89      	subs	r1, r1, r6
 80067ea:	2908      	cmp	r1, #8
 80067ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80067f0:	dc02      	bgt.n	80067f8 <_strtod_l+0x2e8>
 80067f2:	4576      	cmp	r6, lr
 80067f4:	bfa8      	it	ge
 80067f6:	4676      	movge	r6, lr
 80067f8:	f1bc 0f00 	cmp.w	ip, #0
 80067fc:	d000      	beq.n	8006800 <_strtod_l+0x2f0>
 80067fe:	4276      	negs	r6, r6
 8006800:	2d00      	cmp	r5, #0
 8006802:	d14d      	bne.n	80068a0 <_strtod_l+0x390>
 8006804:	9904      	ldr	r1, [sp, #16]
 8006806:	4301      	orrs	r1, r0
 8006808:	f47f aec6 	bne.w	8006598 <_strtod_l+0x88>
 800680c:	2b00      	cmp	r3, #0
 800680e:	f47f aee1 	bne.w	80065d4 <_strtod_l+0xc4>
 8006812:	2a69      	cmp	r2, #105	; 0x69
 8006814:	d027      	beq.n	8006866 <_strtod_l+0x356>
 8006816:	dc24      	bgt.n	8006862 <_strtod_l+0x352>
 8006818:	2a49      	cmp	r2, #73	; 0x49
 800681a:	d024      	beq.n	8006866 <_strtod_l+0x356>
 800681c:	2a4e      	cmp	r2, #78	; 0x4e
 800681e:	f47f aed9 	bne.w	80065d4 <_strtod_l+0xc4>
 8006822:	499f      	ldr	r1, [pc, #636]	; (8006aa0 <_strtod_l+0x590>)
 8006824:	a817      	add	r0, sp, #92	; 0x5c
 8006826:	f002 f8b3 	bl	8008990 <__match>
 800682a:	2800      	cmp	r0, #0
 800682c:	f43f aed2 	beq.w	80065d4 <_strtod_l+0xc4>
 8006830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b28      	cmp	r3, #40	; 0x28
 8006836:	d12d      	bne.n	8006894 <_strtod_l+0x384>
 8006838:	499a      	ldr	r1, [pc, #616]	; (8006aa4 <_strtod_l+0x594>)
 800683a:	aa1a      	add	r2, sp, #104	; 0x68
 800683c:	a817      	add	r0, sp, #92	; 0x5c
 800683e:	f002 f8bb 	bl	80089b8 <__hexnan>
 8006842:	2805      	cmp	r0, #5
 8006844:	d126      	bne.n	8006894 <_strtod_l+0x384>
 8006846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006848:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800684c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006850:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006854:	e6a0      	b.n	8006598 <_strtod_l+0x88>
 8006856:	210a      	movs	r1, #10
 8006858:	fb01 2e0e 	mla	lr, r1, lr, r2
 800685c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006860:	e7b9      	b.n	80067d6 <_strtod_l+0x2c6>
 8006862:	2a6e      	cmp	r2, #110	; 0x6e
 8006864:	e7db      	b.n	800681e <_strtod_l+0x30e>
 8006866:	4990      	ldr	r1, [pc, #576]	; (8006aa8 <_strtod_l+0x598>)
 8006868:	a817      	add	r0, sp, #92	; 0x5c
 800686a:	f002 f891 	bl	8008990 <__match>
 800686e:	2800      	cmp	r0, #0
 8006870:	f43f aeb0 	beq.w	80065d4 <_strtod_l+0xc4>
 8006874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006876:	498d      	ldr	r1, [pc, #564]	; (8006aac <_strtod_l+0x59c>)
 8006878:	3b01      	subs	r3, #1
 800687a:	a817      	add	r0, sp, #92	; 0x5c
 800687c:	9317      	str	r3, [sp, #92]	; 0x5c
 800687e:	f002 f887 	bl	8008990 <__match>
 8006882:	b910      	cbnz	r0, 800688a <_strtod_l+0x37a>
 8006884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006886:	3301      	adds	r3, #1
 8006888:	9317      	str	r3, [sp, #92]	; 0x5c
 800688a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006abc <_strtod_l+0x5ac>
 800688e:	f04f 0a00 	mov.w	sl, #0
 8006892:	e681      	b.n	8006598 <_strtod_l+0x88>
 8006894:	4886      	ldr	r0, [pc, #536]	; (8006ab0 <_strtod_l+0x5a0>)
 8006896:	f003 f8d3 	bl	8009a40 <nan>
 800689a:	ec5b ab10 	vmov	sl, fp, d0
 800689e:	e67b      	b.n	8006598 <_strtod_l+0x88>
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	9807      	ldr	r0, [sp, #28]
 80068a4:	1af3      	subs	r3, r6, r3
 80068a6:	2f00      	cmp	r7, #0
 80068a8:	bf08      	it	eq
 80068aa:	462f      	moveq	r7, r5
 80068ac:	2d10      	cmp	r5, #16
 80068ae:	9306      	str	r3, [sp, #24]
 80068b0:	46a8      	mov	r8, r5
 80068b2:	bfa8      	it	ge
 80068b4:	f04f 0810 	movge.w	r8, #16
 80068b8:	f7f9 fe24 	bl	8000504 <__aeabi_ui2d>
 80068bc:	2d09      	cmp	r5, #9
 80068be:	4682      	mov	sl, r0
 80068c0:	468b      	mov	fp, r1
 80068c2:	dd13      	ble.n	80068ec <_strtod_l+0x3dc>
 80068c4:	4b7b      	ldr	r3, [pc, #492]	; (8006ab4 <_strtod_l+0x5a4>)
 80068c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	4682      	mov	sl, r0
 80068d4:	4648      	mov	r0, r9
 80068d6:	468b      	mov	fp, r1
 80068d8:	f7f9 fe14 	bl	8000504 <__aeabi_ui2d>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4650      	mov	r0, sl
 80068e2:	4659      	mov	r1, fp
 80068e4:	f7f9 fcd2 	bl	800028c <__adddf3>
 80068e8:	4682      	mov	sl, r0
 80068ea:	468b      	mov	fp, r1
 80068ec:	2d0f      	cmp	r5, #15
 80068ee:	dc38      	bgt.n	8006962 <_strtod_l+0x452>
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f43f ae50 	beq.w	8006598 <_strtod_l+0x88>
 80068f8:	dd24      	ble.n	8006944 <_strtod_l+0x434>
 80068fa:	2b16      	cmp	r3, #22
 80068fc:	dc0b      	bgt.n	8006916 <_strtod_l+0x406>
 80068fe:	496d      	ldr	r1, [pc, #436]	; (8006ab4 <_strtod_l+0x5a4>)
 8006900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006908:	4652      	mov	r2, sl
 800690a:	465b      	mov	r3, fp
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	e640      	b.n	8006598 <_strtod_l+0x88>
 8006916:	9a06      	ldr	r2, [sp, #24]
 8006918:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800691c:	4293      	cmp	r3, r2
 800691e:	db20      	blt.n	8006962 <_strtod_l+0x452>
 8006920:	4c64      	ldr	r4, [pc, #400]	; (8006ab4 <_strtod_l+0x5a4>)
 8006922:	f1c5 050f 	rsb	r5, r5, #15
 8006926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800692a:	4652      	mov	r2, sl
 800692c:	465b      	mov	r3, fp
 800692e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006932:	f7f9 fe61 	bl	80005f8 <__aeabi_dmul>
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	1b5d      	subs	r5, r3, r5
 800693a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800693e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006942:	e7e3      	b.n	800690c <_strtod_l+0x3fc>
 8006944:	9b06      	ldr	r3, [sp, #24]
 8006946:	3316      	adds	r3, #22
 8006948:	db0b      	blt.n	8006962 <_strtod_l+0x452>
 800694a:	9b05      	ldr	r3, [sp, #20]
 800694c:	1b9e      	subs	r6, r3, r6
 800694e:	4b59      	ldr	r3, [pc, #356]	; (8006ab4 <_strtod_l+0x5a4>)
 8006950:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006954:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	f7f9 ff76 	bl	800084c <__aeabi_ddiv>
 8006960:	e7d6      	b.n	8006910 <_strtod_l+0x400>
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	eba5 0808 	sub.w	r8, r5, r8
 8006968:	4498      	add	r8, r3
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	dd74      	ble.n	8006a5a <_strtod_l+0x54a>
 8006970:	f018 030f 	ands.w	r3, r8, #15
 8006974:	d00a      	beq.n	800698c <_strtod_l+0x47c>
 8006976:	494f      	ldr	r1, [pc, #316]	; (8006ab4 <_strtod_l+0x5a4>)
 8006978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800697c:	4652      	mov	r2, sl
 800697e:	465b      	mov	r3, fp
 8006980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	4682      	mov	sl, r0
 800698a:	468b      	mov	fp, r1
 800698c:	f038 080f 	bics.w	r8, r8, #15
 8006990:	d04f      	beq.n	8006a32 <_strtod_l+0x522>
 8006992:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006996:	dd22      	ble.n	80069de <_strtod_l+0x4ce>
 8006998:	2500      	movs	r5, #0
 800699a:	462e      	mov	r6, r5
 800699c:	9507      	str	r5, [sp, #28]
 800699e:	9505      	str	r5, [sp, #20]
 80069a0:	2322      	movs	r3, #34	; 0x22
 80069a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006abc <_strtod_l+0x5ac>
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	f04f 0a00 	mov.w	sl, #0
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f43f adf2 	beq.w	8006598 <_strtod_l+0x88>
 80069b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069b6:	4620      	mov	r0, r4
 80069b8:	f002 f96e 	bl	8008c98 <_Bfree>
 80069bc:	9905      	ldr	r1, [sp, #20]
 80069be:	4620      	mov	r0, r4
 80069c0:	f002 f96a 	bl	8008c98 <_Bfree>
 80069c4:	4631      	mov	r1, r6
 80069c6:	4620      	mov	r0, r4
 80069c8:	f002 f966 	bl	8008c98 <_Bfree>
 80069cc:	9907      	ldr	r1, [sp, #28]
 80069ce:	4620      	mov	r0, r4
 80069d0:	f002 f962 	bl	8008c98 <_Bfree>
 80069d4:	4629      	mov	r1, r5
 80069d6:	4620      	mov	r0, r4
 80069d8:	f002 f95e 	bl	8008c98 <_Bfree>
 80069dc:	e5dc      	b.n	8006598 <_strtod_l+0x88>
 80069de:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <_strtod_l+0x5a8>)
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80069e8:	4650      	mov	r0, sl
 80069ea:	4659      	mov	r1, fp
 80069ec:	4699      	mov	r9, r3
 80069ee:	f1b8 0f01 	cmp.w	r8, #1
 80069f2:	dc21      	bgt.n	8006a38 <_strtod_l+0x528>
 80069f4:	b10b      	cbz	r3, 80069fa <_strtod_l+0x4ea>
 80069f6:	4682      	mov	sl, r0
 80069f8:	468b      	mov	fp, r1
 80069fa:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <_strtod_l+0x5a8>)
 80069fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a04:	4652      	mov	r2, sl
 8006a06:	465b      	mov	r3, fp
 8006a08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a0c:	f7f9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8006a10:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <_strtod_l+0x5ac>)
 8006a12:	460a      	mov	r2, r1
 8006a14:	400b      	ands	r3, r1
 8006a16:	492a      	ldr	r1, [pc, #168]	; (8006ac0 <_strtod_l+0x5b0>)
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	d8bc      	bhi.n	8006998 <_strtod_l+0x488>
 8006a1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a22:	428b      	cmp	r3, r1
 8006a24:	bf86      	itte	hi
 8006a26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006ac4 <_strtod_l+0x5b4>
 8006a2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a32:	2300      	movs	r3, #0
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	e084      	b.n	8006b42 <_strtod_l+0x632>
 8006a38:	f018 0f01 	tst.w	r8, #1
 8006a3c:	d005      	beq.n	8006a4a <_strtod_l+0x53a>
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	3208      	adds	r2, #8
 8006a4e:	f109 0901 	add.w	r9, r9, #1
 8006a52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a56:	9204      	str	r2, [sp, #16]
 8006a58:	e7c9      	b.n	80069ee <_strtod_l+0x4de>
 8006a5a:	d0ea      	beq.n	8006a32 <_strtod_l+0x522>
 8006a5c:	f1c8 0800 	rsb	r8, r8, #0
 8006a60:	f018 020f 	ands.w	r2, r8, #15
 8006a64:	d00a      	beq.n	8006a7c <_strtod_l+0x56c>
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <_strtod_l+0x5a4>)
 8006a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 feea 	bl	800084c <__aeabi_ddiv>
 8006a78:	4682      	mov	sl, r0
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a80:	d0d7      	beq.n	8006a32 <_strtod_l+0x522>
 8006a82:	f1b8 0f1f 	cmp.w	r8, #31
 8006a86:	dd1f      	ble.n	8006ac8 <_strtod_l+0x5b8>
 8006a88:	2500      	movs	r5, #0
 8006a8a:	462e      	mov	r6, r5
 8006a8c:	9507      	str	r5, [sp, #28]
 8006a8e:	9505      	str	r5, [sp, #20]
 8006a90:	2322      	movs	r3, #34	; 0x22
 8006a92:	f04f 0a00 	mov.w	sl, #0
 8006a96:	f04f 0b00 	mov.w	fp, #0
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	e786      	b.n	80069ac <_strtod_l+0x49c>
 8006a9e:	bf00      	nop
 8006aa0:	0800a195 	.word	0x0800a195
 8006aa4:	0800a1d8 	.word	0x0800a1d8
 8006aa8:	0800a18d 	.word	0x0800a18d
 8006aac:	0800a31c 	.word	0x0800a31c
 8006ab0:	0800a630 	.word	0x0800a630
 8006ab4:	0800a510 	.word	0x0800a510
 8006ab8:	0800a4e8 	.word	0x0800a4e8
 8006abc:	7ff00000 	.word	0x7ff00000
 8006ac0:	7ca00000 	.word	0x7ca00000
 8006ac4:	7fefffff 	.word	0x7fefffff
 8006ac8:	f018 0310 	ands.w	r3, r8, #16
 8006acc:	bf18      	it	ne
 8006ace:	236a      	movne	r3, #106	; 0x6a
 8006ad0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006e80 <_strtod_l+0x970>
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	4650      	mov	r0, sl
 8006ad8:	4659      	mov	r1, fp
 8006ada:	2300      	movs	r3, #0
 8006adc:	f018 0f01 	tst.w	r8, #1
 8006ae0:	d004      	beq.n	8006aec <_strtod_l+0x5dc>
 8006ae2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ae6:	f7f9 fd87 	bl	80005f8 <__aeabi_dmul>
 8006aea:	2301      	movs	r3, #1
 8006aec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006af0:	f109 0908 	add.w	r9, r9, #8
 8006af4:	d1f2      	bne.n	8006adc <_strtod_l+0x5cc>
 8006af6:	b10b      	cbz	r3, 8006afc <_strtod_l+0x5ec>
 8006af8:	4682      	mov	sl, r0
 8006afa:	468b      	mov	fp, r1
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	b1c3      	cbz	r3, 8006b32 <_strtod_l+0x622>
 8006b00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	dd11      	ble.n	8006b32 <_strtod_l+0x622>
 8006b0e:	2b1f      	cmp	r3, #31
 8006b10:	f340 8124 	ble.w	8006d5c <_strtod_l+0x84c>
 8006b14:	2b34      	cmp	r3, #52	; 0x34
 8006b16:	bfde      	ittt	le
 8006b18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b1c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b20:	fa03 f202 	lslle.w	r2, r3, r2
 8006b24:	f04f 0a00 	mov.w	sl, #0
 8006b28:	bfcc      	ite	gt
 8006b2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b2e:	ea02 0b01 	andle.w	fp, r2, r1
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	4650      	mov	r0, sl
 8006b38:	4659      	mov	r1, fp
 8006b3a:	f7f9 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d1a2      	bne.n	8006a88 <_strtod_l+0x578>
 8006b42:	9b07      	ldr	r3, [sp, #28]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	9908      	ldr	r1, [sp, #32]
 8006b48:	462b      	mov	r3, r5
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f002 f90b 	bl	8008d68 <__s2b>
 8006b52:	9007      	str	r0, [sp, #28]
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f43f af1f 	beq.w	8006998 <_strtod_l+0x488>
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	1b9e      	subs	r6, r3, r6
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bfb4      	ite	lt
 8006b64:	4633      	movlt	r3, r6
 8006b66:	2300      	movge	r3, #0
 8006b68:	930c      	str	r3, [sp, #48]	; 0x30
 8006b6a:	9b06      	ldr	r3, [sp, #24]
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b72:	9312      	str	r3, [sp, #72]	; 0x48
 8006b74:	462e      	mov	r6, r5
 8006b76:	9b07      	ldr	r3, [sp, #28]
 8006b78:	4620      	mov	r0, r4
 8006b7a:	6859      	ldr	r1, [r3, #4]
 8006b7c:	f002 f84c 	bl	8008c18 <_Balloc>
 8006b80:	9005      	str	r0, [sp, #20]
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f af0c 	beq.w	80069a0 <_strtod_l+0x490>
 8006b88:	9b07      	ldr	r3, [sp, #28]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	3202      	adds	r2, #2
 8006b8e:	f103 010c 	add.w	r1, r3, #12
 8006b92:	0092      	lsls	r2, r2, #2
 8006b94:	300c      	adds	r0, #12
 8006b96:	f002 f831 	bl	8008bfc <memcpy>
 8006b9a:	ec4b ab10 	vmov	d0, sl, fp
 8006b9e:	aa1a      	add	r2, sp, #104	; 0x68
 8006ba0:	a919      	add	r1, sp, #100	; 0x64
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f002 fc26 	bl	80093f4 <__d2b>
 8006ba8:	ec4b ab18 	vmov	d8, sl, fp
 8006bac:	9018      	str	r0, [sp, #96]	; 0x60
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f43f aef6 	beq.w	80069a0 <_strtod_l+0x490>
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f002 f970 	bl	8008e9c <__i2b>
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f aeee 	beq.w	80069a0 <_strtod_l+0x490>
 8006bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bc6:	9904      	ldr	r1, [sp, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfab      	itete	ge
 8006bcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006bce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006bd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006bd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006bd6:	bfac      	ite	ge
 8006bd8:	eb03 0902 	addge.w	r9, r3, r2
 8006bdc:	1ad7      	sublt	r7, r2, r3
 8006bde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006be0:	eba3 0801 	sub.w	r8, r3, r1
 8006be4:	4490      	add	r8, r2
 8006be6:	4ba1      	ldr	r3, [pc, #644]	; (8006e6c <_strtod_l+0x95c>)
 8006be8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bec:	4598      	cmp	r8, r3
 8006bee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bf2:	f280 80c7 	bge.w	8006d84 <_strtod_l+0x874>
 8006bf6:	eba3 0308 	sub.w	r3, r3, r8
 8006bfa:	2b1f      	cmp	r3, #31
 8006bfc:	eba2 0203 	sub.w	r2, r2, r3
 8006c00:	f04f 0101 	mov.w	r1, #1
 8006c04:	f300 80b1 	bgt.w	8006d6a <_strtod_l+0x85a>
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	eb09 0802 	add.w	r8, r9, r2
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	45c1      	cmp	r9, r8
 8006c1a:	4417      	add	r7, r2
 8006c1c:	441f      	add	r7, r3
 8006c1e:	464b      	mov	r3, r9
 8006c20:	bfa8      	it	ge
 8006c22:	4643      	movge	r3, r8
 8006c24:	42bb      	cmp	r3, r7
 8006c26:	bfa8      	it	ge
 8006c28:	463b      	movge	r3, r7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfc2      	ittt	gt
 8006c2e:	eba8 0803 	subgt.w	r8, r8, r3
 8006c32:	1aff      	subgt	r7, r7, r3
 8006c34:	eba9 0903 	subgt.w	r9, r9, r3
 8006c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	dd17      	ble.n	8006c6e <_strtod_l+0x75e>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	461a      	mov	r2, r3
 8006c42:	4620      	mov	r0, r4
 8006c44:	f002 f9ea 	bl	800901c <__pow5mult>
 8006c48:	4606      	mov	r6, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f43f aea8 	beq.w	80069a0 <_strtod_l+0x490>
 8006c50:	4601      	mov	r1, r0
 8006c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c54:	4620      	mov	r0, r4
 8006c56:	f002 f937 	bl	8008ec8 <__multiply>
 8006c5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f43f ae9f 	beq.w	80069a0 <_strtod_l+0x490>
 8006c62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c64:	4620      	mov	r0, r4
 8006c66:	f002 f817 	bl	8008c98 <_Bfree>
 8006c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6c:	9318      	str	r3, [sp, #96]	; 0x60
 8006c6e:	f1b8 0f00 	cmp.w	r8, #0
 8006c72:	f300 808c 	bgt.w	8006d8e <_strtod_l+0x87e>
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd08      	ble.n	8006c8e <_strtod_l+0x77e>
 8006c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c7e:	9905      	ldr	r1, [sp, #20]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f002 f9cb 	bl	800901c <__pow5mult>
 8006c86:	9005      	str	r0, [sp, #20]
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f43f ae89 	beq.w	80069a0 <_strtod_l+0x490>
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	dd08      	ble.n	8006ca4 <_strtod_l+0x794>
 8006c92:	9905      	ldr	r1, [sp, #20]
 8006c94:	463a      	mov	r2, r7
 8006c96:	4620      	mov	r0, r4
 8006c98:	f002 fa1a 	bl	80090d0 <__lshift>
 8006c9c:	9005      	str	r0, [sp, #20]
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f43f ae7e 	beq.w	80069a0 <_strtod_l+0x490>
 8006ca4:	f1b9 0f00 	cmp.w	r9, #0
 8006ca8:	dd08      	ble.n	8006cbc <_strtod_l+0x7ac>
 8006caa:	4631      	mov	r1, r6
 8006cac:	464a      	mov	r2, r9
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f002 fa0e 	bl	80090d0 <__lshift>
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f43f ae72 	beq.w	80069a0 <_strtod_l+0x490>
 8006cbc:	9a05      	ldr	r2, [sp, #20]
 8006cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f002 fa91 	bl	80091e8 <__mdiff>
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f43f ae69 	beq.w	80069a0 <_strtod_l+0x490>
 8006cce:	68c3      	ldr	r3, [r0, #12]
 8006cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60c3      	str	r3, [r0, #12]
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	f002 fa6a 	bl	80091b0 <__mcmp>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	da60      	bge.n	8006da2 <_strtod_l+0x892>
 8006ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ce6:	f040 8082 	bne.w	8006dee <_strtod_l+0x8de>
 8006cea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d17d      	bne.n	8006dee <_strtod_l+0x8de>
 8006cf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cf6:	0d1b      	lsrs	r3, r3, #20
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006cfe:	d976      	bls.n	8006dee <_strtod_l+0x8de>
 8006d00:	696b      	ldr	r3, [r5, #20]
 8006d02:	b913      	cbnz	r3, 8006d0a <_strtod_l+0x7fa>
 8006d04:	692b      	ldr	r3, [r5, #16]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	dd71      	ble.n	8006dee <_strtod_l+0x8de>
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f002 f9de 	bl	80090d0 <__lshift>
 8006d14:	4631      	mov	r1, r6
 8006d16:	4605      	mov	r5, r0
 8006d18:	f002 fa4a 	bl	80091b0 <__mcmp>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	dd66      	ble.n	8006dee <_strtod_l+0x8de>
 8006d20:	9904      	ldr	r1, [sp, #16]
 8006d22:	4a53      	ldr	r2, [pc, #332]	; (8006e70 <_strtod_l+0x960>)
 8006d24:	465b      	mov	r3, fp
 8006d26:	2900      	cmp	r1, #0
 8006d28:	f000 8081 	beq.w	8006e2e <_strtod_l+0x91e>
 8006d2c:	ea02 010b 	and.w	r1, r2, fp
 8006d30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d34:	dc7b      	bgt.n	8006e2e <_strtod_l+0x91e>
 8006d36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d3a:	f77f aea9 	ble.w	8006a90 <_strtod_l+0x580>
 8006d3e:	4b4d      	ldr	r3, [pc, #308]	; (8006e74 <_strtod_l+0x964>)
 8006d40:	4650      	mov	r0, sl
 8006d42:	4659      	mov	r1, fp
 8006d44:	2200      	movs	r2, #0
 8006d46:	f7f9 fc57 	bl	80005f8 <__aeabi_dmul>
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4303      	orrs	r3, r0
 8006d4e:	bf08      	it	eq
 8006d50:	2322      	moveq	r3, #34	; 0x22
 8006d52:	4682      	mov	sl, r0
 8006d54:	468b      	mov	fp, r1
 8006d56:	bf08      	it	eq
 8006d58:	6023      	streq	r3, [r4, #0]
 8006d5a:	e62b      	b.n	80069b4 <_strtod_l+0x4a4>
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	ea03 0a0a 	and.w	sl, r3, sl
 8006d68:	e6e3      	b.n	8006b32 <_strtod_l+0x622>
 8006d6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006d6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006d72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006d76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006d7a:	fa01 f308 	lsl.w	r3, r1, r8
 8006d7e:	9308      	str	r3, [sp, #32]
 8006d80:	910d      	str	r1, [sp, #52]	; 0x34
 8006d82:	e746      	b.n	8006c12 <_strtod_l+0x702>
 8006d84:	2300      	movs	r3, #0
 8006d86:	9308      	str	r3, [sp, #32]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d8c:	e741      	b.n	8006c12 <_strtod_l+0x702>
 8006d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d90:	4642      	mov	r2, r8
 8006d92:	4620      	mov	r0, r4
 8006d94:	f002 f99c 	bl	80090d0 <__lshift>
 8006d98:	9018      	str	r0, [sp, #96]	; 0x60
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f47f af6b 	bne.w	8006c76 <_strtod_l+0x766>
 8006da0:	e5fe      	b.n	80069a0 <_strtod_l+0x490>
 8006da2:	465f      	mov	r7, fp
 8006da4:	d16e      	bne.n	8006e84 <_strtod_l+0x974>
 8006da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dac:	b342      	cbz	r2, 8006e00 <_strtod_l+0x8f0>
 8006dae:	4a32      	ldr	r2, [pc, #200]	; (8006e78 <_strtod_l+0x968>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d128      	bne.n	8006e06 <_strtod_l+0x8f6>
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	4651      	mov	r1, sl
 8006db8:	b1eb      	cbz	r3, 8006df6 <_strtod_l+0x8e6>
 8006dba:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <_strtod_l+0x960>)
 8006dbc:	403b      	ands	r3, r7
 8006dbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc6:	d819      	bhi.n	8006dfc <_strtod_l+0x8ec>
 8006dc8:	0d1b      	lsrs	r3, r3, #20
 8006dca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	d117      	bne.n	8006e06 <_strtod_l+0x8f6>
 8006dd6:	4b29      	ldr	r3, [pc, #164]	; (8006e7c <_strtod_l+0x96c>)
 8006dd8:	429f      	cmp	r7, r3
 8006dda:	d102      	bne.n	8006de2 <_strtod_l+0x8d2>
 8006ddc:	3101      	adds	r1, #1
 8006dde:	f43f addf 	beq.w	80069a0 <_strtod_l+0x490>
 8006de2:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <_strtod_l+0x960>)
 8006de4:	403b      	ands	r3, r7
 8006de6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006dea:	f04f 0a00 	mov.w	sl, #0
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1a4      	bne.n	8006d3e <_strtod_l+0x82e>
 8006df4:	e5de      	b.n	80069b4 <_strtod_l+0x4a4>
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfa:	e7ea      	b.n	8006dd2 <_strtod_l+0x8c2>
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	e7e8      	b.n	8006dd2 <_strtod_l+0x8c2>
 8006e00:	ea53 030a 	orrs.w	r3, r3, sl
 8006e04:	d08c      	beq.n	8006d20 <_strtod_l+0x810>
 8006e06:	9b08      	ldr	r3, [sp, #32]
 8006e08:	b1db      	cbz	r3, 8006e42 <_strtod_l+0x932>
 8006e0a:	423b      	tst	r3, r7
 8006e0c:	d0ef      	beq.n	8006dee <_strtod_l+0x8de>
 8006e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e10:	9a04      	ldr	r2, [sp, #16]
 8006e12:	4650      	mov	r0, sl
 8006e14:	4659      	mov	r1, fp
 8006e16:	b1c3      	cbz	r3, 8006e4a <_strtod_l+0x93a>
 8006e18:	f7ff fb5c 	bl	80064d4 <sulp>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	ec51 0b18 	vmov	r0, r1, d8
 8006e24:	f7f9 fa32 	bl	800028c <__adddf3>
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	e7df      	b.n	8006dee <_strtod_l+0x8de>
 8006e2e:	4013      	ands	r3, r2
 8006e30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e40:	e7d5      	b.n	8006dee <_strtod_l+0x8de>
 8006e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e44:	ea13 0f0a 	tst.w	r3, sl
 8006e48:	e7e0      	b.n	8006e0c <_strtod_l+0x8fc>
 8006e4a:	f7ff fb43 	bl	80064d4 <sulp>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	ec51 0b18 	vmov	r0, r1, d8
 8006e56:	f7f9 fa17 	bl	8000288 <__aeabi_dsub>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4682      	mov	sl, r0
 8006e60:	468b      	mov	fp, r1
 8006e62:	f7f9 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0c1      	beq.n	8006dee <_strtod_l+0x8de>
 8006e6a:	e611      	b.n	8006a90 <_strtod_l+0x580>
 8006e6c:	fffffc02 	.word	0xfffffc02
 8006e70:	7ff00000 	.word	0x7ff00000
 8006e74:	39500000 	.word	0x39500000
 8006e78:	000fffff 	.word	0x000fffff
 8006e7c:	7fefffff 	.word	0x7fefffff
 8006e80:	0800a1f0 	.word	0x0800a1f0
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	f002 fb10 	bl	80094ac <__ratio>
 8006e8c:	ec59 8b10 	vmov	r8, r9, d0
 8006e90:	ee10 0a10 	vmov	r0, s0
 8006e94:	2200      	movs	r2, #0
 8006e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 fe28 	bl	8000af0 <__aeabi_dcmple>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d07a      	beq.n	8006f9a <_strtod_l+0xa8a>
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04a      	beq.n	8006f40 <_strtod_l+0xa30>
 8006eaa:	4b95      	ldr	r3, [pc, #596]	; (8007100 <_strtod_l+0xbf0>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006eb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007100 <_strtod_l+0xbf0>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	4b92      	ldr	r3, [pc, #584]	; (8007104 <_strtod_l+0xbf4>)
 8006ebc:	403b      	ands	r3, r7
 8006ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ec2:	4b91      	ldr	r3, [pc, #580]	; (8007108 <_strtod_l+0xbf8>)
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	f040 80b0 	bne.w	800702a <_strtod_l+0xb1a>
 8006eca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ece:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006ed2:	ec4b ab10 	vmov	d0, sl, fp
 8006ed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006eda:	f002 fa0f 	bl	80092fc <__ulp>
 8006ede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ee2:	ec53 2b10 	vmov	r2, r3, d0
 8006ee6:	f7f9 fb87 	bl	80005f8 <__aeabi_dmul>
 8006eea:	4652      	mov	r2, sl
 8006eec:	465b      	mov	r3, fp
 8006eee:	f7f9 f9cd 	bl	800028c <__adddf3>
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4983      	ldr	r1, [pc, #524]	; (8007104 <_strtod_l+0xbf4>)
 8006ef6:	4a85      	ldr	r2, [pc, #532]	; (800710c <_strtod_l+0xbfc>)
 8006ef8:	4019      	ands	r1, r3
 8006efa:	4291      	cmp	r1, r2
 8006efc:	4682      	mov	sl, r0
 8006efe:	d960      	bls.n	8006fc2 <_strtod_l+0xab2>
 8006f00:	ee18 3a90 	vmov	r3, s17
 8006f04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d104      	bne.n	8006f16 <_strtod_l+0xa06>
 8006f0c:	ee18 3a10 	vmov	r3, s16
 8006f10:	3301      	adds	r3, #1
 8006f12:	f43f ad45 	beq.w	80069a0 <_strtod_l+0x490>
 8006f16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007118 <_strtod_l+0xc08>
 8006f1a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f20:	4620      	mov	r0, r4
 8006f22:	f001 feb9 	bl	8008c98 <_Bfree>
 8006f26:	9905      	ldr	r1, [sp, #20]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f001 feb5 	bl	8008c98 <_Bfree>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4620      	mov	r0, r4
 8006f32:	f001 feb1 	bl	8008c98 <_Bfree>
 8006f36:	4629      	mov	r1, r5
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 fead 	bl	8008c98 <_Bfree>
 8006f3e:	e61a      	b.n	8006b76 <_strtod_l+0x666>
 8006f40:	f1ba 0f00 	cmp.w	sl, #0
 8006f44:	d11b      	bne.n	8006f7e <_strtod_l+0xa6e>
 8006f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f4a:	b9f3      	cbnz	r3, 8006f8a <_strtod_l+0xa7a>
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <_strtod_l+0xbf0>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fdc2 	bl	8000adc <__aeabi_dcmplt>
 8006f58:	b9d0      	cbnz	r0, 8006f90 <_strtod_l+0xa80>
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <_strtod_l+0xc00>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	f7f9 fb49 	bl	80005f8 <__aeabi_dmul>
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006f72:	9315      	str	r3, [sp, #84]	; 0x54
 8006f74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f7c:	e79d      	b.n	8006eba <_strtod_l+0x9aa>
 8006f7e:	f1ba 0f01 	cmp.w	sl, #1
 8006f82:	d102      	bne.n	8006f8a <_strtod_l+0xa7a>
 8006f84:	2f00      	cmp	r7, #0
 8006f86:	f43f ad83 	beq.w	8006a90 <_strtod_l+0x580>
 8006f8a:	4b62      	ldr	r3, [pc, #392]	; (8007114 <_strtod_l+0xc04>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	e78e      	b.n	8006eae <_strtod_l+0x99e>
 8006f90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007110 <_strtod_l+0xc00>
 8006f94:	f04f 0800 	mov.w	r8, #0
 8006f98:	e7e7      	b.n	8006f6a <_strtod_l+0xa5a>
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	; (8007110 <_strtod_l+0xc00>)
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f7f9 fb29 	bl	80005f8 <__aeabi_dmul>
 8006fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4689      	mov	r9, r1
 8006fac:	b933      	cbnz	r3, 8006fbc <_strtod_l+0xaac>
 8006fae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8006fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006fba:	e7dd      	b.n	8006f78 <_strtod_l+0xa68>
 8006fbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006fc0:	e7f9      	b.n	8006fb6 <_strtod_l+0xaa6>
 8006fc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1a8      	bne.n	8006f1e <_strtod_l+0xa0e>
 8006fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd2:	0d1b      	lsrs	r3, r3, #20
 8006fd4:	051b      	lsls	r3, r3, #20
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d1a1      	bne.n	8006f1e <_strtod_l+0xa0e>
 8006fda:	4640      	mov	r0, r8
 8006fdc:	4649      	mov	r1, r9
 8006fde:	f7f9 fe6b 	bl	8000cb8 <__aeabi_d2lz>
 8006fe2:	f7f9 fadb 	bl	800059c <__aeabi_l2d>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 f94b 	bl	8000288 <__aeabi_dsub>
 8006ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ff8:	ea43 030a 	orr.w	r3, r3, sl
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	4680      	mov	r8, r0
 8007000:	4689      	mov	r9, r1
 8007002:	d055      	beq.n	80070b0 <_strtod_l+0xba0>
 8007004:	a336      	add	r3, pc, #216	; (adr r3, 80070e0 <_strtod_l+0xbd0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 fd67 	bl	8000adc <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	f47f acd0 	bne.w	80069b4 <_strtod_l+0x4a4>
 8007014:	a334      	add	r3, pc, #208	; (adr r3, 80070e8 <_strtod_l+0xbd8>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 8007022:	2800      	cmp	r0, #0
 8007024:	f43f af7b 	beq.w	8006f1e <_strtod_l+0xa0e>
 8007028:	e4c4      	b.n	80069b4 <_strtod_l+0x4a4>
 800702a:	9b04      	ldr	r3, [sp, #16]
 800702c:	b333      	cbz	r3, 800707c <_strtod_l+0xb6c>
 800702e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007030:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007034:	d822      	bhi.n	800707c <_strtod_l+0xb6c>
 8007036:	a32e      	add	r3, pc, #184	; (adr r3, 80070f0 <_strtod_l+0xbe0>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	4640      	mov	r0, r8
 800703e:	4649      	mov	r1, r9
 8007040:	f7f9 fd56 	bl	8000af0 <__aeabi_dcmple>
 8007044:	b1a0      	cbz	r0, 8007070 <_strtod_l+0xb60>
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	f7f9 fdad 	bl	8000ba8 <__aeabi_d2uiz>
 800704e:	2801      	cmp	r0, #1
 8007050:	bf38      	it	cc
 8007052:	2001      	movcc	r0, #1
 8007054:	f7f9 fa56 	bl	8000504 <__aeabi_ui2d>
 8007058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705a:	4680      	mov	r8, r0
 800705c:	4689      	mov	r9, r1
 800705e:	bb23      	cbnz	r3, 80070aa <_strtod_l+0xb9a>
 8007060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007064:	9010      	str	r0, [sp, #64]	; 0x40
 8007066:	9311      	str	r3, [sp, #68]	; 0x44
 8007068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800706c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007074:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	9309      	str	r3, [sp, #36]	; 0x24
 800707c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007080:	eeb0 0a48 	vmov.f32	s0, s16
 8007084:	eef0 0a68 	vmov.f32	s1, s17
 8007088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800708c:	f002 f936 	bl	80092fc <__ulp>
 8007090:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007094:	ec53 2b10 	vmov	r2, r3, d0
 8007098:	f7f9 faae 	bl	80005f8 <__aeabi_dmul>
 800709c:	ec53 2b18 	vmov	r2, r3, d8
 80070a0:	f7f9 f8f4 	bl	800028c <__adddf3>
 80070a4:	4682      	mov	sl, r0
 80070a6:	468b      	mov	fp, r1
 80070a8:	e78d      	b.n	8006fc6 <_strtod_l+0xab6>
 80070aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80070ae:	e7db      	b.n	8007068 <_strtod_l+0xb58>
 80070b0:	a311      	add	r3, pc, #68	; (adr r3, 80070f8 <_strtod_l+0xbe8>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 fd11 	bl	8000adc <__aeabi_dcmplt>
 80070ba:	e7b2      	b.n	8007022 <_strtod_l+0xb12>
 80070bc:	2300      	movs	r3, #0
 80070be:	930a      	str	r3, [sp, #40]	; 0x28
 80070c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	f7ff ba6b 	b.w	80065a0 <_strtod_l+0x90>
 80070ca:	2a65      	cmp	r2, #101	; 0x65
 80070cc:	f43f ab5f 	beq.w	800678e <_strtod_l+0x27e>
 80070d0:	2a45      	cmp	r2, #69	; 0x45
 80070d2:	f43f ab5c 	beq.w	800678e <_strtod_l+0x27e>
 80070d6:	2301      	movs	r3, #1
 80070d8:	f7ff bb94 	b.w	8006804 <_strtod_l+0x2f4>
 80070dc:	f3af 8000 	nop.w
 80070e0:	94a03595 	.word	0x94a03595
 80070e4:	3fdfffff 	.word	0x3fdfffff
 80070e8:	35afe535 	.word	0x35afe535
 80070ec:	3fe00000 	.word	0x3fe00000
 80070f0:	ffc00000 	.word	0xffc00000
 80070f4:	41dfffff 	.word	0x41dfffff
 80070f8:	94a03595 	.word	0x94a03595
 80070fc:	3fcfffff 	.word	0x3fcfffff
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	7ff00000 	.word	0x7ff00000
 8007108:	7fe00000 	.word	0x7fe00000
 800710c:	7c9fffff 	.word	0x7c9fffff
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	bff00000 	.word	0xbff00000
 8007118:	7fefffff 	.word	0x7fefffff

0800711c <_strtod_r>:
 800711c:	4b01      	ldr	r3, [pc, #4]	; (8007124 <_strtod_r+0x8>)
 800711e:	f7ff b9f7 	b.w	8006510 <_strtod_l>
 8007122:	bf00      	nop
 8007124:	20000074 	.word	0x20000074

08007128 <_strtol_l.constprop.0>:
 8007128:	2b01      	cmp	r3, #1
 800712a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712e:	d001      	beq.n	8007134 <_strtol_l.constprop.0+0xc>
 8007130:	2b24      	cmp	r3, #36	; 0x24
 8007132:	d906      	bls.n	8007142 <_strtol_l.constprop.0+0x1a>
 8007134:	f7fe fa52 	bl	80055dc <__errno>
 8007138:	2316      	movs	r3, #22
 800713a:	6003      	str	r3, [r0, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007142:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007228 <_strtol_l.constprop.0+0x100>
 8007146:	460d      	mov	r5, r1
 8007148:	462e      	mov	r6, r5
 800714a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007152:	f017 0708 	ands.w	r7, r7, #8
 8007156:	d1f7      	bne.n	8007148 <_strtol_l.constprop.0+0x20>
 8007158:	2c2d      	cmp	r4, #45	; 0x2d
 800715a:	d132      	bne.n	80071c2 <_strtol_l.constprop.0+0x9a>
 800715c:	782c      	ldrb	r4, [r5, #0]
 800715e:	2701      	movs	r7, #1
 8007160:	1cb5      	adds	r5, r6, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d05b      	beq.n	800721e <_strtol_l.constprop.0+0xf6>
 8007166:	2b10      	cmp	r3, #16
 8007168:	d109      	bne.n	800717e <_strtol_l.constprop.0+0x56>
 800716a:	2c30      	cmp	r4, #48	; 0x30
 800716c:	d107      	bne.n	800717e <_strtol_l.constprop.0+0x56>
 800716e:	782c      	ldrb	r4, [r5, #0]
 8007170:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007174:	2c58      	cmp	r4, #88	; 0x58
 8007176:	d14d      	bne.n	8007214 <_strtol_l.constprop.0+0xec>
 8007178:	786c      	ldrb	r4, [r5, #1]
 800717a:	2310      	movs	r3, #16
 800717c:	3502      	adds	r5, #2
 800717e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007182:	f108 38ff 	add.w	r8, r8, #4294967295
 8007186:	f04f 0c00 	mov.w	ip, #0
 800718a:	fbb8 f9f3 	udiv	r9, r8, r3
 800718e:	4666      	mov	r6, ip
 8007190:	fb03 8a19 	mls	sl, r3, r9, r8
 8007194:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007198:	f1be 0f09 	cmp.w	lr, #9
 800719c:	d816      	bhi.n	80071cc <_strtol_l.constprop.0+0xa4>
 800719e:	4674      	mov	r4, lr
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	dd24      	ble.n	80071ee <_strtol_l.constprop.0+0xc6>
 80071a4:	f1bc 0f00 	cmp.w	ip, #0
 80071a8:	db1e      	blt.n	80071e8 <_strtol_l.constprop.0+0xc0>
 80071aa:	45b1      	cmp	r9, r6
 80071ac:	d31c      	bcc.n	80071e8 <_strtol_l.constprop.0+0xc0>
 80071ae:	d101      	bne.n	80071b4 <_strtol_l.constprop.0+0x8c>
 80071b0:	45a2      	cmp	sl, r4
 80071b2:	db19      	blt.n	80071e8 <_strtol_l.constprop.0+0xc0>
 80071b4:	fb06 4603 	mla	r6, r6, r3, r4
 80071b8:	f04f 0c01 	mov.w	ip, #1
 80071bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c0:	e7e8      	b.n	8007194 <_strtol_l.constprop.0+0x6c>
 80071c2:	2c2b      	cmp	r4, #43	; 0x2b
 80071c4:	bf04      	itt	eq
 80071c6:	782c      	ldrbeq	r4, [r5, #0]
 80071c8:	1cb5      	addeq	r5, r6, #2
 80071ca:	e7ca      	b.n	8007162 <_strtol_l.constprop.0+0x3a>
 80071cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80071d0:	f1be 0f19 	cmp.w	lr, #25
 80071d4:	d801      	bhi.n	80071da <_strtol_l.constprop.0+0xb2>
 80071d6:	3c37      	subs	r4, #55	; 0x37
 80071d8:	e7e2      	b.n	80071a0 <_strtol_l.constprop.0+0x78>
 80071da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80071de:	f1be 0f19 	cmp.w	lr, #25
 80071e2:	d804      	bhi.n	80071ee <_strtol_l.constprop.0+0xc6>
 80071e4:	3c57      	subs	r4, #87	; 0x57
 80071e6:	e7db      	b.n	80071a0 <_strtol_l.constprop.0+0x78>
 80071e8:	f04f 3cff 	mov.w	ip, #4294967295
 80071ec:	e7e6      	b.n	80071bc <_strtol_l.constprop.0+0x94>
 80071ee:	f1bc 0f00 	cmp.w	ip, #0
 80071f2:	da05      	bge.n	8007200 <_strtol_l.constprop.0+0xd8>
 80071f4:	2322      	movs	r3, #34	; 0x22
 80071f6:	6003      	str	r3, [r0, #0]
 80071f8:	4646      	mov	r6, r8
 80071fa:	b942      	cbnz	r2, 800720e <_strtol_l.constprop.0+0xe6>
 80071fc:	4630      	mov	r0, r6
 80071fe:	e79e      	b.n	800713e <_strtol_l.constprop.0+0x16>
 8007200:	b107      	cbz	r7, 8007204 <_strtol_l.constprop.0+0xdc>
 8007202:	4276      	negs	r6, r6
 8007204:	2a00      	cmp	r2, #0
 8007206:	d0f9      	beq.n	80071fc <_strtol_l.constprop.0+0xd4>
 8007208:	f1bc 0f00 	cmp.w	ip, #0
 800720c:	d000      	beq.n	8007210 <_strtol_l.constprop.0+0xe8>
 800720e:	1e69      	subs	r1, r5, #1
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	e7f3      	b.n	80071fc <_strtol_l.constprop.0+0xd4>
 8007214:	2430      	movs	r4, #48	; 0x30
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1b1      	bne.n	800717e <_strtol_l.constprop.0+0x56>
 800721a:	2308      	movs	r3, #8
 800721c:	e7af      	b.n	800717e <_strtol_l.constprop.0+0x56>
 800721e:	2c30      	cmp	r4, #48	; 0x30
 8007220:	d0a5      	beq.n	800716e <_strtol_l.constprop.0+0x46>
 8007222:	230a      	movs	r3, #10
 8007224:	e7ab      	b.n	800717e <_strtol_l.constprop.0+0x56>
 8007226:	bf00      	nop
 8007228:	0800a219 	.word	0x0800a219

0800722c <_strtol_r>:
 800722c:	f7ff bf7c 	b.w	8007128 <_strtol_l.constprop.0>

08007230 <__swbuf_r>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	460e      	mov	r6, r1
 8007234:	4614      	mov	r4, r2
 8007236:	4605      	mov	r5, r0
 8007238:	b118      	cbz	r0, 8007242 <__swbuf_r+0x12>
 800723a:	6983      	ldr	r3, [r0, #24]
 800723c:	b90b      	cbnz	r3, 8007242 <__swbuf_r+0x12>
 800723e:	f001 f84b 	bl	80082d8 <__sinit>
 8007242:	4b21      	ldr	r3, [pc, #132]	; (80072c8 <__swbuf_r+0x98>)
 8007244:	429c      	cmp	r4, r3
 8007246:	d12b      	bne.n	80072a0 <__swbuf_r+0x70>
 8007248:	686c      	ldr	r4, [r5, #4]
 800724a:	69a3      	ldr	r3, [r4, #24]
 800724c:	60a3      	str	r3, [r4, #8]
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	071a      	lsls	r2, r3, #28
 8007252:	d52f      	bpl.n	80072b4 <__swbuf_r+0x84>
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	b36b      	cbz	r3, 80072b4 <__swbuf_r+0x84>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	6820      	ldr	r0, [r4, #0]
 800725c:	1ac0      	subs	r0, r0, r3
 800725e:	6963      	ldr	r3, [r4, #20]
 8007260:	b2f6      	uxtb	r6, r6
 8007262:	4283      	cmp	r3, r0
 8007264:	4637      	mov	r7, r6
 8007266:	dc04      	bgt.n	8007272 <__swbuf_r+0x42>
 8007268:	4621      	mov	r1, r4
 800726a:	4628      	mov	r0, r5
 800726c:	f000 ffa0 	bl	80081b0 <_fflush_r>
 8007270:	bb30      	cbnz	r0, 80072c0 <__swbuf_r+0x90>
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	701e      	strb	r6, [r3, #0]
 8007280:	6963      	ldr	r3, [r4, #20]
 8007282:	3001      	adds	r0, #1
 8007284:	4283      	cmp	r3, r0
 8007286:	d004      	beq.n	8007292 <__swbuf_r+0x62>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d506      	bpl.n	800729c <__swbuf_r+0x6c>
 800728e:	2e0a      	cmp	r6, #10
 8007290:	d104      	bne.n	800729c <__swbuf_r+0x6c>
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 ff8b 	bl	80081b0 <_fflush_r>
 800729a:	b988      	cbnz	r0, 80072c0 <__swbuf_r+0x90>
 800729c:	4638      	mov	r0, r7
 800729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <__swbuf_r+0x9c>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <__swbuf_r+0x7a>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7cf      	b.n	800724a <__swbuf_r+0x1a>
 80072aa:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <__swbuf_r+0xa0>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7ca      	b.n	800724a <__swbuf_r+0x1a>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 f80c 	bl	80072d4 <__swsetup_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d0cb      	beq.n	8007258 <__swbuf_r+0x28>
 80072c0:	f04f 37ff 	mov.w	r7, #4294967295
 80072c4:	e7ea      	b.n	800729c <__swbuf_r+0x6c>
 80072c6:	bf00      	nop
 80072c8:	0800a3cc 	.word	0x0800a3cc
 80072cc:	0800a3ec 	.word	0x0800a3ec
 80072d0:	0800a3ac 	.word	0x0800a3ac

080072d4 <__swsetup_r>:
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <__swsetup_r+0xcc>)
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	681d      	ldr	r5, [r3, #0]
 80072da:	4606      	mov	r6, r0
 80072dc:	460c      	mov	r4, r1
 80072de:	b125      	cbz	r5, 80072ea <__swsetup_r+0x16>
 80072e0:	69ab      	ldr	r3, [r5, #24]
 80072e2:	b913      	cbnz	r3, 80072ea <__swsetup_r+0x16>
 80072e4:	4628      	mov	r0, r5
 80072e6:	f000 fff7 	bl	80082d8 <__sinit>
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <__swsetup_r+0xd0>)
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d10f      	bne.n	8007310 <__swsetup_r+0x3c>
 80072f0:	686c      	ldr	r4, [r5, #4]
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f8:	0719      	lsls	r1, r3, #28
 80072fa:	d42c      	bmi.n	8007356 <__swsetup_r+0x82>
 80072fc:	06dd      	lsls	r5, r3, #27
 80072fe:	d411      	bmi.n	8007324 <__swsetup_r+0x50>
 8007300:	2309      	movs	r3, #9
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	e03e      	b.n	800738e <__swsetup_r+0xba>
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <__swsetup_r+0xd4>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <__swsetup_r+0x46>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7eb      	b.n	80072f2 <__swsetup_r+0x1e>
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <__swsetup_r+0xd8>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7e6      	b.n	80072f2 <__swsetup_r+0x1e>
 8007324:	0758      	lsls	r0, r3, #29
 8007326:	d512      	bpl.n	800734e <__swsetup_r+0x7a>
 8007328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732a:	b141      	cbz	r1, 800733e <__swsetup_r+0x6a>
 800732c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <__swsetup_r+0x66>
 8007334:	4630      	mov	r0, r6
 8007336:	f002 f947 	bl	80095c8 <_free_r>
 800733a:	2300      	movs	r3, #0
 800733c:	6363      	str	r3, [r4, #52]	; 0x34
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	2300      	movs	r3, #0
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0308 	orr.w	r3, r3, #8
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	b94b      	cbnz	r3, 800736e <__swsetup_r+0x9a>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007364:	d003      	beq.n	800736e <__swsetup_r+0x9a>
 8007366:	4621      	mov	r1, r4
 8007368:	4630      	mov	r0, r6
 800736a:	f001 fbed 	bl	8008b48 <__smakebuf_r>
 800736e:	89a0      	ldrh	r0, [r4, #12]
 8007370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007374:	f010 0301 	ands.w	r3, r0, #1
 8007378:	d00a      	beq.n	8007390 <__swsetup_r+0xbc>
 800737a:	2300      	movs	r3, #0
 800737c:	60a3      	str	r3, [r4, #8]
 800737e:	6963      	ldr	r3, [r4, #20]
 8007380:	425b      	negs	r3, r3
 8007382:	61a3      	str	r3, [r4, #24]
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	b943      	cbnz	r3, 800739a <__swsetup_r+0xc6>
 8007388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800738c:	d1ba      	bne.n	8007304 <__swsetup_r+0x30>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	0781      	lsls	r1, r0, #30
 8007392:	bf58      	it	pl
 8007394:	6963      	ldrpl	r3, [r4, #20]
 8007396:	60a3      	str	r3, [r4, #8]
 8007398:	e7f4      	b.n	8007384 <__swsetup_r+0xb0>
 800739a:	2000      	movs	r0, #0
 800739c:	e7f7      	b.n	800738e <__swsetup_r+0xba>
 800739e:	bf00      	nop
 80073a0:	2000000c 	.word	0x2000000c
 80073a4:	0800a3cc 	.word	0x0800a3cc
 80073a8:	0800a3ec 	.word	0x0800a3ec
 80073ac:	0800a3ac 	.word	0x0800a3ac

080073b0 <quorem>:
 80073b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	6903      	ldr	r3, [r0, #16]
 80073b6:	690c      	ldr	r4, [r1, #16]
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	4607      	mov	r7, r0
 80073bc:	f2c0 8081 	blt.w	80074c2 <quorem+0x112>
 80073c0:	3c01      	subs	r4, #1
 80073c2:	f101 0814 	add.w	r8, r1, #20
 80073c6:	f100 0514 	add.w	r5, r0, #20
 80073ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d8:	3301      	adds	r3, #1
 80073da:	429a      	cmp	r2, r3
 80073dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80073e8:	d331      	bcc.n	800744e <quorem+0x9e>
 80073ea:	f04f 0e00 	mov.w	lr, #0
 80073ee:	4640      	mov	r0, r8
 80073f0:	46ac      	mov	ip, r5
 80073f2:	46f2      	mov	sl, lr
 80073f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80073f8:	b293      	uxth	r3, r2
 80073fa:	fb06 e303 	mla	r3, r6, r3, lr
 80073fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007402:	b29b      	uxth	r3, r3
 8007404:	ebaa 0303 	sub.w	r3, sl, r3
 8007408:	f8dc a000 	ldr.w	sl, [ip]
 800740c:	0c12      	lsrs	r2, r2, #16
 800740e:	fa13 f38a 	uxtah	r3, r3, sl
 8007412:	fb06 e202 	mla	r2, r6, r2, lr
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800741e:	b292      	uxth	r2, r2
 8007420:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007428:	f8bd 3000 	ldrh.w	r3, [sp]
 800742c:	4581      	cmp	r9, r0
 800742e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007432:	f84c 3b04 	str.w	r3, [ip], #4
 8007436:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800743a:	d2db      	bcs.n	80073f4 <quorem+0x44>
 800743c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007440:	b92b      	cbnz	r3, 800744e <quorem+0x9e>
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	3b04      	subs	r3, #4
 8007446:	429d      	cmp	r5, r3
 8007448:	461a      	mov	r2, r3
 800744a:	d32e      	bcc.n	80074aa <quorem+0xfa>
 800744c:	613c      	str	r4, [r7, #16]
 800744e:	4638      	mov	r0, r7
 8007450:	f001 feae 	bl	80091b0 <__mcmp>
 8007454:	2800      	cmp	r0, #0
 8007456:	db24      	blt.n	80074a2 <quorem+0xf2>
 8007458:	3601      	adds	r6, #1
 800745a:	4628      	mov	r0, r5
 800745c:	f04f 0c00 	mov.w	ip, #0
 8007460:	f858 2b04 	ldr.w	r2, [r8], #4
 8007464:	f8d0 e000 	ldr.w	lr, [r0]
 8007468:	b293      	uxth	r3, r2
 800746a:	ebac 0303 	sub.w	r3, ip, r3
 800746e:	0c12      	lsrs	r2, r2, #16
 8007470:	fa13 f38e 	uxtah	r3, r3, lr
 8007474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007482:	45c1      	cmp	r9, r8
 8007484:	f840 3b04 	str.w	r3, [r0], #4
 8007488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800748c:	d2e8      	bcs.n	8007460 <quorem+0xb0>
 800748e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007496:	b922      	cbnz	r2, 80074a2 <quorem+0xf2>
 8007498:	3b04      	subs	r3, #4
 800749a:	429d      	cmp	r5, r3
 800749c:	461a      	mov	r2, r3
 800749e:	d30a      	bcc.n	80074b6 <quorem+0x106>
 80074a0:	613c      	str	r4, [r7, #16]
 80074a2:	4630      	mov	r0, r6
 80074a4:	b003      	add	sp, #12
 80074a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	d1cc      	bne.n	800744c <quorem+0x9c>
 80074b2:	3c01      	subs	r4, #1
 80074b4:	e7c7      	b.n	8007446 <quorem+0x96>
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	d1f0      	bne.n	80074a0 <quorem+0xf0>
 80074be:	3c01      	subs	r4, #1
 80074c0:	e7eb      	b.n	800749a <quorem+0xea>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e7ee      	b.n	80074a4 <quorem+0xf4>
	...

080074c8 <_dtoa_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	ed2d 8b04 	vpush	{d8-d9}
 80074d0:	ec57 6b10 	vmov	r6, r7, d0
 80074d4:	b093      	sub	sp, #76	; 0x4c
 80074d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074dc:	9106      	str	r1, [sp, #24]
 80074de:	ee10 aa10 	vmov	sl, s0
 80074e2:	4604      	mov	r4, r0
 80074e4:	9209      	str	r2, [sp, #36]	; 0x24
 80074e6:	930c      	str	r3, [sp, #48]	; 0x30
 80074e8:	46bb      	mov	fp, r7
 80074ea:	b975      	cbnz	r5, 800750a <_dtoa_r+0x42>
 80074ec:	2010      	movs	r0, #16
 80074ee:	f001 fb6b 	bl	8008bc8 <malloc>
 80074f2:	4602      	mov	r2, r0
 80074f4:	6260      	str	r0, [r4, #36]	; 0x24
 80074f6:	b920      	cbnz	r0, 8007502 <_dtoa_r+0x3a>
 80074f8:	4ba7      	ldr	r3, [pc, #668]	; (8007798 <_dtoa_r+0x2d0>)
 80074fa:	21ea      	movs	r1, #234	; 0xea
 80074fc:	48a7      	ldr	r0, [pc, #668]	; (800779c <_dtoa_r+0x2d4>)
 80074fe:	f002 fb2d 	bl	8009b5c <__assert_func>
 8007502:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007506:	6005      	str	r5, [r0, #0]
 8007508:	60c5      	str	r5, [r0, #12]
 800750a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750c:	6819      	ldr	r1, [r3, #0]
 800750e:	b151      	cbz	r1, 8007526 <_dtoa_r+0x5e>
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	604a      	str	r2, [r1, #4]
 8007514:	2301      	movs	r3, #1
 8007516:	4093      	lsls	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
 800751a:	4620      	mov	r0, r4
 800751c:	f001 fbbc 	bl	8008c98 <_Bfree>
 8007520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	1e3b      	subs	r3, r7, #0
 8007528:	bfaa      	itet	ge
 800752a:	2300      	movge	r3, #0
 800752c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007530:	f8c8 3000 	strge.w	r3, [r8]
 8007534:	4b9a      	ldr	r3, [pc, #616]	; (80077a0 <_dtoa_r+0x2d8>)
 8007536:	bfbc      	itt	lt
 8007538:	2201      	movlt	r2, #1
 800753a:	f8c8 2000 	strlt.w	r2, [r8]
 800753e:	ea33 030b 	bics.w	r3, r3, fp
 8007542:	d11b      	bne.n	800757c <_dtoa_r+0xb4>
 8007544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007546:	f242 730f 	movw	r3, #9999	; 0x270f
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007550:	4333      	orrs	r3, r6
 8007552:	f000 8592 	beq.w	800807a <_dtoa_r+0xbb2>
 8007556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007558:	b963      	cbnz	r3, 8007574 <_dtoa_r+0xac>
 800755a:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <_dtoa_r+0x2dc>)
 800755c:	e022      	b.n	80075a4 <_dtoa_r+0xdc>
 800755e:	4b92      	ldr	r3, [pc, #584]	; (80077a8 <_dtoa_r+0x2e0>)
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	3308      	adds	r3, #8
 8007564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	9801      	ldr	r0, [sp, #4]
 800756a:	b013      	add	sp, #76	; 0x4c
 800756c:	ecbd 8b04 	vpop	{d8-d9}
 8007570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007574:	4b8b      	ldr	r3, [pc, #556]	; (80077a4 <_dtoa_r+0x2dc>)
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	3303      	adds	r3, #3
 800757a:	e7f3      	b.n	8007564 <_dtoa_r+0x9c>
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	4650      	mov	r0, sl
 8007582:	4659      	mov	r1, fp
 8007584:	f7f9 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007588:	ec4b ab19 	vmov	d9, sl, fp
 800758c:	4680      	mov	r8, r0
 800758e:	b158      	cbz	r0, 80075a8 <_dtoa_r+0xe0>
 8007590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007592:	2301      	movs	r3, #1
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 856b 	beq.w	8008074 <_dtoa_r+0xbac>
 800759e:	4883      	ldr	r0, [pc, #524]	; (80077ac <_dtoa_r+0x2e4>)
 80075a0:	6018      	str	r0, [r3, #0]
 80075a2:	1e43      	subs	r3, r0, #1
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	e7df      	b.n	8007568 <_dtoa_r+0xa0>
 80075a8:	ec4b ab10 	vmov	d0, sl, fp
 80075ac:	aa10      	add	r2, sp, #64	; 0x40
 80075ae:	a911      	add	r1, sp, #68	; 0x44
 80075b0:	4620      	mov	r0, r4
 80075b2:	f001 ff1f 	bl	80093f4 <__d2b>
 80075b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075ba:	ee08 0a10 	vmov	s16, r0
 80075be:	2d00      	cmp	r5, #0
 80075c0:	f000 8084 	beq.w	80076cc <_dtoa_r+0x204>
 80075c4:	ee19 3a90 	vmov	r3, s19
 80075c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075d0:	4656      	mov	r6, sl
 80075d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075de:	4b74      	ldr	r3, [pc, #464]	; (80077b0 <_dtoa_r+0x2e8>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f8 fe4f 	bl	8000288 <__aeabi_dsub>
 80075ea:	a365      	add	r3, pc, #404	; (adr r3, 8007780 <_dtoa_r+0x2b8>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f9 f802 	bl	80005f8 <__aeabi_dmul>
 80075f4:	a364      	add	r3, pc, #400	; (adr r3, 8007788 <_dtoa_r+0x2c0>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4606      	mov	r6, r0
 8007600:	4628      	mov	r0, r5
 8007602:	460f      	mov	r7, r1
 8007604:	f7f8 ff8e 	bl	8000524 <__aeabi_i2d>
 8007608:	a361      	add	r3, pc, #388	; (adr r3, 8007790 <_dtoa_r+0x2c8>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4630      	mov	r0, r6
 8007618:	4639      	mov	r1, r7
 800761a:	f7f8 fe37 	bl	800028c <__adddf3>
 800761e:	4606      	mov	r6, r0
 8007620:	460f      	mov	r7, r1
 8007622:	f7f9 fa99 	bl	8000b58 <__aeabi_d2iz>
 8007626:	2200      	movs	r2, #0
 8007628:	9000      	str	r0, [sp, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	4630      	mov	r0, r6
 800762e:	4639      	mov	r1, r7
 8007630:	f7f9 fa54 	bl	8000adc <__aeabi_dcmplt>
 8007634:	b150      	cbz	r0, 800764c <_dtoa_r+0x184>
 8007636:	9800      	ldr	r0, [sp, #0]
 8007638:	f7f8 ff74 	bl	8000524 <__aeabi_i2d>
 800763c:	4632      	mov	r2, r6
 800763e:	463b      	mov	r3, r7
 8007640:	f7f9 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007644:	b910      	cbnz	r0, 800764c <_dtoa_r+0x184>
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	2b16      	cmp	r3, #22
 8007650:	d85a      	bhi.n	8007708 <_dtoa_r+0x240>
 8007652:	9a00      	ldr	r2, [sp, #0]
 8007654:	4b57      	ldr	r3, [pc, #348]	; (80077b4 <_dtoa_r+0x2ec>)
 8007656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	ec51 0b19 	vmov	r0, r1, d9
 8007662:	f7f9 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	d050      	beq.n	800770c <_dtoa_r+0x244>
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	3b01      	subs	r3, #1
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2300      	movs	r3, #0
 8007672:	930b      	str	r3, [sp, #44]	; 0x2c
 8007674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007676:	1b5d      	subs	r5, r3, r5
 8007678:	1e6b      	subs	r3, r5, #1
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	bf45      	ittet	mi
 800767e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007682:	9304      	strmi	r3, [sp, #16]
 8007684:	2300      	movpl	r3, #0
 8007686:	2300      	movmi	r3, #0
 8007688:	bf4c      	ite	mi
 800768a:	9305      	strmi	r3, [sp, #20]
 800768c:	9304      	strpl	r3, [sp, #16]
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	db3d      	blt.n	8007710 <_dtoa_r+0x248>
 8007694:	9b05      	ldr	r3, [sp, #20]
 8007696:	9a00      	ldr	r2, [sp, #0]
 8007698:	920a      	str	r2, [sp, #40]	; 0x28
 800769a:	4413      	add	r3, r2
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	2300      	movs	r3, #0
 80076a0:	9307      	str	r3, [sp, #28]
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	f200 8089 	bhi.w	80077bc <_dtoa_r+0x2f4>
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	bfc4      	itt	gt
 80076ae:	3b04      	subgt	r3, #4
 80076b0:	9306      	strgt	r3, [sp, #24]
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	f1a3 0302 	sub.w	r3, r3, #2
 80076b8:	bfcc      	ite	gt
 80076ba:	2500      	movgt	r5, #0
 80076bc:	2501      	movle	r5, #1
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f200 8087 	bhi.w	80077d2 <_dtoa_r+0x30a>
 80076c4:	e8df f003 	tbb	[pc, r3]
 80076c8:	59383a2d 	.word	0x59383a2d
 80076cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076d0:	441d      	add	r5, r3
 80076d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	bfc1      	itttt	gt
 80076da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80076e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076ea:	bfda      	itte	le
 80076ec:	f1c3 0320 	rsble	r3, r3, #32
 80076f0:	fa06 f003 	lslle.w	r0, r6, r3
 80076f4:	4318      	orrgt	r0, r3
 80076f6:	f7f8 ff05 	bl	8000504 <__aeabi_ui2d>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4606      	mov	r6, r0
 80076fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007702:	3d01      	subs	r5, #1
 8007704:	930e      	str	r3, [sp, #56]	; 0x38
 8007706:	e76a      	b.n	80075de <_dtoa_r+0x116>
 8007708:	2301      	movs	r3, #1
 800770a:	e7b2      	b.n	8007672 <_dtoa_r+0x1aa>
 800770c:	900b      	str	r0, [sp, #44]	; 0x2c
 800770e:	e7b1      	b.n	8007674 <_dtoa_r+0x1ac>
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	9a00      	ldr	r2, [sp, #0]
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	4253      	negs	r3, r2
 800771a:	9307      	str	r3, [sp, #28]
 800771c:	2300      	movs	r3, #0
 800771e:	930a      	str	r3, [sp, #40]	; 0x28
 8007720:	e7bf      	b.n	80076a2 <_dtoa_r+0x1da>
 8007722:	2300      	movs	r3, #0
 8007724:	9308      	str	r3, [sp, #32]
 8007726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	dc55      	bgt.n	80077d8 <_dtoa_r+0x310>
 800772c:	2301      	movs	r3, #1
 800772e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007732:	461a      	mov	r2, r3
 8007734:	9209      	str	r2, [sp, #36]	; 0x24
 8007736:	e00c      	b.n	8007752 <_dtoa_r+0x28a>
 8007738:	2301      	movs	r3, #1
 800773a:	e7f3      	b.n	8007724 <_dtoa_r+0x25c>
 800773c:	2300      	movs	r3, #0
 800773e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	4413      	add	r3, r2
 8007746:	9302      	str	r3, [sp, #8]
 8007748:	3301      	adds	r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	bfb8      	it	lt
 8007750:	2301      	movlt	r3, #1
 8007752:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007754:	2200      	movs	r2, #0
 8007756:	6042      	str	r2, [r0, #4]
 8007758:	2204      	movs	r2, #4
 800775a:	f102 0614 	add.w	r6, r2, #20
 800775e:	429e      	cmp	r6, r3
 8007760:	6841      	ldr	r1, [r0, #4]
 8007762:	d93d      	bls.n	80077e0 <_dtoa_r+0x318>
 8007764:	4620      	mov	r0, r4
 8007766:	f001 fa57 	bl	8008c18 <_Balloc>
 800776a:	9001      	str	r0, [sp, #4]
 800776c:	2800      	cmp	r0, #0
 800776e:	d13b      	bne.n	80077e8 <_dtoa_r+0x320>
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <_dtoa_r+0x2f0>)
 8007772:	4602      	mov	r2, r0
 8007774:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007778:	e6c0      	b.n	80074fc <_dtoa_r+0x34>
 800777a:	2301      	movs	r3, #1
 800777c:	e7df      	b.n	800773e <_dtoa_r+0x276>
 800777e:	bf00      	nop
 8007780:	636f4361 	.word	0x636f4361
 8007784:	3fd287a7 	.word	0x3fd287a7
 8007788:	8b60c8b3 	.word	0x8b60c8b3
 800778c:	3fc68a28 	.word	0x3fc68a28
 8007790:	509f79fb 	.word	0x509f79fb
 8007794:	3fd34413 	.word	0x3fd34413
 8007798:	0800a326 	.word	0x0800a326
 800779c:	0800a33d 	.word	0x0800a33d
 80077a0:	7ff00000 	.word	0x7ff00000
 80077a4:	0800a322 	.word	0x0800a322
 80077a8:	0800a319 	.word	0x0800a319
 80077ac:	0800a199 	.word	0x0800a199
 80077b0:	3ff80000 	.word	0x3ff80000
 80077b4:	0800a510 	.word	0x0800a510
 80077b8:	0800a398 	.word	0x0800a398
 80077bc:	2501      	movs	r5, #1
 80077be:	2300      	movs	r3, #0
 80077c0:	9306      	str	r3, [sp, #24]
 80077c2:	9508      	str	r5, [sp, #32]
 80077c4:	f04f 33ff 	mov.w	r3, #4294967295
 80077c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	2312      	movs	r3, #18
 80077d0:	e7b0      	b.n	8007734 <_dtoa_r+0x26c>
 80077d2:	2301      	movs	r3, #1
 80077d4:	9308      	str	r3, [sp, #32]
 80077d6:	e7f5      	b.n	80077c4 <_dtoa_r+0x2fc>
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077de:	e7b8      	b.n	8007752 <_dtoa_r+0x28a>
 80077e0:	3101      	adds	r1, #1
 80077e2:	6041      	str	r1, [r0, #4]
 80077e4:	0052      	lsls	r2, r2, #1
 80077e6:	e7b8      	b.n	800775a <_dtoa_r+0x292>
 80077e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ea:	9a01      	ldr	r2, [sp, #4]
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	2b0e      	cmp	r3, #14
 80077f2:	f200 809d 	bhi.w	8007930 <_dtoa_r+0x468>
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f000 809a 	beq.w	8007930 <_dtoa_r+0x468>
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dd32      	ble.n	8007868 <_dtoa_r+0x3a0>
 8007802:	4ab7      	ldr	r2, [pc, #732]	; (8007ae0 <_dtoa_r+0x618>)
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800780c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	05d8      	lsls	r0, r3, #23
 8007814:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007818:	d516      	bpl.n	8007848 <_dtoa_r+0x380>
 800781a:	4bb2      	ldr	r3, [pc, #712]	; (8007ae4 <_dtoa_r+0x61c>)
 800781c:	ec51 0b19 	vmov	r0, r1, d9
 8007820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007824:	f7f9 f812 	bl	800084c <__aeabi_ddiv>
 8007828:	f007 070f 	and.w	r7, r7, #15
 800782c:	4682      	mov	sl, r0
 800782e:	468b      	mov	fp, r1
 8007830:	2503      	movs	r5, #3
 8007832:	4eac      	ldr	r6, [pc, #688]	; (8007ae4 <_dtoa_r+0x61c>)
 8007834:	b957      	cbnz	r7, 800784c <_dtoa_r+0x384>
 8007836:	4642      	mov	r2, r8
 8007838:	464b      	mov	r3, r9
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f9 f805 	bl	800084c <__aeabi_ddiv>
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	e028      	b.n	800789a <_dtoa_r+0x3d2>
 8007848:	2502      	movs	r5, #2
 800784a:	e7f2      	b.n	8007832 <_dtoa_r+0x36a>
 800784c:	07f9      	lsls	r1, r7, #31
 800784e:	d508      	bpl.n	8007862 <_dtoa_r+0x39a>
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007858:	f7f8 fece 	bl	80005f8 <__aeabi_dmul>
 800785c:	3501      	adds	r5, #1
 800785e:	4680      	mov	r8, r0
 8007860:	4689      	mov	r9, r1
 8007862:	107f      	asrs	r7, r7, #1
 8007864:	3608      	adds	r6, #8
 8007866:	e7e5      	b.n	8007834 <_dtoa_r+0x36c>
 8007868:	f000 809b 	beq.w	80079a2 <_dtoa_r+0x4da>
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	4f9d      	ldr	r7, [pc, #628]	; (8007ae4 <_dtoa_r+0x61c>)
 8007870:	425e      	negs	r6, r3
 8007872:	4b9b      	ldr	r3, [pc, #620]	; (8007ae0 <_dtoa_r+0x618>)
 8007874:	f006 020f 	and.w	r2, r6, #15
 8007878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	ec51 0b19 	vmov	r0, r1, d9
 8007884:	f7f8 feb8 	bl	80005f8 <__aeabi_dmul>
 8007888:	1136      	asrs	r6, r6, #4
 800788a:	4682      	mov	sl, r0
 800788c:	468b      	mov	fp, r1
 800788e:	2300      	movs	r3, #0
 8007890:	2502      	movs	r5, #2
 8007892:	2e00      	cmp	r6, #0
 8007894:	d17a      	bne.n	800798c <_dtoa_r+0x4c4>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1d3      	bne.n	8007842 <_dtoa_r+0x37a>
 800789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8082 	beq.w	80079a6 <_dtoa_r+0x4de>
 80078a2:	4b91      	ldr	r3, [pc, #580]	; (8007ae8 <_dtoa_r+0x620>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	4650      	mov	r0, sl
 80078a8:	4659      	mov	r1, fp
 80078aa:	f7f9 f917 	bl	8000adc <__aeabi_dcmplt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d079      	beq.n	80079a6 <_dtoa_r+0x4de>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d076      	beq.n	80079a6 <_dtoa_r+0x4de>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd36      	ble.n	800792c <_dtoa_r+0x464>
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	4650      	mov	r0, sl
 80078c2:	4659      	mov	r1, fp
 80078c4:	1e5f      	subs	r7, r3, #1
 80078c6:	2200      	movs	r2, #0
 80078c8:	4b88      	ldr	r3, [pc, #544]	; (8007aec <_dtoa_r+0x624>)
 80078ca:	f7f8 fe95 	bl	80005f8 <__aeabi_dmul>
 80078ce:	9e02      	ldr	r6, [sp, #8]
 80078d0:	4682      	mov	sl, r0
 80078d2:	468b      	mov	fp, r1
 80078d4:	3501      	adds	r5, #1
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4652      	mov	r2, sl
 80078de:	465b      	mov	r3, fp
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	4b82      	ldr	r3, [pc, #520]	; (8007af0 <_dtoa_r+0x628>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	46d0      	mov	r8, sl
 80078ee:	46d9      	mov	r9, fp
 80078f0:	4682      	mov	sl, r0
 80078f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	d158      	bne.n	80079ac <_dtoa_r+0x4e4>
 80078fa:	4b7e      	ldr	r3, [pc, #504]	; (8007af4 <_dtoa_r+0x62c>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fcc1 	bl	8000288 <__aeabi_dsub>
 8007906:	4652      	mov	r2, sl
 8007908:	465b      	mov	r3, fp
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	f7f9 f903 	bl	8000b18 <__aeabi_dcmpgt>
 8007912:	2800      	cmp	r0, #0
 8007914:	f040 8295 	bne.w	8007e42 <_dtoa_r+0x97a>
 8007918:	4652      	mov	r2, sl
 800791a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800791e:	4640      	mov	r0, r8
 8007920:	4649      	mov	r1, r9
 8007922:	f7f9 f8db 	bl	8000adc <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	f040 8289 	bne.w	8007e3e <_dtoa_r+0x976>
 800792c:	ec5b ab19 	vmov	sl, fp, d9
 8007930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007932:	2b00      	cmp	r3, #0
 8007934:	f2c0 8148 	blt.w	8007bc8 <_dtoa_r+0x700>
 8007938:	9a00      	ldr	r2, [sp, #0]
 800793a:	2a0e      	cmp	r2, #14
 800793c:	f300 8144 	bgt.w	8007bc8 <_dtoa_r+0x700>
 8007940:	4b67      	ldr	r3, [pc, #412]	; (8007ae0 <_dtoa_r+0x618>)
 8007942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007946:	e9d3 8900 	ldrd	r8, r9, [r3]
 800794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	f280 80d5 	bge.w	8007afc <_dtoa_r+0x634>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f300 80d1 	bgt.w	8007afc <_dtoa_r+0x634>
 800795a:	f040 826f 	bne.w	8007e3c <_dtoa_r+0x974>
 800795e:	4b65      	ldr	r3, [pc, #404]	; (8007af4 <_dtoa_r+0x62c>)
 8007960:	2200      	movs	r2, #0
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f8 fe47 	bl	80005f8 <__aeabi_dmul>
 800796a:	4652      	mov	r2, sl
 800796c:	465b      	mov	r3, fp
 800796e:	f7f9 f8c9 	bl	8000b04 <__aeabi_dcmpge>
 8007972:	9e03      	ldr	r6, [sp, #12]
 8007974:	4637      	mov	r7, r6
 8007976:	2800      	cmp	r0, #0
 8007978:	f040 8245 	bne.w	8007e06 <_dtoa_r+0x93e>
 800797c:	9d01      	ldr	r5, [sp, #4]
 800797e:	2331      	movs	r3, #49	; 0x31
 8007980:	f805 3b01 	strb.w	r3, [r5], #1
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	3301      	adds	r3, #1
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	e240      	b.n	8007e0e <_dtoa_r+0x946>
 800798c:	07f2      	lsls	r2, r6, #31
 800798e:	d505      	bpl.n	800799c <_dtoa_r+0x4d4>
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	f7f8 fe30 	bl	80005f8 <__aeabi_dmul>
 8007998:	3501      	adds	r5, #1
 800799a:	2301      	movs	r3, #1
 800799c:	1076      	asrs	r6, r6, #1
 800799e:	3708      	adds	r7, #8
 80079a0:	e777      	b.n	8007892 <_dtoa_r+0x3ca>
 80079a2:	2502      	movs	r5, #2
 80079a4:	e779      	b.n	800789a <_dtoa_r+0x3d2>
 80079a6:	9f00      	ldr	r7, [sp, #0]
 80079a8:	9e03      	ldr	r6, [sp, #12]
 80079aa:	e794      	b.n	80078d6 <_dtoa_r+0x40e>
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	4b4c      	ldr	r3, [pc, #304]	; (8007ae0 <_dtoa_r+0x618>)
 80079b0:	4431      	add	r1, r6
 80079b2:	910d      	str	r1, [sp, #52]	; 0x34
 80079b4:	9908      	ldr	r1, [sp, #32]
 80079b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079be:	2900      	cmp	r1, #0
 80079c0:	d043      	beq.n	8007a4a <_dtoa_r+0x582>
 80079c2:	494d      	ldr	r1, [pc, #308]	; (8007af8 <_dtoa_r+0x630>)
 80079c4:	2000      	movs	r0, #0
 80079c6:	f7f8 ff41 	bl	800084c <__aeabi_ddiv>
 80079ca:	4652      	mov	r2, sl
 80079cc:	465b      	mov	r3, fp
 80079ce:	f7f8 fc5b 	bl	8000288 <__aeabi_dsub>
 80079d2:	9d01      	ldr	r5, [sp, #4]
 80079d4:	4682      	mov	sl, r0
 80079d6:	468b      	mov	fp, r1
 80079d8:	4649      	mov	r1, r9
 80079da:	4640      	mov	r0, r8
 80079dc:	f7f9 f8bc 	bl	8000b58 <__aeabi_d2iz>
 80079e0:	4606      	mov	r6, r0
 80079e2:	f7f8 fd9f 	bl	8000524 <__aeabi_i2d>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4640      	mov	r0, r8
 80079ec:	4649      	mov	r1, r9
 80079ee:	f7f8 fc4b 	bl	8000288 <__aeabi_dsub>
 80079f2:	3630      	adds	r6, #48	; 0x30
 80079f4:	f805 6b01 	strb.w	r6, [r5], #1
 80079f8:	4652      	mov	r2, sl
 80079fa:	465b      	mov	r3, fp
 80079fc:	4680      	mov	r8, r0
 80079fe:	4689      	mov	r9, r1
 8007a00:	f7f9 f86c 	bl	8000adc <__aeabi_dcmplt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d163      	bne.n	8007ad0 <_dtoa_r+0x608>
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4936      	ldr	r1, [pc, #216]	; (8007ae8 <_dtoa_r+0x620>)
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f7f8 fc3a 	bl	8000288 <__aeabi_dsub>
 8007a14:	4652      	mov	r2, sl
 8007a16:	465b      	mov	r3, fp
 8007a18:	f7f9 f860 	bl	8000adc <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 80b5 	bne.w	8007b8c <_dtoa_r+0x6c4>
 8007a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a24:	429d      	cmp	r5, r3
 8007a26:	d081      	beq.n	800792c <_dtoa_r+0x464>
 8007a28:	4b30      	ldr	r3, [pc, #192]	; (8007aec <_dtoa_r+0x624>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	4659      	mov	r1, fp
 8007a30:	f7f8 fde2 	bl	80005f8 <__aeabi_dmul>
 8007a34:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <_dtoa_r+0x624>)
 8007a36:	4682      	mov	sl, r0
 8007a38:	468b      	mov	fp, r1
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f7f8 fdda 	bl	80005f8 <__aeabi_dmul>
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	e7c6      	b.n	80079d8 <_dtoa_r+0x510>
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	f7f8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8007a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a54:	9d01      	ldr	r5, [sp, #4]
 8007a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7f9 f87a 	bl	8000b58 <__aeabi_d2iz>
 8007a64:	4606      	mov	r6, r0
 8007a66:	f7f8 fd5d 	bl	8000524 <__aeabi_i2d>
 8007a6a:	3630      	adds	r6, #48	; 0x30
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	f7f8 fc08 	bl	8000288 <__aeabi_dsub>
 8007a78:	f805 6b01 	strb.w	r6, [r5], #1
 8007a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	4680      	mov	r8, r0
 8007a82:	4689      	mov	r9, r1
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	d124      	bne.n	8007ad4 <_dtoa_r+0x60c>
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <_dtoa_r+0x630>)
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	4659      	mov	r1, fp
 8007a90:	f7f8 fbfc 	bl	800028c <__adddf3>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	f7f9 f83c 	bl	8000b18 <__aeabi_dcmpgt>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d173      	bne.n	8007b8c <_dtoa_r+0x6c4>
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	465b      	mov	r3, fp
 8007aa8:	4913      	ldr	r1, [pc, #76]	; (8007af8 <_dtoa_r+0x630>)
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f7f8 fbec 	bl	8000288 <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	f7f9 f810 	bl	8000adc <__aeabi_dcmplt>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f af35 	beq.w	800792c <_dtoa_r+0x464>
 8007ac2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ac4:	1e6b      	subs	r3, r5, #1
 8007ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007acc:	2b30      	cmp	r3, #48	; 0x30
 8007ace:	d0f8      	beq.n	8007ac2 <_dtoa_r+0x5fa>
 8007ad0:	9700      	str	r7, [sp, #0]
 8007ad2:	e049      	b.n	8007b68 <_dtoa_r+0x6a0>
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <_dtoa_r+0x624>)
 8007ad6:	f7f8 fd8f 	bl	80005f8 <__aeabi_dmul>
 8007ada:	4680      	mov	r8, r0
 8007adc:	4689      	mov	r9, r1
 8007ade:	e7bd      	b.n	8007a5c <_dtoa_r+0x594>
 8007ae0:	0800a510 	.word	0x0800a510
 8007ae4:	0800a4e8 	.word	0x0800a4e8
 8007ae8:	3ff00000 	.word	0x3ff00000
 8007aec:	40240000 	.word	0x40240000
 8007af0:	401c0000 	.word	0x401c0000
 8007af4:	40140000 	.word	0x40140000
 8007af8:	3fe00000 	.word	0x3fe00000
 8007afc:	9d01      	ldr	r5, [sp, #4]
 8007afe:	4656      	mov	r6, sl
 8007b00:	465f      	mov	r7, fp
 8007b02:	4642      	mov	r2, r8
 8007b04:	464b      	mov	r3, r9
 8007b06:	4630      	mov	r0, r6
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f8 fe9f 	bl	800084c <__aeabi_ddiv>
 8007b0e:	f7f9 f823 	bl	8000b58 <__aeabi_d2iz>
 8007b12:	4682      	mov	sl, r0
 8007b14:	f7f8 fd06 	bl	8000524 <__aeabi_i2d>
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	f7f8 fd6c 	bl	80005f8 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4630      	mov	r0, r6
 8007b26:	4639      	mov	r1, r7
 8007b28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b2c:	f7f8 fbac 	bl	8000288 <__aeabi_dsub>
 8007b30:	f805 6b01 	strb.w	r6, [r5], #1
 8007b34:	9e01      	ldr	r6, [sp, #4]
 8007b36:	9f03      	ldr	r7, [sp, #12]
 8007b38:	1bae      	subs	r6, r5, r6
 8007b3a:	42b7      	cmp	r7, r6
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	d135      	bne.n	8007bae <_dtoa_r+0x6e6>
 8007b42:	f7f8 fba3 	bl	800028c <__adddf3>
 8007b46:	4642      	mov	r2, r8
 8007b48:	464b      	mov	r3, r9
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	f7f8 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8007b52:	b9d0      	cbnz	r0, 8007b8a <_dtoa_r+0x6c2>
 8007b54:	4642      	mov	r2, r8
 8007b56:	464b      	mov	r3, r9
 8007b58:	4630      	mov	r0, r6
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	f7f8 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b60:	b110      	cbz	r0, 8007b68 <_dtoa_r+0x6a0>
 8007b62:	f01a 0f01 	tst.w	sl, #1
 8007b66:	d110      	bne.n	8007b8a <_dtoa_r+0x6c2>
 8007b68:	4620      	mov	r0, r4
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	f001 f893 	bl	8008c98 <_Bfree>
 8007b72:	2300      	movs	r3, #0
 8007b74:	9800      	ldr	r0, [sp, #0]
 8007b76:	702b      	strb	r3, [r5, #0]
 8007b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	6018      	str	r0, [r3, #0]
 8007b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f43f acf1 	beq.w	8007568 <_dtoa_r+0xa0>
 8007b86:	601d      	str	r5, [r3, #0]
 8007b88:	e4ee      	b.n	8007568 <_dtoa_r+0xa0>
 8007b8a:	9f00      	ldr	r7, [sp, #0]
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	461d      	mov	r5, r3
 8007b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b94:	2a39      	cmp	r2, #57	; 0x39
 8007b96:	d106      	bne.n	8007ba6 <_dtoa_r+0x6de>
 8007b98:	9a01      	ldr	r2, [sp, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d1f7      	bne.n	8007b8e <_dtoa_r+0x6c6>
 8007b9e:	9901      	ldr	r1, [sp, #4]
 8007ba0:	2230      	movs	r2, #48	; 0x30
 8007ba2:	3701      	adds	r7, #1
 8007ba4:	700a      	strb	r2, [r1, #0]
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	3201      	adds	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	e790      	b.n	8007ad0 <_dtoa_r+0x608>
 8007bae:	4ba6      	ldr	r3, [pc, #664]	; (8007e48 <_dtoa_r+0x980>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f7f8 fd21 	bl	80005f8 <__aeabi_dmul>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	f7f8 ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d09d      	beq.n	8007b02 <_dtoa_r+0x63a>
 8007bc6:	e7cf      	b.n	8007b68 <_dtoa_r+0x6a0>
 8007bc8:	9a08      	ldr	r2, [sp, #32]
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	f000 80d7 	beq.w	8007d7e <_dtoa_r+0x8b6>
 8007bd0:	9a06      	ldr	r2, [sp, #24]
 8007bd2:	2a01      	cmp	r2, #1
 8007bd4:	f300 80ba 	bgt.w	8007d4c <_dtoa_r+0x884>
 8007bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f000 80b2 	beq.w	8007d44 <_dtoa_r+0x87c>
 8007be0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007be4:	9e07      	ldr	r6, [sp, #28]
 8007be6:	9d04      	ldr	r5, [sp, #16]
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	441a      	add	r2, r3
 8007bec:	9204      	str	r2, [sp, #16]
 8007bee:	9a05      	ldr	r2, [sp, #20]
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	441a      	add	r2, r3
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	9205      	str	r2, [sp, #20]
 8007bf8:	f001 f950 	bl	8008e9c <__i2b>
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	dd0c      	ble.n	8007c1c <_dtoa_r+0x754>
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dd09      	ble.n	8007c1c <_dtoa_r+0x754>
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	bfa8      	it	ge
 8007c0e:	462b      	movge	r3, r5
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	9204      	str	r2, [sp, #16]
 8007c14:	9a05      	ldr	r2, [sp, #20]
 8007c16:	1aed      	subs	r5, r5, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	b31b      	cbz	r3, 8007c68 <_dtoa_r+0x7a0>
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80af 	beq.w	8007d86 <_dtoa_r+0x8be>
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	dd13      	ble.n	8007c54 <_dtoa_r+0x78c>
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	4632      	mov	r2, r6
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 f9f3 	bl	800901c <__pow5mult>
 8007c36:	ee18 2a10 	vmov	r2, s16
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 f942 	bl	8008ec8 <__multiply>
 8007c44:	ee18 1a10 	vmov	r1, s16
 8007c48:	4680      	mov	r8, r0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f001 f824 	bl	8008c98 <_Bfree>
 8007c50:	ee08 8a10 	vmov	s16, r8
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	1b9a      	subs	r2, r3, r6
 8007c58:	d006      	beq.n	8007c68 <_dtoa_r+0x7a0>
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f001 f9dc 	bl	800901c <__pow5mult>
 8007c64:	ee08 0a10 	vmov	s16, r0
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 f916 	bl	8008e9c <__i2b>
 8007c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	4606      	mov	r6, r0
 8007c76:	f340 8088 	ble.w	8007d8a <_dtoa_r+0x8c2>
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f001 f9cc 	bl	800901c <__pow5mult>
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	4606      	mov	r6, r0
 8007c8a:	f340 8081 	ble.w	8007d90 <_dtoa_r+0x8c8>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	6933      	ldr	r3, [r6, #16]
 8007c94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c98:	6918      	ldr	r0, [r3, #16]
 8007c9a:	f001 f8af 	bl	8008dfc <__hi0bits>
 8007c9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	4418      	add	r0, r3
 8007ca6:	f010 001f 	ands.w	r0, r0, #31
 8007caa:	f000 8092 	beq.w	8007dd2 <_dtoa_r+0x90a>
 8007cae:	f1c0 0320 	rsb	r3, r0, #32
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	f340 808a 	ble.w	8007dcc <_dtoa_r+0x904>
 8007cb8:	f1c0 001c 	rsb	r0, r0, #28
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	4403      	add	r3, r0
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	4403      	add	r3, r0
 8007cc6:	4405      	add	r5, r0
 8007cc8:	9305      	str	r3, [sp, #20]
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd07      	ble.n	8007ce0 <_dtoa_r+0x818>
 8007cd0:	ee18 1a10 	vmov	r1, s16
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f001 f9fa 	bl	80090d0 <__lshift>
 8007cdc:	ee08 0a10 	vmov	s16, r0
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd05      	ble.n	8007cf2 <_dtoa_r+0x82a>
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 f9f0 	bl	80090d0 <__lshift>
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d06e      	beq.n	8007dd6 <_dtoa_r+0x90e>
 8007cf8:	ee18 0a10 	vmov	r0, s16
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	f001 fa57 	bl	80091b0 <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	da67      	bge.n	8007dd6 <_dtoa_r+0x90e>
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	ee18 1a10 	vmov	r1, s16
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	220a      	movs	r2, #10
 8007d12:	2300      	movs	r3, #0
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 ffe1 	bl	8008cdc <__multadd>
 8007d1a:	9b08      	ldr	r3, [sp, #32]
 8007d1c:	ee08 0a10 	vmov	s16, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 81b1 	beq.w	8008088 <_dtoa_r+0xbc0>
 8007d26:	2300      	movs	r3, #0
 8007d28:	4639      	mov	r1, r7
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 ffd5 	bl	8008cdc <__multadd>
 8007d32:	9b02      	ldr	r3, [sp, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	4607      	mov	r7, r0
 8007d38:	f300 808e 	bgt.w	8007e58 <_dtoa_r+0x990>
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dc51      	bgt.n	8007de6 <_dtoa_r+0x91e>
 8007d42:	e089      	b.n	8007e58 <_dtoa_r+0x990>
 8007d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d4a:	e74b      	b.n	8007be4 <_dtoa_r+0x71c>
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	1e5e      	subs	r6, r3, #1
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	42b3      	cmp	r3, r6
 8007d54:	bfbf      	itttt	lt
 8007d56:	9b07      	ldrlt	r3, [sp, #28]
 8007d58:	9607      	strlt	r6, [sp, #28]
 8007d5a:	1af2      	sublt	r2, r6, r3
 8007d5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d5e:	bfb6      	itet	lt
 8007d60:	189b      	addlt	r3, r3, r2
 8007d62:	1b9e      	subge	r6, r3, r6
 8007d64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	bfb8      	it	lt
 8007d6a:	2600      	movlt	r6, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfb7      	itett	lt
 8007d70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d78:	1a9d      	sublt	r5, r3, r2
 8007d7a:	2300      	movlt	r3, #0
 8007d7c:	e734      	b.n	8007be8 <_dtoa_r+0x720>
 8007d7e:	9e07      	ldr	r6, [sp, #28]
 8007d80:	9d04      	ldr	r5, [sp, #16]
 8007d82:	9f08      	ldr	r7, [sp, #32]
 8007d84:	e73b      	b.n	8007bfe <_dtoa_r+0x736>
 8007d86:	9a07      	ldr	r2, [sp, #28]
 8007d88:	e767      	b.n	8007c5a <_dtoa_r+0x792>
 8007d8a:	9b06      	ldr	r3, [sp, #24]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	dc18      	bgt.n	8007dc2 <_dtoa_r+0x8fa>
 8007d90:	f1ba 0f00 	cmp.w	sl, #0
 8007d94:	d115      	bne.n	8007dc2 <_dtoa_r+0x8fa>
 8007d96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d9a:	b993      	cbnz	r3, 8007dc2 <_dtoa_r+0x8fa>
 8007d9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007da0:	0d1b      	lsrs	r3, r3, #20
 8007da2:	051b      	lsls	r3, r3, #20
 8007da4:	b183      	cbz	r3, 8007dc8 <_dtoa_r+0x900>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	3301      	adds	r3, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	9b05      	ldr	r3, [sp, #20]
 8007dae:	3301      	adds	r3, #1
 8007db0:	9305      	str	r3, [sp, #20]
 8007db2:	f04f 0801 	mov.w	r8, #1
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f47f af6a 	bne.w	8007c92 <_dtoa_r+0x7ca>
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e76f      	b.n	8007ca2 <_dtoa_r+0x7da>
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	e7f6      	b.n	8007db6 <_dtoa_r+0x8ee>
 8007dc8:	4698      	mov	r8, r3
 8007dca:	e7f4      	b.n	8007db6 <_dtoa_r+0x8ee>
 8007dcc:	f43f af7d 	beq.w	8007cca <_dtoa_r+0x802>
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	301c      	adds	r0, #28
 8007dd4:	e772      	b.n	8007cbc <_dtoa_r+0x7f4>
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc37      	bgt.n	8007e4c <_dtoa_r+0x984>
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	dd34      	ble.n	8007e4c <_dtoa_r+0x984>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	9b02      	ldr	r3, [sp, #8]
 8007de8:	b96b      	cbnz	r3, 8007e06 <_dtoa_r+0x93e>
 8007dea:	4631      	mov	r1, r6
 8007dec:	2205      	movs	r2, #5
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 ff74 	bl	8008cdc <__multadd>
 8007df4:	4601      	mov	r1, r0
 8007df6:	4606      	mov	r6, r0
 8007df8:	ee18 0a10 	vmov	r0, s16
 8007dfc:	f001 f9d8 	bl	80091b0 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f73f adbb 	bgt.w	800797c <_dtoa_r+0x4b4>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	9d01      	ldr	r5, [sp, #4]
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	4631      	mov	r1, r6
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 ff3f 	bl	8008c98 <_Bfree>
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	f43f aea4 	beq.w	8007b68 <_dtoa_r+0x6a0>
 8007e20:	f1b8 0f00 	cmp.w	r8, #0
 8007e24:	d005      	beq.n	8007e32 <_dtoa_r+0x96a>
 8007e26:	45b8      	cmp	r8, r7
 8007e28:	d003      	beq.n	8007e32 <_dtoa_r+0x96a>
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 ff33 	bl	8008c98 <_Bfree>
 8007e32:	4639      	mov	r1, r7
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 ff2f 	bl	8008c98 <_Bfree>
 8007e3a:	e695      	b.n	8007b68 <_dtoa_r+0x6a0>
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	4637      	mov	r7, r6
 8007e40:	e7e1      	b.n	8007e06 <_dtoa_r+0x93e>
 8007e42:	9700      	str	r7, [sp, #0]
 8007e44:	4637      	mov	r7, r6
 8007e46:	e599      	b.n	800797c <_dtoa_r+0x4b4>
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80ca 	beq.w	8007fe8 <_dtoa_r+0xb20>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	dd05      	ble.n	8007e68 <_dtoa_r+0x9a0>
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 f935 	bl	80090d0 <__lshift>
 8007e66:	4607      	mov	r7, r0
 8007e68:	f1b8 0f00 	cmp.w	r8, #0
 8007e6c:	d05b      	beq.n	8007f26 <_dtoa_r+0xa5e>
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fed1 	bl	8008c18 <_Balloc>
 8007e76:	4605      	mov	r5, r0
 8007e78:	b928      	cbnz	r0, 8007e86 <_dtoa_r+0x9be>
 8007e7a:	4b87      	ldr	r3, [pc, #540]	; (8008098 <_dtoa_r+0xbd0>)
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e82:	f7ff bb3b 	b.w	80074fc <_dtoa_r+0x34>
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	3202      	adds	r2, #2
 8007e8a:	0092      	lsls	r2, r2, #2
 8007e8c:	f107 010c 	add.w	r1, r7, #12
 8007e90:	300c      	adds	r0, #12
 8007e92:	f000 feb3 	bl	8008bfc <memcpy>
 8007e96:	2201      	movs	r2, #1
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f001 f918 	bl	80090d0 <__lshift>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f103 0901 	add.w	r9, r3, #1
 8007ea6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	f00a 0301 	and.w	r3, sl, #1
 8007eb2:	46b8      	mov	r8, r7
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	4631      	mov	r1, r6
 8007eba:	ee18 0a10 	vmov	r0, s16
 8007ebe:	f7ff fa77 	bl	80073b0 <quorem>
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	9002      	str	r0, [sp, #8]
 8007ec6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007eca:	ee18 0a10 	vmov	r0, s16
 8007ece:	f001 f96f 	bl	80091b0 <__mcmp>
 8007ed2:	463a      	mov	r2, r7
 8007ed4:	9003      	str	r0, [sp, #12]
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f001 f985 	bl	80091e8 <__mdiff>
 8007ede:	68c2      	ldr	r2, [r0, #12]
 8007ee0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	bb02      	cbnz	r2, 8007f2a <_dtoa_r+0xa62>
 8007ee8:	4601      	mov	r1, r0
 8007eea:	ee18 0a10 	vmov	r0, s16
 8007eee:	f001 f95f 	bl	80091b0 <__mcmp>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	9207      	str	r2, [sp, #28]
 8007efa:	f000 fecd 	bl	8008c98 <_Bfree>
 8007efe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f02:	ea43 0102 	orr.w	r1, r3, r2
 8007f06:	9b04      	ldr	r3, [sp, #16]
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	464d      	mov	r5, r9
 8007f0c:	d10f      	bne.n	8007f2e <_dtoa_r+0xa66>
 8007f0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f12:	d02a      	beq.n	8007f6a <_dtoa_r+0xaa2>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dd02      	ble.n	8007f20 <_dtoa_r+0xa58>
 8007f1a:	9b02      	ldr	r3, [sp, #8]
 8007f1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f20:	f88b a000 	strb.w	sl, [fp]
 8007f24:	e775      	b.n	8007e12 <_dtoa_r+0x94a>
 8007f26:	4638      	mov	r0, r7
 8007f28:	e7ba      	b.n	8007ea0 <_dtoa_r+0x9d8>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	e7e2      	b.n	8007ef4 <_dtoa_r+0xa2c>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db04      	blt.n	8007f3e <_dtoa_r+0xa76>
 8007f34:	9906      	ldr	r1, [sp, #24]
 8007f36:	430b      	orrs	r3, r1
 8007f38:	9904      	ldr	r1, [sp, #16]
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	d122      	bne.n	8007f84 <_dtoa_r+0xabc>
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	ddee      	ble.n	8007f20 <_dtoa_r+0xa58>
 8007f42:	ee18 1a10 	vmov	r1, s16
 8007f46:	2201      	movs	r2, #1
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f001 f8c1 	bl	80090d0 <__lshift>
 8007f4e:	4631      	mov	r1, r6
 8007f50:	ee08 0a10 	vmov	s16, r0
 8007f54:	f001 f92c 	bl	80091b0 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	dc03      	bgt.n	8007f64 <_dtoa_r+0xa9c>
 8007f5c:	d1e0      	bne.n	8007f20 <_dtoa_r+0xa58>
 8007f5e:	f01a 0f01 	tst.w	sl, #1
 8007f62:	d0dd      	beq.n	8007f20 <_dtoa_r+0xa58>
 8007f64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f68:	d1d7      	bne.n	8007f1a <_dtoa_r+0xa52>
 8007f6a:	2339      	movs	r3, #57	; 0x39
 8007f6c:	f88b 3000 	strb.w	r3, [fp]
 8007f70:	462b      	mov	r3, r5
 8007f72:	461d      	mov	r5, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f7a:	2a39      	cmp	r2, #57	; 0x39
 8007f7c:	d071      	beq.n	8008062 <_dtoa_r+0xb9a>
 8007f7e:	3201      	adds	r2, #1
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	e746      	b.n	8007e12 <_dtoa_r+0x94a>
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	dd07      	ble.n	8007f98 <_dtoa_r+0xad0>
 8007f88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f8c:	d0ed      	beq.n	8007f6a <_dtoa_r+0xaa2>
 8007f8e:	f10a 0301 	add.w	r3, sl, #1
 8007f92:	f88b 3000 	strb.w	r3, [fp]
 8007f96:	e73c      	b.n	8007e12 <_dtoa_r+0x94a>
 8007f98:	9b05      	ldr	r3, [sp, #20]
 8007f9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f9e:	4599      	cmp	r9, r3
 8007fa0:	d047      	beq.n	8008032 <_dtoa_r+0xb6a>
 8007fa2:	ee18 1a10 	vmov	r1, s16
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fe96 	bl	8008cdc <__multadd>
 8007fb0:	45b8      	cmp	r8, r7
 8007fb2:	ee08 0a10 	vmov	s16, r0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	f04f 020a 	mov.w	r2, #10
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	d106      	bne.n	8007fd2 <_dtoa_r+0xb0a>
 8007fc4:	f000 fe8a 	bl	8008cdc <__multadd>
 8007fc8:	4680      	mov	r8, r0
 8007fca:	4607      	mov	r7, r0
 8007fcc:	f109 0901 	add.w	r9, r9, #1
 8007fd0:	e772      	b.n	8007eb8 <_dtoa_r+0x9f0>
 8007fd2:	f000 fe83 	bl	8008cdc <__multadd>
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	4680      	mov	r8, r0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	220a      	movs	r2, #10
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 fe7c 	bl	8008cdc <__multadd>
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	e7f1      	b.n	8007fcc <_dtoa_r+0xb04>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	9d01      	ldr	r5, [sp, #4]
 8007fee:	ee18 0a10 	vmov	r0, s16
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	f7ff f9dc 	bl	80073b0 <quorem>
 8007ff8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	f805 ab01 	strb.w	sl, [r5], #1
 8008002:	1aea      	subs	r2, r5, r3
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	4293      	cmp	r3, r2
 8008008:	dd09      	ble.n	800801e <_dtoa_r+0xb56>
 800800a:	ee18 1a10 	vmov	r1, s16
 800800e:	2300      	movs	r3, #0
 8008010:	220a      	movs	r2, #10
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fe62 	bl	8008cdc <__multadd>
 8008018:	ee08 0a10 	vmov	s16, r0
 800801c:	e7e7      	b.n	8007fee <_dtoa_r+0xb26>
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfc8      	it	gt
 8008024:	461d      	movgt	r5, r3
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	bfd8      	it	le
 800802a:	2501      	movle	r5, #1
 800802c:	441d      	add	r5, r3
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	ee18 1a10 	vmov	r1, s16
 8008036:	2201      	movs	r2, #1
 8008038:	4620      	mov	r0, r4
 800803a:	f001 f849 	bl	80090d0 <__lshift>
 800803e:	4631      	mov	r1, r6
 8008040:	ee08 0a10 	vmov	s16, r0
 8008044:	f001 f8b4 	bl	80091b0 <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	dc91      	bgt.n	8007f70 <_dtoa_r+0xaa8>
 800804c:	d102      	bne.n	8008054 <_dtoa_r+0xb8c>
 800804e:	f01a 0f01 	tst.w	sl, #1
 8008052:	d18d      	bne.n	8007f70 <_dtoa_r+0xaa8>
 8008054:	462b      	mov	r3, r5
 8008056:	461d      	mov	r5, r3
 8008058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800805c:	2a30      	cmp	r2, #48	; 0x30
 800805e:	d0fa      	beq.n	8008056 <_dtoa_r+0xb8e>
 8008060:	e6d7      	b.n	8007e12 <_dtoa_r+0x94a>
 8008062:	9a01      	ldr	r2, [sp, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d184      	bne.n	8007f72 <_dtoa_r+0xaaa>
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2331      	movs	r3, #49	; 0x31
 8008070:	7013      	strb	r3, [r2, #0]
 8008072:	e6ce      	b.n	8007e12 <_dtoa_r+0x94a>
 8008074:	4b09      	ldr	r3, [pc, #36]	; (800809c <_dtoa_r+0xbd4>)
 8008076:	f7ff ba95 	b.w	80075a4 <_dtoa_r+0xdc>
 800807a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800807c:	2b00      	cmp	r3, #0
 800807e:	f47f aa6e 	bne.w	800755e <_dtoa_r+0x96>
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <_dtoa_r+0xbd8>)
 8008084:	f7ff ba8e 	b.w	80075a4 <_dtoa_r+0xdc>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	dcae      	bgt.n	8007fec <_dtoa_r+0xb24>
 800808e:	9b06      	ldr	r3, [sp, #24]
 8008090:	2b02      	cmp	r3, #2
 8008092:	f73f aea8 	bgt.w	8007de6 <_dtoa_r+0x91e>
 8008096:	e7a9      	b.n	8007fec <_dtoa_r+0xb24>
 8008098:	0800a398 	.word	0x0800a398
 800809c:	0800a198 	.word	0x0800a198
 80080a0:	0800a319 	.word	0x0800a319

080080a4 <__sflush_r>:
 80080a4:	898a      	ldrh	r2, [r1, #12]
 80080a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080aa:	4605      	mov	r5, r0
 80080ac:	0710      	lsls	r0, r2, #28
 80080ae:	460c      	mov	r4, r1
 80080b0:	d458      	bmi.n	8008164 <__sflush_r+0xc0>
 80080b2:	684b      	ldr	r3, [r1, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc05      	bgt.n	80080c4 <__sflush_r+0x20>
 80080b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dc02      	bgt.n	80080c4 <__sflush_r+0x20>
 80080be:	2000      	movs	r0, #0
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	d0f9      	beq.n	80080be <__sflush_r+0x1a>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080d0:	682f      	ldr	r7, [r5, #0]
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	d032      	beq.n	800813c <__sflush_r+0x98>
 80080d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	075a      	lsls	r2, r3, #29
 80080dc:	d505      	bpl.n	80080ea <__sflush_r+0x46>
 80080de:	6863      	ldr	r3, [r4, #4]
 80080e0:	1ac0      	subs	r0, r0, r3
 80080e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080e4:	b10b      	cbz	r3, 80080ea <__sflush_r+0x46>
 80080e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e8:	1ac0      	subs	r0, r0, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	4602      	mov	r2, r0
 80080ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080f0:	6a21      	ldr	r1, [r4, #32]
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b0      	blx	r6
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	d106      	bne.n	800810a <__sflush_r+0x66>
 80080fc:	6829      	ldr	r1, [r5, #0]
 80080fe:	291d      	cmp	r1, #29
 8008100:	d82c      	bhi.n	800815c <__sflush_r+0xb8>
 8008102:	4a2a      	ldr	r2, [pc, #168]	; (80081ac <__sflush_r+0x108>)
 8008104:	40ca      	lsrs	r2, r1
 8008106:	07d6      	lsls	r6, r2, #31
 8008108:	d528      	bpl.n	800815c <__sflush_r+0xb8>
 800810a:	2200      	movs	r2, #0
 800810c:	6062      	str	r2, [r4, #4]
 800810e:	04d9      	lsls	r1, r3, #19
 8008110:	6922      	ldr	r2, [r4, #16]
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	d504      	bpl.n	8008120 <__sflush_r+0x7c>
 8008116:	1c42      	adds	r2, r0, #1
 8008118:	d101      	bne.n	800811e <__sflush_r+0x7a>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b903      	cbnz	r3, 8008120 <__sflush_r+0x7c>
 800811e:	6560      	str	r0, [r4, #84]	; 0x54
 8008120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	2900      	cmp	r1, #0
 8008126:	d0ca      	beq.n	80080be <__sflush_r+0x1a>
 8008128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812c:	4299      	cmp	r1, r3
 800812e:	d002      	beq.n	8008136 <__sflush_r+0x92>
 8008130:	4628      	mov	r0, r5
 8008132:	f001 fa49 	bl	80095c8 <_free_r>
 8008136:	2000      	movs	r0, #0
 8008138:	6360      	str	r0, [r4, #52]	; 0x34
 800813a:	e7c1      	b.n	80080c0 <__sflush_r+0x1c>
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	2301      	movs	r3, #1
 8008140:	4628      	mov	r0, r5
 8008142:	47b0      	blx	r6
 8008144:	1c41      	adds	r1, r0, #1
 8008146:	d1c7      	bne.n	80080d8 <__sflush_r+0x34>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0c4      	beq.n	80080d8 <__sflush_r+0x34>
 800814e:	2b1d      	cmp	r3, #29
 8008150:	d001      	beq.n	8008156 <__sflush_r+0xb2>
 8008152:	2b16      	cmp	r3, #22
 8008154:	d101      	bne.n	800815a <__sflush_r+0xb6>
 8008156:	602f      	str	r7, [r5, #0]
 8008158:	e7b1      	b.n	80080be <__sflush_r+0x1a>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	e7ad      	b.n	80080c0 <__sflush_r+0x1c>
 8008164:	690f      	ldr	r7, [r1, #16]
 8008166:	2f00      	cmp	r7, #0
 8008168:	d0a9      	beq.n	80080be <__sflush_r+0x1a>
 800816a:	0793      	lsls	r3, r2, #30
 800816c:	680e      	ldr	r6, [r1, #0]
 800816e:	bf08      	it	eq
 8008170:	694b      	ldreq	r3, [r1, #20]
 8008172:	600f      	str	r7, [r1, #0]
 8008174:	bf18      	it	ne
 8008176:	2300      	movne	r3, #0
 8008178:	eba6 0807 	sub.w	r8, r6, r7
 800817c:	608b      	str	r3, [r1, #8]
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	dd9c      	ble.n	80080be <__sflush_r+0x1a>
 8008184:	6a21      	ldr	r1, [r4, #32]
 8008186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008188:	4643      	mov	r3, r8
 800818a:	463a      	mov	r2, r7
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	2800      	cmp	r0, #0
 8008192:	dc06      	bgt.n	80081a2 <__sflush_r+0xfe>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e78e      	b.n	80080c0 <__sflush_r+0x1c>
 80081a2:	4407      	add	r7, r0
 80081a4:	eba8 0800 	sub.w	r8, r8, r0
 80081a8:	e7e9      	b.n	800817e <__sflush_r+0xda>
 80081aa:	bf00      	nop
 80081ac:	20400001 	.word	0x20400001

080081b0 <_fflush_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	690b      	ldr	r3, [r1, #16]
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	b913      	cbnz	r3, 80081c0 <_fflush_r+0x10>
 80081ba:	2500      	movs	r5, #0
 80081bc:	4628      	mov	r0, r5
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	b118      	cbz	r0, 80081ca <_fflush_r+0x1a>
 80081c2:	6983      	ldr	r3, [r0, #24]
 80081c4:	b90b      	cbnz	r3, 80081ca <_fflush_r+0x1a>
 80081c6:	f000 f887 	bl	80082d8 <__sinit>
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <_fflush_r+0x6c>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d11b      	bne.n	8008208 <_fflush_r+0x58>
 80081d0:	686c      	ldr	r4, [r5, #4]
 80081d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0ef      	beq.n	80081ba <_fflush_r+0xa>
 80081da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081dc:	07d0      	lsls	r0, r2, #31
 80081de:	d404      	bmi.n	80081ea <_fflush_r+0x3a>
 80081e0:	0599      	lsls	r1, r3, #22
 80081e2:	d402      	bmi.n	80081ea <_fflush_r+0x3a>
 80081e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e6:	f000 fc88 	bl	8008afa <__retarget_lock_acquire_recursive>
 80081ea:	4628      	mov	r0, r5
 80081ec:	4621      	mov	r1, r4
 80081ee:	f7ff ff59 	bl	80080a4 <__sflush_r>
 80081f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f4:	07da      	lsls	r2, r3, #31
 80081f6:	4605      	mov	r5, r0
 80081f8:	d4e0      	bmi.n	80081bc <_fflush_r+0xc>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	059b      	lsls	r3, r3, #22
 80081fe:	d4dd      	bmi.n	80081bc <_fflush_r+0xc>
 8008200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008202:	f000 fc7b 	bl	8008afc <__retarget_lock_release_recursive>
 8008206:	e7d9      	b.n	80081bc <_fflush_r+0xc>
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <_fflush_r+0x70>)
 800820a:	429c      	cmp	r4, r3
 800820c:	d101      	bne.n	8008212 <_fflush_r+0x62>
 800820e:	68ac      	ldr	r4, [r5, #8]
 8008210:	e7df      	b.n	80081d2 <_fflush_r+0x22>
 8008212:	4b04      	ldr	r3, [pc, #16]	; (8008224 <_fflush_r+0x74>)
 8008214:	429c      	cmp	r4, r3
 8008216:	bf08      	it	eq
 8008218:	68ec      	ldreq	r4, [r5, #12]
 800821a:	e7da      	b.n	80081d2 <_fflush_r+0x22>
 800821c:	0800a3cc 	.word	0x0800a3cc
 8008220:	0800a3ec 	.word	0x0800a3ec
 8008224:	0800a3ac 	.word	0x0800a3ac

08008228 <std>:
 8008228:	2300      	movs	r3, #0
 800822a:	b510      	push	{r4, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	e9c0 3300 	strd	r3, r3, [r0]
 8008232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008236:	6083      	str	r3, [r0, #8]
 8008238:	8181      	strh	r1, [r0, #12]
 800823a:	6643      	str	r3, [r0, #100]	; 0x64
 800823c:	81c2      	strh	r2, [r0, #14]
 800823e:	6183      	str	r3, [r0, #24]
 8008240:	4619      	mov	r1, r3
 8008242:	2208      	movs	r2, #8
 8008244:	305c      	adds	r0, #92	; 0x5c
 8008246:	f7fd f9f3 	bl	8005630 <memset>
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <std+0x38>)
 800824c:	6263      	str	r3, [r4, #36]	; 0x24
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <std+0x3c>)
 8008250:	62a3      	str	r3, [r4, #40]	; 0x28
 8008252:	4b05      	ldr	r3, [pc, #20]	; (8008268 <std+0x40>)
 8008254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008256:	4b05      	ldr	r3, [pc, #20]	; (800826c <std+0x44>)
 8008258:	6224      	str	r4, [r4, #32]
 800825a:	6323      	str	r3, [r4, #48]	; 0x30
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	08009a71 	.word	0x08009a71
 8008264:	08009a93 	.word	0x08009a93
 8008268:	08009acb 	.word	0x08009acb
 800826c:	08009aef 	.word	0x08009aef

08008270 <_cleanup_r>:
 8008270:	4901      	ldr	r1, [pc, #4]	; (8008278 <_cleanup_r+0x8>)
 8008272:	f000 b8af 	b.w	80083d4 <_fwalk_reent>
 8008276:	bf00      	nop
 8008278:	080081b1 	.word	0x080081b1

0800827c <__sfmoreglue>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	2268      	movs	r2, #104	; 0x68
 8008280:	1e4d      	subs	r5, r1, #1
 8008282:	4355      	muls	r5, r2
 8008284:	460e      	mov	r6, r1
 8008286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800828a:	f001 fa09 	bl	80096a0 <_malloc_r>
 800828e:	4604      	mov	r4, r0
 8008290:	b140      	cbz	r0, 80082a4 <__sfmoreglue+0x28>
 8008292:	2100      	movs	r1, #0
 8008294:	e9c0 1600 	strd	r1, r6, [r0]
 8008298:	300c      	adds	r0, #12
 800829a:	60a0      	str	r0, [r4, #8]
 800829c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082a0:	f7fd f9c6 	bl	8005630 <memset>
 80082a4:	4620      	mov	r0, r4
 80082a6:	bd70      	pop	{r4, r5, r6, pc}

080082a8 <__sfp_lock_acquire>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__sfp_lock_acquire+0x8>)
 80082aa:	f000 bc26 	b.w	8008afa <__retarget_lock_acquire_recursive>
 80082ae:	bf00      	nop
 80082b0:	200002dd 	.word	0x200002dd

080082b4 <__sfp_lock_release>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__sfp_lock_release+0x8>)
 80082b6:	f000 bc21 	b.w	8008afc <__retarget_lock_release_recursive>
 80082ba:	bf00      	nop
 80082bc:	200002dd 	.word	0x200002dd

080082c0 <__sinit_lock_acquire>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__sinit_lock_acquire+0x8>)
 80082c2:	f000 bc1a 	b.w	8008afa <__retarget_lock_acquire_recursive>
 80082c6:	bf00      	nop
 80082c8:	200002de 	.word	0x200002de

080082cc <__sinit_lock_release>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sinit_lock_release+0x8>)
 80082ce:	f000 bc15 	b.w	8008afc <__retarget_lock_release_recursive>
 80082d2:	bf00      	nop
 80082d4:	200002de 	.word	0x200002de

080082d8 <__sinit>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	4604      	mov	r4, r0
 80082dc:	f7ff fff0 	bl	80082c0 <__sinit_lock_acquire>
 80082e0:	69a3      	ldr	r3, [r4, #24]
 80082e2:	b11b      	cbz	r3, 80082ec <__sinit+0x14>
 80082e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e8:	f7ff bff0 	b.w	80082cc <__sinit_lock_release>
 80082ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082f0:	6523      	str	r3, [r4, #80]	; 0x50
 80082f2:	4b13      	ldr	r3, [pc, #76]	; (8008340 <__sinit+0x68>)
 80082f4:	4a13      	ldr	r2, [pc, #76]	; (8008344 <__sinit+0x6c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	bf04      	itt	eq
 80082fe:	2301      	moveq	r3, #1
 8008300:	61a3      	streq	r3, [r4, #24]
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f820 	bl	8008348 <__sfp>
 8008308:	6060      	str	r0, [r4, #4]
 800830a:	4620      	mov	r0, r4
 800830c:	f000 f81c 	bl	8008348 <__sfp>
 8008310:	60a0      	str	r0, [r4, #8]
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f818 	bl	8008348 <__sfp>
 8008318:	2200      	movs	r2, #0
 800831a:	60e0      	str	r0, [r4, #12]
 800831c:	2104      	movs	r1, #4
 800831e:	6860      	ldr	r0, [r4, #4]
 8008320:	f7ff ff82 	bl	8008228 <std>
 8008324:	68a0      	ldr	r0, [r4, #8]
 8008326:	2201      	movs	r2, #1
 8008328:	2109      	movs	r1, #9
 800832a:	f7ff ff7d 	bl	8008228 <std>
 800832e:	68e0      	ldr	r0, [r4, #12]
 8008330:	2202      	movs	r2, #2
 8008332:	2112      	movs	r1, #18
 8008334:	f7ff ff78 	bl	8008228 <std>
 8008338:	2301      	movs	r3, #1
 800833a:	61a3      	str	r3, [r4, #24]
 800833c:	e7d2      	b.n	80082e4 <__sinit+0xc>
 800833e:	bf00      	nop
 8008340:	0800a184 	.word	0x0800a184
 8008344:	08008271 	.word	0x08008271

08008348 <__sfp>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	4607      	mov	r7, r0
 800834c:	f7ff ffac 	bl	80082a8 <__sfp_lock_acquire>
 8008350:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <__sfp+0x84>)
 8008352:	681e      	ldr	r6, [r3, #0]
 8008354:	69b3      	ldr	r3, [r6, #24]
 8008356:	b913      	cbnz	r3, 800835e <__sfp+0x16>
 8008358:	4630      	mov	r0, r6
 800835a:	f7ff ffbd 	bl	80082d8 <__sinit>
 800835e:	3648      	adds	r6, #72	; 0x48
 8008360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008364:	3b01      	subs	r3, #1
 8008366:	d503      	bpl.n	8008370 <__sfp+0x28>
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	b30b      	cbz	r3, 80083b0 <__sfp+0x68>
 800836c:	6836      	ldr	r6, [r6, #0]
 800836e:	e7f7      	b.n	8008360 <__sfp+0x18>
 8008370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008374:	b9d5      	cbnz	r5, 80083ac <__sfp+0x64>
 8008376:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <__sfp+0x88>)
 8008378:	60e3      	str	r3, [r4, #12]
 800837a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800837e:	6665      	str	r5, [r4, #100]	; 0x64
 8008380:	f000 fbba 	bl	8008af8 <__retarget_lock_init_recursive>
 8008384:	f7ff ff96 	bl	80082b4 <__sfp_lock_release>
 8008388:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800838c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008390:	6025      	str	r5, [r4, #0]
 8008392:	61a5      	str	r5, [r4, #24]
 8008394:	2208      	movs	r2, #8
 8008396:	4629      	mov	r1, r5
 8008398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800839c:	f7fd f948 	bl	8005630 <memset>
 80083a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083a8:	4620      	mov	r0, r4
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ac:	3468      	adds	r4, #104	; 0x68
 80083ae:	e7d9      	b.n	8008364 <__sfp+0x1c>
 80083b0:	2104      	movs	r1, #4
 80083b2:	4638      	mov	r0, r7
 80083b4:	f7ff ff62 	bl	800827c <__sfmoreglue>
 80083b8:	4604      	mov	r4, r0
 80083ba:	6030      	str	r0, [r6, #0]
 80083bc:	2800      	cmp	r0, #0
 80083be:	d1d5      	bne.n	800836c <__sfp+0x24>
 80083c0:	f7ff ff78 	bl	80082b4 <__sfp_lock_release>
 80083c4:	230c      	movs	r3, #12
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	e7ee      	b.n	80083a8 <__sfp+0x60>
 80083ca:	bf00      	nop
 80083cc:	0800a184 	.word	0x0800a184
 80083d0:	ffff0001 	.word	0xffff0001

080083d4 <_fwalk_reent>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4606      	mov	r6, r0
 80083da:	4688      	mov	r8, r1
 80083dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083e0:	2700      	movs	r7, #0
 80083e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083e6:	f1b9 0901 	subs.w	r9, r9, #1
 80083ea:	d505      	bpl.n	80083f8 <_fwalk_reent+0x24>
 80083ec:	6824      	ldr	r4, [r4, #0]
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	d1f7      	bne.n	80083e2 <_fwalk_reent+0xe>
 80083f2:	4638      	mov	r0, r7
 80083f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f8:	89ab      	ldrh	r3, [r5, #12]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d907      	bls.n	800840e <_fwalk_reent+0x3a>
 80083fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008402:	3301      	adds	r3, #1
 8008404:	d003      	beq.n	800840e <_fwalk_reent+0x3a>
 8008406:	4629      	mov	r1, r5
 8008408:	4630      	mov	r0, r6
 800840a:	47c0      	blx	r8
 800840c:	4307      	orrs	r7, r0
 800840e:	3568      	adds	r5, #104	; 0x68
 8008410:	e7e9      	b.n	80083e6 <_fwalk_reent+0x12>

08008412 <rshift>:
 8008412:	6903      	ldr	r3, [r0, #16]
 8008414:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800841c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008420:	f100 0414 	add.w	r4, r0, #20
 8008424:	dd45      	ble.n	80084b2 <rshift+0xa0>
 8008426:	f011 011f 	ands.w	r1, r1, #31
 800842a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800842e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008432:	d10c      	bne.n	800844e <rshift+0x3c>
 8008434:	f100 0710 	add.w	r7, r0, #16
 8008438:	4629      	mov	r1, r5
 800843a:	42b1      	cmp	r1, r6
 800843c:	d334      	bcc.n	80084a8 <rshift+0x96>
 800843e:	1a9b      	subs	r3, r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	1eea      	subs	r2, r5, #3
 8008444:	4296      	cmp	r6, r2
 8008446:	bf38      	it	cc
 8008448:	2300      	movcc	r3, #0
 800844a:	4423      	add	r3, r4
 800844c:	e015      	b.n	800847a <rshift+0x68>
 800844e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008452:	f1c1 0820 	rsb	r8, r1, #32
 8008456:	40cf      	lsrs	r7, r1
 8008458:	f105 0e04 	add.w	lr, r5, #4
 800845c:	46a1      	mov	r9, r4
 800845e:	4576      	cmp	r6, lr
 8008460:	46f4      	mov	ip, lr
 8008462:	d815      	bhi.n	8008490 <rshift+0x7e>
 8008464:	1a9a      	subs	r2, r3, r2
 8008466:	0092      	lsls	r2, r2, #2
 8008468:	3a04      	subs	r2, #4
 800846a:	3501      	adds	r5, #1
 800846c:	42ae      	cmp	r6, r5
 800846e:	bf38      	it	cc
 8008470:	2200      	movcc	r2, #0
 8008472:	18a3      	adds	r3, r4, r2
 8008474:	50a7      	str	r7, [r4, r2]
 8008476:	b107      	cbz	r7, 800847a <rshift+0x68>
 8008478:	3304      	adds	r3, #4
 800847a:	1b1a      	subs	r2, r3, r4
 800847c:	42a3      	cmp	r3, r4
 800847e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008482:	bf08      	it	eq
 8008484:	2300      	moveq	r3, #0
 8008486:	6102      	str	r2, [r0, #16]
 8008488:	bf08      	it	eq
 800848a:	6143      	streq	r3, [r0, #20]
 800848c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008490:	f8dc c000 	ldr.w	ip, [ip]
 8008494:	fa0c fc08 	lsl.w	ip, ip, r8
 8008498:	ea4c 0707 	orr.w	r7, ip, r7
 800849c:	f849 7b04 	str.w	r7, [r9], #4
 80084a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084a4:	40cf      	lsrs	r7, r1
 80084a6:	e7da      	b.n	800845e <rshift+0x4c>
 80084a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80084ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80084b0:	e7c3      	b.n	800843a <rshift+0x28>
 80084b2:	4623      	mov	r3, r4
 80084b4:	e7e1      	b.n	800847a <rshift+0x68>

080084b6 <__hexdig_fun>:
 80084b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084ba:	2b09      	cmp	r3, #9
 80084bc:	d802      	bhi.n	80084c4 <__hexdig_fun+0xe>
 80084be:	3820      	subs	r0, #32
 80084c0:	b2c0      	uxtb	r0, r0
 80084c2:	4770      	bx	lr
 80084c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d801      	bhi.n	80084d0 <__hexdig_fun+0x1a>
 80084cc:	3847      	subs	r0, #71	; 0x47
 80084ce:	e7f7      	b.n	80084c0 <__hexdig_fun+0xa>
 80084d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	d801      	bhi.n	80084dc <__hexdig_fun+0x26>
 80084d8:	3827      	subs	r0, #39	; 0x27
 80084da:	e7f1      	b.n	80084c0 <__hexdig_fun+0xa>
 80084dc:	2000      	movs	r0, #0
 80084de:	4770      	bx	lr

080084e0 <__gethex>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	ed2d 8b02 	vpush	{d8}
 80084e8:	b089      	sub	sp, #36	; 0x24
 80084ea:	ee08 0a10 	vmov	s16, r0
 80084ee:	9304      	str	r3, [sp, #16]
 80084f0:	4bb4      	ldr	r3, [pc, #720]	; (80087c4 <__gethex+0x2e4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	4618      	mov	r0, r3
 80084f8:	468b      	mov	fp, r1
 80084fa:	4690      	mov	r8, r2
 80084fc:	f7f7 fe68 	bl	80001d0 <strlen>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f8db 2000 	ldr.w	r2, [fp]
 8008506:	4403      	add	r3, r0
 8008508:	4682      	mov	sl, r0
 800850a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	1c93      	adds	r3, r2, #2
 8008512:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008516:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800851a:	32fe      	adds	r2, #254	; 0xfe
 800851c:	18d1      	adds	r1, r2, r3
 800851e:	461f      	mov	r7, r3
 8008520:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008524:	9100      	str	r1, [sp, #0]
 8008526:	2830      	cmp	r0, #48	; 0x30
 8008528:	d0f8      	beq.n	800851c <__gethex+0x3c>
 800852a:	f7ff ffc4 	bl	80084b6 <__hexdig_fun>
 800852e:	4604      	mov	r4, r0
 8008530:	2800      	cmp	r0, #0
 8008532:	d13a      	bne.n	80085aa <__gethex+0xca>
 8008534:	9901      	ldr	r1, [sp, #4]
 8008536:	4652      	mov	r2, sl
 8008538:	4638      	mov	r0, r7
 800853a:	f001 fadc 	bl	8009af6 <strncmp>
 800853e:	4605      	mov	r5, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d168      	bne.n	8008616 <__gethex+0x136>
 8008544:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008548:	eb07 060a 	add.w	r6, r7, sl
 800854c:	f7ff ffb3 	bl	80084b6 <__hexdig_fun>
 8008550:	2800      	cmp	r0, #0
 8008552:	d062      	beq.n	800861a <__gethex+0x13a>
 8008554:	4633      	mov	r3, r6
 8008556:	7818      	ldrb	r0, [r3, #0]
 8008558:	2830      	cmp	r0, #48	; 0x30
 800855a:	461f      	mov	r7, r3
 800855c:	f103 0301 	add.w	r3, r3, #1
 8008560:	d0f9      	beq.n	8008556 <__gethex+0x76>
 8008562:	f7ff ffa8 	bl	80084b6 <__hexdig_fun>
 8008566:	2301      	movs	r3, #1
 8008568:	fab0 f480 	clz	r4, r0
 800856c:	0964      	lsrs	r4, r4, #5
 800856e:	4635      	mov	r5, r6
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	463a      	mov	r2, r7
 8008574:	4616      	mov	r6, r2
 8008576:	3201      	adds	r2, #1
 8008578:	7830      	ldrb	r0, [r6, #0]
 800857a:	f7ff ff9c 	bl	80084b6 <__hexdig_fun>
 800857e:	2800      	cmp	r0, #0
 8008580:	d1f8      	bne.n	8008574 <__gethex+0x94>
 8008582:	9901      	ldr	r1, [sp, #4]
 8008584:	4652      	mov	r2, sl
 8008586:	4630      	mov	r0, r6
 8008588:	f001 fab5 	bl	8009af6 <strncmp>
 800858c:	b980      	cbnz	r0, 80085b0 <__gethex+0xd0>
 800858e:	b94d      	cbnz	r5, 80085a4 <__gethex+0xc4>
 8008590:	eb06 050a 	add.w	r5, r6, sl
 8008594:	462a      	mov	r2, r5
 8008596:	4616      	mov	r6, r2
 8008598:	3201      	adds	r2, #1
 800859a:	7830      	ldrb	r0, [r6, #0]
 800859c:	f7ff ff8b 	bl	80084b6 <__hexdig_fun>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1f8      	bne.n	8008596 <__gethex+0xb6>
 80085a4:	1bad      	subs	r5, r5, r6
 80085a6:	00ad      	lsls	r5, r5, #2
 80085a8:	e004      	b.n	80085b4 <__gethex+0xd4>
 80085aa:	2400      	movs	r4, #0
 80085ac:	4625      	mov	r5, r4
 80085ae:	e7e0      	b.n	8008572 <__gethex+0x92>
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	d1f7      	bne.n	80085a4 <__gethex+0xc4>
 80085b4:	7833      	ldrb	r3, [r6, #0]
 80085b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085ba:	2b50      	cmp	r3, #80	; 0x50
 80085bc:	d13b      	bne.n	8008636 <__gethex+0x156>
 80085be:	7873      	ldrb	r3, [r6, #1]
 80085c0:	2b2b      	cmp	r3, #43	; 0x2b
 80085c2:	d02c      	beq.n	800861e <__gethex+0x13e>
 80085c4:	2b2d      	cmp	r3, #45	; 0x2d
 80085c6:	d02e      	beq.n	8008626 <__gethex+0x146>
 80085c8:	1c71      	adds	r1, r6, #1
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	7808      	ldrb	r0, [r1, #0]
 80085d0:	f7ff ff71 	bl	80084b6 <__hexdig_fun>
 80085d4:	1e43      	subs	r3, r0, #1
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b18      	cmp	r3, #24
 80085da:	d82c      	bhi.n	8008636 <__gethex+0x156>
 80085dc:	f1a0 0210 	sub.w	r2, r0, #16
 80085e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085e4:	f7ff ff67 	bl	80084b6 <__hexdig_fun>
 80085e8:	1e43      	subs	r3, r0, #1
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b18      	cmp	r3, #24
 80085ee:	d91d      	bls.n	800862c <__gethex+0x14c>
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	d000      	beq.n	80085f8 <__gethex+0x118>
 80085f6:	4252      	negs	r2, r2
 80085f8:	4415      	add	r5, r2
 80085fa:	f8cb 1000 	str.w	r1, [fp]
 80085fe:	b1e4      	cbz	r4, 800863a <__gethex+0x15a>
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	bf14      	ite	ne
 8008606:	2700      	movne	r7, #0
 8008608:	2706      	moveq	r7, #6
 800860a:	4638      	mov	r0, r7
 800860c:	b009      	add	sp, #36	; 0x24
 800860e:	ecbd 8b02 	vpop	{d8}
 8008612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008616:	463e      	mov	r6, r7
 8008618:	4625      	mov	r5, r4
 800861a:	2401      	movs	r4, #1
 800861c:	e7ca      	b.n	80085b4 <__gethex+0xd4>
 800861e:	f04f 0900 	mov.w	r9, #0
 8008622:	1cb1      	adds	r1, r6, #2
 8008624:	e7d3      	b.n	80085ce <__gethex+0xee>
 8008626:	f04f 0901 	mov.w	r9, #1
 800862a:	e7fa      	b.n	8008622 <__gethex+0x142>
 800862c:	230a      	movs	r3, #10
 800862e:	fb03 0202 	mla	r2, r3, r2, r0
 8008632:	3a10      	subs	r2, #16
 8008634:	e7d4      	b.n	80085e0 <__gethex+0x100>
 8008636:	4631      	mov	r1, r6
 8008638:	e7df      	b.n	80085fa <__gethex+0x11a>
 800863a:	1bf3      	subs	r3, r6, r7
 800863c:	3b01      	subs	r3, #1
 800863e:	4621      	mov	r1, r4
 8008640:	2b07      	cmp	r3, #7
 8008642:	dc0b      	bgt.n	800865c <__gethex+0x17c>
 8008644:	ee18 0a10 	vmov	r0, s16
 8008648:	f000 fae6 	bl	8008c18 <_Balloc>
 800864c:	4604      	mov	r4, r0
 800864e:	b940      	cbnz	r0, 8008662 <__gethex+0x182>
 8008650:	4b5d      	ldr	r3, [pc, #372]	; (80087c8 <__gethex+0x2e8>)
 8008652:	4602      	mov	r2, r0
 8008654:	21de      	movs	r1, #222	; 0xde
 8008656:	485d      	ldr	r0, [pc, #372]	; (80087cc <__gethex+0x2ec>)
 8008658:	f001 fa80 	bl	8009b5c <__assert_func>
 800865c:	3101      	adds	r1, #1
 800865e:	105b      	asrs	r3, r3, #1
 8008660:	e7ee      	b.n	8008640 <__gethex+0x160>
 8008662:	f100 0914 	add.w	r9, r0, #20
 8008666:	f04f 0b00 	mov.w	fp, #0
 800866a:	f1ca 0301 	rsb	r3, sl, #1
 800866e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008672:	f8cd b000 	str.w	fp, [sp]
 8008676:	9306      	str	r3, [sp, #24]
 8008678:	42b7      	cmp	r7, r6
 800867a:	d340      	bcc.n	80086fe <__gethex+0x21e>
 800867c:	9802      	ldr	r0, [sp, #8]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	f840 3b04 	str.w	r3, [r0], #4
 8008684:	eba0 0009 	sub.w	r0, r0, r9
 8008688:	1080      	asrs	r0, r0, #2
 800868a:	0146      	lsls	r6, r0, #5
 800868c:	6120      	str	r0, [r4, #16]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fbb4 	bl	8008dfc <__hi0bits>
 8008694:	1a30      	subs	r0, r6, r0
 8008696:	f8d8 6000 	ldr.w	r6, [r8]
 800869a:	42b0      	cmp	r0, r6
 800869c:	dd63      	ble.n	8008766 <__gethex+0x286>
 800869e:	1b87      	subs	r7, r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 ff58 	bl	8009558 <__any_on>
 80086a8:	4682      	mov	sl, r0
 80086aa:	b1a8      	cbz	r0, 80086d8 <__gethex+0x1f8>
 80086ac:	1e7b      	subs	r3, r7, #1
 80086ae:	1159      	asrs	r1, r3, #5
 80086b0:	f003 021f 	and.w	r2, r3, #31
 80086b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086b8:	f04f 0a01 	mov.w	sl, #1
 80086bc:	fa0a f202 	lsl.w	r2, sl, r2
 80086c0:	420a      	tst	r2, r1
 80086c2:	d009      	beq.n	80086d8 <__gethex+0x1f8>
 80086c4:	4553      	cmp	r3, sl
 80086c6:	dd05      	ble.n	80086d4 <__gethex+0x1f4>
 80086c8:	1eb9      	subs	r1, r7, #2
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 ff44 	bl	8009558 <__any_on>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d145      	bne.n	8008760 <__gethex+0x280>
 80086d4:	f04f 0a02 	mov.w	sl, #2
 80086d8:	4639      	mov	r1, r7
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff fe99 	bl	8008412 <rshift>
 80086e0:	443d      	add	r5, r7
 80086e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086e6:	42ab      	cmp	r3, r5
 80086e8:	da4c      	bge.n	8008784 <__gethex+0x2a4>
 80086ea:	ee18 0a10 	vmov	r0, s16
 80086ee:	4621      	mov	r1, r4
 80086f0:	f000 fad2 	bl	8008c98 <_Bfree>
 80086f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086f6:	2300      	movs	r3, #0
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	27a3      	movs	r7, #163	; 0xa3
 80086fc:	e785      	b.n	800860a <__gethex+0x12a>
 80086fe:	1e73      	subs	r3, r6, #1
 8008700:	9a05      	ldr	r2, [sp, #20]
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008708:	4293      	cmp	r3, r2
 800870a:	d019      	beq.n	8008740 <__gethex+0x260>
 800870c:	f1bb 0f20 	cmp.w	fp, #32
 8008710:	d107      	bne.n	8008722 <__gethex+0x242>
 8008712:	9b02      	ldr	r3, [sp, #8]
 8008714:	9a00      	ldr	r2, [sp, #0]
 8008716:	f843 2b04 	str.w	r2, [r3], #4
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	469b      	mov	fp, r3
 8008722:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008726:	f7ff fec6 	bl	80084b6 <__hexdig_fun>
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	f000 000f 	and.w	r0, r0, #15
 8008730:	fa00 f00b 	lsl.w	r0, r0, fp
 8008734:	4303      	orrs	r3, r0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	f10b 0b04 	add.w	fp, fp, #4
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	e00d      	b.n	800875c <__gethex+0x27c>
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	9a06      	ldr	r2, [sp, #24]
 8008744:	4413      	add	r3, r2
 8008746:	42bb      	cmp	r3, r7
 8008748:	d3e0      	bcc.n	800870c <__gethex+0x22c>
 800874a:	4618      	mov	r0, r3
 800874c:	9901      	ldr	r1, [sp, #4]
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	4652      	mov	r2, sl
 8008752:	f001 f9d0 	bl	8009af6 <strncmp>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	2800      	cmp	r0, #0
 800875a:	d1d7      	bne.n	800870c <__gethex+0x22c>
 800875c:	461e      	mov	r6, r3
 800875e:	e78b      	b.n	8008678 <__gethex+0x198>
 8008760:	f04f 0a03 	mov.w	sl, #3
 8008764:	e7b8      	b.n	80086d8 <__gethex+0x1f8>
 8008766:	da0a      	bge.n	800877e <__gethex+0x29e>
 8008768:	1a37      	subs	r7, r6, r0
 800876a:	4621      	mov	r1, r4
 800876c:	ee18 0a10 	vmov	r0, s16
 8008770:	463a      	mov	r2, r7
 8008772:	f000 fcad 	bl	80090d0 <__lshift>
 8008776:	1bed      	subs	r5, r5, r7
 8008778:	4604      	mov	r4, r0
 800877a:	f100 0914 	add.w	r9, r0, #20
 800877e:	f04f 0a00 	mov.w	sl, #0
 8008782:	e7ae      	b.n	80086e2 <__gethex+0x202>
 8008784:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008788:	42a8      	cmp	r0, r5
 800878a:	dd72      	ble.n	8008872 <__gethex+0x392>
 800878c:	1b45      	subs	r5, r0, r5
 800878e:	42ae      	cmp	r6, r5
 8008790:	dc36      	bgt.n	8008800 <__gethex+0x320>
 8008792:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d02a      	beq.n	80087f0 <__gethex+0x310>
 800879a:	2b03      	cmp	r3, #3
 800879c:	d02c      	beq.n	80087f8 <__gethex+0x318>
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d11c      	bne.n	80087dc <__gethex+0x2fc>
 80087a2:	42ae      	cmp	r6, r5
 80087a4:	d11a      	bne.n	80087dc <__gethex+0x2fc>
 80087a6:	2e01      	cmp	r6, #1
 80087a8:	d112      	bne.n	80087d0 <__gethex+0x2f0>
 80087aa:	9a04      	ldr	r2, [sp, #16]
 80087ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	2301      	movs	r3, #1
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	f8c9 3000 	str.w	r3, [r9]
 80087ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087bc:	2762      	movs	r7, #98	; 0x62
 80087be:	601c      	str	r4, [r3, #0]
 80087c0:	e723      	b.n	800860a <__gethex+0x12a>
 80087c2:	bf00      	nop
 80087c4:	0800a474 	.word	0x0800a474
 80087c8:	0800a398 	.word	0x0800a398
 80087cc:	0800a40c 	.word	0x0800a40c
 80087d0:	1e71      	subs	r1, r6, #1
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fec0 	bl	8009558 <__any_on>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1e6      	bne.n	80087aa <__gethex+0x2ca>
 80087dc:	ee18 0a10 	vmov	r0, s16
 80087e0:	4621      	mov	r1, r4
 80087e2:	f000 fa59 	bl	8008c98 <_Bfree>
 80087e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087e8:	2300      	movs	r3, #0
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	2750      	movs	r7, #80	; 0x50
 80087ee:	e70c      	b.n	800860a <__gethex+0x12a>
 80087f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f2      	bne.n	80087dc <__gethex+0x2fc>
 80087f6:	e7d8      	b.n	80087aa <__gethex+0x2ca>
 80087f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1d5      	bne.n	80087aa <__gethex+0x2ca>
 80087fe:	e7ed      	b.n	80087dc <__gethex+0x2fc>
 8008800:	1e6f      	subs	r7, r5, #1
 8008802:	f1ba 0f00 	cmp.w	sl, #0
 8008806:	d131      	bne.n	800886c <__gethex+0x38c>
 8008808:	b127      	cbz	r7, 8008814 <__gethex+0x334>
 800880a:	4639      	mov	r1, r7
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fea3 	bl	8009558 <__any_on>
 8008812:	4682      	mov	sl, r0
 8008814:	117b      	asrs	r3, r7, #5
 8008816:	2101      	movs	r1, #1
 8008818:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800881c:	f007 071f 	and.w	r7, r7, #31
 8008820:	fa01 f707 	lsl.w	r7, r1, r7
 8008824:	421f      	tst	r7, r3
 8008826:	4629      	mov	r1, r5
 8008828:	4620      	mov	r0, r4
 800882a:	bf18      	it	ne
 800882c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008830:	1b76      	subs	r6, r6, r5
 8008832:	f7ff fdee 	bl	8008412 <rshift>
 8008836:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800883a:	2702      	movs	r7, #2
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d048      	beq.n	80088d4 <__gethex+0x3f4>
 8008842:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d015      	beq.n	8008876 <__gethex+0x396>
 800884a:	2b03      	cmp	r3, #3
 800884c:	d017      	beq.n	800887e <__gethex+0x39e>
 800884e:	2b01      	cmp	r3, #1
 8008850:	d109      	bne.n	8008866 <__gethex+0x386>
 8008852:	f01a 0f02 	tst.w	sl, #2
 8008856:	d006      	beq.n	8008866 <__gethex+0x386>
 8008858:	f8d9 0000 	ldr.w	r0, [r9]
 800885c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008860:	f01a 0f01 	tst.w	sl, #1
 8008864:	d10e      	bne.n	8008884 <__gethex+0x3a4>
 8008866:	f047 0710 	orr.w	r7, r7, #16
 800886a:	e033      	b.n	80088d4 <__gethex+0x3f4>
 800886c:	f04f 0a01 	mov.w	sl, #1
 8008870:	e7d0      	b.n	8008814 <__gethex+0x334>
 8008872:	2701      	movs	r7, #1
 8008874:	e7e2      	b.n	800883c <__gethex+0x35c>
 8008876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008878:	f1c3 0301 	rsb	r3, r3, #1
 800887c:	9315      	str	r3, [sp, #84]	; 0x54
 800887e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0f0      	beq.n	8008866 <__gethex+0x386>
 8008884:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008888:	f104 0314 	add.w	r3, r4, #20
 800888c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008890:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008894:	f04f 0c00 	mov.w	ip, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088a2:	d01c      	beq.n	80088de <__gethex+0x3fe>
 80088a4:	3201      	adds	r2, #1
 80088a6:	6002      	str	r2, [r0, #0]
 80088a8:	2f02      	cmp	r7, #2
 80088aa:	f104 0314 	add.w	r3, r4, #20
 80088ae:	d13f      	bne.n	8008930 <__gethex+0x450>
 80088b0:	f8d8 2000 	ldr.w	r2, [r8]
 80088b4:	3a01      	subs	r2, #1
 80088b6:	42b2      	cmp	r2, r6
 80088b8:	d10a      	bne.n	80088d0 <__gethex+0x3f0>
 80088ba:	1171      	asrs	r1, r6, #5
 80088bc:	2201      	movs	r2, #1
 80088be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088c2:	f006 061f 	and.w	r6, r6, #31
 80088c6:	fa02 f606 	lsl.w	r6, r2, r6
 80088ca:	421e      	tst	r6, r3
 80088cc:	bf18      	it	ne
 80088ce:	4617      	movne	r7, r2
 80088d0:	f047 0720 	orr.w	r7, r7, #32
 80088d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088d6:	601c      	str	r4, [r3, #0]
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	601d      	str	r5, [r3, #0]
 80088dc:	e695      	b.n	800860a <__gethex+0x12a>
 80088de:	4299      	cmp	r1, r3
 80088e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80088e4:	d8d8      	bhi.n	8008898 <__gethex+0x3b8>
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	459b      	cmp	fp, r3
 80088ea:	db19      	blt.n	8008920 <__gethex+0x440>
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	ee18 0a10 	vmov	r0, s16
 80088f2:	3101      	adds	r1, #1
 80088f4:	f000 f990 	bl	8008c18 <_Balloc>
 80088f8:	4681      	mov	r9, r0
 80088fa:	b918      	cbnz	r0, 8008904 <__gethex+0x424>
 80088fc:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <__gethex+0x488>)
 80088fe:	4602      	mov	r2, r0
 8008900:	2184      	movs	r1, #132	; 0x84
 8008902:	e6a8      	b.n	8008656 <__gethex+0x176>
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	3202      	adds	r2, #2
 8008908:	f104 010c 	add.w	r1, r4, #12
 800890c:	0092      	lsls	r2, r2, #2
 800890e:	300c      	adds	r0, #12
 8008910:	f000 f974 	bl	8008bfc <memcpy>
 8008914:	4621      	mov	r1, r4
 8008916:	ee18 0a10 	vmov	r0, s16
 800891a:	f000 f9bd 	bl	8008c98 <_Bfree>
 800891e:	464c      	mov	r4, r9
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008928:	6122      	str	r2, [r4, #16]
 800892a:	2201      	movs	r2, #1
 800892c:	615a      	str	r2, [r3, #20]
 800892e:	e7bb      	b.n	80088a8 <__gethex+0x3c8>
 8008930:	6922      	ldr	r2, [r4, #16]
 8008932:	455a      	cmp	r2, fp
 8008934:	dd0b      	ble.n	800894e <__gethex+0x46e>
 8008936:	2101      	movs	r1, #1
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fd6a 	bl	8008412 <rshift>
 800893e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008942:	3501      	adds	r5, #1
 8008944:	42ab      	cmp	r3, r5
 8008946:	f6ff aed0 	blt.w	80086ea <__gethex+0x20a>
 800894a:	2701      	movs	r7, #1
 800894c:	e7c0      	b.n	80088d0 <__gethex+0x3f0>
 800894e:	f016 061f 	ands.w	r6, r6, #31
 8008952:	d0fa      	beq.n	800894a <__gethex+0x46a>
 8008954:	4453      	add	r3, sl
 8008956:	f1c6 0620 	rsb	r6, r6, #32
 800895a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800895e:	f000 fa4d 	bl	8008dfc <__hi0bits>
 8008962:	42b0      	cmp	r0, r6
 8008964:	dbe7      	blt.n	8008936 <__gethex+0x456>
 8008966:	e7f0      	b.n	800894a <__gethex+0x46a>
 8008968:	0800a398 	.word	0x0800a398

0800896c <L_shift>:
 800896c:	f1c2 0208 	rsb	r2, r2, #8
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	f1c2 0620 	rsb	r6, r2, #32
 8008978:	6843      	ldr	r3, [r0, #4]
 800897a:	6804      	ldr	r4, [r0, #0]
 800897c:	fa03 f506 	lsl.w	r5, r3, r6
 8008980:	432c      	orrs	r4, r5
 8008982:	40d3      	lsrs	r3, r2
 8008984:	6004      	str	r4, [r0, #0]
 8008986:	f840 3f04 	str.w	r3, [r0, #4]!
 800898a:	4288      	cmp	r0, r1
 800898c:	d3f4      	bcc.n	8008978 <L_shift+0xc>
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <__match>:
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	b914      	cbnz	r4, 80089a2 <__match+0x12>
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	2001      	movs	r0, #1
 80089a0:	bd30      	pop	{r4, r5, pc}
 80089a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089aa:	2d19      	cmp	r5, #25
 80089ac:	bf98      	it	ls
 80089ae:	3220      	addls	r2, #32
 80089b0:	42a2      	cmp	r2, r4
 80089b2:	d0f0      	beq.n	8008996 <__match+0x6>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7f3      	b.n	80089a0 <__match+0x10>

080089b8 <__hexnan>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	680b      	ldr	r3, [r1, #0]
 80089be:	115e      	asrs	r6, r3, #5
 80089c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089c4:	f013 031f 	ands.w	r3, r3, #31
 80089c8:	b087      	sub	sp, #28
 80089ca:	bf18      	it	ne
 80089cc:	3604      	addne	r6, #4
 80089ce:	2500      	movs	r5, #0
 80089d0:	1f37      	subs	r7, r6, #4
 80089d2:	4690      	mov	r8, r2
 80089d4:	6802      	ldr	r2, [r0, #0]
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	4682      	mov	sl, r0
 80089da:	f846 5c04 	str.w	r5, [r6, #-4]
 80089de:	46b9      	mov	r9, r7
 80089e0:	463c      	mov	r4, r7
 80089e2:	9502      	str	r5, [sp, #8]
 80089e4:	46ab      	mov	fp, r5
 80089e6:	7851      	ldrb	r1, [r2, #1]
 80089e8:	1c53      	adds	r3, r2, #1
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	b341      	cbz	r1, 8008a40 <__hexnan+0x88>
 80089ee:	4608      	mov	r0, r1
 80089f0:	9205      	str	r2, [sp, #20]
 80089f2:	9104      	str	r1, [sp, #16]
 80089f4:	f7ff fd5f 	bl	80084b6 <__hexdig_fun>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d14f      	bne.n	8008a9c <__hexnan+0xe4>
 80089fc:	9904      	ldr	r1, [sp, #16]
 80089fe:	9a05      	ldr	r2, [sp, #20]
 8008a00:	2920      	cmp	r1, #32
 8008a02:	d818      	bhi.n	8008a36 <__hexnan+0x7e>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	459b      	cmp	fp, r3
 8008a08:	dd13      	ble.n	8008a32 <__hexnan+0x7a>
 8008a0a:	454c      	cmp	r4, r9
 8008a0c:	d206      	bcs.n	8008a1c <__hexnan+0x64>
 8008a0e:	2d07      	cmp	r5, #7
 8008a10:	dc04      	bgt.n	8008a1c <__hexnan+0x64>
 8008a12:	462a      	mov	r2, r5
 8008a14:	4649      	mov	r1, r9
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff ffa8 	bl	800896c <L_shift>
 8008a1c:	4544      	cmp	r4, r8
 8008a1e:	d950      	bls.n	8008ac2 <__hexnan+0x10a>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f1a4 0904 	sub.w	r9, r4, #4
 8008a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a2e:	464c      	mov	r4, r9
 8008a30:	461d      	mov	r5, r3
 8008a32:	9a03      	ldr	r2, [sp, #12]
 8008a34:	e7d7      	b.n	80089e6 <__hexnan+0x2e>
 8008a36:	2929      	cmp	r1, #41	; 0x29
 8008a38:	d156      	bne.n	8008ae8 <__hexnan+0x130>
 8008a3a:	3202      	adds	r2, #2
 8008a3c:	f8ca 2000 	str.w	r2, [sl]
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d050      	beq.n	8008ae8 <__hexnan+0x130>
 8008a46:	454c      	cmp	r4, r9
 8008a48:	d206      	bcs.n	8008a58 <__hexnan+0xa0>
 8008a4a:	2d07      	cmp	r5, #7
 8008a4c:	dc04      	bgt.n	8008a58 <__hexnan+0xa0>
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4649      	mov	r1, r9
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff ff8a 	bl	800896c <L_shift>
 8008a58:	4544      	cmp	r4, r8
 8008a5a:	d934      	bls.n	8008ac6 <__hexnan+0x10e>
 8008a5c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a60:	4623      	mov	r3, r4
 8008a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a66:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a6a:	429f      	cmp	r7, r3
 8008a6c:	d2f9      	bcs.n	8008a62 <__hexnan+0xaa>
 8008a6e:	1b3b      	subs	r3, r7, r4
 8008a70:	f023 0303 	bic.w	r3, r3, #3
 8008a74:	3304      	adds	r3, #4
 8008a76:	3401      	adds	r4, #1
 8008a78:	3e03      	subs	r6, #3
 8008a7a:	42b4      	cmp	r4, r6
 8008a7c:	bf88      	it	hi
 8008a7e:	2304      	movhi	r3, #4
 8008a80:	4443      	add	r3, r8
 8008a82:	2200      	movs	r2, #0
 8008a84:	f843 2b04 	str.w	r2, [r3], #4
 8008a88:	429f      	cmp	r7, r3
 8008a8a:	d2fb      	bcs.n	8008a84 <__hexnan+0xcc>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <__hexnan+0xe0>
 8008a90:	4547      	cmp	r7, r8
 8008a92:	d127      	bne.n	8008ae4 <__hexnan+0x12c>
 8008a94:	2301      	movs	r3, #1
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	2005      	movs	r0, #5
 8008a9a:	e026      	b.n	8008aea <__hexnan+0x132>
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	2d08      	cmp	r5, #8
 8008aa0:	f10b 0b01 	add.w	fp, fp, #1
 8008aa4:	dd06      	ble.n	8008ab4 <__hexnan+0xfc>
 8008aa6:	4544      	cmp	r4, r8
 8008aa8:	d9c3      	bls.n	8008a32 <__hexnan+0x7a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab0:	2501      	movs	r5, #1
 8008ab2:	3c04      	subs	r4, #4
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	f000 000f 	and.w	r0, r0, #15
 8008aba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008abe:	6022      	str	r2, [r4, #0]
 8008ac0:	e7b7      	b.n	8008a32 <__hexnan+0x7a>
 8008ac2:	2508      	movs	r5, #8
 8008ac4:	e7b5      	b.n	8008a32 <__hexnan+0x7a>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0df      	beq.n	8008a8c <__hexnan+0xd4>
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	f1c3 0320 	rsb	r3, r3, #32
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008adc:	401a      	ands	r2, r3
 8008ade:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ae2:	e7d3      	b.n	8008a8c <__hexnan+0xd4>
 8008ae4:	3f04      	subs	r7, #4
 8008ae6:	e7d1      	b.n	8008a8c <__hexnan+0xd4>
 8008ae8:	2004      	movs	r0, #4
 8008aea:	b007      	add	sp, #28
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008af0 <_localeconv_r>:
 8008af0:	4800      	ldr	r0, [pc, #0]	; (8008af4 <_localeconv_r+0x4>)
 8008af2:	4770      	bx	lr
 8008af4:	20000164 	.word	0x20000164

08008af8 <__retarget_lock_init_recursive>:
 8008af8:	4770      	bx	lr

08008afa <__retarget_lock_acquire_recursive>:
 8008afa:	4770      	bx	lr

08008afc <__retarget_lock_release_recursive>:
 8008afc:	4770      	bx	lr

08008afe <__swhatbuf_r>:
 8008afe:	b570      	push	{r4, r5, r6, lr}
 8008b00:	460e      	mov	r6, r1
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	b096      	sub	sp, #88	; 0x58
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	461d      	mov	r5, r3
 8008b0e:	da08      	bge.n	8008b22 <__swhatbuf_r+0x24>
 8008b10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	602a      	str	r2, [r5, #0]
 8008b18:	061a      	lsls	r2, r3, #24
 8008b1a:	d410      	bmi.n	8008b3e <__swhatbuf_r+0x40>
 8008b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b20:	e00e      	b.n	8008b40 <__swhatbuf_r+0x42>
 8008b22:	466a      	mov	r2, sp
 8008b24:	f001 f85a 	bl	8009bdc <_fstat_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dbf1      	blt.n	8008b10 <__swhatbuf_r+0x12>
 8008b2c:	9a01      	ldr	r2, [sp, #4]
 8008b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b36:	425a      	negs	r2, r3
 8008b38:	415a      	adcs	r2, r3
 8008b3a:	602a      	str	r2, [r5, #0]
 8008b3c:	e7ee      	b.n	8008b1c <__swhatbuf_r+0x1e>
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	2000      	movs	r0, #0
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	b016      	add	sp, #88	; 0x58
 8008b46:	bd70      	pop	{r4, r5, r6, pc}

08008b48 <__smakebuf_r>:
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b4c:	079d      	lsls	r5, r3, #30
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	d507      	bpl.n	8008b64 <__smakebuf_r+0x1c>
 8008b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	6163      	str	r3, [r4, #20]
 8008b60:	b002      	add	sp, #8
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	ab01      	add	r3, sp, #4
 8008b66:	466a      	mov	r2, sp
 8008b68:	f7ff ffc9 	bl	8008afe <__swhatbuf_r>
 8008b6c:	9900      	ldr	r1, [sp, #0]
 8008b6e:	4605      	mov	r5, r0
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 fd95 	bl	80096a0 <_malloc_r>
 8008b76:	b948      	cbnz	r0, 8008b8c <__smakebuf_r+0x44>
 8008b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7c:	059a      	lsls	r2, r3, #22
 8008b7e:	d4ef      	bmi.n	8008b60 <__smakebuf_r+0x18>
 8008b80:	f023 0303 	bic.w	r3, r3, #3
 8008b84:	f043 0302 	orr.w	r3, r3, #2
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	e7e3      	b.n	8008b54 <__smakebuf_r+0xc>
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <__smakebuf_r+0x7c>)
 8008b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	6163      	str	r3, [r4, #20]
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	6120      	str	r0, [r4, #16]
 8008ba2:	b15b      	cbz	r3, 8008bbc <__smakebuf_r+0x74>
 8008ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f001 f829 	bl	8009c00 <_isatty_r>
 8008bae:	b128      	cbz	r0, 8008bbc <__smakebuf_r+0x74>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	89a0      	ldrh	r0, [r4, #12]
 8008bbe:	4305      	orrs	r5, r0
 8008bc0:	81a5      	strh	r5, [r4, #12]
 8008bc2:	e7cd      	b.n	8008b60 <__smakebuf_r+0x18>
 8008bc4:	08008271 	.word	0x08008271

08008bc8 <malloc>:
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <malloc+0xc>)
 8008bca:	4601      	mov	r1, r0
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 bd67 	b.w	80096a0 <_malloc_r>
 8008bd2:	bf00      	nop
 8008bd4:	2000000c 	.word	0x2000000c

08008bd8 <__ascii_mbtowc>:
 8008bd8:	b082      	sub	sp, #8
 8008bda:	b901      	cbnz	r1, 8008bde <__ascii_mbtowc+0x6>
 8008bdc:	a901      	add	r1, sp, #4
 8008bde:	b142      	cbz	r2, 8008bf2 <__ascii_mbtowc+0x1a>
 8008be0:	b14b      	cbz	r3, 8008bf6 <__ascii_mbtowc+0x1e>
 8008be2:	7813      	ldrb	r3, [r2, #0]
 8008be4:	600b      	str	r3, [r1, #0]
 8008be6:	7812      	ldrb	r2, [r2, #0]
 8008be8:	1e10      	subs	r0, r2, #0
 8008bea:	bf18      	it	ne
 8008bec:	2001      	movne	r0, #1
 8008bee:	b002      	add	sp, #8
 8008bf0:	4770      	bx	lr
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	e7fb      	b.n	8008bee <__ascii_mbtowc+0x16>
 8008bf6:	f06f 0001 	mvn.w	r0, #1
 8008bfa:	e7f8      	b.n	8008bee <__ascii_mbtowc+0x16>

08008bfc <memcpy>:
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c04:	d100      	bne.n	8008c08 <memcpy+0xc>
 8008c06:	4770      	bx	lr
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c12:	4291      	cmp	r1, r2
 8008c14:	d1f9      	bne.n	8008c0a <memcpy+0xe>
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <_Balloc>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	b976      	cbnz	r6, 8008c40 <_Balloc+0x28>
 8008c22:	2010      	movs	r0, #16
 8008c24:	f7ff ffd0 	bl	8008bc8 <malloc>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c2c:	b920      	cbnz	r0, 8008c38 <_Balloc+0x20>
 8008c2e:	4b18      	ldr	r3, [pc, #96]	; (8008c90 <_Balloc+0x78>)
 8008c30:	4818      	ldr	r0, [pc, #96]	; (8008c94 <_Balloc+0x7c>)
 8008c32:	2166      	movs	r1, #102	; 0x66
 8008c34:	f000 ff92 	bl	8009b5c <__assert_func>
 8008c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c3c:	6006      	str	r6, [r0, #0]
 8008c3e:	60c6      	str	r6, [r0, #12]
 8008c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c42:	68f3      	ldr	r3, [r6, #12]
 8008c44:	b183      	cbz	r3, 8008c68 <_Balloc+0x50>
 8008c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c4e:	b9b8      	cbnz	r0, 8008c80 <_Balloc+0x68>
 8008c50:	2101      	movs	r1, #1
 8008c52:	fa01 f605 	lsl.w	r6, r1, r5
 8008c56:	1d72      	adds	r2, r6, #5
 8008c58:	0092      	lsls	r2, r2, #2
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fc9d 	bl	800959a <_calloc_r>
 8008c60:	b160      	cbz	r0, 8008c7c <_Balloc+0x64>
 8008c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c66:	e00e      	b.n	8008c86 <_Balloc+0x6e>
 8008c68:	2221      	movs	r2, #33	; 0x21
 8008c6a:	2104      	movs	r1, #4
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 fc94 	bl	800959a <_calloc_r>
 8008c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c74:	60f0      	str	r0, [r6, #12]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e4      	bne.n	8008c46 <_Balloc+0x2e>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	6802      	ldr	r2, [r0, #0]
 8008c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c86:	2300      	movs	r3, #0
 8008c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c8c:	e7f7      	b.n	8008c7e <_Balloc+0x66>
 8008c8e:	bf00      	nop
 8008c90:	0800a326 	.word	0x0800a326
 8008c94:	0800a488 	.word	0x0800a488

08008c98 <_Bfree>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b976      	cbnz	r6, 8008cc0 <_Bfree+0x28>
 8008ca2:	2010      	movs	r0, #16
 8008ca4:	f7ff ff90 	bl	8008bc8 <malloc>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6268      	str	r0, [r5, #36]	; 0x24
 8008cac:	b920      	cbnz	r0, 8008cb8 <_Bfree+0x20>
 8008cae:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <_Bfree+0x3c>)
 8008cb0:	4809      	ldr	r0, [pc, #36]	; (8008cd8 <_Bfree+0x40>)
 8008cb2:	218a      	movs	r1, #138	; 0x8a
 8008cb4:	f000 ff52 	bl	8009b5c <__assert_func>
 8008cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cbc:	6006      	str	r6, [r0, #0]
 8008cbe:	60c6      	str	r6, [r0, #12]
 8008cc0:	b13c      	cbz	r4, 8008cd2 <_Bfree+0x3a>
 8008cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cc4:	6862      	ldr	r2, [r4, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ccc:	6021      	str	r1, [r4, #0]
 8008cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	0800a326 	.word	0x0800a326
 8008cd8:	0800a488 	.word	0x0800a488

08008cdc <__multadd>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	690d      	ldr	r5, [r1, #16]
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	461e      	mov	r6, r3
 8008ce8:	f101 0c14 	add.w	ip, r1, #20
 8008cec:	2000      	movs	r0, #0
 8008cee:	f8dc 3000 	ldr.w	r3, [ip]
 8008cf2:	b299      	uxth	r1, r3
 8008cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cf8:	0c1e      	lsrs	r6, r3, #16
 8008cfa:	0c0b      	lsrs	r3, r1, #16
 8008cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8008d00:	b289      	uxth	r1, r1
 8008d02:	3001      	adds	r0, #1
 8008d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d08:	4285      	cmp	r5, r0
 8008d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d12:	dcec      	bgt.n	8008cee <__multadd+0x12>
 8008d14:	b30e      	cbz	r6, 8008d5a <__multadd+0x7e>
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	42ab      	cmp	r3, r5
 8008d1a:	dc19      	bgt.n	8008d50 <__multadd+0x74>
 8008d1c:	6861      	ldr	r1, [r4, #4]
 8008d1e:	4638      	mov	r0, r7
 8008d20:	3101      	adds	r1, #1
 8008d22:	f7ff ff79 	bl	8008c18 <_Balloc>
 8008d26:	4680      	mov	r8, r0
 8008d28:	b928      	cbnz	r0, 8008d36 <__multadd+0x5a>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <__multadd+0x84>)
 8008d2e:	480d      	ldr	r0, [pc, #52]	; (8008d64 <__multadd+0x88>)
 8008d30:	21b5      	movs	r1, #181	; 0xb5
 8008d32:	f000 ff13 	bl	8009b5c <__assert_func>
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	f104 010c 	add.w	r1, r4, #12
 8008d3e:	0092      	lsls	r2, r2, #2
 8008d40:	300c      	adds	r0, #12
 8008d42:	f7ff ff5b 	bl	8008bfc <memcpy>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4638      	mov	r0, r7
 8008d4a:	f7ff ffa5 	bl	8008c98 <_Bfree>
 8008d4e:	4644      	mov	r4, r8
 8008d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d54:	3501      	adds	r5, #1
 8008d56:	615e      	str	r6, [r3, #20]
 8008d58:	6125      	str	r5, [r4, #16]
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d60:	0800a398 	.word	0x0800a398
 8008d64:	0800a488 	.word	0x0800a488

08008d68 <__s2b>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	4615      	mov	r5, r2
 8008d70:	461f      	mov	r7, r3
 8008d72:	2209      	movs	r2, #9
 8008d74:	3308      	adds	r3, #8
 8008d76:	4606      	mov	r6, r0
 8008d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	2201      	movs	r2, #1
 8008d80:	429a      	cmp	r2, r3
 8008d82:	db09      	blt.n	8008d98 <__s2b+0x30>
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff ff47 	bl	8008c18 <_Balloc>
 8008d8a:	b940      	cbnz	r0, 8008d9e <__s2b+0x36>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <__s2b+0x8c>)
 8008d90:	4819      	ldr	r0, [pc, #100]	; (8008df8 <__s2b+0x90>)
 8008d92:	21ce      	movs	r1, #206	; 0xce
 8008d94:	f000 fee2 	bl	8009b5c <__assert_func>
 8008d98:	0052      	lsls	r2, r2, #1
 8008d9a:	3101      	adds	r1, #1
 8008d9c:	e7f0      	b.n	8008d80 <__s2b+0x18>
 8008d9e:	9b08      	ldr	r3, [sp, #32]
 8008da0:	6143      	str	r3, [r0, #20]
 8008da2:	2d09      	cmp	r5, #9
 8008da4:	f04f 0301 	mov.w	r3, #1
 8008da8:	6103      	str	r3, [r0, #16]
 8008daa:	dd16      	ble.n	8008dda <__s2b+0x72>
 8008dac:	f104 0909 	add.w	r9, r4, #9
 8008db0:	46c8      	mov	r8, r9
 8008db2:	442c      	add	r4, r5
 8008db4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008db8:	4601      	mov	r1, r0
 8008dba:	3b30      	subs	r3, #48	; 0x30
 8008dbc:	220a      	movs	r2, #10
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ff8c 	bl	8008cdc <__multadd>
 8008dc4:	45a0      	cmp	r8, r4
 8008dc6:	d1f5      	bne.n	8008db4 <__s2b+0x4c>
 8008dc8:	f1a5 0408 	sub.w	r4, r5, #8
 8008dcc:	444c      	add	r4, r9
 8008dce:	1b2d      	subs	r5, r5, r4
 8008dd0:	1963      	adds	r3, r4, r5
 8008dd2:	42bb      	cmp	r3, r7
 8008dd4:	db04      	blt.n	8008de0 <__s2b+0x78>
 8008dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dda:	340a      	adds	r4, #10
 8008ddc:	2509      	movs	r5, #9
 8008dde:	e7f6      	b.n	8008dce <__s2b+0x66>
 8008de0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008de4:	4601      	mov	r1, r0
 8008de6:	3b30      	subs	r3, #48	; 0x30
 8008de8:	220a      	movs	r2, #10
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ff76 	bl	8008cdc <__multadd>
 8008df0:	e7ee      	b.n	8008dd0 <__s2b+0x68>
 8008df2:	bf00      	nop
 8008df4:	0800a398 	.word	0x0800a398
 8008df8:	0800a488 	.word	0x0800a488

08008dfc <__hi0bits>:
 8008dfc:	0c03      	lsrs	r3, r0, #16
 8008dfe:	041b      	lsls	r3, r3, #16
 8008e00:	b9d3      	cbnz	r3, 8008e38 <__hi0bits+0x3c>
 8008e02:	0400      	lsls	r0, r0, #16
 8008e04:	2310      	movs	r3, #16
 8008e06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e0a:	bf04      	itt	eq
 8008e0c:	0200      	lsleq	r0, r0, #8
 8008e0e:	3308      	addeq	r3, #8
 8008e10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e14:	bf04      	itt	eq
 8008e16:	0100      	lsleq	r0, r0, #4
 8008e18:	3304      	addeq	r3, #4
 8008e1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e1e:	bf04      	itt	eq
 8008e20:	0080      	lsleq	r0, r0, #2
 8008e22:	3302      	addeq	r3, #2
 8008e24:	2800      	cmp	r0, #0
 8008e26:	db05      	blt.n	8008e34 <__hi0bits+0x38>
 8008e28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e2c:	f103 0301 	add.w	r3, r3, #1
 8008e30:	bf08      	it	eq
 8008e32:	2320      	moveq	r3, #32
 8008e34:	4618      	mov	r0, r3
 8008e36:	4770      	bx	lr
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e7e4      	b.n	8008e06 <__hi0bits+0xa>

08008e3c <__lo0bits>:
 8008e3c:	6803      	ldr	r3, [r0, #0]
 8008e3e:	f013 0207 	ands.w	r2, r3, #7
 8008e42:	4601      	mov	r1, r0
 8008e44:	d00b      	beq.n	8008e5e <__lo0bits+0x22>
 8008e46:	07da      	lsls	r2, r3, #31
 8008e48:	d423      	bmi.n	8008e92 <__lo0bits+0x56>
 8008e4a:	0798      	lsls	r0, r3, #30
 8008e4c:	bf49      	itett	mi
 8008e4e:	085b      	lsrmi	r3, r3, #1
 8008e50:	089b      	lsrpl	r3, r3, #2
 8008e52:	2001      	movmi	r0, #1
 8008e54:	600b      	strmi	r3, [r1, #0]
 8008e56:	bf5c      	itt	pl
 8008e58:	600b      	strpl	r3, [r1, #0]
 8008e5a:	2002      	movpl	r0, #2
 8008e5c:	4770      	bx	lr
 8008e5e:	b298      	uxth	r0, r3
 8008e60:	b9a8      	cbnz	r0, 8008e8e <__lo0bits+0x52>
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	2010      	movs	r0, #16
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	b90a      	cbnz	r2, 8008e6e <__lo0bits+0x32>
 8008e6a:	3008      	adds	r0, #8
 8008e6c:	0a1b      	lsrs	r3, r3, #8
 8008e6e:	071a      	lsls	r2, r3, #28
 8008e70:	bf04      	itt	eq
 8008e72:	091b      	lsreq	r3, r3, #4
 8008e74:	3004      	addeq	r0, #4
 8008e76:	079a      	lsls	r2, r3, #30
 8008e78:	bf04      	itt	eq
 8008e7a:	089b      	lsreq	r3, r3, #2
 8008e7c:	3002      	addeq	r0, #2
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d403      	bmi.n	8008e8a <__lo0bits+0x4e>
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	f100 0001 	add.w	r0, r0, #1
 8008e88:	d005      	beq.n	8008e96 <__lo0bits+0x5a>
 8008e8a:	600b      	str	r3, [r1, #0]
 8008e8c:	4770      	bx	lr
 8008e8e:	4610      	mov	r0, r2
 8008e90:	e7e9      	b.n	8008e66 <__lo0bits+0x2a>
 8008e92:	2000      	movs	r0, #0
 8008e94:	4770      	bx	lr
 8008e96:	2020      	movs	r0, #32
 8008e98:	4770      	bx	lr
	...

08008e9c <__i2b>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	f7ff feb9 	bl	8008c18 <_Balloc>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	b928      	cbnz	r0, 8008eb6 <__i2b+0x1a>
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <__i2b+0x24>)
 8008eac:	4805      	ldr	r0, [pc, #20]	; (8008ec4 <__i2b+0x28>)
 8008eae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008eb2:	f000 fe53 	bl	8009b5c <__assert_func>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	6144      	str	r4, [r0, #20]
 8008eba:	6103      	str	r3, [r0, #16]
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	bf00      	nop
 8008ec0:	0800a398 	.word	0x0800a398
 8008ec4:	0800a488 	.word	0x0800a488

08008ec8 <__multiply>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	4691      	mov	r9, r2
 8008ece:	690a      	ldr	r2, [r1, #16]
 8008ed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	bfb8      	it	lt
 8008ed8:	460b      	movlt	r3, r1
 8008eda:	460c      	mov	r4, r1
 8008edc:	bfbc      	itt	lt
 8008ede:	464c      	movlt	r4, r9
 8008ee0:	4699      	movlt	r9, r3
 8008ee2:	6927      	ldr	r7, [r4, #16]
 8008ee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ee8:	68a3      	ldr	r3, [r4, #8]
 8008eea:	6861      	ldr	r1, [r4, #4]
 8008eec:	eb07 060a 	add.w	r6, r7, sl
 8008ef0:	42b3      	cmp	r3, r6
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	bfb8      	it	lt
 8008ef6:	3101      	addlt	r1, #1
 8008ef8:	f7ff fe8e 	bl	8008c18 <_Balloc>
 8008efc:	b930      	cbnz	r0, 8008f0c <__multiply+0x44>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4b44      	ldr	r3, [pc, #272]	; (8009014 <__multiply+0x14c>)
 8008f02:	4845      	ldr	r0, [pc, #276]	; (8009018 <__multiply+0x150>)
 8008f04:	f240 115d 	movw	r1, #349	; 0x15d
 8008f08:	f000 fe28 	bl	8009b5c <__assert_func>
 8008f0c:	f100 0514 	add.w	r5, r0, #20
 8008f10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f14:	462b      	mov	r3, r5
 8008f16:	2200      	movs	r2, #0
 8008f18:	4543      	cmp	r3, r8
 8008f1a:	d321      	bcc.n	8008f60 <__multiply+0x98>
 8008f1c:	f104 0314 	add.w	r3, r4, #20
 8008f20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f24:	f109 0314 	add.w	r3, r9, #20
 8008f28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f2c:	9202      	str	r2, [sp, #8]
 8008f2e:	1b3a      	subs	r2, r7, r4
 8008f30:	3a15      	subs	r2, #21
 8008f32:	f022 0203 	bic.w	r2, r2, #3
 8008f36:	3204      	adds	r2, #4
 8008f38:	f104 0115 	add.w	r1, r4, #21
 8008f3c:	428f      	cmp	r7, r1
 8008f3e:	bf38      	it	cc
 8008f40:	2204      	movcc	r2, #4
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	9a02      	ldr	r2, [sp, #8]
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d80c      	bhi.n	8008f66 <__multiply+0x9e>
 8008f4c:	2e00      	cmp	r6, #0
 8008f4e:	dd03      	ble.n	8008f58 <__multiply+0x90>
 8008f50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d05a      	beq.n	800900e <__multiply+0x146>
 8008f58:	6106      	str	r6, [r0, #16]
 8008f5a:	b005      	add	sp, #20
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	f843 2b04 	str.w	r2, [r3], #4
 8008f64:	e7d8      	b.n	8008f18 <__multiply+0x50>
 8008f66:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f6a:	f1ba 0f00 	cmp.w	sl, #0
 8008f6e:	d024      	beq.n	8008fba <__multiply+0xf2>
 8008f70:	f104 0e14 	add.w	lr, r4, #20
 8008f74:	46a9      	mov	r9, r5
 8008f76:	f04f 0c00 	mov.w	ip, #0
 8008f7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f7e:	f8d9 1000 	ldr.w	r1, [r9]
 8008f82:	fa1f fb82 	uxth.w	fp, r2
 8008f86:	b289      	uxth	r1, r1
 8008f88:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f90:	f8d9 2000 	ldr.w	r2, [r9]
 8008f94:	4461      	add	r1, ip
 8008f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fa2:	b289      	uxth	r1, r1
 8008fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fa8:	4577      	cmp	r7, lr
 8008faa:	f849 1b04 	str.w	r1, [r9], #4
 8008fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fb2:	d8e2      	bhi.n	8008f7a <__multiply+0xb2>
 8008fb4:	9a01      	ldr	r2, [sp, #4]
 8008fb6:	f845 c002 	str.w	ip, [r5, r2]
 8008fba:	9a03      	ldr	r2, [sp, #12]
 8008fbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	f1b9 0f00 	cmp.w	r9, #0
 8008fc6:	d020      	beq.n	800900a <__multiply+0x142>
 8008fc8:	6829      	ldr	r1, [r5, #0]
 8008fca:	f104 0c14 	add.w	ip, r4, #20
 8008fce:	46ae      	mov	lr, r5
 8008fd0:	f04f 0a00 	mov.w	sl, #0
 8008fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008fd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fdc:	fb09 220b 	mla	r2, r9, fp, r2
 8008fe0:	4492      	add	sl, r2
 8008fe2:	b289      	uxth	r1, r1
 8008fe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fe8:	f84e 1b04 	str.w	r1, [lr], #4
 8008fec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ff0:	f8be 1000 	ldrh.w	r1, [lr]
 8008ff4:	0c12      	lsrs	r2, r2, #16
 8008ff6:	fb09 1102 	mla	r1, r9, r2, r1
 8008ffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008ffe:	4567      	cmp	r7, ip
 8009000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009004:	d8e6      	bhi.n	8008fd4 <__multiply+0x10c>
 8009006:	9a01      	ldr	r2, [sp, #4]
 8009008:	50a9      	str	r1, [r5, r2]
 800900a:	3504      	adds	r5, #4
 800900c:	e79a      	b.n	8008f44 <__multiply+0x7c>
 800900e:	3e01      	subs	r6, #1
 8009010:	e79c      	b.n	8008f4c <__multiply+0x84>
 8009012:	bf00      	nop
 8009014:	0800a398 	.word	0x0800a398
 8009018:	0800a488 	.word	0x0800a488

0800901c <__pow5mult>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	4615      	mov	r5, r2
 8009022:	f012 0203 	ands.w	r2, r2, #3
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	d007      	beq.n	800903c <__pow5mult+0x20>
 800902c:	4c25      	ldr	r4, [pc, #148]	; (80090c4 <__pow5mult+0xa8>)
 800902e:	3a01      	subs	r2, #1
 8009030:	2300      	movs	r3, #0
 8009032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009036:	f7ff fe51 	bl	8008cdc <__multadd>
 800903a:	4607      	mov	r7, r0
 800903c:	10ad      	asrs	r5, r5, #2
 800903e:	d03d      	beq.n	80090bc <__pow5mult+0xa0>
 8009040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009042:	b97c      	cbnz	r4, 8009064 <__pow5mult+0x48>
 8009044:	2010      	movs	r0, #16
 8009046:	f7ff fdbf 	bl	8008bc8 <malloc>
 800904a:	4602      	mov	r2, r0
 800904c:	6270      	str	r0, [r6, #36]	; 0x24
 800904e:	b928      	cbnz	r0, 800905c <__pow5mult+0x40>
 8009050:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <__pow5mult+0xac>)
 8009052:	481e      	ldr	r0, [pc, #120]	; (80090cc <__pow5mult+0xb0>)
 8009054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009058:	f000 fd80 	bl	8009b5c <__assert_func>
 800905c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009060:	6004      	str	r4, [r0, #0]
 8009062:	60c4      	str	r4, [r0, #12]
 8009064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800906c:	b94c      	cbnz	r4, 8009082 <__pow5mult+0x66>
 800906e:	f240 2171 	movw	r1, #625	; 0x271
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ff12 	bl	8008e9c <__i2b>
 8009078:	2300      	movs	r3, #0
 800907a:	f8c8 0008 	str.w	r0, [r8, #8]
 800907e:	4604      	mov	r4, r0
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	f04f 0900 	mov.w	r9, #0
 8009086:	07eb      	lsls	r3, r5, #31
 8009088:	d50a      	bpl.n	80090a0 <__pow5mult+0x84>
 800908a:	4639      	mov	r1, r7
 800908c:	4622      	mov	r2, r4
 800908e:	4630      	mov	r0, r6
 8009090:	f7ff ff1a 	bl	8008ec8 <__multiply>
 8009094:	4639      	mov	r1, r7
 8009096:	4680      	mov	r8, r0
 8009098:	4630      	mov	r0, r6
 800909a:	f7ff fdfd 	bl	8008c98 <_Bfree>
 800909e:	4647      	mov	r7, r8
 80090a0:	106d      	asrs	r5, r5, #1
 80090a2:	d00b      	beq.n	80090bc <__pow5mult+0xa0>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	b938      	cbnz	r0, 80090b8 <__pow5mult+0x9c>
 80090a8:	4622      	mov	r2, r4
 80090aa:	4621      	mov	r1, r4
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff ff0b 	bl	8008ec8 <__multiply>
 80090b2:	6020      	str	r0, [r4, #0]
 80090b4:	f8c0 9000 	str.w	r9, [r0]
 80090b8:	4604      	mov	r4, r0
 80090ba:	e7e4      	b.n	8009086 <__pow5mult+0x6a>
 80090bc:	4638      	mov	r0, r7
 80090be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c2:	bf00      	nop
 80090c4:	0800a5d8 	.word	0x0800a5d8
 80090c8:	0800a326 	.word	0x0800a326
 80090cc:	0800a488 	.word	0x0800a488

080090d0 <__lshift>:
 80090d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	460c      	mov	r4, r1
 80090d6:	6849      	ldr	r1, [r1, #4]
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	4607      	mov	r7, r0
 80090e2:	4691      	mov	r9, r2
 80090e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090e8:	f108 0601 	add.w	r6, r8, #1
 80090ec:	42b3      	cmp	r3, r6
 80090ee:	db0b      	blt.n	8009108 <__lshift+0x38>
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7ff fd91 	bl	8008c18 <_Balloc>
 80090f6:	4605      	mov	r5, r0
 80090f8:	b948      	cbnz	r0, 800910e <__lshift+0x3e>
 80090fa:	4602      	mov	r2, r0
 80090fc:	4b2a      	ldr	r3, [pc, #168]	; (80091a8 <__lshift+0xd8>)
 80090fe:	482b      	ldr	r0, [pc, #172]	; (80091ac <__lshift+0xdc>)
 8009100:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009104:	f000 fd2a 	bl	8009b5c <__assert_func>
 8009108:	3101      	adds	r1, #1
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	e7ee      	b.n	80090ec <__lshift+0x1c>
 800910e:	2300      	movs	r3, #0
 8009110:	f100 0114 	add.w	r1, r0, #20
 8009114:	f100 0210 	add.w	r2, r0, #16
 8009118:	4618      	mov	r0, r3
 800911a:	4553      	cmp	r3, sl
 800911c:	db37      	blt.n	800918e <__lshift+0xbe>
 800911e:	6920      	ldr	r0, [r4, #16]
 8009120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009124:	f104 0314 	add.w	r3, r4, #20
 8009128:	f019 091f 	ands.w	r9, r9, #31
 800912c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009134:	d02f      	beq.n	8009196 <__lshift+0xc6>
 8009136:	f1c9 0e20 	rsb	lr, r9, #32
 800913a:	468a      	mov	sl, r1
 800913c:	f04f 0c00 	mov.w	ip, #0
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	fa02 f209 	lsl.w	r2, r2, r9
 8009146:	ea42 020c 	orr.w	r2, r2, ip
 800914a:	f84a 2b04 	str.w	r2, [sl], #4
 800914e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009152:	4298      	cmp	r0, r3
 8009154:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009158:	d8f2      	bhi.n	8009140 <__lshift+0x70>
 800915a:	1b03      	subs	r3, r0, r4
 800915c:	3b15      	subs	r3, #21
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	3304      	adds	r3, #4
 8009164:	f104 0215 	add.w	r2, r4, #21
 8009168:	4290      	cmp	r0, r2
 800916a:	bf38      	it	cc
 800916c:	2304      	movcc	r3, #4
 800916e:	f841 c003 	str.w	ip, [r1, r3]
 8009172:	f1bc 0f00 	cmp.w	ip, #0
 8009176:	d001      	beq.n	800917c <__lshift+0xac>
 8009178:	f108 0602 	add.w	r6, r8, #2
 800917c:	3e01      	subs	r6, #1
 800917e:	4638      	mov	r0, r7
 8009180:	612e      	str	r6, [r5, #16]
 8009182:	4621      	mov	r1, r4
 8009184:	f7ff fd88 	bl	8008c98 <_Bfree>
 8009188:	4628      	mov	r0, r5
 800918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009192:	3301      	adds	r3, #1
 8009194:	e7c1      	b.n	800911a <__lshift+0x4a>
 8009196:	3904      	subs	r1, #4
 8009198:	f853 2b04 	ldr.w	r2, [r3], #4
 800919c:	f841 2f04 	str.w	r2, [r1, #4]!
 80091a0:	4298      	cmp	r0, r3
 80091a2:	d8f9      	bhi.n	8009198 <__lshift+0xc8>
 80091a4:	e7ea      	b.n	800917c <__lshift+0xac>
 80091a6:	bf00      	nop
 80091a8:	0800a398 	.word	0x0800a398
 80091ac:	0800a488 	.word	0x0800a488

080091b0 <__mcmp>:
 80091b0:	b530      	push	{r4, r5, lr}
 80091b2:	6902      	ldr	r2, [r0, #16]
 80091b4:	690c      	ldr	r4, [r1, #16]
 80091b6:	1b12      	subs	r2, r2, r4
 80091b8:	d10e      	bne.n	80091d8 <__mcmp+0x28>
 80091ba:	f100 0314 	add.w	r3, r0, #20
 80091be:	3114      	adds	r1, #20
 80091c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091d0:	42a5      	cmp	r5, r4
 80091d2:	d003      	beq.n	80091dc <__mcmp+0x2c>
 80091d4:	d305      	bcc.n	80091e2 <__mcmp+0x32>
 80091d6:	2201      	movs	r2, #1
 80091d8:	4610      	mov	r0, r2
 80091da:	bd30      	pop	{r4, r5, pc}
 80091dc:	4283      	cmp	r3, r0
 80091de:	d3f3      	bcc.n	80091c8 <__mcmp+0x18>
 80091e0:	e7fa      	b.n	80091d8 <__mcmp+0x28>
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	e7f7      	b.n	80091d8 <__mcmp+0x28>

080091e8 <__mdiff>:
 80091e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	460c      	mov	r4, r1
 80091ee:	4606      	mov	r6, r0
 80091f0:	4611      	mov	r1, r2
 80091f2:	4620      	mov	r0, r4
 80091f4:	4690      	mov	r8, r2
 80091f6:	f7ff ffdb 	bl	80091b0 <__mcmp>
 80091fa:	1e05      	subs	r5, r0, #0
 80091fc:	d110      	bne.n	8009220 <__mdiff+0x38>
 80091fe:	4629      	mov	r1, r5
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff fd09 	bl	8008c18 <_Balloc>
 8009206:	b930      	cbnz	r0, 8009216 <__mdiff+0x2e>
 8009208:	4b3a      	ldr	r3, [pc, #232]	; (80092f4 <__mdiff+0x10c>)
 800920a:	4602      	mov	r2, r0
 800920c:	f240 2132 	movw	r1, #562	; 0x232
 8009210:	4839      	ldr	r0, [pc, #228]	; (80092f8 <__mdiff+0x110>)
 8009212:	f000 fca3 	bl	8009b5c <__assert_func>
 8009216:	2301      	movs	r3, #1
 8009218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800921c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	bfa4      	itt	ge
 8009222:	4643      	movge	r3, r8
 8009224:	46a0      	movge	r8, r4
 8009226:	4630      	mov	r0, r6
 8009228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800922c:	bfa6      	itte	ge
 800922e:	461c      	movge	r4, r3
 8009230:	2500      	movge	r5, #0
 8009232:	2501      	movlt	r5, #1
 8009234:	f7ff fcf0 	bl	8008c18 <_Balloc>
 8009238:	b920      	cbnz	r0, 8009244 <__mdiff+0x5c>
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <__mdiff+0x10c>)
 800923c:	4602      	mov	r2, r0
 800923e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009242:	e7e5      	b.n	8009210 <__mdiff+0x28>
 8009244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009248:	6926      	ldr	r6, [r4, #16]
 800924a:	60c5      	str	r5, [r0, #12]
 800924c:	f104 0914 	add.w	r9, r4, #20
 8009250:	f108 0514 	add.w	r5, r8, #20
 8009254:	f100 0e14 	add.w	lr, r0, #20
 8009258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800925c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009260:	f108 0210 	add.w	r2, r8, #16
 8009264:	46f2      	mov	sl, lr
 8009266:	2100      	movs	r1, #0
 8009268:	f859 3b04 	ldr.w	r3, [r9], #4
 800926c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009270:	fa1f f883 	uxth.w	r8, r3
 8009274:	fa11 f18b 	uxtah	r1, r1, fp
 8009278:	0c1b      	lsrs	r3, r3, #16
 800927a:	eba1 0808 	sub.w	r8, r1, r8
 800927e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009286:	fa1f f888 	uxth.w	r8, r8
 800928a:	1419      	asrs	r1, r3, #16
 800928c:	454e      	cmp	r6, r9
 800928e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009292:	f84a 3b04 	str.w	r3, [sl], #4
 8009296:	d8e7      	bhi.n	8009268 <__mdiff+0x80>
 8009298:	1b33      	subs	r3, r6, r4
 800929a:	3b15      	subs	r3, #21
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	3304      	adds	r3, #4
 80092a2:	3415      	adds	r4, #21
 80092a4:	42a6      	cmp	r6, r4
 80092a6:	bf38      	it	cc
 80092a8:	2304      	movcc	r3, #4
 80092aa:	441d      	add	r5, r3
 80092ac:	4473      	add	r3, lr
 80092ae:	469e      	mov	lr, r3
 80092b0:	462e      	mov	r6, r5
 80092b2:	4566      	cmp	r6, ip
 80092b4:	d30e      	bcc.n	80092d4 <__mdiff+0xec>
 80092b6:	f10c 0203 	add.w	r2, ip, #3
 80092ba:	1b52      	subs	r2, r2, r5
 80092bc:	f022 0203 	bic.w	r2, r2, #3
 80092c0:	3d03      	subs	r5, #3
 80092c2:	45ac      	cmp	ip, r5
 80092c4:	bf38      	it	cc
 80092c6:	2200      	movcc	r2, #0
 80092c8:	441a      	add	r2, r3
 80092ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092ce:	b17b      	cbz	r3, 80092f0 <__mdiff+0x108>
 80092d0:	6107      	str	r7, [r0, #16]
 80092d2:	e7a3      	b.n	800921c <__mdiff+0x34>
 80092d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80092d8:	fa11 f288 	uxtah	r2, r1, r8
 80092dc:	1414      	asrs	r4, r2, #16
 80092de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092e2:	b292      	uxth	r2, r2
 80092e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092e8:	f84e 2b04 	str.w	r2, [lr], #4
 80092ec:	1421      	asrs	r1, r4, #16
 80092ee:	e7e0      	b.n	80092b2 <__mdiff+0xca>
 80092f0:	3f01      	subs	r7, #1
 80092f2:	e7ea      	b.n	80092ca <__mdiff+0xe2>
 80092f4:	0800a398 	.word	0x0800a398
 80092f8:	0800a488 	.word	0x0800a488

080092fc <__ulp>:
 80092fc:	b082      	sub	sp, #8
 80092fe:	ed8d 0b00 	vstr	d0, [sp]
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	4912      	ldr	r1, [pc, #72]	; (8009350 <__ulp+0x54>)
 8009306:	4019      	ands	r1, r3
 8009308:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800930c:	2900      	cmp	r1, #0
 800930e:	dd05      	ble.n	800931c <__ulp+0x20>
 8009310:	2200      	movs	r2, #0
 8009312:	460b      	mov	r3, r1
 8009314:	ec43 2b10 	vmov	d0, r2, r3
 8009318:	b002      	add	sp, #8
 800931a:	4770      	bx	lr
 800931c:	4249      	negs	r1, r1
 800931e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009322:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	da04      	bge.n	800933a <__ulp+0x3e>
 8009330:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009334:	fa41 f300 	asr.w	r3, r1, r0
 8009338:	e7ec      	b.n	8009314 <__ulp+0x18>
 800933a:	f1a0 0114 	sub.w	r1, r0, #20
 800933e:	291e      	cmp	r1, #30
 8009340:	bfda      	itte	le
 8009342:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009346:	fa20 f101 	lsrle.w	r1, r0, r1
 800934a:	2101      	movgt	r1, #1
 800934c:	460a      	mov	r2, r1
 800934e:	e7e1      	b.n	8009314 <__ulp+0x18>
 8009350:	7ff00000 	.word	0x7ff00000

08009354 <__b2d>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	6905      	ldr	r5, [r0, #16]
 8009358:	f100 0714 	add.w	r7, r0, #20
 800935c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009360:	1f2e      	subs	r6, r5, #4
 8009362:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff fd48 	bl	8008dfc <__hi0bits>
 800936c:	f1c0 0320 	rsb	r3, r0, #32
 8009370:	280a      	cmp	r0, #10
 8009372:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80093f0 <__b2d+0x9c>
 8009376:	600b      	str	r3, [r1, #0]
 8009378:	dc14      	bgt.n	80093a4 <__b2d+0x50>
 800937a:	f1c0 0e0b 	rsb	lr, r0, #11
 800937e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009382:	42b7      	cmp	r7, r6
 8009384:	ea41 030c 	orr.w	r3, r1, ip
 8009388:	bf34      	ite	cc
 800938a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800938e:	2100      	movcs	r1, #0
 8009390:	3015      	adds	r0, #21
 8009392:	fa04 f000 	lsl.w	r0, r4, r0
 8009396:	fa21 f10e 	lsr.w	r1, r1, lr
 800939a:	ea40 0201 	orr.w	r2, r0, r1
 800939e:	ec43 2b10 	vmov	d0, r2, r3
 80093a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a4:	42b7      	cmp	r7, r6
 80093a6:	bf3a      	itte	cc
 80093a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80093b0:	2100      	movcs	r1, #0
 80093b2:	380b      	subs	r0, #11
 80093b4:	d017      	beq.n	80093e6 <__b2d+0x92>
 80093b6:	f1c0 0c20 	rsb	ip, r0, #32
 80093ba:	fa04 f500 	lsl.w	r5, r4, r0
 80093be:	42be      	cmp	r6, r7
 80093c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80093c4:	ea45 0504 	orr.w	r5, r5, r4
 80093c8:	bf8c      	ite	hi
 80093ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80093ce:	2400      	movls	r4, #0
 80093d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80093d4:	fa01 f000 	lsl.w	r0, r1, r0
 80093d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80093dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093e0:	ea40 0204 	orr.w	r2, r0, r4
 80093e4:	e7db      	b.n	800939e <__b2d+0x4a>
 80093e6:	ea44 030c 	orr.w	r3, r4, ip
 80093ea:	460a      	mov	r2, r1
 80093ec:	e7d7      	b.n	800939e <__b2d+0x4a>
 80093ee:	bf00      	nop
 80093f0:	3ff00000 	.word	0x3ff00000

080093f4 <__d2b>:
 80093f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	4689      	mov	r9, r1
 80093fa:	2101      	movs	r1, #1
 80093fc:	ec57 6b10 	vmov	r6, r7, d0
 8009400:	4690      	mov	r8, r2
 8009402:	f7ff fc09 	bl	8008c18 <_Balloc>
 8009406:	4604      	mov	r4, r0
 8009408:	b930      	cbnz	r0, 8009418 <__d2b+0x24>
 800940a:	4602      	mov	r2, r0
 800940c:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <__d2b+0xb0>)
 800940e:	4826      	ldr	r0, [pc, #152]	; (80094a8 <__d2b+0xb4>)
 8009410:	f240 310a 	movw	r1, #778	; 0x30a
 8009414:	f000 fba2 	bl	8009b5c <__assert_func>
 8009418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800941c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009420:	bb35      	cbnz	r5, 8009470 <__d2b+0x7c>
 8009422:	2e00      	cmp	r6, #0
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	d028      	beq.n	800947a <__d2b+0x86>
 8009428:	4668      	mov	r0, sp
 800942a:	9600      	str	r6, [sp, #0]
 800942c:	f7ff fd06 	bl	8008e3c <__lo0bits>
 8009430:	9900      	ldr	r1, [sp, #0]
 8009432:	b300      	cbz	r0, 8009476 <__d2b+0x82>
 8009434:	9a01      	ldr	r2, [sp, #4]
 8009436:	f1c0 0320 	rsb	r3, r0, #32
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	430b      	orrs	r3, r1
 8009440:	40c2      	lsrs	r2, r0
 8009442:	6163      	str	r3, [r4, #20]
 8009444:	9201      	str	r2, [sp, #4]
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	61a3      	str	r3, [r4, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	bf14      	ite	ne
 800944e:	2202      	movne	r2, #2
 8009450:	2201      	moveq	r2, #1
 8009452:	6122      	str	r2, [r4, #16]
 8009454:	b1d5      	cbz	r5, 800948c <__d2b+0x98>
 8009456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800945a:	4405      	add	r5, r0
 800945c:	f8c9 5000 	str.w	r5, [r9]
 8009460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009464:	f8c8 0000 	str.w	r0, [r8]
 8009468:	4620      	mov	r0, r4
 800946a:	b003      	add	sp, #12
 800946c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009474:	e7d5      	b.n	8009422 <__d2b+0x2e>
 8009476:	6161      	str	r1, [r4, #20]
 8009478:	e7e5      	b.n	8009446 <__d2b+0x52>
 800947a:	a801      	add	r0, sp, #4
 800947c:	f7ff fcde 	bl	8008e3c <__lo0bits>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	6163      	str	r3, [r4, #20]
 8009484:	2201      	movs	r2, #1
 8009486:	6122      	str	r2, [r4, #16]
 8009488:	3020      	adds	r0, #32
 800948a:	e7e3      	b.n	8009454 <__d2b+0x60>
 800948c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009494:	f8c9 0000 	str.w	r0, [r9]
 8009498:	6918      	ldr	r0, [r3, #16]
 800949a:	f7ff fcaf 	bl	8008dfc <__hi0bits>
 800949e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094a2:	e7df      	b.n	8009464 <__d2b+0x70>
 80094a4:	0800a398 	.word	0x0800a398
 80094a8:	0800a488 	.word	0x0800a488

080094ac <__ratio>:
 80094ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	4688      	mov	r8, r1
 80094b2:	4669      	mov	r1, sp
 80094b4:	4681      	mov	r9, r0
 80094b6:	f7ff ff4d 	bl	8009354 <__b2d>
 80094ba:	a901      	add	r1, sp, #4
 80094bc:	4640      	mov	r0, r8
 80094be:	ec55 4b10 	vmov	r4, r5, d0
 80094c2:	f7ff ff47 	bl	8009354 <__b2d>
 80094c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094ce:	eba3 0c02 	sub.w	ip, r3, r2
 80094d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094dc:	ec51 0b10 	vmov	r0, r1, d0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfd6      	itet	le
 80094e4:	460a      	movle	r2, r1
 80094e6:	462a      	movgt	r2, r5
 80094e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094ec:	468b      	mov	fp, r1
 80094ee:	462f      	mov	r7, r5
 80094f0:	bfd4      	ite	le
 80094f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80094f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094fa:	4620      	mov	r0, r4
 80094fc:	ee10 2a10 	vmov	r2, s0
 8009500:	465b      	mov	r3, fp
 8009502:	4639      	mov	r1, r7
 8009504:	f7f7 f9a2 	bl	800084c <__aeabi_ddiv>
 8009508:	ec41 0b10 	vmov	d0, r0, r1
 800950c:	b003      	add	sp, #12
 800950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009512 <__copybits>:
 8009512:	3901      	subs	r1, #1
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	1149      	asrs	r1, r1, #5
 8009518:	6914      	ldr	r4, [r2, #16]
 800951a:	3101      	adds	r1, #1
 800951c:	f102 0314 	add.w	r3, r2, #20
 8009520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009524:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009528:	1f05      	subs	r5, r0, #4
 800952a:	42a3      	cmp	r3, r4
 800952c:	d30c      	bcc.n	8009548 <__copybits+0x36>
 800952e:	1aa3      	subs	r3, r4, r2
 8009530:	3b11      	subs	r3, #17
 8009532:	f023 0303 	bic.w	r3, r3, #3
 8009536:	3211      	adds	r2, #17
 8009538:	42a2      	cmp	r2, r4
 800953a:	bf88      	it	hi
 800953c:	2300      	movhi	r3, #0
 800953e:	4418      	add	r0, r3
 8009540:	2300      	movs	r3, #0
 8009542:	4288      	cmp	r0, r1
 8009544:	d305      	bcc.n	8009552 <__copybits+0x40>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	f853 6b04 	ldr.w	r6, [r3], #4
 800954c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009550:	e7eb      	b.n	800952a <__copybits+0x18>
 8009552:	f840 3b04 	str.w	r3, [r0], #4
 8009556:	e7f4      	b.n	8009542 <__copybits+0x30>

08009558 <__any_on>:
 8009558:	f100 0214 	add.w	r2, r0, #20
 800955c:	6900      	ldr	r0, [r0, #16]
 800955e:	114b      	asrs	r3, r1, #5
 8009560:	4298      	cmp	r0, r3
 8009562:	b510      	push	{r4, lr}
 8009564:	db11      	blt.n	800958a <__any_on+0x32>
 8009566:	dd0a      	ble.n	800957e <__any_on+0x26>
 8009568:	f011 011f 	ands.w	r1, r1, #31
 800956c:	d007      	beq.n	800957e <__any_on+0x26>
 800956e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009572:	fa24 f001 	lsr.w	r0, r4, r1
 8009576:	fa00 f101 	lsl.w	r1, r0, r1
 800957a:	428c      	cmp	r4, r1
 800957c:	d10b      	bne.n	8009596 <__any_on+0x3e>
 800957e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009582:	4293      	cmp	r3, r2
 8009584:	d803      	bhi.n	800958e <__any_on+0x36>
 8009586:	2000      	movs	r0, #0
 8009588:	bd10      	pop	{r4, pc}
 800958a:	4603      	mov	r3, r0
 800958c:	e7f7      	b.n	800957e <__any_on+0x26>
 800958e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009592:	2900      	cmp	r1, #0
 8009594:	d0f5      	beq.n	8009582 <__any_on+0x2a>
 8009596:	2001      	movs	r0, #1
 8009598:	e7f6      	b.n	8009588 <__any_on+0x30>

0800959a <_calloc_r>:
 800959a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800959c:	fba1 2402 	umull	r2, r4, r1, r2
 80095a0:	b94c      	cbnz	r4, 80095b6 <_calloc_r+0x1c>
 80095a2:	4611      	mov	r1, r2
 80095a4:	9201      	str	r2, [sp, #4]
 80095a6:	f000 f87b 	bl	80096a0 <_malloc_r>
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b930      	cbnz	r0, 80095be <_calloc_r+0x24>
 80095b0:	4628      	mov	r0, r5
 80095b2:	b003      	add	sp, #12
 80095b4:	bd30      	pop	{r4, r5, pc}
 80095b6:	220c      	movs	r2, #12
 80095b8:	6002      	str	r2, [r0, #0]
 80095ba:	2500      	movs	r5, #0
 80095bc:	e7f8      	b.n	80095b0 <_calloc_r+0x16>
 80095be:	4621      	mov	r1, r4
 80095c0:	f7fc f836 	bl	8005630 <memset>
 80095c4:	e7f4      	b.n	80095b0 <_calloc_r+0x16>
	...

080095c8 <_free_r>:
 80095c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d044      	beq.n	8009658 <_free_r+0x90>
 80095ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d2:	9001      	str	r0, [sp, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f1a1 0404 	sub.w	r4, r1, #4
 80095da:	bfb8      	it	lt
 80095dc:	18e4      	addlt	r4, r4, r3
 80095de:	f000 fb4b 	bl	8009c78 <__malloc_lock>
 80095e2:	4a1e      	ldr	r2, [pc, #120]	; (800965c <_free_r+0x94>)
 80095e4:	9801      	ldr	r0, [sp, #4]
 80095e6:	6813      	ldr	r3, [r2, #0]
 80095e8:	b933      	cbnz	r3, 80095f8 <_free_r+0x30>
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	6014      	str	r4, [r2, #0]
 80095ee:	b003      	add	sp, #12
 80095f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095f4:	f000 bb46 	b.w	8009c84 <__malloc_unlock>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d908      	bls.n	800960e <_free_r+0x46>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf01      	itttt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	1949      	addeq	r1, r1, r5
 800960a:	6021      	streq	r1, [r4, #0]
 800960c:	e7ed      	b.n	80095ea <_free_r+0x22>
 800960e:	461a      	mov	r2, r3
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b10b      	cbz	r3, 8009618 <_free_r+0x50>
 8009614:	42a3      	cmp	r3, r4
 8009616:	d9fa      	bls.n	800960e <_free_r+0x46>
 8009618:	6811      	ldr	r1, [r2, #0]
 800961a:	1855      	adds	r5, r2, r1
 800961c:	42a5      	cmp	r5, r4
 800961e:	d10b      	bne.n	8009638 <_free_r+0x70>
 8009620:	6824      	ldr	r4, [r4, #0]
 8009622:	4421      	add	r1, r4
 8009624:	1854      	adds	r4, r2, r1
 8009626:	42a3      	cmp	r3, r4
 8009628:	6011      	str	r1, [r2, #0]
 800962a:	d1e0      	bne.n	80095ee <_free_r+0x26>
 800962c:	681c      	ldr	r4, [r3, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	6053      	str	r3, [r2, #4]
 8009632:	4421      	add	r1, r4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	e7da      	b.n	80095ee <_free_r+0x26>
 8009638:	d902      	bls.n	8009640 <_free_r+0x78>
 800963a:	230c      	movs	r3, #12
 800963c:	6003      	str	r3, [r0, #0]
 800963e:	e7d6      	b.n	80095ee <_free_r+0x26>
 8009640:	6825      	ldr	r5, [r4, #0]
 8009642:	1961      	adds	r1, r4, r5
 8009644:	428b      	cmp	r3, r1
 8009646:	bf04      	itt	eq
 8009648:	6819      	ldreq	r1, [r3, #0]
 800964a:	685b      	ldreq	r3, [r3, #4]
 800964c:	6063      	str	r3, [r4, #4]
 800964e:	bf04      	itt	eq
 8009650:	1949      	addeq	r1, r1, r5
 8009652:	6021      	streq	r1, [r4, #0]
 8009654:	6054      	str	r4, [r2, #4]
 8009656:	e7ca      	b.n	80095ee <_free_r+0x26>
 8009658:	b003      	add	sp, #12
 800965a:	bd30      	pop	{r4, r5, pc}
 800965c:	200002e0 	.word	0x200002e0

08009660 <sbrk_aligned>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4e0e      	ldr	r6, [pc, #56]	; (800969c <sbrk_aligned+0x3c>)
 8009664:	460c      	mov	r4, r1
 8009666:	6831      	ldr	r1, [r6, #0]
 8009668:	4605      	mov	r5, r0
 800966a:	b911      	cbnz	r1, 8009672 <sbrk_aligned+0x12>
 800966c:	f000 f9f0 	bl	8009a50 <_sbrk_r>
 8009670:	6030      	str	r0, [r6, #0]
 8009672:	4621      	mov	r1, r4
 8009674:	4628      	mov	r0, r5
 8009676:	f000 f9eb 	bl	8009a50 <_sbrk_r>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	d00a      	beq.n	8009694 <sbrk_aligned+0x34>
 800967e:	1cc4      	adds	r4, r0, #3
 8009680:	f024 0403 	bic.w	r4, r4, #3
 8009684:	42a0      	cmp	r0, r4
 8009686:	d007      	beq.n	8009698 <sbrk_aligned+0x38>
 8009688:	1a21      	subs	r1, r4, r0
 800968a:	4628      	mov	r0, r5
 800968c:	f000 f9e0 	bl	8009a50 <_sbrk_r>
 8009690:	3001      	adds	r0, #1
 8009692:	d101      	bne.n	8009698 <sbrk_aligned+0x38>
 8009694:	f04f 34ff 	mov.w	r4, #4294967295
 8009698:	4620      	mov	r0, r4
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	200002e4 	.word	0x200002e4

080096a0 <_malloc_r>:
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a4:	1ccd      	adds	r5, r1, #3
 80096a6:	f025 0503 	bic.w	r5, r5, #3
 80096aa:	3508      	adds	r5, #8
 80096ac:	2d0c      	cmp	r5, #12
 80096ae:	bf38      	it	cc
 80096b0:	250c      	movcc	r5, #12
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	4607      	mov	r7, r0
 80096b6:	db01      	blt.n	80096bc <_malloc_r+0x1c>
 80096b8:	42a9      	cmp	r1, r5
 80096ba:	d905      	bls.n	80096c8 <_malloc_r+0x28>
 80096bc:	230c      	movs	r3, #12
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	2600      	movs	r6, #0
 80096c2:	4630      	mov	r0, r6
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	4e2e      	ldr	r6, [pc, #184]	; (8009784 <_malloc_r+0xe4>)
 80096ca:	f000 fad5 	bl	8009c78 <__malloc_lock>
 80096ce:	6833      	ldr	r3, [r6, #0]
 80096d0:	461c      	mov	r4, r3
 80096d2:	bb34      	cbnz	r4, 8009722 <_malloc_r+0x82>
 80096d4:	4629      	mov	r1, r5
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ffc2 	bl	8009660 <sbrk_aligned>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	4604      	mov	r4, r0
 80096e0:	d14d      	bne.n	800977e <_malloc_r+0xde>
 80096e2:	6834      	ldr	r4, [r6, #0]
 80096e4:	4626      	mov	r6, r4
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	d140      	bne.n	800976c <_malloc_r+0xcc>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	4631      	mov	r1, r6
 80096ee:	4638      	mov	r0, r7
 80096f0:	eb04 0803 	add.w	r8, r4, r3
 80096f4:	f000 f9ac 	bl	8009a50 <_sbrk_r>
 80096f8:	4580      	cmp	r8, r0
 80096fa:	d13a      	bne.n	8009772 <_malloc_r+0xd2>
 80096fc:	6821      	ldr	r1, [r4, #0]
 80096fe:	3503      	adds	r5, #3
 8009700:	1a6d      	subs	r5, r5, r1
 8009702:	f025 0503 	bic.w	r5, r5, #3
 8009706:	3508      	adds	r5, #8
 8009708:	2d0c      	cmp	r5, #12
 800970a:	bf38      	it	cc
 800970c:	250c      	movcc	r5, #12
 800970e:	4629      	mov	r1, r5
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff ffa5 	bl	8009660 <sbrk_aligned>
 8009716:	3001      	adds	r0, #1
 8009718:	d02b      	beq.n	8009772 <_malloc_r+0xd2>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	442b      	add	r3, r5
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	e00e      	b.n	8009740 <_malloc_r+0xa0>
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	1b52      	subs	r2, r2, r5
 8009726:	d41e      	bmi.n	8009766 <_malloc_r+0xc6>
 8009728:	2a0b      	cmp	r2, #11
 800972a:	d916      	bls.n	800975a <_malloc_r+0xba>
 800972c:	1961      	adds	r1, r4, r5
 800972e:	42a3      	cmp	r3, r4
 8009730:	6025      	str	r5, [r4, #0]
 8009732:	bf18      	it	ne
 8009734:	6059      	strne	r1, [r3, #4]
 8009736:	6863      	ldr	r3, [r4, #4]
 8009738:	bf08      	it	eq
 800973a:	6031      	streq	r1, [r6, #0]
 800973c:	5162      	str	r2, [r4, r5]
 800973e:	604b      	str	r3, [r1, #4]
 8009740:	4638      	mov	r0, r7
 8009742:	f104 060b 	add.w	r6, r4, #11
 8009746:	f000 fa9d 	bl	8009c84 <__malloc_unlock>
 800974a:	f026 0607 	bic.w	r6, r6, #7
 800974e:	1d23      	adds	r3, r4, #4
 8009750:	1af2      	subs	r2, r6, r3
 8009752:	d0b6      	beq.n	80096c2 <_malloc_r+0x22>
 8009754:	1b9b      	subs	r3, r3, r6
 8009756:	50a3      	str	r3, [r4, r2]
 8009758:	e7b3      	b.n	80096c2 <_malloc_r+0x22>
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	42a3      	cmp	r3, r4
 800975e:	bf0c      	ite	eq
 8009760:	6032      	streq	r2, [r6, #0]
 8009762:	605a      	strne	r2, [r3, #4]
 8009764:	e7ec      	b.n	8009740 <_malloc_r+0xa0>
 8009766:	4623      	mov	r3, r4
 8009768:	6864      	ldr	r4, [r4, #4]
 800976a:	e7b2      	b.n	80096d2 <_malloc_r+0x32>
 800976c:	4634      	mov	r4, r6
 800976e:	6876      	ldr	r6, [r6, #4]
 8009770:	e7b9      	b.n	80096e6 <_malloc_r+0x46>
 8009772:	230c      	movs	r3, #12
 8009774:	603b      	str	r3, [r7, #0]
 8009776:	4638      	mov	r0, r7
 8009778:	f000 fa84 	bl	8009c84 <__malloc_unlock>
 800977c:	e7a1      	b.n	80096c2 <_malloc_r+0x22>
 800977e:	6025      	str	r5, [r4, #0]
 8009780:	e7de      	b.n	8009740 <_malloc_r+0xa0>
 8009782:	bf00      	nop
 8009784:	200002e0 	.word	0x200002e0

08009788 <__ssputs_r>:
 8009788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	688e      	ldr	r6, [r1, #8]
 800978e:	429e      	cmp	r6, r3
 8009790:	4682      	mov	sl, r0
 8009792:	460c      	mov	r4, r1
 8009794:	4690      	mov	r8, r2
 8009796:	461f      	mov	r7, r3
 8009798:	d838      	bhi.n	800980c <__ssputs_r+0x84>
 800979a:	898a      	ldrh	r2, [r1, #12]
 800979c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097a0:	d032      	beq.n	8009808 <__ssputs_r+0x80>
 80097a2:	6825      	ldr	r5, [r4, #0]
 80097a4:	6909      	ldr	r1, [r1, #16]
 80097a6:	eba5 0901 	sub.w	r9, r5, r1
 80097aa:	6965      	ldr	r5, [r4, #20]
 80097ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097b4:	3301      	adds	r3, #1
 80097b6:	444b      	add	r3, r9
 80097b8:	106d      	asrs	r5, r5, #1
 80097ba:	429d      	cmp	r5, r3
 80097bc:	bf38      	it	cc
 80097be:	461d      	movcc	r5, r3
 80097c0:	0553      	lsls	r3, r2, #21
 80097c2:	d531      	bpl.n	8009828 <__ssputs_r+0xa0>
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7ff ff6b 	bl	80096a0 <_malloc_r>
 80097ca:	4606      	mov	r6, r0
 80097cc:	b950      	cbnz	r0, 80097e4 <__ssputs_r+0x5c>
 80097ce:	230c      	movs	r3, #12
 80097d0:	f8ca 3000 	str.w	r3, [sl]
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e4:	6921      	ldr	r1, [r4, #16]
 80097e6:	464a      	mov	r2, r9
 80097e8:	f7ff fa08 	bl	8008bfc <memcpy>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	6126      	str	r6, [r4, #16]
 80097fa:	6165      	str	r5, [r4, #20]
 80097fc:	444e      	add	r6, r9
 80097fe:	eba5 0509 	sub.w	r5, r5, r9
 8009802:	6026      	str	r6, [r4, #0]
 8009804:	60a5      	str	r5, [r4, #8]
 8009806:	463e      	mov	r6, r7
 8009808:	42be      	cmp	r6, r7
 800980a:	d900      	bls.n	800980e <__ssputs_r+0x86>
 800980c:	463e      	mov	r6, r7
 800980e:	6820      	ldr	r0, [r4, #0]
 8009810:	4632      	mov	r2, r6
 8009812:	4641      	mov	r1, r8
 8009814:	f000 fa16 	bl	8009c44 <memmove>
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	1b9b      	subs	r3, r3, r6
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	4433      	add	r3, r6
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	2000      	movs	r0, #0
 8009826:	e7db      	b.n	80097e0 <__ssputs_r+0x58>
 8009828:	462a      	mov	r2, r5
 800982a:	f000 fa31 	bl	8009c90 <_realloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d1e1      	bne.n	80097f8 <__ssputs_r+0x70>
 8009834:	6921      	ldr	r1, [r4, #16]
 8009836:	4650      	mov	r0, sl
 8009838:	f7ff fec6 	bl	80095c8 <_free_r>
 800983c:	e7c7      	b.n	80097ce <__ssputs_r+0x46>
	...

08009840 <_svfiprintf_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	4698      	mov	r8, r3
 8009846:	898b      	ldrh	r3, [r1, #12]
 8009848:	061b      	lsls	r3, r3, #24
 800984a:	b09d      	sub	sp, #116	; 0x74
 800984c:	4607      	mov	r7, r0
 800984e:	460d      	mov	r5, r1
 8009850:	4614      	mov	r4, r2
 8009852:	d50e      	bpl.n	8009872 <_svfiprintf_r+0x32>
 8009854:	690b      	ldr	r3, [r1, #16]
 8009856:	b963      	cbnz	r3, 8009872 <_svfiprintf_r+0x32>
 8009858:	2140      	movs	r1, #64	; 0x40
 800985a:	f7ff ff21 	bl	80096a0 <_malloc_r>
 800985e:	6028      	str	r0, [r5, #0]
 8009860:	6128      	str	r0, [r5, #16]
 8009862:	b920      	cbnz	r0, 800986e <_svfiprintf_r+0x2e>
 8009864:	230c      	movs	r3, #12
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e0d1      	b.n	8009a12 <_svfiprintf_r+0x1d2>
 800986e:	2340      	movs	r3, #64	; 0x40
 8009870:	616b      	str	r3, [r5, #20]
 8009872:	2300      	movs	r3, #0
 8009874:	9309      	str	r3, [sp, #36]	; 0x24
 8009876:	2320      	movs	r3, #32
 8009878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009880:	2330      	movs	r3, #48	; 0x30
 8009882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a2c <_svfiprintf_r+0x1ec>
 8009886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800988a:	f04f 0901 	mov.w	r9, #1
 800988e:	4623      	mov	r3, r4
 8009890:	469a      	mov	sl, r3
 8009892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009896:	b10a      	cbz	r2, 800989c <_svfiprintf_r+0x5c>
 8009898:	2a25      	cmp	r2, #37	; 0x25
 800989a:	d1f9      	bne.n	8009890 <_svfiprintf_r+0x50>
 800989c:	ebba 0b04 	subs.w	fp, sl, r4
 80098a0:	d00b      	beq.n	80098ba <_svfiprintf_r+0x7a>
 80098a2:	465b      	mov	r3, fp
 80098a4:	4622      	mov	r2, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff ff6d 	bl	8009788 <__ssputs_r>
 80098ae:	3001      	adds	r0, #1
 80098b0:	f000 80aa 	beq.w	8009a08 <_svfiprintf_r+0x1c8>
 80098b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b6:	445a      	add	r2, fp
 80098b8:	9209      	str	r2, [sp, #36]	; 0x24
 80098ba:	f89a 3000 	ldrb.w	r3, [sl]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 80a2 	beq.w	8009a08 <_svfiprintf_r+0x1c8>
 80098c4:	2300      	movs	r3, #0
 80098c6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ce:	f10a 0a01 	add.w	sl, sl, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	9307      	str	r3, [sp, #28]
 80098d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098da:	931a      	str	r3, [sp, #104]	; 0x68
 80098dc:	4654      	mov	r4, sl
 80098de:	2205      	movs	r2, #5
 80098e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e4:	4851      	ldr	r0, [pc, #324]	; (8009a2c <_svfiprintf_r+0x1ec>)
 80098e6:	f7f6 fc7b 	bl	80001e0 <memchr>
 80098ea:	9a04      	ldr	r2, [sp, #16]
 80098ec:	b9d8      	cbnz	r0, 8009926 <_svfiprintf_r+0xe6>
 80098ee:	06d0      	lsls	r0, r2, #27
 80098f0:	bf44      	itt	mi
 80098f2:	2320      	movmi	r3, #32
 80098f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f8:	0711      	lsls	r1, r2, #28
 80098fa:	bf44      	itt	mi
 80098fc:	232b      	movmi	r3, #43	; 0x2b
 80098fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009902:	f89a 3000 	ldrb.w	r3, [sl]
 8009906:	2b2a      	cmp	r3, #42	; 0x2a
 8009908:	d015      	beq.n	8009936 <_svfiprintf_r+0xf6>
 800990a:	9a07      	ldr	r2, [sp, #28]
 800990c:	4654      	mov	r4, sl
 800990e:	2000      	movs	r0, #0
 8009910:	f04f 0c0a 	mov.w	ip, #10
 8009914:	4621      	mov	r1, r4
 8009916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800991a:	3b30      	subs	r3, #48	; 0x30
 800991c:	2b09      	cmp	r3, #9
 800991e:	d94e      	bls.n	80099be <_svfiprintf_r+0x17e>
 8009920:	b1b0      	cbz	r0, 8009950 <_svfiprintf_r+0x110>
 8009922:	9207      	str	r2, [sp, #28]
 8009924:	e014      	b.n	8009950 <_svfiprintf_r+0x110>
 8009926:	eba0 0308 	sub.w	r3, r0, r8
 800992a:	fa09 f303 	lsl.w	r3, r9, r3
 800992e:	4313      	orrs	r3, r2
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	46a2      	mov	sl, r4
 8009934:	e7d2      	b.n	80098dc <_svfiprintf_r+0x9c>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	1d19      	adds	r1, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9103      	str	r1, [sp, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfbb      	ittet	lt
 8009942:	425b      	neglt	r3, r3
 8009944:	f042 0202 	orrlt.w	r2, r2, #2
 8009948:	9307      	strge	r3, [sp, #28]
 800994a:	9307      	strlt	r3, [sp, #28]
 800994c:	bfb8      	it	lt
 800994e:	9204      	strlt	r2, [sp, #16]
 8009950:	7823      	ldrb	r3, [r4, #0]
 8009952:	2b2e      	cmp	r3, #46	; 0x2e
 8009954:	d10c      	bne.n	8009970 <_svfiprintf_r+0x130>
 8009956:	7863      	ldrb	r3, [r4, #1]
 8009958:	2b2a      	cmp	r3, #42	; 0x2a
 800995a:	d135      	bne.n	80099c8 <_svfiprintf_r+0x188>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	1d1a      	adds	r2, r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	9203      	str	r2, [sp, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfb8      	it	lt
 8009968:	f04f 33ff 	movlt.w	r3, #4294967295
 800996c:	3402      	adds	r4, #2
 800996e:	9305      	str	r3, [sp, #20]
 8009970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a3c <_svfiprintf_r+0x1fc>
 8009974:	7821      	ldrb	r1, [r4, #0]
 8009976:	2203      	movs	r2, #3
 8009978:	4650      	mov	r0, sl
 800997a:	f7f6 fc31 	bl	80001e0 <memchr>
 800997e:	b140      	cbz	r0, 8009992 <_svfiprintf_r+0x152>
 8009980:	2340      	movs	r3, #64	; 0x40
 8009982:	eba0 000a 	sub.w	r0, r0, sl
 8009986:	fa03 f000 	lsl.w	r0, r3, r0
 800998a:	9b04      	ldr	r3, [sp, #16]
 800998c:	4303      	orrs	r3, r0
 800998e:	3401      	adds	r4, #1
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	4826      	ldr	r0, [pc, #152]	; (8009a30 <_svfiprintf_r+0x1f0>)
 8009998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999c:	2206      	movs	r2, #6
 800999e:	f7f6 fc1f 	bl	80001e0 <memchr>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d038      	beq.n	8009a18 <_svfiprintf_r+0x1d8>
 80099a6:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <_svfiprintf_r+0x1f4>)
 80099a8:	bb1b      	cbnz	r3, 80099f2 <_svfiprintf_r+0x1b2>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	3307      	adds	r3, #7
 80099ae:	f023 0307 	bic.w	r3, r3, #7
 80099b2:	3308      	adds	r3, #8
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b8:	4433      	add	r3, r6
 80099ba:	9309      	str	r3, [sp, #36]	; 0x24
 80099bc:	e767      	b.n	800988e <_svfiprintf_r+0x4e>
 80099be:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c2:	460c      	mov	r4, r1
 80099c4:	2001      	movs	r0, #1
 80099c6:	e7a5      	b.n	8009914 <_svfiprintf_r+0xd4>
 80099c8:	2300      	movs	r3, #0
 80099ca:	3401      	adds	r4, #1
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	4619      	mov	r1, r3
 80099d0:	f04f 0c0a 	mov.w	ip, #10
 80099d4:	4620      	mov	r0, r4
 80099d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099da:	3a30      	subs	r2, #48	; 0x30
 80099dc:	2a09      	cmp	r2, #9
 80099de:	d903      	bls.n	80099e8 <_svfiprintf_r+0x1a8>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0c5      	beq.n	8009970 <_svfiprintf_r+0x130>
 80099e4:	9105      	str	r1, [sp, #20]
 80099e6:	e7c3      	b.n	8009970 <_svfiprintf_r+0x130>
 80099e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ec:	4604      	mov	r4, r0
 80099ee:	2301      	movs	r3, #1
 80099f0:	e7f0      	b.n	80099d4 <_svfiprintf_r+0x194>
 80099f2:	ab03      	add	r3, sp, #12
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	462a      	mov	r2, r5
 80099f8:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <_svfiprintf_r+0x1f8>)
 80099fa:	a904      	add	r1, sp, #16
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7fb febf 	bl	8005780 <_printf_float>
 8009a02:	1c42      	adds	r2, r0, #1
 8009a04:	4606      	mov	r6, r0
 8009a06:	d1d6      	bne.n	80099b6 <_svfiprintf_r+0x176>
 8009a08:	89ab      	ldrh	r3, [r5, #12]
 8009a0a:	065b      	lsls	r3, r3, #25
 8009a0c:	f53f af2c 	bmi.w	8009868 <_svfiprintf_r+0x28>
 8009a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a12:	b01d      	add	sp, #116	; 0x74
 8009a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a18:	ab03      	add	r3, sp, #12
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <_svfiprintf_r+0x1f8>)
 8009a20:	a904      	add	r1, sp, #16
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7fc f950 	bl	8005cc8 <_printf_i>
 8009a28:	e7eb      	b.n	8009a02 <_svfiprintf_r+0x1c2>
 8009a2a:	bf00      	nop
 8009a2c:	0800a5e4 	.word	0x0800a5e4
 8009a30:	0800a5ee 	.word	0x0800a5ee
 8009a34:	08005781 	.word	0x08005781
 8009a38:	08009789 	.word	0x08009789
 8009a3c:	0800a5ea 	.word	0x0800a5ea

08009a40 <nan>:
 8009a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a48 <nan+0x8>
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	7ff80000 	.word	0x7ff80000

08009a50 <_sbrk_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d06      	ldr	r5, [pc, #24]	; (8009a6c <_sbrk_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f7 ff46 	bl	80018ec <_sbrk>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_sbrk_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_sbrk_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	200002e8 	.word	0x200002e8

08009a70 <__sread>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	f000 fa92 	bl	8009fa0 <_read_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a82:	89a3      	ldrhlt	r3, [r4, #12]
 8009a84:	181b      	addge	r3, r3, r0
 8009a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a8a:	bfac      	ite	ge
 8009a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a8e:	81a3      	strhlt	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__swrite>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	461f      	mov	r7, r3
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	d505      	bpl.n	8009ab0 <__swrite+0x1e>
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f000 f8b8 	bl	8009c20 <_lseek_r>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	f000 b837 	b.w	8009b38 <_write_r>

08009aca <__sseek>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad2:	f000 f8a5 	bl	8009c20 <_lseek_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	bf15      	itete	ne
 8009adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ae6:	81a3      	strheq	r3, [r4, #12]
 8009ae8:	bf18      	it	ne
 8009aea:	81a3      	strhne	r3, [r4, #12]
 8009aec:	bd10      	pop	{r4, pc}

08009aee <__sclose>:
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 b851 	b.w	8009b98 <_close_r>

08009af6 <strncmp>:
 8009af6:	b510      	push	{r4, lr}
 8009af8:	b17a      	cbz	r2, 8009b1a <strncmp+0x24>
 8009afa:	4603      	mov	r3, r0
 8009afc:	3901      	subs	r1, #1
 8009afe:	1884      	adds	r4, r0, r2
 8009b00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b08:	4290      	cmp	r0, r2
 8009b0a:	d101      	bne.n	8009b10 <strncmp+0x1a>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d101      	bne.n	8009b14 <strncmp+0x1e>
 8009b10:	1a80      	subs	r0, r0, r2
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d1f3      	bne.n	8009b00 <strncmp+0xa>
 8009b18:	e7fa      	b.n	8009b10 <strncmp+0x1a>
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	e7f9      	b.n	8009b12 <strncmp+0x1c>

08009b1e <__ascii_wctomb>:
 8009b1e:	b149      	cbz	r1, 8009b34 <__ascii_wctomb+0x16>
 8009b20:	2aff      	cmp	r2, #255	; 0xff
 8009b22:	bf85      	ittet	hi
 8009b24:	238a      	movhi	r3, #138	; 0x8a
 8009b26:	6003      	strhi	r3, [r0, #0]
 8009b28:	700a      	strbls	r2, [r1, #0]
 8009b2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b2e:	bf98      	it	ls
 8009b30:	2001      	movls	r0, #1
 8009b32:	4770      	bx	lr
 8009b34:	4608      	mov	r0, r1
 8009b36:	4770      	bx	lr

08009b38 <_write_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d07      	ldr	r5, [pc, #28]	; (8009b58 <_write_r+0x20>)
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	4608      	mov	r0, r1
 8009b40:	4611      	mov	r1, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	602a      	str	r2, [r5, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	f7f7 fa7d 	bl	8001046 <_write>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_write_r+0x1e>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_write_r+0x1e>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	200002e8 	.word	0x200002e8

08009b5c <__assert_func>:
 8009b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b5e:	4614      	mov	r4, r2
 8009b60:	461a      	mov	r2, r3
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <__assert_func+0x2c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4605      	mov	r5, r0
 8009b68:	68d8      	ldr	r0, [r3, #12]
 8009b6a:	b14c      	cbz	r4, 8009b80 <__assert_func+0x24>
 8009b6c:	4b07      	ldr	r3, [pc, #28]	; (8009b8c <__assert_func+0x30>)
 8009b6e:	9100      	str	r1, [sp, #0]
 8009b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b74:	4906      	ldr	r1, [pc, #24]	; (8009b90 <__assert_func+0x34>)
 8009b76:	462b      	mov	r3, r5
 8009b78:	f000 f81e 	bl	8009bb8 <fiprintf>
 8009b7c:	f000 fa22 	bl	8009fc4 <abort>
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <__assert_func+0x38>)
 8009b82:	461c      	mov	r4, r3
 8009b84:	e7f3      	b.n	8009b6e <__assert_func+0x12>
 8009b86:	bf00      	nop
 8009b88:	2000000c 	.word	0x2000000c
 8009b8c:	0800a5f5 	.word	0x0800a5f5
 8009b90:	0800a602 	.word	0x0800a602
 8009b94:	0800a630 	.word	0x0800a630

08009b98 <_close_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d06      	ldr	r5, [pc, #24]	; (8009bb4 <_close_r+0x1c>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f7 fe6d 	bl	8001882 <_close>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_close_r+0x1a>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_close_r+0x1a>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	200002e8 	.word	0x200002e8

08009bb8 <fiprintf>:
 8009bb8:	b40e      	push	{r1, r2, r3}
 8009bba:	b503      	push	{r0, r1, lr}
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	ab03      	add	r3, sp, #12
 8009bc0:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <fiprintf+0x20>)
 8009bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc6:	6800      	ldr	r0, [r0, #0]
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	f000 f8b9 	bl	8009d40 <_vfiprintf_r>
 8009bce:	b002      	add	sp, #8
 8009bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd4:	b003      	add	sp, #12
 8009bd6:	4770      	bx	lr
 8009bd8:	2000000c 	.word	0x2000000c

08009bdc <_fstat_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	; (8009bfc <_fstat_r+0x20>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f7 fe56 	bl	800189a <_fstat>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_fstat_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_fstat_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200002e8 	.word	0x200002e8

08009c00 <_isatty_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_isatty_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f7 fe55 	bl	80018ba <_isatty>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_isatty_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_isatty_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	200002e8 	.word	0x200002e8

08009c20 <_lseek_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	; (8009c40 <_lseek_r+0x20>)
 8009c24:	4604      	mov	r4, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f7 fe4e 	bl	80018d0 <_lseek>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_lseek_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_lseek_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	200002e8 	.word	0x200002e8

08009c44 <memmove>:
 8009c44:	4288      	cmp	r0, r1
 8009c46:	b510      	push	{r4, lr}
 8009c48:	eb01 0402 	add.w	r4, r1, r2
 8009c4c:	d902      	bls.n	8009c54 <memmove+0x10>
 8009c4e:	4284      	cmp	r4, r0
 8009c50:	4623      	mov	r3, r4
 8009c52:	d807      	bhi.n	8009c64 <memmove+0x20>
 8009c54:	1e43      	subs	r3, r0, #1
 8009c56:	42a1      	cmp	r1, r4
 8009c58:	d008      	beq.n	8009c6c <memmove+0x28>
 8009c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c62:	e7f8      	b.n	8009c56 <memmove+0x12>
 8009c64:	4402      	add	r2, r0
 8009c66:	4601      	mov	r1, r0
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	d100      	bne.n	8009c6e <memmove+0x2a>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c76:	e7f7      	b.n	8009c68 <memmove+0x24>

08009c78 <__malloc_lock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__malloc_lock+0x8>)
 8009c7a:	f7fe bf3e 	b.w	8008afa <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	200002dc 	.word	0x200002dc

08009c84 <__malloc_unlock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__malloc_unlock+0x8>)
 8009c86:	f7fe bf39 	b.w	8008afc <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	200002dc 	.word	0x200002dc

08009c90 <_realloc_r>:
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4680      	mov	r8, r0
 8009c96:	4614      	mov	r4, r2
 8009c98:	460e      	mov	r6, r1
 8009c9a:	b921      	cbnz	r1, 8009ca6 <_realloc_r+0x16>
 8009c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	f7ff bcfd 	b.w	80096a0 <_malloc_r>
 8009ca6:	b92a      	cbnz	r2, 8009cb4 <_realloc_r+0x24>
 8009ca8:	f7ff fc8e 	bl	80095c8 <_free_r>
 8009cac:	4625      	mov	r5, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	f000 f98d 	bl	8009fd2 <_malloc_usable_size_r>
 8009cb8:	4284      	cmp	r4, r0
 8009cba:	4607      	mov	r7, r0
 8009cbc:	d802      	bhi.n	8009cc4 <_realloc_r+0x34>
 8009cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cc2:	d812      	bhi.n	8009cea <_realloc_r+0x5a>
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	f7ff fcea 	bl	80096a0 <_malloc_r>
 8009ccc:	4605      	mov	r5, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0ed      	beq.n	8009cae <_realloc_r+0x1e>
 8009cd2:	42bc      	cmp	r4, r7
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	bf28      	it	cs
 8009cda:	463a      	movcs	r2, r7
 8009cdc:	f7fe ff8e 	bl	8008bfc <memcpy>
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff fc70 	bl	80095c8 <_free_r>
 8009ce8:	e7e1      	b.n	8009cae <_realloc_r+0x1e>
 8009cea:	4635      	mov	r5, r6
 8009cec:	e7df      	b.n	8009cae <_realloc_r+0x1e>

08009cee <__sfputc_r>:
 8009cee:	6893      	ldr	r3, [r2, #8]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	b410      	push	{r4}
 8009cf6:	6093      	str	r3, [r2, #8]
 8009cf8:	da08      	bge.n	8009d0c <__sfputc_r+0x1e>
 8009cfa:	6994      	ldr	r4, [r2, #24]
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	db01      	blt.n	8009d04 <__sfputc_r+0x16>
 8009d00:	290a      	cmp	r1, #10
 8009d02:	d103      	bne.n	8009d0c <__sfputc_r+0x1e>
 8009d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d08:	f7fd ba92 	b.w	8007230 <__swbuf_r>
 8009d0c:	6813      	ldr	r3, [r2, #0]
 8009d0e:	1c58      	adds	r0, r3, #1
 8009d10:	6010      	str	r0, [r2, #0]
 8009d12:	7019      	strb	r1, [r3, #0]
 8009d14:	4608      	mov	r0, r1
 8009d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <__sfputs_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	4614      	mov	r4, r2
 8009d24:	18d5      	adds	r5, r2, r3
 8009d26:	42ac      	cmp	r4, r5
 8009d28:	d101      	bne.n	8009d2e <__sfputs_r+0x12>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e007      	b.n	8009d3e <__sfputs_r+0x22>
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	463a      	mov	r2, r7
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff ffda 	bl	8009cee <__sfputc_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d1f3      	bne.n	8009d26 <__sfputs_r+0xa>
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d40 <_vfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	460d      	mov	r5, r1
 8009d46:	b09d      	sub	sp, #116	; 0x74
 8009d48:	4614      	mov	r4, r2
 8009d4a:	4698      	mov	r8, r3
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	b118      	cbz	r0, 8009d58 <_vfiprintf_r+0x18>
 8009d50:	6983      	ldr	r3, [r0, #24]
 8009d52:	b90b      	cbnz	r3, 8009d58 <_vfiprintf_r+0x18>
 8009d54:	f7fe fac0 	bl	80082d8 <__sinit>
 8009d58:	4b89      	ldr	r3, [pc, #548]	; (8009f80 <_vfiprintf_r+0x240>)
 8009d5a:	429d      	cmp	r5, r3
 8009d5c:	d11b      	bne.n	8009d96 <_vfiprintf_r+0x56>
 8009d5e:	6875      	ldr	r5, [r6, #4]
 8009d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d62:	07d9      	lsls	r1, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_vfiprintf_r+0x32>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	059a      	lsls	r2, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_vfiprintf_r+0x32>
 8009d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d6e:	f7fe fec4 	bl	8008afa <__retarget_lock_acquire_recursive>
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	071b      	lsls	r3, r3, #28
 8009d76:	d501      	bpl.n	8009d7c <_vfiprintf_r+0x3c>
 8009d78:	692b      	ldr	r3, [r5, #16]
 8009d7a:	b9eb      	cbnz	r3, 8009db8 <_vfiprintf_r+0x78>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	4630      	mov	r0, r6
 8009d80:	f7fd faa8 	bl	80072d4 <__swsetup_r>
 8009d84:	b1c0      	cbz	r0, 8009db8 <_vfiprintf_r+0x78>
 8009d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d88:	07dc      	lsls	r4, r3, #31
 8009d8a:	d50e      	bpl.n	8009daa <_vfiprintf_r+0x6a>
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	b01d      	add	sp, #116	; 0x74
 8009d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d96:	4b7b      	ldr	r3, [pc, #492]	; (8009f84 <_vfiprintf_r+0x244>)
 8009d98:	429d      	cmp	r5, r3
 8009d9a:	d101      	bne.n	8009da0 <_vfiprintf_r+0x60>
 8009d9c:	68b5      	ldr	r5, [r6, #8]
 8009d9e:	e7df      	b.n	8009d60 <_vfiprintf_r+0x20>
 8009da0:	4b79      	ldr	r3, [pc, #484]	; (8009f88 <_vfiprintf_r+0x248>)
 8009da2:	429d      	cmp	r5, r3
 8009da4:	bf08      	it	eq
 8009da6:	68f5      	ldreq	r5, [r6, #12]
 8009da8:	e7da      	b.n	8009d60 <_vfiprintf_r+0x20>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	0598      	lsls	r0, r3, #22
 8009dae:	d4ed      	bmi.n	8009d8c <_vfiprintf_r+0x4c>
 8009db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db2:	f7fe fea3 	bl	8008afc <__retarget_lock_release_recursive>
 8009db6:	e7e9      	b.n	8009d8c <_vfiprintf_r+0x4c>
 8009db8:	2300      	movs	r3, #0
 8009dba:	9309      	str	r3, [sp, #36]	; 0x24
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc6:	2330      	movs	r3, #48	; 0x30
 8009dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f8c <_vfiprintf_r+0x24c>
 8009dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dd0:	f04f 0901 	mov.w	r9, #1
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	469a      	mov	sl, r3
 8009dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ddc:	b10a      	cbz	r2, 8009de2 <_vfiprintf_r+0xa2>
 8009dde:	2a25      	cmp	r2, #37	; 0x25
 8009de0:	d1f9      	bne.n	8009dd6 <_vfiprintf_r+0x96>
 8009de2:	ebba 0b04 	subs.w	fp, sl, r4
 8009de6:	d00b      	beq.n	8009e00 <_vfiprintf_r+0xc0>
 8009de8:	465b      	mov	r3, fp
 8009dea:	4622      	mov	r2, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ff94 	bl	8009d1c <__sfputs_r>
 8009df4:	3001      	adds	r0, #1
 8009df6:	f000 80aa 	beq.w	8009f4e <_vfiprintf_r+0x20e>
 8009dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dfc:	445a      	add	r2, fp
 8009dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8009e00:	f89a 3000 	ldrb.w	r3, [sl]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 80a2 	beq.w	8009f4e <_vfiprintf_r+0x20e>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e14:	f10a 0a01 	add.w	sl, sl, #1
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	9307      	str	r3, [sp, #28]
 8009e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e20:	931a      	str	r3, [sp, #104]	; 0x68
 8009e22:	4654      	mov	r4, sl
 8009e24:	2205      	movs	r2, #5
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	4858      	ldr	r0, [pc, #352]	; (8009f8c <_vfiprintf_r+0x24c>)
 8009e2c:	f7f6 f9d8 	bl	80001e0 <memchr>
 8009e30:	9a04      	ldr	r2, [sp, #16]
 8009e32:	b9d8      	cbnz	r0, 8009e6c <_vfiprintf_r+0x12c>
 8009e34:	06d1      	lsls	r1, r2, #27
 8009e36:	bf44      	itt	mi
 8009e38:	2320      	movmi	r3, #32
 8009e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3e:	0713      	lsls	r3, r2, #28
 8009e40:	bf44      	itt	mi
 8009e42:	232b      	movmi	r3, #43	; 0x2b
 8009e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e48:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4e:	d015      	beq.n	8009e7c <_vfiprintf_r+0x13c>
 8009e50:	9a07      	ldr	r2, [sp, #28]
 8009e52:	4654      	mov	r4, sl
 8009e54:	2000      	movs	r0, #0
 8009e56:	f04f 0c0a 	mov.w	ip, #10
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e60:	3b30      	subs	r3, #48	; 0x30
 8009e62:	2b09      	cmp	r3, #9
 8009e64:	d94e      	bls.n	8009f04 <_vfiprintf_r+0x1c4>
 8009e66:	b1b0      	cbz	r0, 8009e96 <_vfiprintf_r+0x156>
 8009e68:	9207      	str	r2, [sp, #28]
 8009e6a:	e014      	b.n	8009e96 <_vfiprintf_r+0x156>
 8009e6c:	eba0 0308 	sub.w	r3, r0, r8
 8009e70:	fa09 f303 	lsl.w	r3, r9, r3
 8009e74:	4313      	orrs	r3, r2
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	46a2      	mov	sl, r4
 8009e7a:	e7d2      	b.n	8009e22 <_vfiprintf_r+0xe2>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	1d19      	adds	r1, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9103      	str	r1, [sp, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfbb      	ittet	lt
 8009e88:	425b      	neglt	r3, r3
 8009e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e8e:	9307      	strge	r3, [sp, #28]
 8009e90:	9307      	strlt	r3, [sp, #28]
 8009e92:	bfb8      	it	lt
 8009e94:	9204      	strlt	r2, [sp, #16]
 8009e96:	7823      	ldrb	r3, [r4, #0]
 8009e98:	2b2e      	cmp	r3, #46	; 0x2e
 8009e9a:	d10c      	bne.n	8009eb6 <_vfiprintf_r+0x176>
 8009e9c:	7863      	ldrb	r3, [r4, #1]
 8009e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea0:	d135      	bne.n	8009f0e <_vfiprintf_r+0x1ce>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	1d1a      	adds	r2, r3, #4
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	9203      	str	r2, [sp, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bfb8      	it	lt
 8009eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eb2:	3402      	adds	r4, #2
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f9c <_vfiprintf_r+0x25c>
 8009eba:	7821      	ldrb	r1, [r4, #0]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	f7f6 f98e 	bl	80001e0 <memchr>
 8009ec4:	b140      	cbz	r0, 8009ed8 <_vfiprintf_r+0x198>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	eba0 000a 	sub.w	r0, r0, sl
 8009ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	4303      	orrs	r3, r0
 8009ed4:	3401      	adds	r4, #1
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009edc:	482c      	ldr	r0, [pc, #176]	; (8009f90 <_vfiprintf_r+0x250>)
 8009ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee2:	2206      	movs	r2, #6
 8009ee4:	f7f6 f97c 	bl	80001e0 <memchr>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d03f      	beq.n	8009f6c <_vfiprintf_r+0x22c>
 8009eec:	4b29      	ldr	r3, [pc, #164]	; (8009f94 <_vfiprintf_r+0x254>)
 8009eee:	bb1b      	cbnz	r3, 8009f38 <_vfiprintf_r+0x1f8>
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	3307      	adds	r3, #7
 8009ef4:	f023 0307 	bic.w	r3, r3, #7
 8009ef8:	3308      	adds	r3, #8
 8009efa:	9303      	str	r3, [sp, #12]
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	443b      	add	r3, r7
 8009f00:	9309      	str	r3, [sp, #36]	; 0x24
 8009f02:	e767      	b.n	8009dd4 <_vfiprintf_r+0x94>
 8009f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f08:	460c      	mov	r4, r1
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	e7a5      	b.n	8009e5a <_vfiprintf_r+0x11a>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	3401      	adds	r4, #1
 8009f12:	9305      	str	r3, [sp, #20]
 8009f14:	4619      	mov	r1, r3
 8009f16:	f04f 0c0a 	mov.w	ip, #10
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f20:	3a30      	subs	r2, #48	; 0x30
 8009f22:	2a09      	cmp	r2, #9
 8009f24:	d903      	bls.n	8009f2e <_vfiprintf_r+0x1ee>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0c5      	beq.n	8009eb6 <_vfiprintf_r+0x176>
 8009f2a:	9105      	str	r1, [sp, #20]
 8009f2c:	e7c3      	b.n	8009eb6 <_vfiprintf_r+0x176>
 8009f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f32:	4604      	mov	r4, r0
 8009f34:	2301      	movs	r3, #1
 8009f36:	e7f0      	b.n	8009f1a <_vfiprintf_r+0x1da>
 8009f38:	ab03      	add	r3, sp, #12
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <_vfiprintf_r+0x258>)
 8009f40:	a904      	add	r1, sp, #16
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7fb fc1c 	bl	8005780 <_printf_float>
 8009f48:	4607      	mov	r7, r0
 8009f4a:	1c78      	adds	r0, r7, #1
 8009f4c:	d1d6      	bne.n	8009efc <_vfiprintf_r+0x1bc>
 8009f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f50:	07d9      	lsls	r1, r3, #31
 8009f52:	d405      	bmi.n	8009f60 <_vfiprintf_r+0x220>
 8009f54:	89ab      	ldrh	r3, [r5, #12]
 8009f56:	059a      	lsls	r2, r3, #22
 8009f58:	d402      	bmi.n	8009f60 <_vfiprintf_r+0x220>
 8009f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5c:	f7fe fdce 	bl	8008afc <__retarget_lock_release_recursive>
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	065b      	lsls	r3, r3, #25
 8009f64:	f53f af12 	bmi.w	8009d8c <_vfiprintf_r+0x4c>
 8009f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f6a:	e711      	b.n	8009d90 <_vfiprintf_r+0x50>
 8009f6c:	ab03      	add	r3, sp, #12
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	462a      	mov	r2, r5
 8009f72:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <_vfiprintf_r+0x258>)
 8009f74:	a904      	add	r1, sp, #16
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7fb fea6 	bl	8005cc8 <_printf_i>
 8009f7c:	e7e4      	b.n	8009f48 <_vfiprintf_r+0x208>
 8009f7e:	bf00      	nop
 8009f80:	0800a3cc 	.word	0x0800a3cc
 8009f84:	0800a3ec 	.word	0x0800a3ec
 8009f88:	0800a3ac 	.word	0x0800a3ac
 8009f8c:	0800a5e4 	.word	0x0800a5e4
 8009f90:	0800a5ee 	.word	0x0800a5ee
 8009f94:	08005781 	.word	0x08005781
 8009f98:	08009d1d 	.word	0x08009d1d
 8009f9c:	0800a5ea 	.word	0x0800a5ea

08009fa0 <_read_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	; (8009fc0 <_read_r+0x20>)
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4611      	mov	r1, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	602a      	str	r2, [r5, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f7f7 fc4a 	bl	8001848 <_read>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_read_r+0x1e>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_read_r+0x1e>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	200002e8 	.word	0x200002e8

08009fc4 <abort>:
 8009fc4:	b508      	push	{r3, lr}
 8009fc6:	2006      	movs	r0, #6
 8009fc8:	f000 f834 	bl	800a034 <raise>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f7f7 fc31 	bl	8001834 <_exit>

08009fd2 <_malloc_usable_size_r>:
 8009fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd6:	1f18      	subs	r0, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfbc      	itt	lt
 8009fdc:	580b      	ldrlt	r3, [r1, r0]
 8009fde:	18c0      	addlt	r0, r0, r3
 8009fe0:	4770      	bx	lr

08009fe2 <_raise_r>:
 8009fe2:	291f      	cmp	r1, #31
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	d904      	bls.n	8009ff6 <_raise_r+0x14>
 8009fec:	2316      	movs	r3, #22
 8009fee:	6003      	str	r3, [r0, #0]
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ff8:	b112      	cbz	r2, 800a000 <_raise_r+0x1e>
 8009ffa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ffe:	b94b      	cbnz	r3, 800a014 <_raise_r+0x32>
 800a000:	4620      	mov	r0, r4
 800a002:	f000 f831 	bl	800a068 <_getpid_r>
 800a006:	462a      	mov	r2, r5
 800a008:	4601      	mov	r1, r0
 800a00a:	4620      	mov	r0, r4
 800a00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a010:	f000 b818 	b.w	800a044 <_kill_r>
 800a014:	2b01      	cmp	r3, #1
 800a016:	d00a      	beq.n	800a02e <_raise_r+0x4c>
 800a018:	1c59      	adds	r1, r3, #1
 800a01a:	d103      	bne.n	800a024 <_raise_r+0x42>
 800a01c:	2316      	movs	r3, #22
 800a01e:	6003      	str	r3, [r0, #0]
 800a020:	2001      	movs	r0, #1
 800a022:	e7e7      	b.n	8009ff4 <_raise_r+0x12>
 800a024:	2400      	movs	r4, #0
 800a026:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a02a:	4628      	mov	r0, r5
 800a02c:	4798      	blx	r3
 800a02e:	2000      	movs	r0, #0
 800a030:	e7e0      	b.n	8009ff4 <_raise_r+0x12>
	...

0800a034 <raise>:
 800a034:	4b02      	ldr	r3, [pc, #8]	; (800a040 <raise+0xc>)
 800a036:	4601      	mov	r1, r0
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	f7ff bfd2 	b.w	8009fe2 <_raise_r>
 800a03e:	bf00      	nop
 800a040:	2000000c 	.word	0x2000000c

0800a044 <_kill_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	; (800a064 <_kill_r+0x20>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f7f7 fbdf 	bl	8001814 <_kill>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d102      	bne.n	800a060 <_kill_r+0x1c>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <_kill_r+0x1c>
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	bf00      	nop
 800a064:	200002e8 	.word	0x200002e8

0800a068 <_getpid_r>:
 800a068:	f7f7 bbcc 	b.w	8001804 <_getpid>

0800a06c <_init>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	bf00      	nop
 800a070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a072:	bc08      	pop	{r3}
 800a074:	469e      	mov	lr, r3
 800a076:	4770      	bx	lr

0800a078 <_fini>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr
